//*****************************************************************//
//                                                                 //
// This file is generated automatically by Aurigma COM to .NET 1.0 //
//                                                                 //
//*****************************************************************//

using System;
using System.IO;
using System.Reflection;
using System.ComponentModel;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

// Type library name: WMPLib
// Type library description: Windows Media Player
// Type library version: 1.0
// Type library language: Neutral
// Type library guid: {6BF52A50-394A-11D3-B153-00C04F79FAA6}
// Type library source file name: C:\Windows\System32\wmp.dll

namespace Interop.WMPLib
{
  /// <summary><para>WMP_WRITENAMESEX_TYPE enumeration.</para></summary>
  [TypeLibType((short)0)]
  public enum WMP_WRITENAMESEX_TYPE
  {
    /// <summary><para><c>WMP_WRITENAMES_TYPE_CD_BY_TOC</c> constant of <c>WMP_WRITENAMESEX_TYPE</c> enumeration.  </para><para>Constant value is 0.</para></summary>
    WMP_WRITENAMES_TYPE_CD_BY_TOC = 0,

    /// <summary><para><c>WMP_WRITENAMES_TYPE_CD_BY_CONTENT_ID</c> constant of <c>WMP_WRITENAMESEX_TYPE</c> enumeration.  </para><para>Constant value is 1.</para></summary>
    WMP_WRITENAMES_TYPE_CD_BY_CONTENT_ID = 1,

    /// <summary><para><c>WMP_WRITENAMES_TYPE_CD_BY_MDQCD</c> constant of <c>WMP_WRITENAMESEX_TYPE</c> enumeration.  </para><para>Constant value is 2.</para></summary>
    WMP_WRITENAMES_TYPE_CD_BY_MDQCD = 2,

    /// <summary><para><c>WMP_WRITENAMES_TYPE_DVD_BY_DVDID</c> constant of <c>WMP_WRITENAMESEX_TYPE</c> enumeration.  </para><para>Constant value is 3.</para></summary>
    WMP_WRITENAMES_TYPE_DVD_BY_DVDID = 3
  }

  /// <summary><para>WMPBurnFormat enumeration.  </para><para>WMP CD Burning Formats</para></summary>
  // WMP CD Burning Formats
  [TypeLibType((short)0)]
  public enum WMPBurnFormat
  {
    /// <summary><para><c>wmpbfAudioCD</c> constant of <c>WMPBurnFormat</c> enumeration.  </para><para>Constant value is 0.</para></summary>
    wmpbfAudioCD = 0,

    /// <summary><para><c>wmpbfDataCD</c> constant of <c>WMPBurnFormat</c> enumeration.  </para><para>Constant value is 1.</para></summary>
    wmpbfDataCD = 1
  }

  /// <summary><para>WMPBurnState enumeration.  </para><para>WMP CD Burning States</para></summary>
  // WMP CD Burning States
  [TypeLibType((short)0)]
  public enum WMPBurnState
  {
    /// <summary><para><c>wmpbsUnknown</c> constant of <c>WMPBurnState</c> enumeration.  </para><para>Constant value is 0.</para></summary>
    wmpbsUnknown = 0,

    /// <summary><para><c>wmpbsBusy</c> constant of <c>WMPBurnState</c> enumeration.  </para><para>Constant value is 1.</para></summary>
    wmpbsBusy = 1,

    /// <summary><para><c>wmpbsReady</c> constant of <c>WMPBurnState</c> enumeration.  </para><para>Constant value is 2.</para></summary>
    wmpbsReady = 2,

    /// <summary><para><c>wmpbsWaitingForDisc</c> constant of <c>WMPBurnState</c> enumeration.  </para><para>Constant value is 3.</para></summary>
    wmpbsWaitingForDisc = 3,

    /// <summary><para><c>wmpbsRefreshStatusPending</c> constant of <c>WMPBurnState</c> enumeration.  </para><para>Constant value is 4.</para></summary>
    wmpbsRefreshStatusPending = 4,

    /// <summary><para><c>wmpbsPreparingToBurn</c> constant of <c>WMPBurnState</c> enumeration.  </para><para>Constant value is 5.</para></summary>
    wmpbsPreparingToBurn = 5,

    /// <summary><para><c>wmpbsBurning</c> constant of <c>WMPBurnState</c> enumeration.  </para><para>Constant value is 6.</para></summary>
    wmpbsBurning = 6,

    /// <summary><para><c>wmpbsStopped</c> constant of <c>WMPBurnState</c> enumeration.  </para><para>Constant value is 7.</para></summary>
    wmpbsStopped = 7,

    /// <summary><para><c>wmpbsErasing</c> constant of <c>WMPBurnState</c> enumeration.  </para><para>Constant value is 8.</para></summary>
    wmpbsErasing = 8,

    /// <summary><para><c>wmpbsDownloading</c> constant of <c>WMPBurnState</c> enumeration.  </para><para>Constant value is 9.</para></summary>
    wmpbsDownloading = 9
  }

  /// <summary><para>WMPDeviceStatus enumeration.  </para><para>WMP Sync Device Status</para></summary>
  // WMP Sync Device Status
  [TypeLibType((short)0)]
  public enum WMPDeviceStatus
  {
    /// <summary><para><c>wmpdsUnknown</c> constant of <c>WMPDeviceStatus</c> enumeration.  </para><para>Constant value is 0.  </para><para>Unknown</para></summary>
    // Unknown
    wmpdsUnknown = 0,

    /// <summary><para><c>wmpdsPartnershipExists</c> constant of <c>WMPDeviceStatus</c> enumeration.  </para><para>Constant value is 1.  </para><para>Partnership exists</para></summary>
    // Partnership exists
    wmpdsPartnershipExists = 1,

    /// <summary><para><c>wmpdsPartnershipDeclined</c> constant of <c>WMPDeviceStatus</c> enumeration.  </para><para>Constant value is 2.  </para><para>Partnership declined by the user</para></summary>
    // Partnership declined by the user
    wmpdsPartnershipDeclined = 2,

    /// <summary><para><c>wmpdsPartnershipAnother</c> constant of <c>WMPDeviceStatus</c> enumeration.  </para><para>Constant value is 3.  </para><para>Partnership with another computer or user</para></summary>
    // Partnership with another computer or user
    wmpdsPartnershipAnother = 3,

    /// <summary><para><c>wmpdsManualDevice</c> constant of <c>WMPDeviceStatus</c> enumeration.  </para><para>Constant value is 4.  </para><para>Device only supports manual transfer</para></summary>
    // Device only supports manual transfer
    wmpdsManualDevice = 4,

    /// <summary><para><c>wmpdsNewDevice</c> constant of <c>WMPDeviceStatus</c> enumeration.  </para><para>Constant value is 5.  </para><para>New device</para></summary>
    // New device
    wmpdsNewDevice = 5,

    /// <summary><para><c>wmpdsLast</c> constant of <c>WMPDeviceStatus</c> enumeration.  </para><para>Constant value is 6.  </para><para>Last Device Status</para></summary>
    // Last Device Status
    wmpdsLast = 6
  }

  /// <summary><para>WMPFolderScanState enumeration.  </para><para>WMP Folder Scan States</para></summary>
  // WMP Folder Scan States
  [TypeLibType((short)0)]
  public enum WMPFolderScanState
  {
    /// <summary><para><c>wmpfssUnknown</c> constant of <c>WMPFolderScanState</c> enumeration.  </para><para>Constant value is 0.</para></summary>
    wmpfssUnknown = 0,

    /// <summary><para><c>wmpfssScanning</c> constant of <c>WMPFolderScanState</c> enumeration.  </para><para>Constant value is 1.</para></summary>
    wmpfssScanning = 1,

    /// <summary><para><c>wmpfssUpdating</c> constant of <c>WMPFolderScanState</c> enumeration.  </para><para>Constant value is 2.</para></summary>
    wmpfssUpdating = 2,

    /// <summary><para><c>wmpfssStopped</c> constant of <c>WMPFolderScanState</c> enumeration.  </para><para>Constant value is 3.</para></summary>
    wmpfssStopped = 3
  }

  /// <summary><para>WMPLibraryType enumeration.  </para><para>WMP Library Types</para></summary>
  // WMP Library Types
  [TypeLibType((short)0)]
  public enum WMPLibraryType
  {
    /// <summary><para><c>wmpltUnknown</c> constant of <c>WMPLibraryType</c> enumeration.  </para><para>Constant value is 0.</para></summary>
    wmpltUnknown = 0,

    /// <summary><para><c>wmpltAll</c> constant of <c>WMPLibraryType</c> enumeration.  </para><para>Constant value is 1.</para></summary>
    wmpltAll = 1,

    /// <summary><para><c>wmpltLocal</c> constant of <c>WMPLibraryType</c> enumeration.  </para><para>Constant value is 2.</para></summary>
    wmpltLocal = 2,

    /// <summary><para><c>wmpltRemote</c> constant of <c>WMPLibraryType</c> enumeration.  </para><para>Constant value is 3.</para></summary>
    wmpltRemote = 3,

    /// <summary><para><c>wmpltDisc</c> constant of <c>WMPLibraryType</c> enumeration.  </para><para>Constant value is 4.</para></summary>
    wmpltDisc = 4,

    /// <summary><para><c>wmpltPortableDevice</c> constant of <c>WMPLibraryType</c> enumeration.  </para><para>Constant value is 5.</para></summary>
    wmpltPortableDevice = 5
  }

  /// <summary><para>WMPOpenState enumeration.  </para><para>State of opening process</para></summary>
  // State of opening process
  [TypeLibType((short)0)]
  public enum WMPOpenState
  {
    /// <summary><para><c>wmposUndefined</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 0.  </para><para>Undefined</para></summary>
    // Undefined
    wmposUndefined = 0,

    /// <summary><para><c>wmposPlaylistChanging</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 1.  </para><para>New Playlist is about to be loaded</para></summary>
    // New Playlist is about to be loaded
    wmposPlaylistChanging = 1,

    /// <summary><para><c>wmposPlaylistLocating</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 2.  </para><para>Locating the playlist</para></summary>
    // Locating the playlist
    wmposPlaylistLocating = 2,

    /// <summary><para><c>wmposPlaylistConnecting</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 3.  </para><para>Connecting to the server holding a playlist</para></summary>
    // Connecting to the server holding a playlist
    wmposPlaylistConnecting = 3,

    /// <summary><para><c>wmposPlaylistLoading</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 4.  </para><para>Loading a playlist</para></summary>
    // Loading a playlist
    wmposPlaylistLoading = 4,

    /// <summary><para><c>wmposPlaylistOpening</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 5.  </para><para>Opening a playlist</para></summary>
    // Opening a playlist
    wmposPlaylistOpening = 5,

    /// <summary><para><c>wmposPlaylistOpenNoMedia</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 6.  </para><para>Playlist is open</para></summary>
    // Playlist is open
    wmposPlaylistOpenNoMedia = 6,

    /// <summary><para><c>wmposPlaylistChanged</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 7.  </para><para>Playlist has changed</para></summary>
    // Playlist has changed
    wmposPlaylistChanged = 7,

    /// <summary><para><c>wmposMediaChanging</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 8.  </para><para>New media is about to be loaded</para></summary>
    // New media is about to be loaded
    wmposMediaChanging = 8,

    /// <summary><para><c>wmposMediaLocating</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 9.  </para><para>Locating the media</para></summary>
    // Locating the media
    wmposMediaLocating = 9,

    /// <summary><para><c>wmposMediaConnecting</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 10.  </para><para>Connecting to the server holding media</para></summary>
    // Connecting to the server holding media
    wmposMediaConnecting = 10,

    /// <summary><para><c>wmposMediaLoading</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 11.  </para><para>Loading media</para></summary>
    // Loading media
    wmposMediaLoading = 11,

    /// <summary><para><c>wmposMediaOpening</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 12.  </para><para>Opening a media</para></summary>
    // Opening a media
    wmposMediaOpening = 12,

    /// <summary><para><c>wmposMediaOpen</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 13.  </para><para>Media is open</para></summary>
    // Media is open
    wmposMediaOpen = 13,

    /// <summary><para><c>wmposBeginCodecAcquisition</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 14.  </para><para>Starting codec acquisition</para></summary>
    // Starting codec acquisition
    wmposBeginCodecAcquisition = 14,

    /// <summary><para><c>wmposEndCodecAcquisition</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 15.  </para><para>End codec acquisition</para></summary>
    // End codec acquisition
    wmposEndCodecAcquisition = 15,

    /// <summary><para><c>wmposBeginLicenseAcquisition</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 16.  </para><para>Starting license acquisition</para></summary>
    // Starting license acquisition
    wmposBeginLicenseAcquisition = 16,

    /// <summary><para><c>wmposEndLicenseAcquisition</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 17.  </para><para>End license acquisition</para></summary>
    // End license acquisition
    wmposEndLicenseAcquisition = 17,

    /// <summary><para><c>wmposBeginIndividualization</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 18.  </para><para>Starting individualization</para></summary>
    // Starting individualization
    wmposBeginIndividualization = 18,

    /// <summary><para><c>wmposEndIndividualization</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 19.  </para><para>End individualization</para></summary>
    // End individualization
    wmposEndIndividualization = 19,

    /// <summary><para><c>wmposMediaWaiting</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 20.  </para><para>Waiting for media</para></summary>
    // Waiting for media
    wmposMediaWaiting = 20,

    /// <summary><para><c>wmposOpeningUnknownURL</c> constant of <c>WMPOpenState</c> enumeration.  </para><para>Constant value is 21.  </para><para>Opening an URL whose type is not known</para></summary>
    // Opening an URL whose type is not known
    wmposOpeningUnknownURL = 21
  }

  /// <summary><para>WMPPlaylistChangeEventType enumeration.  </para><para>WMP Playlist Change Event Type</para></summary>
  // WMP Playlist Change Event Type
  [TypeLibType((short)0)]
  public enum WMPPlaylistChangeEventType
  {
    /// <summary><para><c>wmplcUnknown</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 0.  </para><para>Unknown</para></summary>
    // Unknown
    wmplcUnknown = 0,

    /// <summary><para><c>wmplcClear</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 1.  </para><para>Clear</para></summary>
    // Clear
    wmplcClear = 1,

    /// <summary><para><c>wmplcInfoChange</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 2.  </para><para>InfoChange</para></summary>
    // InfoChange
    wmplcInfoChange = 2,

    /// <summary><para><c>wmplcMove</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 3.  </para><para>Move</para></summary>
    // Move
    wmplcMove = 3,

    /// <summary><para><c>wmplcDelete</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 4.  </para><para>Delete</para></summary>
    // Delete
    wmplcDelete = 4,

    /// <summary><para><c>wmplcInsert</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 5.  </para><para>Insert</para></summary>
    // Insert
    wmplcInsert = 5,

    /// <summary><para><c>wmplcAppend</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 6.  </para><para>Append</para></summary>
    // Append
    wmplcAppend = 6,

    /// <summary><para><c>wmplcPrivate</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 7.  </para><para>Private</para></summary>
    // Private
    wmplcPrivate = 7,

    /// <summary><para><c>wmplcNameChange</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 8.  </para><para>NameChange</para></summary>
    // NameChange
    wmplcNameChange = 8,

    /// <summary><para><c>wmplcMorph</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 9.  </para><para>Morph</para></summary>
    // Morph
    wmplcMorph = 9,

    /// <summary><para><c>wmplcSort</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 10.  </para><para>Sort</para></summary>
    // Sort
    wmplcSort = 10,

    /// <summary><para><c>wmplcLast</c> constant of <c>WMPPlaylistChangeEventType</c> enumeration.  </para><para>Constant value is 11.  </para><para>Last</para></summary>
    // Last
    wmplcLast = 11
  }

  /// <summary><para>WMPPlayState enumeration.  </para><para>State of playback</para></summary>
  // State of playback
  [TypeLibType((short)0)]
  public enum WMPPlayState
  {
    /// <summary><para><c>wmppsUndefined</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 0.  </para><para>State is undefined</para></summary>
    // State is undefined
    wmppsUndefined = 0,

    /// <summary><para><c>wmppsStopped</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 1.  </para><para>Playback is stopped</para></summary>
    // Playback is stopped
    wmppsStopped = 1,

    /// <summary><para><c>wmppsPaused</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 2.  </para><para>Playback is paused</para></summary>
    // Playback is paused
    wmppsPaused = 2,

    /// <summary><para><c>wmppsPlaying</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 3.  </para><para>Stream is playing</para></summary>
    // Stream is playing
    wmppsPlaying = 3,

    /// <summary><para><c>wmppsScanForward</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 4.  </para><para>Stream is Scanning forward</para></summary>
    // Stream is Scanning forward
    wmppsScanForward = 4,

    /// <summary><para><c>wmppsScanReverse</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 5.  </para><para>Stream is Scanning in reverse</para></summary>
    // Stream is Scanning in reverse
    wmppsScanReverse = 5,

    /// <summary><para><c>wmppsBuffering</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 6.  </para><para>Media is being buffered</para></summary>
    // Media is being buffered
    wmppsBuffering = 6,

    /// <summary><para><c>wmppsWaiting</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 7.  </para><para>Waiting for streaming data</para></summary>
    // Waiting for streaming data
    wmppsWaiting = 7,

    /// <summary><para><c>wmppsMediaEnded</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 8.  </para><para>End of media reached</para></summary>
    // End of media reached
    wmppsMediaEnded = 8,

    /// <summary><para><c>wmppsTransitioning</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 9.  </para><para>Preparing new media</para></summary>
    // Preparing new media
    wmppsTransitioning = 9,

    /// <summary><para><c>wmppsReady</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 10.  </para><para>Ready to begin playing</para></summary>
    // Ready to begin playing
    wmppsReady = 10,

    /// <summary><para><c>wmppsReconnecting</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 11.  </para><para>Trying to reconnect for streaming data</para></summary>
    // Trying to reconnect for streaming data
    wmppsReconnecting = 11,

    /// <summary><para><c>wmppsLast</c> constant of <c>WMPPlayState</c> enumeration.  </para><para>Constant value is 12.  </para><para>Last playstate</para></summary>
    // Last playstate
    wmppsLast = 12
  }

  /// <summary><para>WMPRipState enumeration.  </para><para>WMP Ripping States</para></summary>
  // WMP Ripping States
  [TypeLibType((short)0)]
  public enum WMPRipState
  {
    /// <summary><para><c>wmprsUnknown</c> constant of <c>WMPRipState</c> enumeration.  </para><para>Constant value is 0.</para></summary>
    wmprsUnknown = 0,

    /// <summary><para><c>wmprsRipping</c> constant of <c>WMPRipState</c> enumeration.  </para><para>Constant value is 1.</para></summary>
    wmprsRipping = 1,

    /// <summary><para><c>wmprsStopped</c> constant of <c>WMPRipState</c> enumeration.  </para><para>Constant value is 2.</para></summary>
    wmprsStopped = 2
  }

  /// <summary><para>WMPStringCollectionChangeEventType enumeration.  </para><para>WMP String Collection Change Event Type</para></summary>
  // WMP String Collection Change Event Type
  [TypeLibType((short)0)]
  public enum WMPStringCollectionChangeEventType
  {
    /// <summary><para><c>wmpsccetUnknown</c> constant of <c>WMPStringCollectionChangeEventType</c> enumeration.  </para><para>Constant value is 0.  </para><para>Unknown event type</para></summary>
    // Unknown event type
    wmpsccetUnknown = 0,

    /// <summary><para><c>wmpsccetInsert</c> constant of <c>WMPStringCollectionChangeEventType</c> enumeration.  </para><para>Constant value is 1.  </para><para>An item was inserted</para></summary>
    // An item was inserted
    wmpsccetInsert = 1,

    /// <summary><para><c>wmpsccetChange</c> constant of <c>WMPStringCollectionChangeEventType</c> enumeration.  </para><para>Constant value is 2.  </para><para>Collection was changed</para></summary>
    // Collection was changed
    wmpsccetChange = 2,

    /// <summary><para><c>wmpsccetDelete</c> constant of <c>WMPStringCollectionChangeEventType</c> enumeration.  </para><para>Constant value is 3.  </para><para>An item was deleted</para></summary>
    // An item was deleted
    wmpsccetDelete = 3,

    /// <summary><para><c>wmpsccetClear</c> constant of <c>WMPStringCollectionChangeEventType</c> enumeration.  </para><para>Constant value is 4.  </para><para>Collection was cleared</para></summary>
    // Collection was cleared
    wmpsccetClear = 4,

    /// <summary><para><c>wmpsccetBeginUpdates</c> constant of <c>WMPStringCollectionChangeEventType</c> enumeration.  </para><para>Constant value is 5.  </para><para>Bulk updates are beginning</para></summary>
    // Bulk updates are beginning
    wmpsccetBeginUpdates = 5,

    /// <summary><para><c>wmpsccetEndUpdates</c> constant of <c>WMPStringCollectionChangeEventType</c> enumeration.  </para><para>Constant value is 6.  </para><para>Bulk updates have ended</para></summary>
    // Bulk updates have ended
    wmpsccetEndUpdates = 6
  }

  /// <summary><para>WMPSubscriptionDownloadState enumeration.  </para><para>State of a download</para></summary>
  // State of a download
  [TypeLibType((short)0)]
  public enum WMPSubscriptionDownloadState
  {
    /// <summary><para><c>wmpsdlsDownloading</c> constant of <c>WMPSubscriptionDownloadState</c> enumeration.  </para><para>Constant value is 0.  </para><para>Downloading</para></summary>
    // Downloading
    wmpsdlsDownloading = 0,

    /// <summary><para><c>wmpsdlsPaused</c> constant of <c>WMPSubscriptionDownloadState</c> enumeration.  </para><para>Constant value is 1.  </para><para>Paused</para></summary>
    // Paused
    wmpsdlsPaused = 1,

    /// <summary><para><c>wmpsdlsProcessing</c> constant of <c>WMPSubscriptionDownloadState</c> enumeration.  </para><para>Constant value is 2.  </para><para>Processing</para></summary>
    // Processing
    wmpsdlsProcessing = 2,

    /// <summary><para><c>wmpsdlsCompleted</c> constant of <c>WMPSubscriptionDownloadState</c> enumeration.  </para><para>Constant value is 3.  </para><para>Completed</para></summary>
    // Completed
    wmpsdlsCompleted = 3,

    /// <summary><para><c>wmpsdlsCancelled</c> constant of <c>WMPSubscriptionDownloadState</c> enumeration.  </para><para>Constant value is 4.  </para><para>Cancelled</para></summary>
    // Cancelled
    wmpsdlsCancelled = 4
  }

  /// <summary><para>WMPSyncState enumeration.  </para><para>WMP Sync States</para></summary>
  // WMP Sync States
  [TypeLibType((short)0)]
  public enum WMPSyncState
  {
    /// <summary><para><c>wmpssUnknown</c> constant of <c>WMPSyncState</c> enumeration.  </para><para>Constant value is 0.  </para><para>Unknown</para></summary>
    // Unknown
    wmpssUnknown = 0,

    /// <summary><para><c>wmpssSynchronizing</c> constant of <c>WMPSyncState</c> enumeration.  </para><para>Constant value is 1.  </para><para>Synchronizing</para></summary>
    // Synchronizing
    wmpssSynchronizing = 1,

    /// <summary><para><c>wmpssStopped</c> constant of <c>WMPSyncState</c> enumeration.  </para><para>Constant value is 2.  </para><para>Stopped</para></summary>
    // Stopped
    wmpssStopped = 2,

    /// <summary><para><c>wmpssEstimating</c> constant of <c>WMPSyncState</c> enumeration.  </para><para>Constant value is 3.  </para><para>Estimating</para></summary>
    // Estimating
    wmpssEstimating = 3,

    /// <summary><para><c>wmpssLast</c> constant of <c>WMPSyncState</c> enumeration.  </para><para>Constant value is 4.  </para><para>Last Sync State</para></summary>
    // Last Sync State
    wmpssLast = 4
  }

  /// <summary><para><c>_WMPCoreEvents</c> interface.  </para><para>_WMPCoreEvents: Public interface.</para></summary>
  // _WMPCoreEvents: Public interface.
  [Guid("D84CCA96-CCE2-11D2-9ECC-0000F8085981")]
  [ComImport]
  [TypeLibType((short)4112)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface _WMPCoreEvents
  {
    /// <summary><para><c>OpenStateChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control changes OpenState</para></summary>
    /// <remarks><para>An original IDL definition of <c>OpenStateChange</c> method was the following:  <c>HRESULT OpenStateChange (long NewState)</c>;</para></remarks>
    // Sent when the control changes OpenState
    // IDL: HRESULT OpenStateChange (long NewState);
    // VB6: Sub OpenStateChange (ByVal NewState As Long)
    [DispId(5001)]
    void OpenStateChange (int NewState);

    /// <summary><para><c>PlayStateChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control changes PlayState</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlayStateChange</c> method was the following:  <c>HRESULT PlayStateChange (long NewState)</c>;</para></remarks>
    // Sent when the control changes PlayState
    // IDL: HRESULT PlayStateChange (long NewState);
    // VB6: Sub PlayStateChange (ByVal NewState As Long)
    [DispId(5101)]
    void PlayStateChange (int NewState);

    /// <summary><para><c>AudioLanguageChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the current audio language has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>AudioLanguageChange</c> method was the following:  <c>HRESULT AudioLanguageChange (long LangID)</c>;</para></remarks>
    // Sent when the current audio language has changed
    // IDL: HRESULT AudioLanguageChange (long LangID);
    // VB6: Sub AudioLanguageChange (ByVal LangID As Long)
    [DispId(5102)]
    void AudioLanguageChange (int LangID);

    /// <summary><para><c>StatusChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the status string changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>StatusChange</c> method was the following:  <c>HRESULT StatusChange (void)</c>;</para></remarks>
    // Sent when the status string changes
    // IDL: HRESULT StatusChange (void);
    // VB6: Sub StatusChange
    [DispId(5002)]
    void StatusChange ();

    /// <summary><para><c>ScriptCommand</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a synchronized command or URL is received</para></summary>
    /// <remarks><para>An original IDL definition of <c>ScriptCommand</c> method was the following:  <c>HRESULT ScriptCommand (BSTR scType, BSTR Param)</c>;</para></remarks>
    // Sent when a synchronized command or URL is received
    // IDL: HRESULT ScriptCommand (BSTR scType, BSTR Param);
    // VB6: Sub ScriptCommand (ByVal scType As String, ByVal Param As String)
    [DispId(5301)]
    void ScriptCommand ([MarshalAs(UnmanagedType.BStr)] string scType, [MarshalAs(UnmanagedType.BStr)] string Param);

    /// <summary><para><c>NewStream</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a new stream is started in a channel</para></summary>
    /// <remarks><para>An original IDL definition of <c>NewStream</c> method was the following:  <c>HRESULT NewStream (void)</c>;</para></remarks>
    // Sent when a new stream is started in a channel
    // IDL: HRESULT NewStream (void);
    // VB6: Sub NewStream
    [DispId(5403)]
    void NewStream ();

    /// <summary><para><c>Disconnect</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control is disconnected from the server</para></summary>
    /// <remarks><para>An original IDL definition of <c>Disconnect</c> method was the following:  <c>HRESULT Disconnect (long Result)</c>;</para></remarks>
    // Sent when the control is disconnected from the server
    // IDL: HRESULT Disconnect (long Result);
    // VB6: Sub Disconnect (ByVal Result As Long)
    [DispId(5401)]
    void Disconnect (int Result);

    /// <summary><para><c>Buffering</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control begins or ends buffering</para></summary>
    /// <remarks><para>An original IDL definition of <c>Buffering</c> method was the following:  <c>HRESULT Buffering (VARIANT_BOOL Start)</c>;</para></remarks>
    // Sent when the control begins or ends buffering
    // IDL: HRESULT Buffering (VARIANT_BOOL Start);
    // VB6: Sub Buffering (ByVal Start As Boolean)
    [DispId(5402)]
    void Buffering ([MarshalAs(UnmanagedType.VariantBool)] bool Start);

    /// <summary><para><c>Error</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control has an error condition</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> method was the following:  <c>HRESULT Error (void)</c>;</para></remarks>
    // Sent when the control has an error condition
    // IDL: HRESULT Error (void);
    // VB6: Sub Error
    [DispId(5501)]
    void Error ();

    /// <summary><para><c>Warning</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control encounters a problem</para></summary>
    /// <remarks><para>An original IDL definition of <c>Warning</c> method was the following:  <c>HRESULT Warning (long WarningType, long Param, BSTR Description)</c>;</para></remarks>
    // Sent when the control encounters a problem
    // IDL: HRESULT Warning (long WarningType, long Param, BSTR Description);
    // VB6: Sub Warning (ByVal WarningType As Long, ByVal Param As Long, ByVal Description As String)
    [DispId(5601)]
    void Warning (int WarningType, int Param, [MarshalAs(UnmanagedType.BStr)] string Description);

    /// <summary><para><c>EndOfStream</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the end of file is reached</para></summary>
    /// <remarks><para>An original IDL definition of <c>EndOfStream</c> method was the following:  <c>HRESULT EndOfStream (long Result)</c>;</para></remarks>
    // Sent when the end of file is reached
    // IDL: HRESULT EndOfStream (long Result);
    // VB6: Sub EndOfStream (ByVal Result As Long)
    [DispId(5201)]
    void EndOfStream (int Result);

    /// <summary><para><c>PositionChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Indicates that the current position of the movie has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>PositionChange</c> method was the following:  <c>HRESULT PositionChange (double oldPosition, double newPosition)</c>;</para></remarks>
    // Indicates that the current position of the movie has changed
    // IDL: HRESULT PositionChange (double oldPosition, double newPosition);
    // VB6: Sub PositionChange (ByVal oldPosition As Double, ByVal newPosition As Double)
    [DispId(5202)]
    void PositionChange (double oldPosition, double newPosition);

    /// <summary><para><c>MarkerHit</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a marker is reached</para></summary>
    /// <remarks><para>An original IDL definition of <c>MarkerHit</c> method was the following:  <c>HRESULT MarkerHit (long MarkerNum)</c>;</para></remarks>
    // Sent when a marker is reached
    // IDL: HRESULT MarkerHit (long MarkerNum);
    // VB6: Sub MarkerHit (ByVal MarkerNum As Long)
    [DispId(5203)]
    void MarkerHit (int MarkerNum);

    /// <summary><para><c>DurationUnitChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Indicates that the unit used to express duration and position has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>DurationUnitChange</c> method was the following:  <c>HRESULT DurationUnitChange (long NewDurationUnit)</c>;</para></remarks>
    // Indicates that the unit used to express duration and position has changed
    // IDL: HRESULT DurationUnitChange (long NewDurationUnit);
    // VB6: Sub DurationUnitChange (ByVal NewDurationUnit As Long)
    [DispId(5204)]
    void DurationUnitChange (int NewDurationUnit);

    /// <summary><para><c>CdromMediaChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Indicates that the CD ROM media has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromMediaChange</c> method was the following:  <c>HRESULT CdromMediaChange (long CdromNum)</c>;</para></remarks>
    // Indicates that the CD ROM media has changed
    // IDL: HRESULT CdromMediaChange (long CdromNum);
    // VB6: Sub CdromMediaChange (ByVal CdromNum As Long)
    [DispId(5701)]
    void CdromMediaChange (int CdromNum);

    /// <summary><para><c>PlaylistChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistChange</c> method was the following:  <c>HRESULT PlaylistChange (IDispatch* Playlist, WMPPlaylistChangeEventType change)</c>;</para></remarks>
    // Sent when a playlist changes
    // IDL: HRESULT PlaylistChange (IDispatch* Playlist, WMPPlaylistChangeEventType change);
    // VB6: Sub PlaylistChange (ByVal Playlist As IDispatch, ByVal change As WMPPlaylistChangeEventType)
    [DispId(5801)]
    void PlaylistChange ([MarshalAs(UnmanagedType.IDispatch)] object Playlist, WMPPlaylistChangeEventType change);

    /// <summary><para><c>CurrentPlaylistChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the current playlist changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentPlaylistChange</c> method was the following:  <c>HRESULT CurrentPlaylistChange (WMPPlaylistChangeEventType change)</c>;</para></remarks>
    // Sent when the current playlist changes
    // IDL: HRESULT CurrentPlaylistChange (WMPPlaylistChangeEventType change);
    // VB6: Sub CurrentPlaylistChange (ByVal change As WMPPlaylistChangeEventType)
    [DispId(5804)]
    void CurrentPlaylistChange (WMPPlaylistChangeEventType change);

    /// <summary><para><c>CurrentPlaylistItemAvailable</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a current playlist item becomes available</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentPlaylistItemAvailable</c> method was the following:  <c>HRESULT CurrentPlaylistItemAvailable (BSTR bstrItemName)</c>;</para></remarks>
    // Sent when a current playlist item becomes available
    // IDL: HRESULT CurrentPlaylistItemAvailable (BSTR bstrItemName);
    // VB6: Sub CurrentPlaylistItemAvailable (ByVal bstrItemName As String)
    [DispId(5805)]
    void CurrentPlaylistItemAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>MediaChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a media object changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaChange</c> method was the following:  <c>HRESULT MediaChange (IDispatch* Item)</c>;</para></remarks>
    // Sent when a media object changes
    // IDL: HRESULT MediaChange (IDispatch* Item);
    // VB6: Sub MediaChange (ByVal Item As IDispatch)
    [DispId(5802)]
    void MediaChange ([MarshalAs(UnmanagedType.IDispatch)] object Item);

    /// <summary><para><c>CurrentMediaItemAvailable</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a current media item becomes available</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentMediaItemAvailable</c> method was the following:  <c>HRESULT CurrentMediaItemAvailable (BSTR bstrItemName)</c>;</para></remarks>
    // Sent when a current media item becomes available
    // IDL: HRESULT CurrentMediaItemAvailable (BSTR bstrItemName);
    // VB6: Sub CurrentMediaItemAvailable (ByVal bstrItemName As String)
    [DispId(5803)]
    void CurrentMediaItemAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>CurrentItemChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the item selection on the current playlist changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentItemChange</c> method was the following:  <c>HRESULT CurrentItemChange (IDispatch* pdispMedia)</c>;</para></remarks>
    // Sent when the item selection on the current playlist changes
    // IDL: HRESULT CurrentItemChange (IDispatch* pdispMedia);
    // VB6: Sub CurrentItemChange (ByVal pdispMedia As IDispatch)
    [DispId(5806)]
    void CurrentItemChange ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

    /// <summary><para><c>MediaCollectionChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the media collection needs to be requeried</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionChange</c> method was the following:  <c>HRESULT MediaCollectionChange (void)</c>;</para></remarks>
    // Sent when the media collection needs to be requeried
    // IDL: HRESULT MediaCollectionChange (void);
    // VB6: Sub MediaCollectionChange
    [DispId(5807)]
    void MediaCollectionChange ();

    /// <summary><para><c>MediaCollectionAttributeStringAdded</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when an attribute string is added in the media collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringAdded</c> method was the following:  <c>HRESULT MediaCollectionAttributeStringAdded (BSTR bstrAttribName, BSTR bstrAttribVal)</c>;</para></remarks>
    // Sent when an attribute string is added in the media collection
    // IDL: HRESULT MediaCollectionAttributeStringAdded (BSTR bstrAttribName, BSTR bstrAttribVal);
    // VB6: Sub MediaCollectionAttributeStringAdded (ByVal bstrAttribName As String, ByVal bstrAttribVal As String)
    [DispId(5808)]
    void MediaCollectionAttributeStringAdded ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrAttribVal);

    /// <summary><para><c>MediaCollectionAttributeStringRemoved</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when an attribute string is removed from the media collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringRemoved</c> method was the following:  <c>HRESULT MediaCollectionAttributeStringRemoved (BSTR bstrAttribName, BSTR bstrAttribVal)</c>;</para></remarks>
    // Sent when an attribute string is removed from the media collection
    // IDL: HRESULT MediaCollectionAttributeStringRemoved (BSTR bstrAttribName, BSTR bstrAttribVal);
    // VB6: Sub MediaCollectionAttributeStringRemoved (ByVal bstrAttribName As String, ByVal bstrAttribVal As String)
    [DispId(5809)]
    void MediaCollectionAttributeStringRemoved ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrAttribVal);

    /// <summary><para><c>MediaCollectionAttributeStringChanged</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when an attribute string is changed in the media collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringChanged</c> method was the following:  <c>HRESULT MediaCollectionAttributeStringChanged (BSTR bstrAttribName, BSTR bstrOldAttribVal, BSTR bstrNewAttribVal)</c>;</para></remarks>
    // Sent when an attribute string is changed in the media collection
    // IDL: HRESULT MediaCollectionAttributeStringChanged (BSTR bstrAttribName, BSTR bstrOldAttribVal, BSTR bstrNewAttribVal);
    // VB6: Sub MediaCollectionAttributeStringChanged (ByVal bstrAttribName As String, ByVal bstrOldAttribVal As String, ByVal bstrNewAttribVal As String)
    [DispId(5820)]
    void MediaCollectionAttributeStringChanged ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrOldAttribVal, [MarshalAs(UnmanagedType.BStr)] string bstrNewAttribVal);

    /// <summary><para><c>PlaylistCollectionChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when playlist collection needs to be requeried</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionChange</c> method was the following:  <c>HRESULT PlaylistCollectionChange (void)</c>;</para></remarks>
    // Sent when playlist collection needs to be requeried
    // IDL: HRESULT PlaylistCollectionChange (void);
    // VB6: Sub PlaylistCollectionChange
    [DispId(5810)]
    void PlaylistCollectionChange ();

    /// <summary><para><c>PlaylistCollectionPlaylistAdded</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist is added to the playlist collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistAdded</c> method was the following:  <c>HRESULT PlaylistCollectionPlaylistAdded (BSTR bstrPlaylistName)</c>;</para></remarks>
    // Sent when a playlist is added to the playlist collection
    // IDL: HRESULT PlaylistCollectionPlaylistAdded (BSTR bstrPlaylistName);
    // VB6: Sub PlaylistCollectionPlaylistAdded (ByVal bstrPlaylistName As String)
    [DispId(5811)]
    void PlaylistCollectionPlaylistAdded ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName);

    /// <summary><para><c>PlaylistCollectionPlaylistRemoved</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist is removed from the playlist collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistRemoved</c> method was the following:  <c>HRESULT PlaylistCollectionPlaylistRemoved (BSTR bstrPlaylistName)</c>;</para></remarks>
    // Sent when a playlist is removed from the playlist collection
    // IDL: HRESULT PlaylistCollectionPlaylistRemoved (BSTR bstrPlaylistName);
    // VB6: Sub PlaylistCollectionPlaylistRemoved (ByVal bstrPlaylistName As String)
    [DispId(5812)]
    void PlaylistCollectionPlaylistRemoved ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName);

    /// <summary><para><c>PlaylistCollectionPlaylistSetAsDeleted</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist has been set or reset as deleted</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistSetAsDeleted</c> method was the following:  <c>HRESULT PlaylistCollectionPlaylistSetAsDeleted (BSTR bstrPlaylistName, VARIANT_BOOL varfIsDeleted)</c>;</para></remarks>
    // Sent when a playlist has been set or reset as deleted
    // IDL: HRESULT PlaylistCollectionPlaylistSetAsDeleted (BSTR bstrPlaylistName, VARIANT_BOOL varfIsDeleted);
    // VB6: Sub PlaylistCollectionPlaylistSetAsDeleted (ByVal bstrPlaylistName As String, ByVal varfIsDeleted As Boolean)
    [DispId(5818)]
    void PlaylistCollectionPlaylistSetAsDeleted ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName, [MarshalAs(UnmanagedType.VariantBool)] bool varfIsDeleted);

    /// <summary><para><c>ModeChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Playlist playback mode has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>ModeChange</c> method was the following:  <c>HRESULT ModeChange (BSTR ModeName, VARIANT_BOOL NewValue)</c>;</para></remarks>
    // Playlist playback mode has changed
    // IDL: HRESULT ModeChange (BSTR ModeName, VARIANT_BOOL NewValue);
    // VB6: Sub ModeChange (ByVal ModeName As String, ByVal NewValue As Boolean)
    [DispId(5819)]
    void ModeChange ([MarshalAs(UnmanagedType.BStr)] string ModeName, [MarshalAs(UnmanagedType.VariantBool)] bool NewValue);

    /// <summary><para><c>MediaError</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the media object has an error condition</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaError</c> method was the following:  <c>HRESULT MediaError (IDispatch* pMediaObject)</c>;</para></remarks>
    // Sent when the media object has an error condition
    // IDL: HRESULT MediaError (IDispatch* pMediaObject);
    // VB6: Sub MediaError (ByVal pMediaObject As IDispatch)
    [DispId(5821)]
    void MediaError ([MarshalAs(UnmanagedType.IDispatch)] object pMediaObject);

    /// <summary><para><c>OpenPlaylistSwitch</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Current playlist switch with no open state change</para></summary>
    /// <remarks><para>An original IDL definition of <c>OpenPlaylistSwitch</c> method was the following:  <c>HRESULT OpenPlaylistSwitch (IDispatch* pItem)</c>;</para></remarks>
    // Current playlist switch with no open state change
    // IDL: HRESULT OpenPlaylistSwitch (IDispatch* pItem);
    // VB6: Sub OpenPlaylistSwitch (ByVal pItem As IDispatch)
    [DispId(5823)]
    void OpenPlaylistSwitch ([MarshalAs(UnmanagedType.IDispatch)] object pItem);

    /// <summary><para><c>DomainChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Send a current domain</para></summary>
    /// <remarks><para>An original IDL definition of <c>DomainChange</c> method was the following:  <c>HRESULT DomainChange (BSTR strDomain)</c>;</para></remarks>
    // Send a current domain
    // IDL: HRESULT DomainChange (BSTR strDomain);
    // VB6: Sub DomainChange (ByVal strDomain As String)
    [DispId(5822)]
    void DomainChange ([MarshalAs(UnmanagedType.BStr)] string strDomain);

    /// <summary><para><c>StringCollectionChange</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a string collection changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>StringCollectionChange</c> method was the following:  <c>HRESULT StringCollectionChange (IDispatch* pdispStringCollection, WMPStringCollectionChangeEventType change, long lCollectionIndex)</c>;</para></remarks>
    // Sent when a string collection changes
    // IDL: HRESULT StringCollectionChange (IDispatch* pdispStringCollection, WMPStringCollectionChangeEventType change, long lCollectionIndex);
    // VB6: Sub StringCollectionChange (ByVal pdispStringCollection As IDispatch, ByVal change As WMPStringCollectionChangeEventType, ByVal lCollectionIndex As Long)
    [DispId(5824)]
    void StringCollectionChange ([MarshalAs(UnmanagedType.IDispatch)] object pdispStringCollection, WMPStringCollectionChangeEventType change, int lCollectionIndex);

    /// <summary><para><c>MediaCollectionMediaAdded</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a media is added to the local library</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionMediaAdded</c> method was the following:  <c>HRESULT MediaCollectionMediaAdded (IDispatch* pdispMedia)</c>;</para></remarks>
    // Sent when a media is added to the local library
    // IDL: HRESULT MediaCollectionMediaAdded (IDispatch* pdispMedia);
    // VB6: Sub MediaCollectionMediaAdded (ByVal pdispMedia As IDispatch)
    [DispId(5825)]
    void MediaCollectionMediaAdded ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

    /// <summary><para><c>MediaCollectionMediaRemoved</c> method of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a media is removed from the local library</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionMediaRemoved</c> method was the following:  <c>HRESULT MediaCollectionMediaRemoved (IDispatch* pdispMedia)</c>;</para></remarks>
    // Sent when a media is removed from the local library
    // IDL: HRESULT MediaCollectionMediaRemoved (IDispatch* pdispMedia);
    // VB6: Sub MediaCollectionMediaRemoved (ByVal pdispMedia As IDispatch)
    [DispId(5826)]
    void MediaCollectionMediaRemoved ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);
  }

  /// <summary><para>Delegate for handling <c>OpenStateChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control changes OpenState</para></summary>
  /// <remarks><para>An original IDL definition of <c>OpenStateChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_OpenStateChangeEventHandler (long NewState)</c>;</para></remarks>
  // Sent when the control changes OpenState
  // IDL: HRESULT _WMPCoreEvents_OpenStateChangeEventHandler (long NewState);
  // VB6: Sub _WMPCoreEvents_OpenStateChangeEventHandler (ByVal NewState As Long)
  public delegate void _WMPCoreEvents_OpenStateChangeEventHandler (int NewState);

  /// <summary><para>Delegate for handling <c>PlayStateChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control changes PlayState</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlayStateChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_PlayStateChangeEventHandler (long NewState)</c>;</para></remarks>
  // Sent when the control changes PlayState
  // IDL: HRESULT _WMPCoreEvents_PlayStateChangeEventHandler (long NewState);
  // VB6: Sub _WMPCoreEvents_PlayStateChangeEventHandler (ByVal NewState As Long)
  public delegate void _WMPCoreEvents_PlayStateChangeEventHandler (int NewState);

  /// <summary><para>Delegate for handling <c>AudioLanguageChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the current audio language has changed</para></summary>
  /// <remarks><para>An original IDL definition of <c>AudioLanguageChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_AudioLanguageChangeEventHandler (long LangID)</c>;</para></remarks>
  // Sent when the current audio language has changed
  // IDL: HRESULT _WMPCoreEvents_AudioLanguageChangeEventHandler (long LangID);
  // VB6: Sub _WMPCoreEvents_AudioLanguageChangeEventHandler (ByVal LangID As Long)
  public delegate void _WMPCoreEvents_AudioLanguageChangeEventHandler (int LangID);

  /// <summary><para>Delegate for handling <c>StatusChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the status string changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>StatusChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_StatusChangeEventHandler (void)</c>;</para></remarks>
  // Sent when the status string changes
  // IDL: HRESULT _WMPCoreEvents_StatusChangeEventHandler (void);
  // VB6: Sub _WMPCoreEvents_StatusChangeEventHandler
  public delegate void _WMPCoreEvents_StatusChangeEventHandler ();

  /// <summary><para>Delegate for handling <c>ScriptCommand</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a synchronized command or URL is received</para></summary>
  /// <remarks><para>An original IDL definition of <c>ScriptCommand</c> event was the following:  <c>HRESULT _WMPCoreEvents_ScriptCommandEventHandler (BSTR scType, BSTR Param)</c>;</para></remarks>
  // Sent when a synchronized command or URL is received
  // IDL: HRESULT _WMPCoreEvents_ScriptCommandEventHandler (BSTR scType, BSTR Param);
  // VB6: Sub _WMPCoreEvents_ScriptCommandEventHandler (ByVal scType As String, ByVal Param As String)
  public delegate void _WMPCoreEvents_ScriptCommandEventHandler ([MarshalAs(UnmanagedType.BStr)] string scType, [MarshalAs(UnmanagedType.BStr)] string Param);

  /// <summary><para>Delegate for handling <c>NewStream</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a new stream is started in a channel</para></summary>
  /// <remarks><para>An original IDL definition of <c>NewStream</c> event was the following:  <c>HRESULT _WMPCoreEvents_NewStreamEventHandler (void)</c>;</para></remarks>
  // Sent when a new stream is started in a channel
  // IDL: HRESULT _WMPCoreEvents_NewStreamEventHandler (void);
  // VB6: Sub _WMPCoreEvents_NewStreamEventHandler
  public delegate void _WMPCoreEvents_NewStreamEventHandler ();

  /// <summary><para>Delegate for handling <c>Disconnect</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control is disconnected from the server</para></summary>
  /// <remarks><para>An original IDL definition of <c>Disconnect</c> event was the following:  <c>HRESULT _WMPCoreEvents_DisconnectEventHandler (long Result)</c>;</para></remarks>
  // Sent when the control is disconnected from the server
  // IDL: HRESULT _WMPCoreEvents_DisconnectEventHandler (long Result);
  // VB6: Sub _WMPCoreEvents_DisconnectEventHandler (ByVal Result As Long)
  public delegate void _WMPCoreEvents_DisconnectEventHandler (int Result);

  /// <summary><para>Delegate for handling <c>Buffering</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control begins or ends buffering</para></summary>
  /// <remarks><para>An original IDL definition of <c>Buffering</c> event was the following:  <c>HRESULT _WMPCoreEvents_BufferingEventHandler (VARIANT_BOOL Start)</c>;</para></remarks>
  // Sent when the control begins or ends buffering
  // IDL: HRESULT _WMPCoreEvents_BufferingEventHandler (VARIANT_BOOL Start);
  // VB6: Sub _WMPCoreEvents_BufferingEventHandler (ByVal Start As Boolean)
  public delegate void _WMPCoreEvents_BufferingEventHandler ([MarshalAs(UnmanagedType.VariantBool)] bool Start);

  /// <summary><para>Delegate for handling <c>Error</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control has an error condition</para></summary>
  /// <remarks><para>An original IDL definition of <c>Error</c> event was the following:  <c>HRESULT _WMPCoreEvents_ErrorEventHandler (void)</c>;</para></remarks>
  // Sent when the control has an error condition
  // IDL: HRESULT _WMPCoreEvents_ErrorEventHandler (void);
  // VB6: Sub _WMPCoreEvents_ErrorEventHandler
  public delegate void _WMPCoreEvents_ErrorEventHandler ();

  /// <summary><para>Delegate for handling <c>Warning</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control encounters a problem</para></summary>
  /// <remarks><para>An original IDL definition of <c>Warning</c> event was the following:  <c>HRESULT _WMPCoreEvents_WarningEventHandler (long WarningType, long Param, BSTR Description)</c>;</para></remarks>
  // Sent when the control encounters a problem
  // IDL: HRESULT _WMPCoreEvents_WarningEventHandler (long WarningType, long Param, BSTR Description);
  // VB6: Sub _WMPCoreEvents_WarningEventHandler (ByVal WarningType As Long, ByVal Param As Long, ByVal Description As String)
  public delegate void _WMPCoreEvents_WarningEventHandler (int WarningType, int Param, [MarshalAs(UnmanagedType.BStr)] string Description);

  /// <summary><para>Delegate for handling <c>EndOfStream</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the end of file is reached</para></summary>
  /// <remarks><para>An original IDL definition of <c>EndOfStream</c> event was the following:  <c>HRESULT _WMPCoreEvents_EndOfStreamEventHandler (long Result)</c>;</para></remarks>
  // Sent when the end of file is reached
  // IDL: HRESULT _WMPCoreEvents_EndOfStreamEventHandler (long Result);
  // VB6: Sub _WMPCoreEvents_EndOfStreamEventHandler (ByVal Result As Long)
  public delegate void _WMPCoreEvents_EndOfStreamEventHandler (int Result);

  /// <summary><para>Delegate for handling <c>PositionChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Indicates that the current position of the movie has changed</para></summary>
  /// <remarks><para>An original IDL definition of <c>PositionChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_PositionChangeEventHandler (double oldPosition, double newPosition)</c>;</para></remarks>
  // Indicates that the current position of the movie has changed
  // IDL: HRESULT _WMPCoreEvents_PositionChangeEventHandler (double oldPosition, double newPosition);
  // VB6: Sub _WMPCoreEvents_PositionChangeEventHandler (ByVal oldPosition As Double, ByVal newPosition As Double)
  public delegate void _WMPCoreEvents_PositionChangeEventHandler (double oldPosition, double newPosition);

  /// <summary><para>Delegate for handling <c>MarkerHit</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a marker is reached</para></summary>
  /// <remarks><para>An original IDL definition of <c>MarkerHit</c> event was the following:  <c>HRESULT _WMPCoreEvents_MarkerHitEventHandler (long MarkerNum)</c>;</para></remarks>
  // Sent when a marker is reached
  // IDL: HRESULT _WMPCoreEvents_MarkerHitEventHandler (long MarkerNum);
  // VB6: Sub _WMPCoreEvents_MarkerHitEventHandler (ByVal MarkerNum As Long)
  public delegate void _WMPCoreEvents_MarkerHitEventHandler (int MarkerNum);

  /// <summary><para>Delegate for handling <c>DurationUnitChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Indicates that the unit used to express duration and position has changed</para></summary>
  /// <remarks><para>An original IDL definition of <c>DurationUnitChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_DurationUnitChangeEventHandler (long NewDurationUnit)</c>;</para></remarks>
  // Indicates that the unit used to express duration and position has changed
  // IDL: HRESULT _WMPCoreEvents_DurationUnitChangeEventHandler (long NewDurationUnit);
  // VB6: Sub _WMPCoreEvents_DurationUnitChangeEventHandler (ByVal NewDurationUnit As Long)
  public delegate void _WMPCoreEvents_DurationUnitChangeEventHandler (int NewDurationUnit);

  /// <summary><para>Delegate for handling <c>CdromMediaChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Indicates that the CD ROM media has changed</para></summary>
  /// <remarks><para>An original IDL definition of <c>CdromMediaChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_CdromMediaChangeEventHandler (long CdromNum)</c>;</para></remarks>
  // Indicates that the CD ROM media has changed
  // IDL: HRESULT _WMPCoreEvents_CdromMediaChangeEventHandler (long CdromNum);
  // VB6: Sub _WMPCoreEvents_CdromMediaChangeEventHandler (ByVal CdromNum As Long)
  public delegate void _WMPCoreEvents_CdromMediaChangeEventHandler (int CdromNum);

  /// <summary><para>Delegate for handling <c>PlaylistChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlaylistChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_PlaylistChangeEventHandler (IDispatch* Playlist, WMPPlaylistChangeEventType change)</c>;</para></remarks>
  // Sent when a playlist changes
  // IDL: HRESULT _WMPCoreEvents_PlaylistChangeEventHandler (IDispatch* Playlist, WMPPlaylistChangeEventType change);
  // VB6: Sub _WMPCoreEvents_PlaylistChangeEventHandler (ByVal Playlist As IDispatch, ByVal change As WMPPlaylistChangeEventType)
  public delegate void _WMPCoreEvents_PlaylistChangeEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object Playlist, WMPPlaylistChangeEventType change);

  /// <summary><para>Delegate for handling <c>CurrentPlaylistChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the current playlist changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>CurrentPlaylistChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_CurrentPlaylistChangeEventHandler (WMPPlaylistChangeEventType change)</c>;</para></remarks>
  // Sent when the current playlist changes
  // IDL: HRESULT _WMPCoreEvents_CurrentPlaylistChangeEventHandler (WMPPlaylistChangeEventType change);
  // VB6: Sub _WMPCoreEvents_CurrentPlaylistChangeEventHandler (ByVal change As WMPPlaylistChangeEventType)
  public delegate void _WMPCoreEvents_CurrentPlaylistChangeEventHandler (WMPPlaylistChangeEventType change);

  /// <summary><para>Delegate for handling <c>CurrentPlaylistItemAvailable</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a current playlist item becomes available</para></summary>
  /// <remarks><para>An original IDL definition of <c>CurrentPlaylistItemAvailable</c> event was the following:  <c>HRESULT _WMPCoreEvents_CurrentPlaylistItemAvailableEventHandler (BSTR bstrItemName)</c>;</para></remarks>
  // Sent when a current playlist item becomes available
  // IDL: HRESULT _WMPCoreEvents_CurrentPlaylistItemAvailableEventHandler (BSTR bstrItemName);
  // VB6: Sub _WMPCoreEvents_CurrentPlaylistItemAvailableEventHandler (ByVal bstrItemName As String)
  public delegate void _WMPCoreEvents_CurrentPlaylistItemAvailableEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

  /// <summary><para>Delegate for handling <c>MediaChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a media object changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_MediaChangeEventHandler (IDispatch* Item)</c>;</para></remarks>
  // Sent when a media object changes
  // IDL: HRESULT _WMPCoreEvents_MediaChangeEventHandler (IDispatch* Item);
  // VB6: Sub _WMPCoreEvents_MediaChangeEventHandler (ByVal Item As IDispatch)
  public delegate void _WMPCoreEvents_MediaChangeEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object Item);

  /// <summary><para>Delegate for handling <c>CurrentMediaItemAvailable</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a current media item becomes available</para></summary>
  /// <remarks><para>An original IDL definition of <c>CurrentMediaItemAvailable</c> event was the following:  <c>HRESULT _WMPCoreEvents_CurrentMediaItemAvailableEventHandler (BSTR bstrItemName)</c>;</para></remarks>
  // Sent when a current media item becomes available
  // IDL: HRESULT _WMPCoreEvents_CurrentMediaItemAvailableEventHandler (BSTR bstrItemName);
  // VB6: Sub _WMPCoreEvents_CurrentMediaItemAvailableEventHandler (ByVal bstrItemName As String)
  public delegate void _WMPCoreEvents_CurrentMediaItemAvailableEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

  /// <summary><para>Delegate for handling <c>CurrentItemChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the item selection on the current playlist changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>CurrentItemChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_CurrentItemChangeEventHandler (IDispatch* pdispMedia)</c>;</para></remarks>
  // Sent when the item selection on the current playlist changes
  // IDL: HRESULT _WMPCoreEvents_CurrentItemChangeEventHandler (IDispatch* pdispMedia);
  // VB6: Sub _WMPCoreEvents_CurrentItemChangeEventHandler (ByVal pdispMedia As IDispatch)
  public delegate void _WMPCoreEvents_CurrentItemChangeEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

  /// <summary><para>Delegate for handling <c>MediaCollectionChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the media collection needs to be requeried</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_MediaCollectionChangeEventHandler (void)</c>;</para></remarks>
  // Sent when the media collection needs to be requeried
  // IDL: HRESULT _WMPCoreEvents_MediaCollectionChangeEventHandler (void);
  // VB6: Sub _WMPCoreEvents_MediaCollectionChangeEventHandler
  public delegate void _WMPCoreEvents_MediaCollectionChangeEventHandler ();

  /// <summary><para>Delegate for handling <c>MediaCollectionAttributeStringAdded</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when an attribute string is added in the media collection</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringAdded</c> event was the following:  <c>HRESULT _WMPCoreEvents_MediaCollectionAttributeStringAddedEventHandler (BSTR bstrAttribName, BSTR bstrAttribVal)</c>;</para></remarks>
  // Sent when an attribute string is added in the media collection
  // IDL: HRESULT _WMPCoreEvents_MediaCollectionAttributeStringAddedEventHandler (BSTR bstrAttribName, BSTR bstrAttribVal);
  // VB6: Sub _WMPCoreEvents_MediaCollectionAttributeStringAddedEventHandler (ByVal bstrAttribName As String, ByVal bstrAttribVal As String)
  public delegate void _WMPCoreEvents_MediaCollectionAttributeStringAddedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrAttribVal);

  /// <summary><para>Delegate for handling <c>MediaCollectionAttributeStringRemoved</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when an attribute string is removed from the media collection</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringRemoved</c> event was the following:  <c>HRESULT _WMPCoreEvents_MediaCollectionAttributeStringRemovedEventHandler (BSTR bstrAttribName, BSTR bstrAttribVal)</c>;</para></remarks>
  // Sent when an attribute string is removed from the media collection
  // IDL: HRESULT _WMPCoreEvents_MediaCollectionAttributeStringRemovedEventHandler (BSTR bstrAttribName, BSTR bstrAttribVal);
  // VB6: Sub _WMPCoreEvents_MediaCollectionAttributeStringRemovedEventHandler (ByVal bstrAttribName As String, ByVal bstrAttribVal As String)
  public delegate void _WMPCoreEvents_MediaCollectionAttributeStringRemovedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrAttribVal);

  /// <summary><para>Delegate for handling <c>MediaCollectionAttributeStringChanged</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when an attribute string is changed in the media collection</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringChanged</c> event was the following:  <c>HRESULT _WMPCoreEvents_MediaCollectionAttributeStringChangedEventHandler (BSTR bstrAttribName, BSTR bstrOldAttribVal, BSTR bstrNewAttribVal)</c>;</para></remarks>
  // Sent when an attribute string is changed in the media collection
  // IDL: HRESULT _WMPCoreEvents_MediaCollectionAttributeStringChangedEventHandler (BSTR bstrAttribName, BSTR bstrOldAttribVal, BSTR bstrNewAttribVal);
  // VB6: Sub _WMPCoreEvents_MediaCollectionAttributeStringChangedEventHandler (ByVal bstrAttribName As String, ByVal bstrOldAttribVal As String, ByVal bstrNewAttribVal As String)
  public delegate void _WMPCoreEvents_MediaCollectionAttributeStringChangedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrOldAttribVal, [MarshalAs(UnmanagedType.BStr)] string bstrNewAttribVal);

  /// <summary><para>Delegate for handling <c>PlaylistCollectionChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when playlist collection needs to be requeried</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlaylistCollectionChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_PlaylistCollectionChangeEventHandler (void)</c>;</para></remarks>
  // Sent when playlist collection needs to be requeried
  // IDL: HRESULT _WMPCoreEvents_PlaylistCollectionChangeEventHandler (void);
  // VB6: Sub _WMPCoreEvents_PlaylistCollectionChangeEventHandler
  public delegate void _WMPCoreEvents_PlaylistCollectionChangeEventHandler ();

  /// <summary><para>Delegate for handling <c>PlaylistCollectionPlaylistAdded</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist is added to the playlist collection</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistAdded</c> event was the following:  <c>HRESULT _WMPCoreEvents_PlaylistCollectionPlaylistAddedEventHandler (BSTR bstrPlaylistName)</c>;</para></remarks>
  // Sent when a playlist is added to the playlist collection
  // IDL: HRESULT _WMPCoreEvents_PlaylistCollectionPlaylistAddedEventHandler (BSTR bstrPlaylistName);
  // VB6: Sub _WMPCoreEvents_PlaylistCollectionPlaylistAddedEventHandler (ByVal bstrPlaylistName As String)
  public delegate void _WMPCoreEvents_PlaylistCollectionPlaylistAddedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName);

  /// <summary><para>Delegate for handling <c>PlaylistCollectionPlaylistRemoved</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist is removed from the playlist collection</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistRemoved</c> event was the following:  <c>HRESULT _WMPCoreEvents_PlaylistCollectionPlaylistRemovedEventHandler (BSTR bstrPlaylistName)</c>;</para></remarks>
  // Sent when a playlist is removed from the playlist collection
  // IDL: HRESULT _WMPCoreEvents_PlaylistCollectionPlaylistRemovedEventHandler (BSTR bstrPlaylistName);
  // VB6: Sub _WMPCoreEvents_PlaylistCollectionPlaylistRemovedEventHandler (ByVal bstrPlaylistName As String)
  public delegate void _WMPCoreEvents_PlaylistCollectionPlaylistRemovedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName);

  /// <summary><para>Delegate for handling <c>PlaylistCollectionPlaylistSetAsDeleted</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist has been set or reset as deleted</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistSetAsDeleted</c> event was the following:  <c>HRESULT _WMPCoreEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler (BSTR bstrPlaylistName, VARIANT_BOOL varfIsDeleted)</c>;</para></remarks>
  // Sent when a playlist has been set or reset as deleted
  // IDL: HRESULT _WMPCoreEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler (BSTR bstrPlaylistName, VARIANT_BOOL varfIsDeleted);
  // VB6: Sub _WMPCoreEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler (ByVal bstrPlaylistName As String, ByVal varfIsDeleted As Boolean)
  public delegate void _WMPCoreEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName, [MarshalAs(UnmanagedType.VariantBool)] bool varfIsDeleted);

  /// <summary><para>Delegate for handling <c>ModeChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Playlist playback mode has changed</para></summary>
  /// <remarks><para>An original IDL definition of <c>ModeChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_ModeChangeEventHandler (BSTR ModeName, VARIANT_BOOL NewValue)</c>;</para></remarks>
  // Playlist playback mode has changed
  // IDL: HRESULT _WMPCoreEvents_ModeChangeEventHandler (BSTR ModeName, VARIANT_BOOL NewValue);
  // VB6: Sub _WMPCoreEvents_ModeChangeEventHandler (ByVal ModeName As String, ByVal NewValue As Boolean)
  public delegate void _WMPCoreEvents_ModeChangeEventHandler ([MarshalAs(UnmanagedType.BStr)] string ModeName, [MarshalAs(UnmanagedType.VariantBool)] bool NewValue);

  /// <summary><para>Delegate for handling <c>MediaError</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the media object has an error condition</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaError</c> event was the following:  <c>HRESULT _WMPCoreEvents_MediaErrorEventHandler (IDispatch* pMediaObject)</c>;</para></remarks>
  // Sent when the media object has an error condition
  // IDL: HRESULT _WMPCoreEvents_MediaErrorEventHandler (IDispatch* pMediaObject);
  // VB6: Sub _WMPCoreEvents_MediaErrorEventHandler (ByVal pMediaObject As IDispatch)
  public delegate void _WMPCoreEvents_MediaErrorEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pMediaObject);

  /// <summary><para>Delegate for handling <c>OpenPlaylistSwitch</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Current playlist switch with no open state change</para></summary>
  /// <remarks><para>An original IDL definition of <c>OpenPlaylistSwitch</c> event was the following:  <c>HRESULT _WMPCoreEvents_OpenPlaylistSwitchEventHandler (IDispatch* pItem)</c>;</para></remarks>
  // Current playlist switch with no open state change
  // IDL: HRESULT _WMPCoreEvents_OpenPlaylistSwitchEventHandler (IDispatch* pItem);
  // VB6: Sub _WMPCoreEvents_OpenPlaylistSwitchEventHandler (ByVal pItem As IDispatch)
  public delegate void _WMPCoreEvents_OpenPlaylistSwitchEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pItem);

  /// <summary><para>Delegate for handling <c>DomainChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Send a current domain</para></summary>
  /// <remarks><para>An original IDL definition of <c>DomainChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_DomainChangeEventHandler (BSTR strDomain)</c>;</para></remarks>
  // Send a current domain
  // IDL: HRESULT _WMPCoreEvents_DomainChangeEventHandler (BSTR strDomain);
  // VB6: Sub _WMPCoreEvents_DomainChangeEventHandler (ByVal strDomain As String)
  public delegate void _WMPCoreEvents_DomainChangeEventHandler ([MarshalAs(UnmanagedType.BStr)] string strDomain);

  /// <summary><para>Delegate for handling <c>StringCollectionChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a string collection changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>StringCollectionChange</c> event was the following:  <c>HRESULT _WMPCoreEvents_StringCollectionChangeEventHandler (IDispatch* pdispStringCollection, WMPStringCollectionChangeEventType change, long lCollectionIndex)</c>;</para></remarks>
  // Sent when a string collection changes
  // IDL: HRESULT _WMPCoreEvents_StringCollectionChangeEventHandler (IDispatch* pdispStringCollection, WMPStringCollectionChangeEventType change, long lCollectionIndex);
  // VB6: Sub _WMPCoreEvents_StringCollectionChangeEventHandler (ByVal pdispStringCollection As IDispatch, ByVal change As WMPStringCollectionChangeEventType, ByVal lCollectionIndex As Long)
  public delegate void _WMPCoreEvents_StringCollectionChangeEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pdispStringCollection, WMPStringCollectionChangeEventType change, int lCollectionIndex);

  /// <summary><para>Delegate for handling <c>MediaCollectionMediaAdded</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a media is added to the local library</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionMediaAdded</c> event was the following:  <c>HRESULT _WMPCoreEvents_MediaCollectionMediaAddedEventHandler (IDispatch* pdispMedia)</c>;</para></remarks>
  // Sent when a media is added to the local library
  // IDL: HRESULT _WMPCoreEvents_MediaCollectionMediaAddedEventHandler (IDispatch* pdispMedia);
  // VB6: Sub _WMPCoreEvents_MediaCollectionMediaAddedEventHandler (ByVal pdispMedia As IDispatch)
  public delegate void _WMPCoreEvents_MediaCollectionMediaAddedEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

  /// <summary><para>Delegate for handling <c>MediaCollectionMediaRemoved</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a media is removed from the local library</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionMediaRemoved</c> event was the following:  <c>HRESULT _WMPCoreEvents_MediaCollectionMediaRemovedEventHandler (IDispatch* pdispMedia)</c>;</para></remarks>
  // Sent when a media is removed from the local library
  // IDL: HRESULT _WMPCoreEvents_MediaCollectionMediaRemovedEventHandler (IDispatch* pdispMedia);
  // VB6: Sub _WMPCoreEvents_MediaCollectionMediaRemovedEventHandler (ByVal pdispMedia As IDispatch)
  public delegate void _WMPCoreEvents_MediaCollectionMediaRemovedEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

  /// <summary><para>Declaration of events of <c>_WMPCoreEvents</c> source interface.  </para><para>_WMPCoreEvents: Public interface.</para></summary>
  // _WMPCoreEvents: Public interface.
  [ComEventInterface(typeof(_WMPCoreEvents),typeof(_WMPCoreEvents_EventProvider))]
  [ComVisible(false)]
  public interface _WMPCoreEvents_Event
  {
    /// <summary><para><c>OpenStateChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control changes OpenState</para></summary>
    event _WMPCoreEvents_OpenStateChangeEventHandler OpenStateChange;

    /// <summary><para><c>PlayStateChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control changes PlayState</para></summary>
    event _WMPCoreEvents_PlayStateChangeEventHandler PlayStateChange;

    /// <summary><para><c>AudioLanguageChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the current audio language has changed</para></summary>
    event _WMPCoreEvents_AudioLanguageChangeEventHandler AudioLanguageChange;

    /// <summary><para><c>StatusChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the status string changes</para></summary>
    event _WMPCoreEvents_StatusChangeEventHandler StatusChange;

    /// <summary><para><c>ScriptCommand</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a synchronized command or URL is received</para></summary>
    event _WMPCoreEvents_ScriptCommandEventHandler ScriptCommand;

    /// <summary><para><c>NewStream</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a new stream is started in a channel</para></summary>
    event _WMPCoreEvents_NewStreamEventHandler NewStream;

    /// <summary><para><c>Disconnect</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control is disconnected from the server</para></summary>
    event _WMPCoreEvents_DisconnectEventHandler Disconnect;

    /// <summary><para><c>Buffering</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control begins or ends buffering</para></summary>
    event _WMPCoreEvents_BufferingEventHandler Buffering;

    /// <summary><para><c>Error</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control has an error condition</para></summary>
    event _WMPCoreEvents_ErrorEventHandler Error;

    /// <summary><para><c>Warning</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the control encounters a problem</para></summary>
    event _WMPCoreEvents_WarningEventHandler Warning;

    /// <summary><para><c>EndOfStream</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the end of file is reached</para></summary>
    event _WMPCoreEvents_EndOfStreamEventHandler EndOfStream;

    /// <summary><para><c>PositionChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Indicates that the current position of the movie has changed</para></summary>
    event _WMPCoreEvents_PositionChangeEventHandler PositionChange;

    /// <summary><para><c>MarkerHit</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a marker is reached</para></summary>
    event _WMPCoreEvents_MarkerHitEventHandler MarkerHit;

    /// <summary><para><c>DurationUnitChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Indicates that the unit used to express duration and position has changed</para></summary>
    event _WMPCoreEvents_DurationUnitChangeEventHandler DurationUnitChange;

    /// <summary><para><c>CdromMediaChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Indicates that the CD ROM media has changed</para></summary>
    event _WMPCoreEvents_CdromMediaChangeEventHandler CdromMediaChange;

    /// <summary><para><c>PlaylistChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist changes</para></summary>
    event _WMPCoreEvents_PlaylistChangeEventHandler PlaylistChange;

    /// <summary><para><c>CurrentPlaylistChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the current playlist changes</para></summary>
    event _WMPCoreEvents_CurrentPlaylistChangeEventHandler CurrentPlaylistChange;

    /// <summary><para><c>CurrentPlaylistItemAvailable</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a current playlist item becomes available</para></summary>
    event _WMPCoreEvents_CurrentPlaylistItemAvailableEventHandler CurrentPlaylistItemAvailable;

    /// <summary><para><c>MediaChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a media object changes</para></summary>
    event _WMPCoreEvents_MediaChangeEventHandler MediaChange;

    /// <summary><para><c>CurrentMediaItemAvailable</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a current media item becomes available</para></summary>
    event _WMPCoreEvents_CurrentMediaItemAvailableEventHandler CurrentMediaItemAvailable;

    /// <summary><para><c>CurrentItemChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the item selection on the current playlist changes</para></summary>
    event _WMPCoreEvents_CurrentItemChangeEventHandler CurrentItemChange;

    /// <summary><para><c>MediaCollectionChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the media collection needs to be requeried</para></summary>
    event _WMPCoreEvents_MediaCollectionChangeEventHandler MediaCollectionChange;

    /// <summary><para><c>MediaCollectionAttributeStringAdded</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when an attribute string is added in the media collection</para></summary>
    event _WMPCoreEvents_MediaCollectionAttributeStringAddedEventHandler MediaCollectionAttributeStringAdded;

    /// <summary><para><c>MediaCollectionAttributeStringRemoved</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when an attribute string is removed from the media collection</para></summary>
    event _WMPCoreEvents_MediaCollectionAttributeStringRemovedEventHandler MediaCollectionAttributeStringRemoved;

    /// <summary><para><c>MediaCollectionAttributeStringChanged</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when an attribute string is changed in the media collection</para></summary>
    event _WMPCoreEvents_MediaCollectionAttributeStringChangedEventHandler MediaCollectionAttributeStringChanged;

    /// <summary><para><c>PlaylistCollectionChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when playlist collection needs to be requeried</para></summary>
    event _WMPCoreEvents_PlaylistCollectionChangeEventHandler PlaylistCollectionChange;

    /// <summary><para><c>PlaylistCollectionPlaylistAdded</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist is added to the playlist collection</para></summary>
    event _WMPCoreEvents_PlaylistCollectionPlaylistAddedEventHandler PlaylistCollectionPlaylistAdded;

    /// <summary><para><c>PlaylistCollectionPlaylistRemoved</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist is removed from the playlist collection</para></summary>
    event _WMPCoreEvents_PlaylistCollectionPlaylistRemovedEventHandler PlaylistCollectionPlaylistRemoved;

    /// <summary><para><c>PlaylistCollectionPlaylistSetAsDeleted</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a playlist has been set or reset as deleted</para></summary>
    event _WMPCoreEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler PlaylistCollectionPlaylistSetAsDeleted;

    /// <summary><para><c>ModeChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Playlist playback mode has changed</para></summary>
    event _WMPCoreEvents_ModeChangeEventHandler ModeChange;

    /// <summary><para><c>MediaError</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when the media object has an error condition</para></summary>
    event _WMPCoreEvents_MediaErrorEventHandler MediaError;

    /// <summary><para><c>OpenPlaylistSwitch</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Current playlist switch with no open state change</para></summary>
    event _WMPCoreEvents_OpenPlaylistSwitchEventHandler OpenPlaylistSwitch;

    /// <summary><para><c>DomainChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Send a current domain</para></summary>
    event _WMPCoreEvents_DomainChangeEventHandler DomainChange;

    /// <summary><para><c>StringCollectionChange</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a string collection changes</para></summary>
    event _WMPCoreEvents_StringCollectionChangeEventHandler StringCollectionChange;

    /// <summary><para><c>MediaCollectionMediaAdded</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a media is added to the local library</para></summary>
    event _WMPCoreEvents_MediaCollectionMediaAddedEventHandler MediaCollectionMediaAdded;

    /// <summary><para><c>MediaCollectionMediaRemoved</c> event of <c>_WMPCoreEvents</c> interface.  </para><para>Sent when a media is removed from the local library</para></summary>
    event _WMPCoreEvents_MediaCollectionMediaRemovedEventHandler MediaCollectionMediaRemoved;
  }

  [ClassInterface(ClassInterfaceType.None)]
  internal class _WMPCoreEvents_SinkHelper: _WMPCoreEvents
  {
    public int Cookie = 0;

    public event _WMPCoreEvents_OpenStateChangeEventHandler OpenStateChangeDelegate = null;
    public void Set_OpenStateChangeDelegate(_WMPCoreEvents_OpenStateChangeEventHandler deleg)
    {
      OpenStateChangeDelegate = deleg;
    }
    public bool Is_OpenStateChangeDelegate(_WMPCoreEvents_OpenStateChangeEventHandler deleg)
    {
      return (OpenStateChangeDelegate == deleg);
    }
    public void Clear_OpenStateChangeDelegate()
    {
      OpenStateChangeDelegate = null;
    }
    void _WMPCoreEvents.OpenStateChange (int NewState)
    {
      if (OpenStateChangeDelegate!=null)
        OpenStateChangeDelegate(NewState);
    }

    public event _WMPCoreEvents_PlayStateChangeEventHandler PlayStateChangeDelegate = null;
    public void Set_PlayStateChangeDelegate(_WMPCoreEvents_PlayStateChangeEventHandler deleg)
    {
      PlayStateChangeDelegate = deleg;
    }
    public bool Is_PlayStateChangeDelegate(_WMPCoreEvents_PlayStateChangeEventHandler deleg)
    {
      return (PlayStateChangeDelegate == deleg);
    }
    public void Clear_PlayStateChangeDelegate()
    {
      PlayStateChangeDelegate = null;
    }
    void _WMPCoreEvents.PlayStateChange (int NewState)
    {
      if (PlayStateChangeDelegate!=null)
        PlayStateChangeDelegate(NewState);
    }

    public event _WMPCoreEvents_AudioLanguageChangeEventHandler AudioLanguageChangeDelegate = null;
    public void Set_AudioLanguageChangeDelegate(_WMPCoreEvents_AudioLanguageChangeEventHandler deleg)
    {
      AudioLanguageChangeDelegate = deleg;
    }
    public bool Is_AudioLanguageChangeDelegate(_WMPCoreEvents_AudioLanguageChangeEventHandler deleg)
    {
      return (AudioLanguageChangeDelegate == deleg);
    }
    public void Clear_AudioLanguageChangeDelegate()
    {
      AudioLanguageChangeDelegate = null;
    }
    void _WMPCoreEvents.AudioLanguageChange (int LangID)
    {
      if (AudioLanguageChangeDelegate!=null)
        AudioLanguageChangeDelegate(LangID);
    }

    public event _WMPCoreEvents_StatusChangeEventHandler StatusChangeDelegate = null;
    public void Set_StatusChangeDelegate(_WMPCoreEvents_StatusChangeEventHandler deleg)
    {
      StatusChangeDelegate = deleg;
    }
    public bool Is_StatusChangeDelegate(_WMPCoreEvents_StatusChangeEventHandler deleg)
    {
      return (StatusChangeDelegate == deleg);
    }
    public void Clear_StatusChangeDelegate()
    {
      StatusChangeDelegate = null;
    }
    void _WMPCoreEvents.StatusChange ()
    {
      if (StatusChangeDelegate!=null)
        StatusChangeDelegate();
    }

    public event _WMPCoreEvents_ScriptCommandEventHandler ScriptCommandDelegate = null;
    public void Set_ScriptCommandDelegate(_WMPCoreEvents_ScriptCommandEventHandler deleg)
    {
      ScriptCommandDelegate = deleg;
    }
    public bool Is_ScriptCommandDelegate(_WMPCoreEvents_ScriptCommandEventHandler deleg)
    {
      return (ScriptCommandDelegate == deleg);
    }
    public void Clear_ScriptCommandDelegate()
    {
      ScriptCommandDelegate = null;
    }
    void _WMPCoreEvents.ScriptCommand (string scType, string Param)
    {
      if (ScriptCommandDelegate!=null)
        ScriptCommandDelegate(scType, Param);
    }

    public event _WMPCoreEvents_NewStreamEventHandler NewStreamDelegate = null;
    public void Set_NewStreamDelegate(_WMPCoreEvents_NewStreamEventHandler deleg)
    {
      NewStreamDelegate = deleg;
    }
    public bool Is_NewStreamDelegate(_WMPCoreEvents_NewStreamEventHandler deleg)
    {
      return (NewStreamDelegate == deleg);
    }
    public void Clear_NewStreamDelegate()
    {
      NewStreamDelegate = null;
    }
    void _WMPCoreEvents.NewStream ()
    {
      if (NewStreamDelegate!=null)
        NewStreamDelegate();
    }

    public event _WMPCoreEvents_DisconnectEventHandler DisconnectDelegate = null;
    public void Set_DisconnectDelegate(_WMPCoreEvents_DisconnectEventHandler deleg)
    {
      DisconnectDelegate = deleg;
    }
    public bool Is_DisconnectDelegate(_WMPCoreEvents_DisconnectEventHandler deleg)
    {
      return (DisconnectDelegate == deleg);
    }
    public void Clear_DisconnectDelegate()
    {
      DisconnectDelegate = null;
    }
    void _WMPCoreEvents.Disconnect (int Result)
    {
      if (DisconnectDelegate!=null)
        DisconnectDelegate(Result);
    }

    public event _WMPCoreEvents_BufferingEventHandler BufferingDelegate = null;
    public void Set_BufferingDelegate(_WMPCoreEvents_BufferingEventHandler deleg)
    {
      BufferingDelegate = deleg;
    }
    public bool Is_BufferingDelegate(_WMPCoreEvents_BufferingEventHandler deleg)
    {
      return (BufferingDelegate == deleg);
    }
    public void Clear_BufferingDelegate()
    {
      BufferingDelegate = null;
    }
    void _WMPCoreEvents.Buffering (bool Start)
    {
      if (BufferingDelegate!=null)
        BufferingDelegate(Start);
    }

    public event _WMPCoreEvents_ErrorEventHandler ErrorDelegate = null;
    public void Set_ErrorDelegate(_WMPCoreEvents_ErrorEventHandler deleg)
    {
      ErrorDelegate = deleg;
    }
    public bool Is_ErrorDelegate(_WMPCoreEvents_ErrorEventHandler deleg)
    {
      return (ErrorDelegate == deleg);
    }
    public void Clear_ErrorDelegate()
    {
      ErrorDelegate = null;
    }
    void _WMPCoreEvents.Error ()
    {
      if (ErrorDelegate!=null)
        ErrorDelegate();
    }

    public event _WMPCoreEvents_WarningEventHandler WarningDelegate = null;
    public void Set_WarningDelegate(_WMPCoreEvents_WarningEventHandler deleg)
    {
      WarningDelegate = deleg;
    }
    public bool Is_WarningDelegate(_WMPCoreEvents_WarningEventHandler deleg)
    {
      return (WarningDelegate == deleg);
    }
    public void Clear_WarningDelegate()
    {
      WarningDelegate = null;
    }
    void _WMPCoreEvents.Warning (int WarningType, int Param, string Description)
    {
      if (WarningDelegate!=null)
        WarningDelegate(WarningType, Param, Description);
    }

    public event _WMPCoreEvents_EndOfStreamEventHandler EndOfStreamDelegate = null;
    public void Set_EndOfStreamDelegate(_WMPCoreEvents_EndOfStreamEventHandler deleg)
    {
      EndOfStreamDelegate = deleg;
    }
    public bool Is_EndOfStreamDelegate(_WMPCoreEvents_EndOfStreamEventHandler deleg)
    {
      return (EndOfStreamDelegate == deleg);
    }
    public void Clear_EndOfStreamDelegate()
    {
      EndOfStreamDelegate = null;
    }
    void _WMPCoreEvents.EndOfStream (int Result)
    {
      if (EndOfStreamDelegate!=null)
        EndOfStreamDelegate(Result);
    }

    public event _WMPCoreEvents_PositionChangeEventHandler PositionChangeDelegate = null;
    public void Set_PositionChangeDelegate(_WMPCoreEvents_PositionChangeEventHandler deleg)
    {
      PositionChangeDelegate = deleg;
    }
    public bool Is_PositionChangeDelegate(_WMPCoreEvents_PositionChangeEventHandler deleg)
    {
      return (PositionChangeDelegate == deleg);
    }
    public void Clear_PositionChangeDelegate()
    {
      PositionChangeDelegate = null;
    }
    void _WMPCoreEvents.PositionChange (double oldPosition, double newPosition)
    {
      if (PositionChangeDelegate!=null)
        PositionChangeDelegate(oldPosition, newPosition);
    }

    public event _WMPCoreEvents_MarkerHitEventHandler MarkerHitDelegate = null;
    public void Set_MarkerHitDelegate(_WMPCoreEvents_MarkerHitEventHandler deleg)
    {
      MarkerHitDelegate = deleg;
    }
    public bool Is_MarkerHitDelegate(_WMPCoreEvents_MarkerHitEventHandler deleg)
    {
      return (MarkerHitDelegate == deleg);
    }
    public void Clear_MarkerHitDelegate()
    {
      MarkerHitDelegate = null;
    }
    void _WMPCoreEvents.MarkerHit (int MarkerNum)
    {
      if (MarkerHitDelegate!=null)
        MarkerHitDelegate(MarkerNum);
    }

    public event _WMPCoreEvents_DurationUnitChangeEventHandler DurationUnitChangeDelegate = null;
    public void Set_DurationUnitChangeDelegate(_WMPCoreEvents_DurationUnitChangeEventHandler deleg)
    {
      DurationUnitChangeDelegate = deleg;
    }
    public bool Is_DurationUnitChangeDelegate(_WMPCoreEvents_DurationUnitChangeEventHandler deleg)
    {
      return (DurationUnitChangeDelegate == deleg);
    }
    public void Clear_DurationUnitChangeDelegate()
    {
      DurationUnitChangeDelegate = null;
    }
    void _WMPCoreEvents.DurationUnitChange (int NewDurationUnit)
    {
      if (DurationUnitChangeDelegate!=null)
        DurationUnitChangeDelegate(NewDurationUnit);
    }

    public event _WMPCoreEvents_CdromMediaChangeEventHandler CdromMediaChangeDelegate = null;
    public void Set_CdromMediaChangeDelegate(_WMPCoreEvents_CdromMediaChangeEventHandler deleg)
    {
      CdromMediaChangeDelegate = deleg;
    }
    public bool Is_CdromMediaChangeDelegate(_WMPCoreEvents_CdromMediaChangeEventHandler deleg)
    {
      return (CdromMediaChangeDelegate == deleg);
    }
    public void Clear_CdromMediaChangeDelegate()
    {
      CdromMediaChangeDelegate = null;
    }
    void _WMPCoreEvents.CdromMediaChange (int CdromNum)
    {
      if (CdromMediaChangeDelegate!=null)
        CdromMediaChangeDelegate(CdromNum);
    }

    public event _WMPCoreEvents_PlaylistChangeEventHandler PlaylistChangeDelegate = null;
    public void Set_PlaylistChangeDelegate(_WMPCoreEvents_PlaylistChangeEventHandler deleg)
    {
      PlaylistChangeDelegate = deleg;
    }
    public bool Is_PlaylistChangeDelegate(_WMPCoreEvents_PlaylistChangeEventHandler deleg)
    {
      return (PlaylistChangeDelegate == deleg);
    }
    public void Clear_PlaylistChangeDelegate()
    {
      PlaylistChangeDelegate = null;
    }
    void _WMPCoreEvents.PlaylistChange (object Playlist, WMPPlaylistChangeEventType change)
    {
      if (PlaylistChangeDelegate!=null)
        PlaylistChangeDelegate(Playlist, change);
    }

    public event _WMPCoreEvents_CurrentPlaylistChangeEventHandler CurrentPlaylistChangeDelegate = null;
    public void Set_CurrentPlaylistChangeDelegate(_WMPCoreEvents_CurrentPlaylistChangeEventHandler deleg)
    {
      CurrentPlaylistChangeDelegate = deleg;
    }
    public bool Is_CurrentPlaylistChangeDelegate(_WMPCoreEvents_CurrentPlaylistChangeEventHandler deleg)
    {
      return (CurrentPlaylistChangeDelegate == deleg);
    }
    public void Clear_CurrentPlaylistChangeDelegate()
    {
      CurrentPlaylistChangeDelegate = null;
    }
    void _WMPCoreEvents.CurrentPlaylistChange (WMPPlaylistChangeEventType change)
    {
      if (CurrentPlaylistChangeDelegate!=null)
        CurrentPlaylistChangeDelegate(change);
    }

    public event _WMPCoreEvents_CurrentPlaylistItemAvailableEventHandler CurrentPlaylistItemAvailableDelegate = null;
    public void Set_CurrentPlaylistItemAvailableDelegate(_WMPCoreEvents_CurrentPlaylistItemAvailableEventHandler deleg)
    {
      CurrentPlaylistItemAvailableDelegate = deleg;
    }
    public bool Is_CurrentPlaylistItemAvailableDelegate(_WMPCoreEvents_CurrentPlaylistItemAvailableEventHandler deleg)
    {
      return (CurrentPlaylistItemAvailableDelegate == deleg);
    }
    public void Clear_CurrentPlaylistItemAvailableDelegate()
    {
      CurrentPlaylistItemAvailableDelegate = null;
    }
    void _WMPCoreEvents.CurrentPlaylistItemAvailable (string bstrItemName)
    {
      if (CurrentPlaylistItemAvailableDelegate!=null)
        CurrentPlaylistItemAvailableDelegate(bstrItemName);
    }

    public event _WMPCoreEvents_MediaChangeEventHandler MediaChangeDelegate = null;
    public void Set_MediaChangeDelegate(_WMPCoreEvents_MediaChangeEventHandler deleg)
    {
      MediaChangeDelegate = deleg;
    }
    public bool Is_MediaChangeDelegate(_WMPCoreEvents_MediaChangeEventHandler deleg)
    {
      return (MediaChangeDelegate == deleg);
    }
    public void Clear_MediaChangeDelegate()
    {
      MediaChangeDelegate = null;
    }
    void _WMPCoreEvents.MediaChange (object Item)
    {
      if (MediaChangeDelegate!=null)
        MediaChangeDelegate(Item);
    }

    public event _WMPCoreEvents_CurrentMediaItemAvailableEventHandler CurrentMediaItemAvailableDelegate = null;
    public void Set_CurrentMediaItemAvailableDelegate(_WMPCoreEvents_CurrentMediaItemAvailableEventHandler deleg)
    {
      CurrentMediaItemAvailableDelegate = deleg;
    }
    public bool Is_CurrentMediaItemAvailableDelegate(_WMPCoreEvents_CurrentMediaItemAvailableEventHandler deleg)
    {
      return (CurrentMediaItemAvailableDelegate == deleg);
    }
    public void Clear_CurrentMediaItemAvailableDelegate()
    {
      CurrentMediaItemAvailableDelegate = null;
    }
    void _WMPCoreEvents.CurrentMediaItemAvailable (string bstrItemName)
    {
      if (CurrentMediaItemAvailableDelegate!=null)
        CurrentMediaItemAvailableDelegate(bstrItemName);
    }

    public event _WMPCoreEvents_CurrentItemChangeEventHandler CurrentItemChangeDelegate = null;
    public void Set_CurrentItemChangeDelegate(_WMPCoreEvents_CurrentItemChangeEventHandler deleg)
    {
      CurrentItemChangeDelegate = deleg;
    }
    public bool Is_CurrentItemChangeDelegate(_WMPCoreEvents_CurrentItemChangeEventHandler deleg)
    {
      return (CurrentItemChangeDelegate == deleg);
    }
    public void Clear_CurrentItemChangeDelegate()
    {
      CurrentItemChangeDelegate = null;
    }
    void _WMPCoreEvents.CurrentItemChange (object pdispMedia)
    {
      if (CurrentItemChangeDelegate!=null)
        CurrentItemChangeDelegate(pdispMedia);
    }

    public event _WMPCoreEvents_MediaCollectionChangeEventHandler MediaCollectionChangeDelegate = null;
    public void Set_MediaCollectionChangeDelegate(_WMPCoreEvents_MediaCollectionChangeEventHandler deleg)
    {
      MediaCollectionChangeDelegate = deleg;
    }
    public bool Is_MediaCollectionChangeDelegate(_WMPCoreEvents_MediaCollectionChangeEventHandler deleg)
    {
      return (MediaCollectionChangeDelegate == deleg);
    }
    public void Clear_MediaCollectionChangeDelegate()
    {
      MediaCollectionChangeDelegate = null;
    }
    void _WMPCoreEvents.MediaCollectionChange ()
    {
      if (MediaCollectionChangeDelegate!=null)
        MediaCollectionChangeDelegate();
    }

    public event _WMPCoreEvents_MediaCollectionAttributeStringAddedEventHandler MediaCollectionAttributeStringAddedDelegate = null;
    public void Set_MediaCollectionAttributeStringAddedDelegate(_WMPCoreEvents_MediaCollectionAttributeStringAddedEventHandler deleg)
    {
      MediaCollectionAttributeStringAddedDelegate = deleg;
    }
    public bool Is_MediaCollectionAttributeStringAddedDelegate(_WMPCoreEvents_MediaCollectionAttributeStringAddedEventHandler deleg)
    {
      return (MediaCollectionAttributeStringAddedDelegate == deleg);
    }
    public void Clear_MediaCollectionAttributeStringAddedDelegate()
    {
      MediaCollectionAttributeStringAddedDelegate = null;
    }
    void _WMPCoreEvents.MediaCollectionAttributeStringAdded (string bstrAttribName, string bstrAttribVal)
    {
      if (MediaCollectionAttributeStringAddedDelegate!=null)
        MediaCollectionAttributeStringAddedDelegate(bstrAttribName, bstrAttribVal);
    }

    public event _WMPCoreEvents_MediaCollectionAttributeStringRemovedEventHandler MediaCollectionAttributeStringRemovedDelegate = null;
    public void Set_MediaCollectionAttributeStringRemovedDelegate(_WMPCoreEvents_MediaCollectionAttributeStringRemovedEventHandler deleg)
    {
      MediaCollectionAttributeStringRemovedDelegate = deleg;
    }
    public bool Is_MediaCollectionAttributeStringRemovedDelegate(_WMPCoreEvents_MediaCollectionAttributeStringRemovedEventHandler deleg)
    {
      return (MediaCollectionAttributeStringRemovedDelegate == deleg);
    }
    public void Clear_MediaCollectionAttributeStringRemovedDelegate()
    {
      MediaCollectionAttributeStringRemovedDelegate = null;
    }
    void _WMPCoreEvents.MediaCollectionAttributeStringRemoved (string bstrAttribName, string bstrAttribVal)
    {
      if (MediaCollectionAttributeStringRemovedDelegate!=null)
        MediaCollectionAttributeStringRemovedDelegate(bstrAttribName, bstrAttribVal);
    }

    public event _WMPCoreEvents_MediaCollectionAttributeStringChangedEventHandler MediaCollectionAttributeStringChangedDelegate = null;
    public void Set_MediaCollectionAttributeStringChangedDelegate(_WMPCoreEvents_MediaCollectionAttributeStringChangedEventHandler deleg)
    {
      MediaCollectionAttributeStringChangedDelegate = deleg;
    }
    public bool Is_MediaCollectionAttributeStringChangedDelegate(_WMPCoreEvents_MediaCollectionAttributeStringChangedEventHandler deleg)
    {
      return (MediaCollectionAttributeStringChangedDelegate == deleg);
    }
    public void Clear_MediaCollectionAttributeStringChangedDelegate()
    {
      MediaCollectionAttributeStringChangedDelegate = null;
    }
    void _WMPCoreEvents.MediaCollectionAttributeStringChanged (string bstrAttribName, string bstrOldAttribVal, string bstrNewAttribVal)
    {
      if (MediaCollectionAttributeStringChangedDelegate!=null)
        MediaCollectionAttributeStringChangedDelegate(bstrAttribName, bstrOldAttribVal, bstrNewAttribVal);
    }

    public event _WMPCoreEvents_PlaylistCollectionChangeEventHandler PlaylistCollectionChangeDelegate = null;
    public void Set_PlaylistCollectionChangeDelegate(_WMPCoreEvents_PlaylistCollectionChangeEventHandler deleg)
    {
      PlaylistCollectionChangeDelegate = deleg;
    }
    public bool Is_PlaylistCollectionChangeDelegate(_WMPCoreEvents_PlaylistCollectionChangeEventHandler deleg)
    {
      return (PlaylistCollectionChangeDelegate == deleg);
    }
    public void Clear_PlaylistCollectionChangeDelegate()
    {
      PlaylistCollectionChangeDelegate = null;
    }
    void _WMPCoreEvents.PlaylistCollectionChange ()
    {
      if (PlaylistCollectionChangeDelegate!=null)
        PlaylistCollectionChangeDelegate();
    }

    public event _WMPCoreEvents_PlaylistCollectionPlaylistAddedEventHandler PlaylistCollectionPlaylistAddedDelegate = null;
    public void Set_PlaylistCollectionPlaylistAddedDelegate(_WMPCoreEvents_PlaylistCollectionPlaylistAddedEventHandler deleg)
    {
      PlaylistCollectionPlaylistAddedDelegate = deleg;
    }
    public bool Is_PlaylistCollectionPlaylistAddedDelegate(_WMPCoreEvents_PlaylistCollectionPlaylistAddedEventHandler deleg)
    {
      return (PlaylistCollectionPlaylistAddedDelegate == deleg);
    }
    public void Clear_PlaylistCollectionPlaylistAddedDelegate()
    {
      PlaylistCollectionPlaylistAddedDelegate = null;
    }
    void _WMPCoreEvents.PlaylistCollectionPlaylistAdded (string bstrPlaylistName)
    {
      if (PlaylistCollectionPlaylistAddedDelegate!=null)
        PlaylistCollectionPlaylistAddedDelegate(bstrPlaylistName);
    }

    public event _WMPCoreEvents_PlaylistCollectionPlaylistRemovedEventHandler PlaylistCollectionPlaylistRemovedDelegate = null;
    public void Set_PlaylistCollectionPlaylistRemovedDelegate(_WMPCoreEvents_PlaylistCollectionPlaylistRemovedEventHandler deleg)
    {
      PlaylistCollectionPlaylistRemovedDelegate = deleg;
    }
    public bool Is_PlaylistCollectionPlaylistRemovedDelegate(_WMPCoreEvents_PlaylistCollectionPlaylistRemovedEventHandler deleg)
    {
      return (PlaylistCollectionPlaylistRemovedDelegate == deleg);
    }
    public void Clear_PlaylistCollectionPlaylistRemovedDelegate()
    {
      PlaylistCollectionPlaylistRemovedDelegate = null;
    }
    void _WMPCoreEvents.PlaylistCollectionPlaylistRemoved (string bstrPlaylistName)
    {
      if (PlaylistCollectionPlaylistRemovedDelegate!=null)
        PlaylistCollectionPlaylistRemovedDelegate(bstrPlaylistName);
    }

    public event _WMPCoreEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler PlaylistCollectionPlaylistSetAsDeletedDelegate = null;
    public void Set_PlaylistCollectionPlaylistSetAsDeletedDelegate(_WMPCoreEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler deleg)
    {
      PlaylistCollectionPlaylistSetAsDeletedDelegate = deleg;
    }
    public bool Is_PlaylistCollectionPlaylistSetAsDeletedDelegate(_WMPCoreEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler deleg)
    {
      return (PlaylistCollectionPlaylistSetAsDeletedDelegate == deleg);
    }
    public void Clear_PlaylistCollectionPlaylistSetAsDeletedDelegate()
    {
      PlaylistCollectionPlaylistSetAsDeletedDelegate = null;
    }
    void _WMPCoreEvents.PlaylistCollectionPlaylistSetAsDeleted (string bstrPlaylistName, bool varfIsDeleted)
    {
      if (PlaylistCollectionPlaylistSetAsDeletedDelegate!=null)
        PlaylistCollectionPlaylistSetAsDeletedDelegate(bstrPlaylistName, varfIsDeleted);
    }

    public event _WMPCoreEvents_ModeChangeEventHandler ModeChangeDelegate = null;
    public void Set_ModeChangeDelegate(_WMPCoreEvents_ModeChangeEventHandler deleg)
    {
      ModeChangeDelegate = deleg;
    }
    public bool Is_ModeChangeDelegate(_WMPCoreEvents_ModeChangeEventHandler deleg)
    {
      return (ModeChangeDelegate == deleg);
    }
    public void Clear_ModeChangeDelegate()
    {
      ModeChangeDelegate = null;
    }
    void _WMPCoreEvents.ModeChange (string ModeName, bool NewValue)
    {
      if (ModeChangeDelegate!=null)
        ModeChangeDelegate(ModeName, NewValue);
    }

    public event _WMPCoreEvents_MediaErrorEventHandler MediaErrorDelegate = null;
    public void Set_MediaErrorDelegate(_WMPCoreEvents_MediaErrorEventHandler deleg)
    {
      MediaErrorDelegate = deleg;
    }
    public bool Is_MediaErrorDelegate(_WMPCoreEvents_MediaErrorEventHandler deleg)
    {
      return (MediaErrorDelegate == deleg);
    }
    public void Clear_MediaErrorDelegate()
    {
      MediaErrorDelegate = null;
    }
    void _WMPCoreEvents.MediaError (object pMediaObject)
    {
      if (MediaErrorDelegate!=null)
        MediaErrorDelegate(pMediaObject);
    }

    public event _WMPCoreEvents_OpenPlaylistSwitchEventHandler OpenPlaylistSwitchDelegate = null;
    public void Set_OpenPlaylistSwitchDelegate(_WMPCoreEvents_OpenPlaylistSwitchEventHandler deleg)
    {
      OpenPlaylistSwitchDelegate = deleg;
    }
    public bool Is_OpenPlaylistSwitchDelegate(_WMPCoreEvents_OpenPlaylistSwitchEventHandler deleg)
    {
      return (OpenPlaylistSwitchDelegate == deleg);
    }
    public void Clear_OpenPlaylistSwitchDelegate()
    {
      OpenPlaylistSwitchDelegate = null;
    }
    void _WMPCoreEvents.OpenPlaylistSwitch (object pItem)
    {
      if (OpenPlaylistSwitchDelegate!=null)
        OpenPlaylistSwitchDelegate(pItem);
    }

    public event _WMPCoreEvents_DomainChangeEventHandler DomainChangeDelegate = null;
    public void Set_DomainChangeDelegate(_WMPCoreEvents_DomainChangeEventHandler deleg)
    {
      DomainChangeDelegate = deleg;
    }
    public bool Is_DomainChangeDelegate(_WMPCoreEvents_DomainChangeEventHandler deleg)
    {
      return (DomainChangeDelegate == deleg);
    }
    public void Clear_DomainChangeDelegate()
    {
      DomainChangeDelegate = null;
    }
    void _WMPCoreEvents.DomainChange (string strDomain)
    {
      if (DomainChangeDelegate!=null)
        DomainChangeDelegate(strDomain);
    }

    public event _WMPCoreEvents_StringCollectionChangeEventHandler StringCollectionChangeDelegate = null;
    public void Set_StringCollectionChangeDelegate(_WMPCoreEvents_StringCollectionChangeEventHandler deleg)
    {
      StringCollectionChangeDelegate = deleg;
    }
    public bool Is_StringCollectionChangeDelegate(_WMPCoreEvents_StringCollectionChangeEventHandler deleg)
    {
      return (StringCollectionChangeDelegate == deleg);
    }
    public void Clear_StringCollectionChangeDelegate()
    {
      StringCollectionChangeDelegate = null;
    }
    void _WMPCoreEvents.StringCollectionChange (object pdispStringCollection, WMPStringCollectionChangeEventType change, int lCollectionIndex)
    {
      if (StringCollectionChangeDelegate!=null)
        StringCollectionChangeDelegate(pdispStringCollection, change, lCollectionIndex);
    }

    public event _WMPCoreEvents_MediaCollectionMediaAddedEventHandler MediaCollectionMediaAddedDelegate = null;
    public void Set_MediaCollectionMediaAddedDelegate(_WMPCoreEvents_MediaCollectionMediaAddedEventHandler deleg)
    {
      MediaCollectionMediaAddedDelegate = deleg;
    }
    public bool Is_MediaCollectionMediaAddedDelegate(_WMPCoreEvents_MediaCollectionMediaAddedEventHandler deleg)
    {
      return (MediaCollectionMediaAddedDelegate == deleg);
    }
    public void Clear_MediaCollectionMediaAddedDelegate()
    {
      MediaCollectionMediaAddedDelegate = null;
    }
    void _WMPCoreEvents.MediaCollectionMediaAdded (object pdispMedia)
    {
      if (MediaCollectionMediaAddedDelegate!=null)
        MediaCollectionMediaAddedDelegate(pdispMedia);
    }

    public event _WMPCoreEvents_MediaCollectionMediaRemovedEventHandler MediaCollectionMediaRemovedDelegate = null;
    public void Set_MediaCollectionMediaRemovedDelegate(_WMPCoreEvents_MediaCollectionMediaRemovedEventHandler deleg)
    {
      MediaCollectionMediaRemovedDelegate = deleg;
    }
    public bool Is_MediaCollectionMediaRemovedDelegate(_WMPCoreEvents_MediaCollectionMediaRemovedEventHandler deleg)
    {
      return (MediaCollectionMediaRemovedDelegate == deleg);
    }
    public void Clear_MediaCollectionMediaRemovedDelegate()
    {
      MediaCollectionMediaRemovedDelegate = null;
    }
    void _WMPCoreEvents.MediaCollectionMediaRemoved (object pdispMedia)
    {
      if (MediaCollectionMediaRemovedDelegate!=null)
        MediaCollectionMediaRemovedDelegate(pdispMedia);
    }
  }

  internal class _WMPCoreEvents_EventProvider: IDisposable, _WMPCoreEvents_Event
  {
    UCOMIConnectionPointContainer ConnectionPointContainer;
    UCOMIConnectionPoint ConnectionPoint;
    _WMPCoreEvents_SinkHelper EventSinkHelper;
    int ConnectionCount;

    // Constructor: remember ConnectionPointContainer
    _WMPCoreEvents_EventProvider(object CPContainer) : base()
    {
      ConnectionPointContainer = (UCOMIConnectionPointContainer)CPContainer;
    }

    // Force disconnection from ActiveX event source
    ~_WMPCoreEvents_EventProvider()
    {
      Disconnect();
      ConnectionPointContainer = null;
    }

    // Aletnative to destructor
    void IDisposable.Dispose()
    {
      Disconnect();
      ConnectionPointContainer = null;
      System.GC.SuppressFinalize(this);
    }

    // Connect to ActiveX event source
    void Connect()
    {
      if (ConnectionPoint == null)
      {
        ConnectionCount = 0;
        Guid g = new Guid("D84CCA96-CCE2-11D2-9ECC-0000F8085981");
        ConnectionPointContainer.FindConnectionPoint(ref g, out ConnectionPoint);
        EventSinkHelper = new _WMPCoreEvents_SinkHelper();
        ConnectionPoint.Advise(EventSinkHelper, out EventSinkHelper.Cookie);
      }
    }

    // Disconnect from ActiveX event source
    void Disconnect()
    {
      System.Threading.Monitor.Enter(this);
      try {
        if (EventSinkHelper != null)
          ConnectionPoint.Unadvise(EventSinkHelper.Cookie);
        ConnectionPoint = null;
        EventSinkHelper = null;
      } catch { }
      System.Threading.Monitor.Exit(this);
    }

    // If no event handler present then disconnect from ActiveX event source
    void CheckDisconnect()
    {
      ConnectionCount--;
      if (ConnectionCount <= 0)
        Disconnect();
    }

    event _WMPCoreEvents_OpenStateChangeEventHandler _WMPCoreEvents_Event.OpenStateChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.OpenStateChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.OpenStateChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_PlayStateChangeEventHandler _WMPCoreEvents_Event.PlayStateChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlayStateChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlayStateChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_AudioLanguageChangeEventHandler _WMPCoreEvents_Event.AudioLanguageChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.AudioLanguageChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.AudioLanguageChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_StatusChangeEventHandler _WMPCoreEvents_Event.StatusChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.StatusChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.StatusChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_ScriptCommandEventHandler _WMPCoreEvents_Event.ScriptCommand
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ScriptCommandDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ScriptCommandDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_NewStreamEventHandler _WMPCoreEvents_Event.NewStream
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.NewStreamDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.NewStreamDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_DisconnectEventHandler _WMPCoreEvents_Event.Disconnect
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DisconnectDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DisconnectDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_BufferingEventHandler _WMPCoreEvents_Event.Buffering
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.BufferingDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.BufferingDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_ErrorEventHandler _WMPCoreEvents_Event.Error
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ErrorDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ErrorDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_WarningEventHandler _WMPCoreEvents_Event.Warning
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.WarningDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.WarningDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_EndOfStreamEventHandler _WMPCoreEvents_Event.EndOfStream
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.EndOfStreamDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.EndOfStreamDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_PositionChangeEventHandler _WMPCoreEvents_Event.PositionChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PositionChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PositionChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_MarkerHitEventHandler _WMPCoreEvents_Event.MarkerHit
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MarkerHitDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MarkerHitDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_DurationUnitChangeEventHandler _WMPCoreEvents_Event.DurationUnitChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DurationUnitChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DurationUnitChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_CdromMediaChangeEventHandler _WMPCoreEvents_Event.CdromMediaChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CdromMediaChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CdromMediaChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_PlaylistChangeEventHandler _WMPCoreEvents_Event.PlaylistChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlaylistChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlaylistChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_CurrentPlaylistChangeEventHandler _WMPCoreEvents_Event.CurrentPlaylistChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CurrentPlaylistChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CurrentPlaylistChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_CurrentPlaylistItemAvailableEventHandler _WMPCoreEvents_Event.CurrentPlaylistItemAvailable
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CurrentPlaylistItemAvailableDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CurrentPlaylistItemAvailableDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_MediaChangeEventHandler _WMPCoreEvents_Event.MediaChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_CurrentMediaItemAvailableEventHandler _WMPCoreEvents_Event.CurrentMediaItemAvailable
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CurrentMediaItemAvailableDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CurrentMediaItemAvailableDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_CurrentItemChangeEventHandler _WMPCoreEvents_Event.CurrentItemChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CurrentItemChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CurrentItemChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_MediaCollectionChangeEventHandler _WMPCoreEvents_Event.MediaCollectionChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_MediaCollectionAttributeStringAddedEventHandler _WMPCoreEvents_Event.MediaCollectionAttributeStringAdded
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionAttributeStringAddedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionAttributeStringAddedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_MediaCollectionAttributeStringRemovedEventHandler _WMPCoreEvents_Event.MediaCollectionAttributeStringRemoved
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionAttributeStringRemovedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionAttributeStringRemovedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_MediaCollectionAttributeStringChangedEventHandler _WMPCoreEvents_Event.MediaCollectionAttributeStringChanged
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionAttributeStringChangedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionAttributeStringChangedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_PlaylistCollectionChangeEventHandler _WMPCoreEvents_Event.PlaylistCollectionChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlaylistCollectionChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlaylistCollectionChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_PlaylistCollectionPlaylistAddedEventHandler _WMPCoreEvents_Event.PlaylistCollectionPlaylistAdded
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlaylistCollectionPlaylistAddedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlaylistCollectionPlaylistAddedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_PlaylistCollectionPlaylistRemovedEventHandler _WMPCoreEvents_Event.PlaylistCollectionPlaylistRemoved
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlaylistCollectionPlaylistRemovedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlaylistCollectionPlaylistRemovedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler _WMPCoreEvents_Event.PlaylistCollectionPlaylistSetAsDeleted
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlaylistCollectionPlaylistSetAsDeletedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlaylistCollectionPlaylistSetAsDeletedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_ModeChangeEventHandler _WMPCoreEvents_Event.ModeChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ModeChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ModeChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_MediaErrorEventHandler _WMPCoreEvents_Event.MediaError
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaErrorDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaErrorDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_OpenPlaylistSwitchEventHandler _WMPCoreEvents_Event.OpenPlaylistSwitch
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.OpenPlaylistSwitchDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.OpenPlaylistSwitchDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_DomainChangeEventHandler _WMPCoreEvents_Event.DomainChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DomainChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DomainChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_StringCollectionChangeEventHandler _WMPCoreEvents_Event.StringCollectionChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.StringCollectionChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.StringCollectionChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_MediaCollectionMediaAddedEventHandler _WMPCoreEvents_Event.MediaCollectionMediaAdded
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionMediaAddedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionMediaAddedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPCoreEvents_MediaCollectionMediaRemovedEventHandler _WMPCoreEvents_Event.MediaCollectionMediaRemoved
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionMediaRemovedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionMediaRemovedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }
  }

  /// <summary><para><c>_WMPOCXEvents</c> interface.  </para><para>_WMPOCXEvents: Public interface.</para></summary>
  // _WMPOCXEvents: Public interface.
  [Guid("6BF52A51-394A-11D3-B153-00C04F79FAA6")]
  [ComImport]
  [TypeLibType((short)4112)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface _WMPOCXEvents
  {
    /// <summary><para><c>OpenStateChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control changes OpenState</para></summary>
    /// <remarks><para>An original IDL definition of <c>OpenStateChange</c> method was the following:  <c>HRESULT OpenStateChange (long NewState)</c>;</para></remarks>
    // Sent when the control changes OpenState
    // IDL: HRESULT OpenStateChange (long NewState);
    // VB6: Sub OpenStateChange (ByVal NewState As Long)
    [DispId(5001)]
    void OpenStateChange (int NewState);

    /// <summary><para><c>PlayStateChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control changes PlayState</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlayStateChange</c> method was the following:  <c>HRESULT PlayStateChange (long NewState)</c>;</para></remarks>
    // Sent when the control changes PlayState
    // IDL: HRESULT PlayStateChange (long NewState);
    // VB6: Sub PlayStateChange (ByVal NewState As Long)
    [DispId(5101)]
    void PlayStateChange (int NewState);

    /// <summary><para><c>AudioLanguageChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the current audio language has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>AudioLanguageChange</c> method was the following:  <c>HRESULT AudioLanguageChange (long LangID)</c>;</para></remarks>
    // Sent when the current audio language has changed
    // IDL: HRESULT AudioLanguageChange (long LangID);
    // VB6: Sub AudioLanguageChange (ByVal LangID As Long)
    [DispId(5102)]
    void AudioLanguageChange (int LangID);

    /// <summary><para><c>StatusChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the status string changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>StatusChange</c> method was the following:  <c>HRESULT StatusChange (void)</c>;</para></remarks>
    // Sent when the status string changes
    // IDL: HRESULT StatusChange (void);
    // VB6: Sub StatusChange
    [DispId(5002)]
    void StatusChange ();

    /// <summary><para><c>ScriptCommand</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a synchronized command or URL is received</para></summary>
    /// <remarks><para>An original IDL definition of <c>ScriptCommand</c> method was the following:  <c>HRESULT ScriptCommand (BSTR scType, BSTR Param)</c>;</para></remarks>
    // Sent when a synchronized command or URL is received
    // IDL: HRESULT ScriptCommand (BSTR scType, BSTR Param);
    // VB6: Sub ScriptCommand (ByVal scType As String, ByVal Param As String)
    [DispId(5301)]
    void ScriptCommand ([MarshalAs(UnmanagedType.BStr)] string scType, [MarshalAs(UnmanagedType.BStr)] string Param);

    /// <summary><para><c>NewStream</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a new stream is started in a channel</para></summary>
    /// <remarks><para>An original IDL definition of <c>NewStream</c> method was the following:  <c>HRESULT NewStream (void)</c>;</para></remarks>
    // Sent when a new stream is started in a channel
    // IDL: HRESULT NewStream (void);
    // VB6: Sub NewStream
    [DispId(5403)]
    void NewStream ();

    /// <summary><para><c>Disconnect</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control is disconnected from the server</para></summary>
    /// <remarks><para>An original IDL definition of <c>Disconnect</c> method was the following:  <c>HRESULT Disconnect (long Result)</c>;</para></remarks>
    // Sent when the control is disconnected from the server
    // IDL: HRESULT Disconnect (long Result);
    // VB6: Sub Disconnect (ByVal Result As Long)
    [DispId(5401)]
    void Disconnect (int Result);

    /// <summary><para><c>Buffering</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control begins or ends buffering</para></summary>
    /// <remarks><para>An original IDL definition of <c>Buffering</c> method was the following:  <c>HRESULT Buffering (VARIANT_BOOL Start)</c>;</para></remarks>
    // Sent when the control begins or ends buffering
    // IDL: HRESULT Buffering (VARIANT_BOOL Start);
    // VB6: Sub Buffering (ByVal Start As Boolean)
    [DispId(5402)]
    void Buffering ([MarshalAs(UnmanagedType.VariantBool)] bool Start);

    /// <summary><para><c>Error</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control has an error condition</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> method was the following:  <c>HRESULT Error (void)</c>;</para></remarks>
    // Sent when the control has an error condition
    // IDL: HRESULT Error (void);
    // VB6: Sub Error
    [DispId(5501)]
    void Error ();

    /// <summary><para><c>Warning</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control encounters a problem</para></summary>
    /// <remarks><para>An original IDL definition of <c>Warning</c> method was the following:  <c>HRESULT Warning (long WarningType, long Param, BSTR Description)</c>;</para></remarks>
    // Sent when the control encounters a problem
    // IDL: HRESULT Warning (long WarningType, long Param, BSTR Description);
    // VB6: Sub Warning (ByVal WarningType As Long, ByVal Param As Long, ByVal Description As String)
    [DispId(5601)]
    void Warning (int WarningType, int Param, [MarshalAs(UnmanagedType.BStr)] string Description);

    /// <summary><para><c>EndOfStream</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the end of file is reached</para></summary>
    /// <remarks><para>An original IDL definition of <c>EndOfStream</c> method was the following:  <c>HRESULT EndOfStream (long Result)</c>;</para></remarks>
    // Sent when the end of file is reached
    // IDL: HRESULT EndOfStream (long Result);
    // VB6: Sub EndOfStream (ByVal Result As Long)
    [DispId(5201)]
    void EndOfStream (int Result);

    /// <summary><para><c>PositionChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Indicates that the current position of the movie has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>PositionChange</c> method was the following:  <c>HRESULT PositionChange (double oldPosition, double newPosition)</c>;</para></remarks>
    // Indicates that the current position of the movie has changed
    // IDL: HRESULT PositionChange (double oldPosition, double newPosition);
    // VB6: Sub PositionChange (ByVal oldPosition As Double, ByVal newPosition As Double)
    [DispId(5202)]
    void PositionChange (double oldPosition, double newPosition);

    /// <summary><para><c>MarkerHit</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a marker is reached</para></summary>
    /// <remarks><para>An original IDL definition of <c>MarkerHit</c> method was the following:  <c>HRESULT MarkerHit (long MarkerNum)</c>;</para></remarks>
    // Sent when a marker is reached
    // IDL: HRESULT MarkerHit (long MarkerNum);
    // VB6: Sub MarkerHit (ByVal MarkerNum As Long)
    [DispId(5203)]
    void MarkerHit (int MarkerNum);

    /// <summary><para><c>DurationUnitChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Indicates that the unit used to express duration and position has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>DurationUnitChange</c> method was the following:  <c>HRESULT DurationUnitChange (long NewDurationUnit)</c>;</para></remarks>
    // Indicates that the unit used to express duration and position has changed
    // IDL: HRESULT DurationUnitChange (long NewDurationUnit);
    // VB6: Sub DurationUnitChange (ByVal NewDurationUnit As Long)
    [DispId(5204)]
    void DurationUnitChange (int NewDurationUnit);

    /// <summary><para><c>CdromMediaChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Indicates that the CD ROM media has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromMediaChange</c> method was the following:  <c>HRESULT CdromMediaChange (long CdromNum)</c>;</para></remarks>
    // Indicates that the CD ROM media has changed
    // IDL: HRESULT CdromMediaChange (long CdromNum);
    // VB6: Sub CdromMediaChange (ByVal CdromNum As Long)
    [DispId(5701)]
    void CdromMediaChange (int CdromNum);

    /// <summary><para><c>PlaylistChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistChange</c> method was the following:  <c>HRESULT PlaylistChange (IDispatch* Playlist, WMPPlaylistChangeEventType change)</c>;</para></remarks>
    // Sent when a playlist changes
    // IDL: HRESULT PlaylistChange (IDispatch* Playlist, WMPPlaylistChangeEventType change);
    // VB6: Sub PlaylistChange (ByVal Playlist As IDispatch, ByVal change As WMPPlaylistChangeEventType)
    [DispId(5801)]
    void PlaylistChange ([MarshalAs(UnmanagedType.IDispatch)] object Playlist, WMPPlaylistChangeEventType change);

    /// <summary><para><c>CurrentPlaylistChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the current playlist changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentPlaylistChange</c> method was the following:  <c>HRESULT CurrentPlaylistChange (WMPPlaylistChangeEventType change)</c>;</para></remarks>
    // Sent when the current playlist changes
    // IDL: HRESULT CurrentPlaylistChange (WMPPlaylistChangeEventType change);
    // VB6: Sub CurrentPlaylistChange (ByVal change As WMPPlaylistChangeEventType)
    [DispId(5804)]
    void CurrentPlaylistChange (WMPPlaylistChangeEventType change);

    /// <summary><para><c>CurrentPlaylistItemAvailable</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a current playlist item becomes available</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentPlaylistItemAvailable</c> method was the following:  <c>HRESULT CurrentPlaylistItemAvailable (BSTR bstrItemName)</c>;</para></remarks>
    // Sent when a current playlist item becomes available
    // IDL: HRESULT CurrentPlaylistItemAvailable (BSTR bstrItemName);
    // VB6: Sub CurrentPlaylistItemAvailable (ByVal bstrItemName As String)
    [DispId(5805)]
    void CurrentPlaylistItemAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>MediaChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a media object changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaChange</c> method was the following:  <c>HRESULT MediaChange (IDispatch* Item)</c>;</para></remarks>
    // Sent when a media object changes
    // IDL: HRESULT MediaChange (IDispatch* Item);
    // VB6: Sub MediaChange (ByVal Item As IDispatch)
    [DispId(5802)]
    void MediaChange ([MarshalAs(UnmanagedType.IDispatch)] object Item);

    /// <summary><para><c>CurrentMediaItemAvailable</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a current media item becomes available</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentMediaItemAvailable</c> method was the following:  <c>HRESULT CurrentMediaItemAvailable (BSTR bstrItemName)</c>;</para></remarks>
    // Sent when a current media item becomes available
    // IDL: HRESULT CurrentMediaItemAvailable (BSTR bstrItemName);
    // VB6: Sub CurrentMediaItemAvailable (ByVal bstrItemName As String)
    [DispId(5803)]
    void CurrentMediaItemAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>CurrentItemChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the item selection on the current playlist changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentItemChange</c> method was the following:  <c>HRESULT CurrentItemChange (IDispatch* pdispMedia)</c>;</para></remarks>
    // Sent when the item selection on the current playlist changes
    // IDL: HRESULT CurrentItemChange (IDispatch* pdispMedia);
    // VB6: Sub CurrentItemChange (ByVal pdispMedia As IDispatch)
    [DispId(5806)]
    void CurrentItemChange ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

    /// <summary><para><c>MediaCollectionChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the media collection needs to be requeried</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionChange</c> method was the following:  <c>HRESULT MediaCollectionChange (void)</c>;</para></remarks>
    // Sent when the media collection needs to be requeried
    // IDL: HRESULT MediaCollectionChange (void);
    // VB6: Sub MediaCollectionChange
    [DispId(5807)]
    void MediaCollectionChange ();

    /// <summary><para><c>MediaCollectionAttributeStringAdded</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when an attribute string is added in the media collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringAdded</c> method was the following:  <c>HRESULT MediaCollectionAttributeStringAdded (BSTR bstrAttribName, BSTR bstrAttribVal)</c>;</para></remarks>
    // Sent when an attribute string is added in the media collection
    // IDL: HRESULT MediaCollectionAttributeStringAdded (BSTR bstrAttribName, BSTR bstrAttribVal);
    // VB6: Sub MediaCollectionAttributeStringAdded (ByVal bstrAttribName As String, ByVal bstrAttribVal As String)
    [DispId(5808)]
    void MediaCollectionAttributeStringAdded ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrAttribVal);

    /// <summary><para><c>MediaCollectionAttributeStringRemoved</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when an attribute string is removed from the media collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringRemoved</c> method was the following:  <c>HRESULT MediaCollectionAttributeStringRemoved (BSTR bstrAttribName, BSTR bstrAttribVal)</c>;</para></remarks>
    // Sent when an attribute string is removed from the media collection
    // IDL: HRESULT MediaCollectionAttributeStringRemoved (BSTR bstrAttribName, BSTR bstrAttribVal);
    // VB6: Sub MediaCollectionAttributeStringRemoved (ByVal bstrAttribName As String, ByVal bstrAttribVal As String)
    [DispId(5809)]
    void MediaCollectionAttributeStringRemoved ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrAttribVal);

    /// <summary><para><c>MediaCollectionAttributeStringChanged</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when an attribute string is changed in the media collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringChanged</c> method was the following:  <c>HRESULT MediaCollectionAttributeStringChanged (BSTR bstrAttribName, BSTR bstrOldAttribVal, BSTR bstrNewAttribVal)</c>;</para></remarks>
    // Sent when an attribute string is changed in the media collection
    // IDL: HRESULT MediaCollectionAttributeStringChanged (BSTR bstrAttribName, BSTR bstrOldAttribVal, BSTR bstrNewAttribVal);
    // VB6: Sub MediaCollectionAttributeStringChanged (ByVal bstrAttribName As String, ByVal bstrOldAttribVal As String, ByVal bstrNewAttribVal As String)
    [DispId(5820)]
    void MediaCollectionAttributeStringChanged ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrOldAttribVal, [MarshalAs(UnmanagedType.BStr)] string bstrNewAttribVal);

    /// <summary><para><c>PlaylistCollectionChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when playlist collection needs to be requeried</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionChange</c> method was the following:  <c>HRESULT PlaylistCollectionChange (void)</c>;</para></remarks>
    // Sent when playlist collection needs to be requeried
    // IDL: HRESULT PlaylistCollectionChange (void);
    // VB6: Sub PlaylistCollectionChange
    [DispId(5810)]
    void PlaylistCollectionChange ();

    /// <summary><para><c>PlaylistCollectionPlaylistAdded</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist is added to the playlist collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistAdded</c> method was the following:  <c>HRESULT PlaylistCollectionPlaylistAdded (BSTR bstrPlaylistName)</c>;</para></remarks>
    // Sent when a playlist is added to the playlist collection
    // IDL: HRESULT PlaylistCollectionPlaylistAdded (BSTR bstrPlaylistName);
    // VB6: Sub PlaylistCollectionPlaylistAdded (ByVal bstrPlaylistName As String)
    [DispId(5811)]
    void PlaylistCollectionPlaylistAdded ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName);

    /// <summary><para><c>PlaylistCollectionPlaylistRemoved</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist is removed from the playlist collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistRemoved</c> method was the following:  <c>HRESULT PlaylistCollectionPlaylistRemoved (BSTR bstrPlaylistName)</c>;</para></remarks>
    // Sent when a playlist is removed from the playlist collection
    // IDL: HRESULT PlaylistCollectionPlaylistRemoved (BSTR bstrPlaylistName);
    // VB6: Sub PlaylistCollectionPlaylistRemoved (ByVal bstrPlaylistName As String)
    [DispId(5812)]
    void PlaylistCollectionPlaylistRemoved ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName);

    /// <summary><para><c>PlaylistCollectionPlaylistSetAsDeleted</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist has been set or reset as deleted</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistSetAsDeleted</c> method was the following:  <c>HRESULT PlaylistCollectionPlaylistSetAsDeleted (BSTR bstrPlaylistName, VARIANT_BOOL varfIsDeleted)</c>;</para></remarks>
    // Sent when a playlist has been set or reset as deleted
    // IDL: HRESULT PlaylistCollectionPlaylistSetAsDeleted (BSTR bstrPlaylistName, VARIANT_BOOL varfIsDeleted);
    // VB6: Sub PlaylistCollectionPlaylistSetAsDeleted (ByVal bstrPlaylistName As String, ByVal varfIsDeleted As Boolean)
    [DispId(5818)]
    void PlaylistCollectionPlaylistSetAsDeleted ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName, [MarshalAs(UnmanagedType.VariantBool)] bool varfIsDeleted);

    /// <summary><para><c>ModeChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Playlist playback mode has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>ModeChange</c> method was the following:  <c>HRESULT ModeChange (BSTR ModeName, VARIANT_BOOL NewValue)</c>;</para></remarks>
    // Playlist playback mode has changed
    // IDL: HRESULT ModeChange (BSTR ModeName, VARIANT_BOOL NewValue);
    // VB6: Sub ModeChange (ByVal ModeName As String, ByVal NewValue As Boolean)
    [DispId(5819)]
    void ModeChange ([MarshalAs(UnmanagedType.BStr)] string ModeName, [MarshalAs(UnmanagedType.VariantBool)] bool NewValue);

    /// <summary><para><c>MediaError</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the media object has an error condition</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaError</c> method was the following:  <c>HRESULT MediaError (IDispatch* pMediaObject)</c>;</para></remarks>
    // Sent when the media object has an error condition
    // IDL: HRESULT MediaError (IDispatch* pMediaObject);
    // VB6: Sub MediaError (ByVal pMediaObject As IDispatch)
    [DispId(5821)]
    void MediaError ([MarshalAs(UnmanagedType.IDispatch)] object pMediaObject);

    /// <summary><para><c>OpenPlaylistSwitch</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Current playlist switch with no open state change</para></summary>
    /// <remarks><para>An original IDL definition of <c>OpenPlaylistSwitch</c> method was the following:  <c>HRESULT OpenPlaylistSwitch (IDispatch* pItem)</c>;</para></remarks>
    // Current playlist switch with no open state change
    // IDL: HRESULT OpenPlaylistSwitch (IDispatch* pItem);
    // VB6: Sub OpenPlaylistSwitch (ByVal pItem As IDispatch)
    [DispId(5823)]
    void OpenPlaylistSwitch ([MarshalAs(UnmanagedType.IDispatch)] object pItem);

    /// <summary><para><c>DomainChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Send a current domain</para></summary>
    /// <remarks><para>An original IDL definition of <c>DomainChange</c> method was the following:  <c>HRESULT DomainChange (BSTR strDomain)</c>;</para></remarks>
    // Send a current domain
    // IDL: HRESULT DomainChange (BSTR strDomain);
    // VB6: Sub DomainChange (ByVal strDomain As String)
    [DispId(5822)]
    void DomainChange ([MarshalAs(UnmanagedType.BStr)] string strDomain);

    /// <summary><para><c>SwitchedToPlayerApplication</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when display switches to player application</para></summary>
    /// <remarks><para>An original IDL definition of <c>SwitchedToPlayerApplication</c> method was the following:  <c>HRESULT SwitchedToPlayerApplication (void)</c>;</para></remarks>
    // Sent when display switches to player application
    // IDL: HRESULT SwitchedToPlayerApplication (void);
    // VB6: Sub SwitchedToPlayerApplication
    [DispId(6501)]
    void SwitchedToPlayerApplication ();

    /// <summary><para><c>SwitchedToControl</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when display switches to control</para></summary>
    /// <remarks><para>An original IDL definition of <c>SwitchedToControl</c> method was the following:  <c>HRESULT SwitchedToControl (void)</c>;</para></remarks>
    // Sent when display switches to control
    // IDL: HRESULT SwitchedToControl (void);
    // VB6: Sub SwitchedToControl
    [DispId(6502)]
    void SwitchedToControl ();

    /// <summary><para><c>PlayerDockedStateChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the player docks or undocks</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlayerDockedStateChange</c> method was the following:  <c>HRESULT PlayerDockedStateChange (void)</c>;</para></remarks>
    // Sent when the player docks or undocks
    // IDL: HRESULT PlayerDockedStateChange (void);
    // VB6: Sub PlayerDockedStateChange
    [DispId(6503)]
    void PlayerDockedStateChange ();

    /// <summary><para><c>PlayerReconnect</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the OCX reconnects to the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlayerReconnect</c> method was the following:  <c>HRESULT PlayerReconnect (void)</c>;</para></remarks>
    // Sent when the OCX reconnects to the player
    // IDL: HRESULT PlayerReconnect (void);
    // VB6: Sub PlayerReconnect
    [DispId(6504)]
    void PlayerReconnect ();

    /// <summary><para><c>Click</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a user clicks the mouse</para></summary>
    /// <remarks><para>An original IDL definition of <c>Click</c> method was the following:  <c>HRESULT Click (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
    // Occurs when a user clicks the mouse
    // IDL: HRESULT Click (short nButton, short nShiftState, long fX, long fY);
    // VB6: Sub Click (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
    [DispId(6505)]
    void Click (short nButton, short nShiftState, int fX, int fY);

    /// <summary><para><c>DoubleClick</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a user double-clicks the mouse</para></summary>
    /// <remarks><para>An original IDL definition of <c>DoubleClick</c> method was the following:  <c>HRESULT DoubleClick (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
    // Occurs when a user double-clicks the mouse
    // IDL: HRESULT DoubleClick (short nButton, short nShiftState, long fX, long fY);
    // VB6: Sub DoubleClick (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
    [DispId(6506)]
    void DoubleClick (short nButton, short nShiftState, int fX, int fY);

    /// <summary><para><c>KeyDown</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a key is pressed</para></summary>
    /// <remarks><para>An original IDL definition of <c>KeyDown</c> method was the following:  <c>HRESULT KeyDown (short nKeyCode, short nShiftState)</c>;</para></remarks>
    // Occurs when a key is pressed
    // IDL: HRESULT KeyDown (short nKeyCode, short nShiftState);
    // VB6: Sub KeyDown (ByVal nKeyCode As Integer, ByVal nShiftState As Integer)
    [DispId(6507)]
    void KeyDown (short nKeyCode, short nShiftState);

    /// <summary><para><c>KeyPress</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a key is pressed and released</para></summary>
    /// <remarks><para>An original IDL definition of <c>KeyPress</c> method was the following:  <c>HRESULT KeyPress (short nKeyAscii)</c>;</para></remarks>
    // Occurs when a key is pressed and released
    // IDL: HRESULT KeyPress (short nKeyAscii);
    // VB6: Sub KeyPress (ByVal nKeyAscii As Integer)
    [DispId(6508)]
    void KeyPress (short nKeyAscii);

    /// <summary><para><c>KeyUp</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a key is released</para></summary>
    /// <remarks><para>An original IDL definition of <c>KeyUp</c> method was the following:  <c>HRESULT KeyUp (short nKeyCode, short nShiftState)</c>;</para></remarks>
    // Occurs when a key is released
    // IDL: HRESULT KeyUp (short nKeyCode, short nShiftState);
    // VB6: Sub KeyUp (ByVal nKeyCode As Integer, ByVal nShiftState As Integer)
    [DispId(6509)]
    void KeyUp (short nKeyCode, short nShiftState);

    /// <summary><para><c>MouseDown</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a mouse button is pressed</para></summary>
    /// <remarks><para>An original IDL definition of <c>MouseDown</c> method was the following:  <c>HRESULT MouseDown (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
    // Occurs when a mouse button is pressed
    // IDL: HRESULT MouseDown (short nButton, short nShiftState, long fX, long fY);
    // VB6: Sub MouseDown (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
    [DispId(6510)]
    void MouseDown (short nButton, short nShiftState, int fX, int fY);

    /// <summary><para><c>MouseMove</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a mouse pointer is moved</para></summary>
    /// <remarks><para>An original IDL definition of <c>MouseMove</c> method was the following:  <c>HRESULT MouseMove (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
    // Occurs when a mouse pointer is moved
    // IDL: HRESULT MouseMove (short nButton, short nShiftState, long fX, long fY);
    // VB6: Sub MouseMove (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
    [DispId(6511)]
    void MouseMove (short nButton, short nShiftState, int fX, int fY);

    /// <summary><para><c>MouseUp</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a mouse button is released</para></summary>
    /// <remarks><para>An original IDL definition of <c>MouseUp</c> method was the following:  <c>HRESULT MouseUp (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
    // Occurs when a mouse button is released
    // IDL: HRESULT MouseUp (short nButton, short nShiftState, long fX, long fY);
    // VB6: Sub MouseUp (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
    [DispId(6512)]
    void MouseUp (short nButton, short nShiftState, int fX, int fY);

    /// <summary><para><c>DeviceConnect</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device is connected</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceConnect</c> method was the following:  <c>HRESULT DeviceConnect (IWMPSyncDevice* pDevice)</c>;</para></remarks>
    // Occurs when a device is connected
    // IDL: HRESULT DeviceConnect (IWMPSyncDevice* pDevice);
    // VB6: Sub DeviceConnect (ByVal pDevice As IWMPSyncDevice)
    [DispId(6513)]
    void DeviceConnect (IWMPSyncDevice pDevice);

    /// <summary><para><c>DeviceDisconnect</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device is disconnected</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceDisconnect</c> method was the following:  <c>HRESULT DeviceDisconnect (IWMPSyncDevice* pDevice)</c>;</para></remarks>
    // Occurs when a device is disconnected
    // IDL: HRESULT DeviceDisconnect (IWMPSyncDevice* pDevice);
    // VB6: Sub DeviceDisconnect (ByVal pDevice As IWMPSyncDevice)
    [DispId(6514)]
    void DeviceDisconnect (IWMPSyncDevice pDevice);

    /// <summary><para><c>DeviceStatusChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device status changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceStatusChange</c> method was the following:  <c>HRESULT DeviceStatusChange (IWMPSyncDevice* pDevice, WMPDeviceStatus NewStatus)</c>;</para></remarks>
    // Occurs when a device status changes
    // IDL: HRESULT DeviceStatusChange (IWMPSyncDevice* pDevice, WMPDeviceStatus NewStatus);
    // VB6: Sub DeviceStatusChange (ByVal pDevice As IWMPSyncDevice, ByVal NewStatus As WMPDeviceStatus)
    [DispId(6515)]
    void DeviceStatusChange (IWMPSyncDevice pDevice, WMPDeviceStatus NewStatus);

    /// <summary><para><c>DeviceSyncStateChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device sync state changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceSyncStateChange</c> method was the following:  <c>HRESULT DeviceSyncStateChange (IWMPSyncDevice* pDevice, WMPSyncState NewState)</c>;</para></remarks>
    // Occurs when a device sync state changes
    // IDL: HRESULT DeviceSyncStateChange (IWMPSyncDevice* pDevice, WMPSyncState NewState);
    // VB6: Sub DeviceSyncStateChange (ByVal pDevice As IWMPSyncDevice, ByVal NewState As WMPSyncState)
    [DispId(6516)]
    void DeviceSyncStateChange (IWMPSyncDevice pDevice, WMPSyncState NewState);

    /// <summary><para><c>DeviceSyncError</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device's media has an error</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceSyncError</c> method was the following:  <c>HRESULT DeviceSyncError (IWMPSyncDevice* pDevice, IDispatch* pMedia)</c>;</para></remarks>
    // Occurs when a device's media has an error
    // IDL: HRESULT DeviceSyncError (IWMPSyncDevice* pDevice, IDispatch* pMedia);
    // VB6: Sub DeviceSyncError (ByVal pDevice As IWMPSyncDevice, ByVal pMedia As IDispatch)
    [DispId(6517)]
    void DeviceSyncError (IWMPSyncDevice pDevice, [MarshalAs(UnmanagedType.IDispatch)] object pMedia);

    /// <summary><para><c>CreatePartnershipComplete</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when createPartnership call completes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CreatePartnershipComplete</c> method was the following:  <c>HRESULT CreatePartnershipComplete (IWMPSyncDevice* pDevice, HRESULT hrResult)</c>;</para></remarks>
    // Occurs when createPartnership call completes
    // IDL: HRESULT CreatePartnershipComplete (IWMPSyncDevice* pDevice, HRESULT hrResult);
    // VB6: Sub CreatePartnershipComplete (ByVal pDevice As IWMPSyncDevice, ByVal hrResult As Long)
    [DispId(6518)]
    void CreatePartnershipComplete (IWMPSyncDevice pDevice, uint hrResult);

    /// <summary><para><c>DeviceEstimation</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when the sync estimation completed</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceEstimation</c> method was the following:  <c>HRESULT DeviceEstimation (IWMPSyncDevice* pDevice, HRESULT hrResult, __int64 qwEstimatedUsedSpace, __int64 qwEstimatedSpace)</c>;</para></remarks>
    // Occurs when the sync estimation completed
    // IDL: HRESULT DeviceEstimation (IWMPSyncDevice* pDevice, HRESULT hrResult, __int64 qwEstimatedUsedSpace, __int64 qwEstimatedSpace);
    // VB6: Sub DeviceEstimation (ByVal pDevice As IWMPSyncDevice, ByVal hrResult As Long, ByVal qwEstimatedUsedSpace As Int64, ByVal qwEstimatedSpace As Int64)
    [DispId(6527)]
    void DeviceEstimation (IWMPSyncDevice pDevice, uint hrResult, long qwEstimatedUsedSpace, long qwEstimatedSpace);

    /// <summary><para><c>CdromRipStateChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when ripping state changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromRipStateChange</c> method was the following:  <c>HRESULT CdromRipStateChange (IWMPCdromRip* pCdromRip, WMPRipState wmprs)</c>;</para></remarks>
    // Occurs when ripping state changes
    // IDL: HRESULT CdromRipStateChange (IWMPCdromRip* pCdromRip, WMPRipState wmprs);
    // VB6: Sub CdromRipStateChange (ByVal pCdromRip As IWMPCdromRip, ByVal wmprs As WMPRipState)
    [DispId(6519)]
    void CdromRipStateChange (IWMPCdromRip pCdromRip, WMPRipState wmprs);

    /// <summary><para><c>CdromRipMediaError</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when an error happens while ripping a media</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromRipMediaError</c> method was the following:  <c>HRESULT CdromRipMediaError (IWMPCdromRip* pCdromRip, IDispatch* pMedia)</c>;</para></remarks>
    // Occurs when an error happens while ripping a media
    // IDL: HRESULT CdromRipMediaError (IWMPCdromRip* pCdromRip, IDispatch* pMedia);
    // VB6: Sub CdromRipMediaError (ByVal pCdromRip As IWMPCdromRip, ByVal pMedia As IDispatch)
    [DispId(6520)]
    void CdromRipMediaError (IWMPCdromRip pCdromRip, [MarshalAs(UnmanagedType.IDispatch)] object pMedia);

    /// <summary><para><c>CdromBurnStateChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when burning state changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromBurnStateChange</c> method was the following:  <c>HRESULT CdromBurnStateChange (IWMPCdromBurn* pCdromBurn, WMPBurnState wmpbs)</c>;</para></remarks>
    // Occurs when burning state changes
    // IDL: HRESULT CdromBurnStateChange (IWMPCdromBurn* pCdromBurn, WMPBurnState wmpbs);
    // VB6: Sub CdromBurnStateChange (ByVal pCdromBurn As IWMPCdromBurn, ByVal wmpbs As WMPBurnState)
    [DispId(6521)]
    void CdromBurnStateChange (IWMPCdromBurn pCdromBurn, WMPBurnState wmpbs);

    /// <summary><para><c>CdromBurnMediaError</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when an error happens while burning a media</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromBurnMediaError</c> method was the following:  <c>HRESULT CdromBurnMediaError (IWMPCdromBurn* pCdromBurn, IDispatch* pMedia)</c>;</para></remarks>
    // Occurs when an error happens while burning a media
    // IDL: HRESULT CdromBurnMediaError (IWMPCdromBurn* pCdromBurn, IDispatch* pMedia);
    // VB6: Sub CdromBurnMediaError (ByVal pCdromBurn As IWMPCdromBurn, ByVal pMedia As IDispatch)
    [DispId(6522)]
    void CdromBurnMediaError (IWMPCdromBurn pCdromBurn, [MarshalAs(UnmanagedType.IDispatch)] object pMedia);

    /// <summary><para><c>CdromBurnError</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a generic error happens while burning</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromBurnError</c> method was the following:  <c>HRESULT CdromBurnError (IWMPCdromBurn* pCdromBurn, HRESULT hrError)</c>;</para></remarks>
    // Occurs when a generic error happens while burning
    // IDL: HRESULT CdromBurnError (IWMPCdromBurn* pCdromBurn, HRESULT hrError);
    // VB6: Sub CdromBurnError (ByVal pCdromBurn As IWMPCdromBurn, ByVal hrError As Long)
    [DispId(6523)]
    void CdromBurnError (IWMPCdromBurn pCdromBurn, uint hrError);

    /// <summary><para><c>LibraryConnect</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a library is connected</para></summary>
    /// <remarks><para>An original IDL definition of <c>LibraryConnect</c> method was the following:  <c>HRESULT LibraryConnect (IWMPLibrary* pLibrary)</c>;</para></remarks>
    // Occurs when a library is connected
    // IDL: HRESULT LibraryConnect (IWMPLibrary* pLibrary);
    // VB6: Sub LibraryConnect (ByVal pLibrary As IWMPLibrary)
    [DispId(6524)]
    void LibraryConnect (IWMPLibrary pLibrary);

    /// <summary><para><c>LibraryDisconnect</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a library is disconnected</para></summary>
    /// <remarks><para>An original IDL definition of <c>LibraryDisconnect</c> method was the following:  <c>HRESULT LibraryDisconnect (IWMPLibrary* pLibrary)</c>;</para></remarks>
    // Occurs when a library is disconnected
    // IDL: HRESULT LibraryDisconnect (IWMPLibrary* pLibrary);
    // VB6: Sub LibraryDisconnect (ByVal pLibrary As IWMPLibrary)
    [DispId(6525)]
    void LibraryDisconnect (IWMPLibrary pLibrary);

    /// <summary><para><c>FolderScanStateChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a folder scan state changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>FolderScanStateChange</c> method was the following:  <c>HRESULT FolderScanStateChange (WMPFolderScanState wmpfss)</c>;</para></remarks>
    // Occurs when a folder scan state changes
    // IDL: HRESULT FolderScanStateChange (WMPFolderScanState wmpfss);
    // VB6: Sub FolderScanStateChange (ByVal wmpfss As WMPFolderScanState)
    [DispId(6526)]
    void FolderScanStateChange (WMPFolderScanState wmpfss);

    /// <summary><para><c>StringCollectionChange</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a string collection changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>StringCollectionChange</c> method was the following:  <c>HRESULT StringCollectionChange (IDispatch* pdispStringCollection, WMPStringCollectionChangeEventType change, long lCollectionIndex)</c>;</para></remarks>
    // Sent when a string collection changes
    // IDL: HRESULT StringCollectionChange (IDispatch* pdispStringCollection, WMPStringCollectionChangeEventType change, long lCollectionIndex);
    // VB6: Sub StringCollectionChange (ByVal pdispStringCollection As IDispatch, ByVal change As WMPStringCollectionChangeEventType, ByVal lCollectionIndex As Long)
    [DispId(5824)]
    void StringCollectionChange ([MarshalAs(UnmanagedType.IDispatch)] object pdispStringCollection, WMPStringCollectionChangeEventType change, int lCollectionIndex);

    /// <summary><para><c>MediaCollectionMediaAdded</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a media is added to the local library</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionMediaAdded</c> method was the following:  <c>HRESULT MediaCollectionMediaAdded (IDispatch* pdispMedia)</c>;</para></remarks>
    // Sent when a media is added to the local library
    // IDL: HRESULT MediaCollectionMediaAdded (IDispatch* pdispMedia);
    // VB6: Sub MediaCollectionMediaAdded (ByVal pdispMedia As IDispatch)
    [DispId(5825)]
    void MediaCollectionMediaAdded ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

    /// <summary><para><c>MediaCollectionMediaRemoved</c> method of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a media is removed from the local library</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionMediaRemoved</c> method was the following:  <c>HRESULT MediaCollectionMediaRemoved (IDispatch* pdispMedia)</c>;</para></remarks>
    // Sent when a media is removed from the local library
    // IDL: HRESULT MediaCollectionMediaRemoved (IDispatch* pdispMedia);
    // VB6: Sub MediaCollectionMediaRemoved (ByVal pdispMedia As IDispatch)
    [DispId(5826)]
    void MediaCollectionMediaRemoved ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);
  }

  /// <summary><para>Delegate for handling <c>OpenStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control changes OpenState</para></summary>
  /// <remarks><para>An original IDL definition of <c>OpenStateChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_OpenStateChangeEventHandler (long NewState)</c>;</para></remarks>
  // Sent when the control changes OpenState
  // IDL: HRESULT _WMPOCXEvents_OpenStateChangeEventHandler (long NewState);
  // VB6: Sub _WMPOCXEvents_OpenStateChangeEventHandler (ByVal NewState As Long)
  public delegate void _WMPOCXEvents_OpenStateChangeEventHandler (int NewState);

  /// <summary><para>Delegate for handling <c>PlayStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control changes PlayState</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlayStateChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_PlayStateChangeEventHandler (long NewState)</c>;</para></remarks>
  // Sent when the control changes PlayState
  // IDL: HRESULT _WMPOCXEvents_PlayStateChangeEventHandler (long NewState);
  // VB6: Sub _WMPOCXEvents_PlayStateChangeEventHandler (ByVal NewState As Long)
  public delegate void _WMPOCXEvents_PlayStateChangeEventHandler (int NewState);

  /// <summary><para>Delegate for handling <c>AudioLanguageChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the current audio language has changed</para></summary>
  /// <remarks><para>An original IDL definition of <c>AudioLanguageChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_AudioLanguageChangeEventHandler (long LangID)</c>;</para></remarks>
  // Sent when the current audio language has changed
  // IDL: HRESULT _WMPOCXEvents_AudioLanguageChangeEventHandler (long LangID);
  // VB6: Sub _WMPOCXEvents_AudioLanguageChangeEventHandler (ByVal LangID As Long)
  public delegate void _WMPOCXEvents_AudioLanguageChangeEventHandler (int LangID);

  /// <summary><para>Delegate for handling <c>StatusChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the status string changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>StatusChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_StatusChangeEventHandler (void)</c>;</para></remarks>
  // Sent when the status string changes
  // IDL: HRESULT _WMPOCXEvents_StatusChangeEventHandler (void);
  // VB6: Sub _WMPOCXEvents_StatusChangeEventHandler
  public delegate void _WMPOCXEvents_StatusChangeEventHandler ();

  /// <summary><para>Delegate for handling <c>ScriptCommand</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a synchronized command or URL is received</para></summary>
  /// <remarks><para>An original IDL definition of <c>ScriptCommand</c> event was the following:  <c>HRESULT _WMPOCXEvents_ScriptCommandEventHandler (BSTR scType, BSTR Param)</c>;</para></remarks>
  // Sent when a synchronized command or URL is received
  // IDL: HRESULT _WMPOCXEvents_ScriptCommandEventHandler (BSTR scType, BSTR Param);
  // VB6: Sub _WMPOCXEvents_ScriptCommandEventHandler (ByVal scType As String, ByVal Param As String)
  public delegate void _WMPOCXEvents_ScriptCommandEventHandler ([MarshalAs(UnmanagedType.BStr)] string scType, [MarshalAs(UnmanagedType.BStr)] string Param);

  /// <summary><para>Delegate for handling <c>NewStream</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a new stream is started in a channel</para></summary>
  /// <remarks><para>An original IDL definition of <c>NewStream</c> event was the following:  <c>HRESULT _WMPOCXEvents_NewStreamEventHandler (void)</c>;</para></remarks>
  // Sent when a new stream is started in a channel
  // IDL: HRESULT _WMPOCXEvents_NewStreamEventHandler (void);
  // VB6: Sub _WMPOCXEvents_NewStreamEventHandler
  public delegate void _WMPOCXEvents_NewStreamEventHandler ();

  /// <summary><para>Delegate for handling <c>Disconnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control is disconnected from the server</para></summary>
  /// <remarks><para>An original IDL definition of <c>Disconnect</c> event was the following:  <c>HRESULT _WMPOCXEvents_DisconnectEventHandler (long Result)</c>;</para></remarks>
  // Sent when the control is disconnected from the server
  // IDL: HRESULT _WMPOCXEvents_DisconnectEventHandler (long Result);
  // VB6: Sub _WMPOCXEvents_DisconnectEventHandler (ByVal Result As Long)
  public delegate void _WMPOCXEvents_DisconnectEventHandler (int Result);

  /// <summary><para>Delegate for handling <c>Buffering</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control begins or ends buffering</para></summary>
  /// <remarks><para>An original IDL definition of <c>Buffering</c> event was the following:  <c>HRESULT _WMPOCXEvents_BufferingEventHandler (VARIANT_BOOL Start)</c>;</para></remarks>
  // Sent when the control begins or ends buffering
  // IDL: HRESULT _WMPOCXEvents_BufferingEventHandler (VARIANT_BOOL Start);
  // VB6: Sub _WMPOCXEvents_BufferingEventHandler (ByVal Start As Boolean)
  public delegate void _WMPOCXEvents_BufferingEventHandler ([MarshalAs(UnmanagedType.VariantBool)] bool Start);

  /// <summary><para>Delegate for handling <c>Error</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control has an error condition</para></summary>
  /// <remarks><para>An original IDL definition of <c>Error</c> event was the following:  <c>HRESULT _WMPOCXEvents_ErrorEventHandler (void)</c>;</para></remarks>
  // Sent when the control has an error condition
  // IDL: HRESULT _WMPOCXEvents_ErrorEventHandler (void);
  // VB6: Sub _WMPOCXEvents_ErrorEventHandler
  public delegate void _WMPOCXEvents_ErrorEventHandler ();

  /// <summary><para>Delegate for handling <c>Warning</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control encounters a problem</para></summary>
  /// <remarks><para>An original IDL definition of <c>Warning</c> event was the following:  <c>HRESULT _WMPOCXEvents_WarningEventHandler (long WarningType, long Param, BSTR Description)</c>;</para></remarks>
  // Sent when the control encounters a problem
  // IDL: HRESULT _WMPOCXEvents_WarningEventHandler (long WarningType, long Param, BSTR Description);
  // VB6: Sub _WMPOCXEvents_WarningEventHandler (ByVal WarningType As Long, ByVal Param As Long, ByVal Description As String)
  public delegate void _WMPOCXEvents_WarningEventHandler (int WarningType, int Param, [MarshalAs(UnmanagedType.BStr)] string Description);

  /// <summary><para>Delegate for handling <c>EndOfStream</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the end of file is reached</para></summary>
  /// <remarks><para>An original IDL definition of <c>EndOfStream</c> event was the following:  <c>HRESULT _WMPOCXEvents_EndOfStreamEventHandler (long Result)</c>;</para></remarks>
  // Sent when the end of file is reached
  // IDL: HRESULT _WMPOCXEvents_EndOfStreamEventHandler (long Result);
  // VB6: Sub _WMPOCXEvents_EndOfStreamEventHandler (ByVal Result As Long)
  public delegate void _WMPOCXEvents_EndOfStreamEventHandler (int Result);

  /// <summary><para>Delegate for handling <c>PositionChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Indicates that the current position of the movie has changed</para></summary>
  /// <remarks><para>An original IDL definition of <c>PositionChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_PositionChangeEventHandler (double oldPosition, double newPosition)</c>;</para></remarks>
  // Indicates that the current position of the movie has changed
  // IDL: HRESULT _WMPOCXEvents_PositionChangeEventHandler (double oldPosition, double newPosition);
  // VB6: Sub _WMPOCXEvents_PositionChangeEventHandler (ByVal oldPosition As Double, ByVal newPosition As Double)
  public delegate void _WMPOCXEvents_PositionChangeEventHandler (double oldPosition, double newPosition);

  /// <summary><para>Delegate for handling <c>MarkerHit</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a marker is reached</para></summary>
  /// <remarks><para>An original IDL definition of <c>MarkerHit</c> event was the following:  <c>HRESULT _WMPOCXEvents_MarkerHitEventHandler (long MarkerNum)</c>;</para></remarks>
  // Sent when a marker is reached
  // IDL: HRESULT _WMPOCXEvents_MarkerHitEventHandler (long MarkerNum);
  // VB6: Sub _WMPOCXEvents_MarkerHitEventHandler (ByVal MarkerNum As Long)
  public delegate void _WMPOCXEvents_MarkerHitEventHandler (int MarkerNum);

  /// <summary><para>Delegate for handling <c>DurationUnitChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Indicates that the unit used to express duration and position has changed</para></summary>
  /// <remarks><para>An original IDL definition of <c>DurationUnitChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_DurationUnitChangeEventHandler (long NewDurationUnit)</c>;</para></remarks>
  // Indicates that the unit used to express duration and position has changed
  // IDL: HRESULT _WMPOCXEvents_DurationUnitChangeEventHandler (long NewDurationUnit);
  // VB6: Sub _WMPOCXEvents_DurationUnitChangeEventHandler (ByVal NewDurationUnit As Long)
  public delegate void _WMPOCXEvents_DurationUnitChangeEventHandler (int NewDurationUnit);

  /// <summary><para>Delegate for handling <c>CdromMediaChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Indicates that the CD ROM media has changed</para></summary>
  /// <remarks><para>An original IDL definition of <c>CdromMediaChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_CdromMediaChangeEventHandler (long CdromNum)</c>;</para></remarks>
  // Indicates that the CD ROM media has changed
  // IDL: HRESULT _WMPOCXEvents_CdromMediaChangeEventHandler (long CdromNum);
  // VB6: Sub _WMPOCXEvents_CdromMediaChangeEventHandler (ByVal CdromNum As Long)
  public delegate void _WMPOCXEvents_CdromMediaChangeEventHandler (int CdromNum);

  /// <summary><para>Delegate for handling <c>PlaylistChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlaylistChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_PlaylistChangeEventHandler (IDispatch* Playlist, WMPPlaylistChangeEventType change)</c>;</para></remarks>
  // Sent when a playlist changes
  // IDL: HRESULT _WMPOCXEvents_PlaylistChangeEventHandler (IDispatch* Playlist, WMPPlaylistChangeEventType change);
  // VB6: Sub _WMPOCXEvents_PlaylistChangeEventHandler (ByVal Playlist As IDispatch, ByVal change As WMPPlaylistChangeEventType)
  public delegate void _WMPOCXEvents_PlaylistChangeEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object Playlist, WMPPlaylistChangeEventType change);

  /// <summary><para>Delegate for handling <c>CurrentPlaylistChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the current playlist changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>CurrentPlaylistChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_CurrentPlaylistChangeEventHandler (WMPPlaylistChangeEventType change)</c>;</para></remarks>
  // Sent when the current playlist changes
  // IDL: HRESULT _WMPOCXEvents_CurrentPlaylistChangeEventHandler (WMPPlaylistChangeEventType change);
  // VB6: Sub _WMPOCXEvents_CurrentPlaylistChangeEventHandler (ByVal change As WMPPlaylistChangeEventType)
  public delegate void _WMPOCXEvents_CurrentPlaylistChangeEventHandler (WMPPlaylistChangeEventType change);

  /// <summary><para>Delegate for handling <c>CurrentPlaylistItemAvailable</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a current playlist item becomes available</para></summary>
  /// <remarks><para>An original IDL definition of <c>CurrentPlaylistItemAvailable</c> event was the following:  <c>HRESULT _WMPOCXEvents_CurrentPlaylistItemAvailableEventHandler (BSTR bstrItemName)</c>;</para></remarks>
  // Sent when a current playlist item becomes available
  // IDL: HRESULT _WMPOCXEvents_CurrentPlaylistItemAvailableEventHandler (BSTR bstrItemName);
  // VB6: Sub _WMPOCXEvents_CurrentPlaylistItemAvailableEventHandler (ByVal bstrItemName As String)
  public delegate void _WMPOCXEvents_CurrentPlaylistItemAvailableEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

  /// <summary><para>Delegate for handling <c>MediaChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a media object changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_MediaChangeEventHandler (IDispatch* Item)</c>;</para></remarks>
  // Sent when a media object changes
  // IDL: HRESULT _WMPOCXEvents_MediaChangeEventHandler (IDispatch* Item);
  // VB6: Sub _WMPOCXEvents_MediaChangeEventHandler (ByVal Item As IDispatch)
  public delegate void _WMPOCXEvents_MediaChangeEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object Item);

  /// <summary><para>Delegate for handling <c>CurrentMediaItemAvailable</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a current media item becomes available</para></summary>
  /// <remarks><para>An original IDL definition of <c>CurrentMediaItemAvailable</c> event was the following:  <c>HRESULT _WMPOCXEvents_CurrentMediaItemAvailableEventHandler (BSTR bstrItemName)</c>;</para></remarks>
  // Sent when a current media item becomes available
  // IDL: HRESULT _WMPOCXEvents_CurrentMediaItemAvailableEventHandler (BSTR bstrItemName);
  // VB6: Sub _WMPOCXEvents_CurrentMediaItemAvailableEventHandler (ByVal bstrItemName As String)
  public delegate void _WMPOCXEvents_CurrentMediaItemAvailableEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

  /// <summary><para>Delegate for handling <c>CurrentItemChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the item selection on the current playlist changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>CurrentItemChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_CurrentItemChangeEventHandler (IDispatch* pdispMedia)</c>;</para></remarks>
  // Sent when the item selection on the current playlist changes
  // IDL: HRESULT _WMPOCXEvents_CurrentItemChangeEventHandler (IDispatch* pdispMedia);
  // VB6: Sub _WMPOCXEvents_CurrentItemChangeEventHandler (ByVal pdispMedia As IDispatch)
  public delegate void _WMPOCXEvents_CurrentItemChangeEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

  /// <summary><para>Delegate for handling <c>MediaCollectionChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the media collection needs to be requeried</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_MediaCollectionChangeEventHandler (void)</c>;</para></remarks>
  // Sent when the media collection needs to be requeried
  // IDL: HRESULT _WMPOCXEvents_MediaCollectionChangeEventHandler (void);
  // VB6: Sub _WMPOCXEvents_MediaCollectionChangeEventHandler
  public delegate void _WMPOCXEvents_MediaCollectionChangeEventHandler ();

  /// <summary><para>Delegate for handling <c>MediaCollectionAttributeStringAdded</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when an attribute string is added in the media collection</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringAdded</c> event was the following:  <c>HRESULT _WMPOCXEvents_MediaCollectionAttributeStringAddedEventHandler (BSTR bstrAttribName, BSTR bstrAttribVal)</c>;</para></remarks>
  // Sent when an attribute string is added in the media collection
  // IDL: HRESULT _WMPOCXEvents_MediaCollectionAttributeStringAddedEventHandler (BSTR bstrAttribName, BSTR bstrAttribVal);
  // VB6: Sub _WMPOCXEvents_MediaCollectionAttributeStringAddedEventHandler (ByVal bstrAttribName As String, ByVal bstrAttribVal As String)
  public delegate void _WMPOCXEvents_MediaCollectionAttributeStringAddedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrAttribVal);

  /// <summary><para>Delegate for handling <c>MediaCollectionAttributeStringRemoved</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when an attribute string is removed from the media collection</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringRemoved</c> event was the following:  <c>HRESULT _WMPOCXEvents_MediaCollectionAttributeStringRemovedEventHandler (BSTR bstrAttribName, BSTR bstrAttribVal)</c>;</para></remarks>
  // Sent when an attribute string is removed from the media collection
  // IDL: HRESULT _WMPOCXEvents_MediaCollectionAttributeStringRemovedEventHandler (BSTR bstrAttribName, BSTR bstrAttribVal);
  // VB6: Sub _WMPOCXEvents_MediaCollectionAttributeStringRemovedEventHandler (ByVal bstrAttribName As String, ByVal bstrAttribVal As String)
  public delegate void _WMPOCXEvents_MediaCollectionAttributeStringRemovedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrAttribVal);

  /// <summary><para>Delegate for handling <c>MediaCollectionAttributeStringChanged</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when an attribute string is changed in the media collection</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringChanged</c> event was the following:  <c>HRESULT _WMPOCXEvents_MediaCollectionAttributeStringChangedEventHandler (BSTR bstrAttribName, BSTR bstrOldAttribVal, BSTR bstrNewAttribVal)</c>;</para></remarks>
  // Sent when an attribute string is changed in the media collection
  // IDL: HRESULT _WMPOCXEvents_MediaCollectionAttributeStringChangedEventHandler (BSTR bstrAttribName, BSTR bstrOldAttribVal, BSTR bstrNewAttribVal);
  // VB6: Sub _WMPOCXEvents_MediaCollectionAttributeStringChangedEventHandler (ByVal bstrAttribName As String, ByVal bstrOldAttribVal As String, ByVal bstrNewAttribVal As String)
  public delegate void _WMPOCXEvents_MediaCollectionAttributeStringChangedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrOldAttribVal, [MarshalAs(UnmanagedType.BStr)] string bstrNewAttribVal);

  /// <summary><para>Delegate for handling <c>PlaylistCollectionChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when playlist collection needs to be requeried</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlaylistCollectionChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_PlaylistCollectionChangeEventHandler (void)</c>;</para></remarks>
  // Sent when playlist collection needs to be requeried
  // IDL: HRESULT _WMPOCXEvents_PlaylistCollectionChangeEventHandler (void);
  // VB6: Sub _WMPOCXEvents_PlaylistCollectionChangeEventHandler
  public delegate void _WMPOCXEvents_PlaylistCollectionChangeEventHandler ();

  /// <summary><para>Delegate for handling <c>PlaylistCollectionPlaylistAdded</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist is added to the playlist collection</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistAdded</c> event was the following:  <c>HRESULT _WMPOCXEvents_PlaylistCollectionPlaylistAddedEventHandler (BSTR bstrPlaylistName)</c>;</para></remarks>
  // Sent when a playlist is added to the playlist collection
  // IDL: HRESULT _WMPOCXEvents_PlaylistCollectionPlaylistAddedEventHandler (BSTR bstrPlaylistName);
  // VB6: Sub _WMPOCXEvents_PlaylistCollectionPlaylistAddedEventHandler (ByVal bstrPlaylistName As String)
  public delegate void _WMPOCXEvents_PlaylistCollectionPlaylistAddedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName);

  /// <summary><para>Delegate for handling <c>PlaylistCollectionPlaylistRemoved</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist is removed from the playlist collection</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistRemoved</c> event was the following:  <c>HRESULT _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEventHandler (BSTR bstrPlaylistName)</c>;</para></remarks>
  // Sent when a playlist is removed from the playlist collection
  // IDL: HRESULT _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEventHandler (BSTR bstrPlaylistName);
  // VB6: Sub _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEventHandler (ByVal bstrPlaylistName As String)
  public delegate void _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName);

  /// <summary><para>Delegate for handling <c>PlaylistCollectionPlaylistSetAsDeleted</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist has been set or reset as deleted</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistSetAsDeleted</c> event was the following:  <c>HRESULT _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler (BSTR bstrPlaylistName, VARIANT_BOOL varfIsDeleted)</c>;</para></remarks>
  // Sent when a playlist has been set or reset as deleted
  // IDL: HRESULT _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler (BSTR bstrPlaylistName, VARIANT_BOOL varfIsDeleted);
  // VB6: Sub _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler (ByVal bstrPlaylistName As String, ByVal varfIsDeleted As Boolean)
  public delegate void _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName, [MarshalAs(UnmanagedType.VariantBool)] bool varfIsDeleted);

  /// <summary><para>Delegate for handling <c>ModeChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Playlist playback mode has changed</para></summary>
  /// <remarks><para>An original IDL definition of <c>ModeChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_ModeChangeEventHandler (BSTR ModeName, VARIANT_BOOL NewValue)</c>;</para></remarks>
  // Playlist playback mode has changed
  // IDL: HRESULT _WMPOCXEvents_ModeChangeEventHandler (BSTR ModeName, VARIANT_BOOL NewValue);
  // VB6: Sub _WMPOCXEvents_ModeChangeEventHandler (ByVal ModeName As String, ByVal NewValue As Boolean)
  public delegate void _WMPOCXEvents_ModeChangeEventHandler ([MarshalAs(UnmanagedType.BStr)] string ModeName, [MarshalAs(UnmanagedType.VariantBool)] bool NewValue);

  /// <summary><para>Delegate for handling <c>MediaError</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the media object has an error condition</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaError</c> event was the following:  <c>HRESULT _WMPOCXEvents_MediaErrorEventHandler (IDispatch* pMediaObject)</c>;</para></remarks>
  // Sent when the media object has an error condition
  // IDL: HRESULT _WMPOCXEvents_MediaErrorEventHandler (IDispatch* pMediaObject);
  // VB6: Sub _WMPOCXEvents_MediaErrorEventHandler (ByVal pMediaObject As IDispatch)
  public delegate void _WMPOCXEvents_MediaErrorEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pMediaObject);

  /// <summary><para>Delegate for handling <c>OpenPlaylistSwitch</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Current playlist switch with no open state change</para></summary>
  /// <remarks><para>An original IDL definition of <c>OpenPlaylistSwitch</c> event was the following:  <c>HRESULT _WMPOCXEvents_OpenPlaylistSwitchEventHandler (IDispatch* pItem)</c>;</para></remarks>
  // Current playlist switch with no open state change
  // IDL: HRESULT _WMPOCXEvents_OpenPlaylistSwitchEventHandler (IDispatch* pItem);
  // VB6: Sub _WMPOCXEvents_OpenPlaylistSwitchEventHandler (ByVal pItem As IDispatch)
  public delegate void _WMPOCXEvents_OpenPlaylistSwitchEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pItem);

  /// <summary><para>Delegate for handling <c>DomainChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Send a current domain</para></summary>
  /// <remarks><para>An original IDL definition of <c>DomainChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_DomainChangeEventHandler (BSTR strDomain)</c>;</para></remarks>
  // Send a current domain
  // IDL: HRESULT _WMPOCXEvents_DomainChangeEventHandler (BSTR strDomain);
  // VB6: Sub _WMPOCXEvents_DomainChangeEventHandler (ByVal strDomain As String)
  public delegate void _WMPOCXEvents_DomainChangeEventHandler ([MarshalAs(UnmanagedType.BStr)] string strDomain);

  /// <summary><para>Delegate for handling <c>SwitchedToPlayerApplication</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when display switches to player application</para></summary>
  /// <remarks><para>An original IDL definition of <c>SwitchedToPlayerApplication</c> event was the following:  <c>HRESULT _WMPOCXEvents_SwitchedToPlayerApplicationEventHandler (void)</c>;</para></remarks>
  // Sent when display switches to player application
  // IDL: HRESULT _WMPOCXEvents_SwitchedToPlayerApplicationEventHandler (void);
  // VB6: Sub _WMPOCXEvents_SwitchedToPlayerApplicationEventHandler
  public delegate void _WMPOCXEvents_SwitchedToPlayerApplicationEventHandler ();

  /// <summary><para>Delegate for handling <c>SwitchedToControl</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when display switches to control</para></summary>
  /// <remarks><para>An original IDL definition of <c>SwitchedToControl</c> event was the following:  <c>HRESULT _WMPOCXEvents_SwitchedToControlEventHandler (void)</c>;</para></remarks>
  // Sent when display switches to control
  // IDL: HRESULT _WMPOCXEvents_SwitchedToControlEventHandler (void);
  // VB6: Sub _WMPOCXEvents_SwitchedToControlEventHandler
  public delegate void _WMPOCXEvents_SwitchedToControlEventHandler ();

  /// <summary><para>Delegate for handling <c>PlayerDockedStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the player docks or undocks</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlayerDockedStateChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_PlayerDockedStateChangeEventHandler (void)</c>;</para></remarks>
  // Sent when the player docks or undocks
  // IDL: HRESULT _WMPOCXEvents_PlayerDockedStateChangeEventHandler (void);
  // VB6: Sub _WMPOCXEvents_PlayerDockedStateChangeEventHandler
  public delegate void _WMPOCXEvents_PlayerDockedStateChangeEventHandler ();

  /// <summary><para>Delegate for handling <c>PlayerReconnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the OCX reconnects to the player</para></summary>
  /// <remarks><para>An original IDL definition of <c>PlayerReconnect</c> event was the following:  <c>HRESULT _WMPOCXEvents_PlayerReconnectEventHandler (void)</c>;</para></remarks>
  // Sent when the OCX reconnects to the player
  // IDL: HRESULT _WMPOCXEvents_PlayerReconnectEventHandler (void);
  // VB6: Sub _WMPOCXEvents_PlayerReconnectEventHandler
  public delegate void _WMPOCXEvents_PlayerReconnectEventHandler ();

  /// <summary><para>Delegate for handling <c>Click</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a user clicks the mouse</para></summary>
  /// <remarks><para>An original IDL definition of <c>Click</c> event was the following:  <c>HRESULT _WMPOCXEvents_ClickEventHandler (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
  // Occurs when a user clicks the mouse
  // IDL: HRESULT _WMPOCXEvents_ClickEventHandler (short nButton, short nShiftState, long fX, long fY);
  // VB6: Sub _WMPOCXEvents_ClickEventHandler (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
  public delegate void _WMPOCXEvents_ClickEventHandler (short nButton, short nShiftState, int fX, int fY);

  /// <summary><para>Delegate for handling <c>DoubleClick</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a user double-clicks the mouse</para></summary>
  /// <remarks><para>An original IDL definition of <c>DoubleClick</c> event was the following:  <c>HRESULT _WMPOCXEvents_DoubleClickEventHandler (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
  // Occurs when a user double-clicks the mouse
  // IDL: HRESULT _WMPOCXEvents_DoubleClickEventHandler (short nButton, short nShiftState, long fX, long fY);
  // VB6: Sub _WMPOCXEvents_DoubleClickEventHandler (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
  public delegate void _WMPOCXEvents_DoubleClickEventHandler (short nButton, short nShiftState, int fX, int fY);

  /// <summary><para>Delegate for handling <c>KeyDown</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a key is pressed</para></summary>
  /// <remarks><para>An original IDL definition of <c>KeyDown</c> event was the following:  <c>HRESULT _WMPOCXEvents_KeyDownEventHandler (short nKeyCode, short nShiftState)</c>;</para></remarks>
  // Occurs when a key is pressed
  // IDL: HRESULT _WMPOCXEvents_KeyDownEventHandler (short nKeyCode, short nShiftState);
  // VB6: Sub _WMPOCXEvents_KeyDownEventHandler (ByVal nKeyCode As Integer, ByVal nShiftState As Integer)
  public delegate void _WMPOCXEvents_KeyDownEventHandler (short nKeyCode, short nShiftState);

  /// <summary><para>Delegate for handling <c>KeyPress</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a key is pressed and released</para></summary>
  /// <remarks><para>An original IDL definition of <c>KeyPress</c> event was the following:  <c>HRESULT _WMPOCXEvents_KeyPressEventHandler (short nKeyAscii)</c>;</para></remarks>
  // Occurs when a key is pressed and released
  // IDL: HRESULT _WMPOCXEvents_KeyPressEventHandler (short nKeyAscii);
  // VB6: Sub _WMPOCXEvents_KeyPressEventHandler (ByVal nKeyAscii As Integer)
  public delegate void _WMPOCXEvents_KeyPressEventHandler (short nKeyAscii);

  /// <summary><para>Delegate for handling <c>KeyUp</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a key is released</para></summary>
  /// <remarks><para>An original IDL definition of <c>KeyUp</c> event was the following:  <c>HRESULT _WMPOCXEvents_KeyUpEventHandler (short nKeyCode, short nShiftState)</c>;</para></remarks>
  // Occurs when a key is released
  // IDL: HRESULT _WMPOCXEvents_KeyUpEventHandler (short nKeyCode, short nShiftState);
  // VB6: Sub _WMPOCXEvents_KeyUpEventHandler (ByVal nKeyCode As Integer, ByVal nShiftState As Integer)
  public delegate void _WMPOCXEvents_KeyUpEventHandler (short nKeyCode, short nShiftState);

  /// <summary><para>Delegate for handling <c>MouseDown</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a mouse button is pressed</para></summary>
  /// <remarks><para>An original IDL definition of <c>MouseDown</c> event was the following:  <c>HRESULT _WMPOCXEvents_MouseDownEventHandler (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
  // Occurs when a mouse button is pressed
  // IDL: HRESULT _WMPOCXEvents_MouseDownEventHandler (short nButton, short nShiftState, long fX, long fY);
  // VB6: Sub _WMPOCXEvents_MouseDownEventHandler (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
  public delegate void _WMPOCXEvents_MouseDownEventHandler (short nButton, short nShiftState, int fX, int fY);

  /// <summary><para>Delegate for handling <c>MouseMove</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a mouse pointer is moved</para></summary>
  /// <remarks><para>An original IDL definition of <c>MouseMove</c> event was the following:  <c>HRESULT _WMPOCXEvents_MouseMoveEventHandler (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
  // Occurs when a mouse pointer is moved
  // IDL: HRESULT _WMPOCXEvents_MouseMoveEventHandler (short nButton, short nShiftState, long fX, long fY);
  // VB6: Sub _WMPOCXEvents_MouseMoveEventHandler (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
  public delegate void _WMPOCXEvents_MouseMoveEventHandler (short nButton, short nShiftState, int fX, int fY);

  /// <summary><para>Delegate for handling <c>MouseUp</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a mouse button is released</para></summary>
  /// <remarks><para>An original IDL definition of <c>MouseUp</c> event was the following:  <c>HRESULT _WMPOCXEvents_MouseUpEventHandler (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
  // Occurs when a mouse button is released
  // IDL: HRESULT _WMPOCXEvents_MouseUpEventHandler (short nButton, short nShiftState, long fX, long fY);
  // VB6: Sub _WMPOCXEvents_MouseUpEventHandler (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
  public delegate void _WMPOCXEvents_MouseUpEventHandler (short nButton, short nShiftState, int fX, int fY);

  /// <summary><para>Delegate for handling <c>DeviceConnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device is connected</para></summary>
  /// <remarks><para>An original IDL definition of <c>DeviceConnect</c> event was the following:  <c>HRESULT _WMPOCXEvents_DeviceConnectEventHandler (IWMPSyncDevice* pDevice)</c>;</para></remarks>
  // Occurs when a device is connected
  // IDL: HRESULT _WMPOCXEvents_DeviceConnectEventHandler (IWMPSyncDevice* pDevice);
  // VB6: Sub _WMPOCXEvents_DeviceConnectEventHandler (ByVal pDevice As IWMPSyncDevice)
  public delegate void _WMPOCXEvents_DeviceConnectEventHandler (IWMPSyncDevice pDevice);

  /// <summary><para>Delegate for handling <c>DeviceDisconnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device is disconnected</para></summary>
  /// <remarks><para>An original IDL definition of <c>DeviceDisconnect</c> event was the following:  <c>HRESULT _WMPOCXEvents_DeviceDisconnectEventHandler (IWMPSyncDevice* pDevice)</c>;</para></remarks>
  // Occurs when a device is disconnected
  // IDL: HRESULT _WMPOCXEvents_DeviceDisconnectEventHandler (IWMPSyncDevice* pDevice);
  // VB6: Sub _WMPOCXEvents_DeviceDisconnectEventHandler (ByVal pDevice As IWMPSyncDevice)
  public delegate void _WMPOCXEvents_DeviceDisconnectEventHandler (IWMPSyncDevice pDevice);

  /// <summary><para>Delegate for handling <c>DeviceStatusChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device status changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>DeviceStatusChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_DeviceStatusChangeEventHandler (IWMPSyncDevice* pDevice, WMPDeviceStatus NewStatus)</c>;</para></remarks>
  // Occurs when a device status changes
  // IDL: HRESULT _WMPOCXEvents_DeviceStatusChangeEventHandler (IWMPSyncDevice* pDevice, WMPDeviceStatus NewStatus);
  // VB6: Sub _WMPOCXEvents_DeviceStatusChangeEventHandler (ByVal pDevice As IWMPSyncDevice, ByVal NewStatus As WMPDeviceStatus)
  public delegate void _WMPOCXEvents_DeviceStatusChangeEventHandler (IWMPSyncDevice pDevice, WMPDeviceStatus NewStatus);

  /// <summary><para>Delegate for handling <c>DeviceSyncStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device sync state changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>DeviceSyncStateChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_DeviceSyncStateChangeEventHandler (IWMPSyncDevice* pDevice, WMPSyncState NewState)</c>;</para></remarks>
  // Occurs when a device sync state changes
  // IDL: HRESULT _WMPOCXEvents_DeviceSyncStateChangeEventHandler (IWMPSyncDevice* pDevice, WMPSyncState NewState);
  // VB6: Sub _WMPOCXEvents_DeviceSyncStateChangeEventHandler (ByVal pDevice As IWMPSyncDevice, ByVal NewState As WMPSyncState)
  public delegate void _WMPOCXEvents_DeviceSyncStateChangeEventHandler (IWMPSyncDevice pDevice, WMPSyncState NewState);

  /// <summary><para>Delegate for handling <c>DeviceSyncError</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device's media has an error</para></summary>
  /// <remarks><para>An original IDL definition of <c>DeviceSyncError</c> event was the following:  <c>HRESULT _WMPOCXEvents_DeviceSyncErrorEventHandler (IWMPSyncDevice* pDevice, IDispatch* pMedia)</c>;</para></remarks>
  // Occurs when a device's media has an error
  // IDL: HRESULT _WMPOCXEvents_DeviceSyncErrorEventHandler (IWMPSyncDevice* pDevice, IDispatch* pMedia);
  // VB6: Sub _WMPOCXEvents_DeviceSyncErrorEventHandler (ByVal pDevice As IWMPSyncDevice, ByVal pMedia As IDispatch)
  public delegate void _WMPOCXEvents_DeviceSyncErrorEventHandler (IWMPSyncDevice pDevice, [MarshalAs(UnmanagedType.IDispatch)] object pMedia);

  /// <summary><para>Delegate for handling <c>CreatePartnershipComplete</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when createPartnership call completes</para></summary>
  /// <remarks><para>An original IDL definition of <c>CreatePartnershipComplete</c> event was the following:  <c>HRESULT _WMPOCXEvents_CreatePartnershipCompleteEventHandler (IWMPSyncDevice* pDevice, HRESULT hrResult)</c>;</para></remarks>
  // Occurs when createPartnership call completes
  // IDL: HRESULT _WMPOCXEvents_CreatePartnershipCompleteEventHandler (IWMPSyncDevice* pDevice, HRESULT hrResult);
  // VB6: Sub _WMPOCXEvents_CreatePartnershipCompleteEventHandler (ByVal pDevice As IWMPSyncDevice, ByVal hrResult As Long)
  public delegate void _WMPOCXEvents_CreatePartnershipCompleteEventHandler (IWMPSyncDevice pDevice, uint hrResult);

  /// <summary><para>Delegate for handling <c>DeviceEstimation</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when the sync estimation completed</para></summary>
  /// <remarks><para>An original IDL definition of <c>DeviceEstimation</c> event was the following:  <c>HRESULT _WMPOCXEvents_DeviceEstimationEventHandler (IWMPSyncDevice* pDevice, HRESULT hrResult, __int64 qwEstimatedUsedSpace, __int64 qwEstimatedSpace)</c>;</para></remarks>
  // Occurs when the sync estimation completed
  // IDL: HRESULT _WMPOCXEvents_DeviceEstimationEventHandler (IWMPSyncDevice* pDevice, HRESULT hrResult, __int64 qwEstimatedUsedSpace, __int64 qwEstimatedSpace);
  // VB6: Sub _WMPOCXEvents_DeviceEstimationEventHandler (ByVal pDevice As IWMPSyncDevice, ByVal hrResult As Long, ByVal qwEstimatedUsedSpace As Int64, ByVal qwEstimatedSpace As Int64)
  public delegate void _WMPOCXEvents_DeviceEstimationEventHandler (IWMPSyncDevice pDevice, uint hrResult, long qwEstimatedUsedSpace, long qwEstimatedSpace);

  /// <summary><para>Delegate for handling <c>CdromRipStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when ripping state changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>CdromRipStateChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_CdromRipStateChangeEventHandler (IWMPCdromRip* pCdromRip, WMPRipState wmprs)</c>;</para></remarks>
  // Occurs when ripping state changes
  // IDL: HRESULT _WMPOCXEvents_CdromRipStateChangeEventHandler (IWMPCdromRip* pCdromRip, WMPRipState wmprs);
  // VB6: Sub _WMPOCXEvents_CdromRipStateChangeEventHandler (ByVal pCdromRip As IWMPCdromRip, ByVal wmprs As WMPRipState)
  public delegate void _WMPOCXEvents_CdromRipStateChangeEventHandler (IWMPCdromRip pCdromRip, WMPRipState wmprs);

  /// <summary><para>Delegate for handling <c>CdromRipMediaError</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when an error happens while ripping a media</para></summary>
  /// <remarks><para>An original IDL definition of <c>CdromRipMediaError</c> event was the following:  <c>HRESULT _WMPOCXEvents_CdromRipMediaErrorEventHandler (IWMPCdromRip* pCdromRip, IDispatch* pMedia)</c>;</para></remarks>
  // Occurs when an error happens while ripping a media
  // IDL: HRESULT _WMPOCXEvents_CdromRipMediaErrorEventHandler (IWMPCdromRip* pCdromRip, IDispatch* pMedia);
  // VB6: Sub _WMPOCXEvents_CdromRipMediaErrorEventHandler (ByVal pCdromRip As IWMPCdromRip, ByVal pMedia As IDispatch)
  public delegate void _WMPOCXEvents_CdromRipMediaErrorEventHandler (IWMPCdromRip pCdromRip, [MarshalAs(UnmanagedType.IDispatch)] object pMedia);

  /// <summary><para>Delegate for handling <c>CdromBurnStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when burning state changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>CdromBurnStateChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_CdromBurnStateChangeEventHandler (IWMPCdromBurn* pCdromBurn, WMPBurnState wmpbs)</c>;</para></remarks>
  // Occurs when burning state changes
  // IDL: HRESULT _WMPOCXEvents_CdromBurnStateChangeEventHandler (IWMPCdromBurn* pCdromBurn, WMPBurnState wmpbs);
  // VB6: Sub _WMPOCXEvents_CdromBurnStateChangeEventHandler (ByVal pCdromBurn As IWMPCdromBurn, ByVal wmpbs As WMPBurnState)
  public delegate void _WMPOCXEvents_CdromBurnStateChangeEventHandler (IWMPCdromBurn pCdromBurn, WMPBurnState wmpbs);

  /// <summary><para>Delegate for handling <c>CdromBurnMediaError</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when an error happens while burning a media</para></summary>
  /// <remarks><para>An original IDL definition of <c>CdromBurnMediaError</c> event was the following:  <c>HRESULT _WMPOCXEvents_CdromBurnMediaErrorEventHandler (IWMPCdromBurn* pCdromBurn, IDispatch* pMedia)</c>;</para></remarks>
  // Occurs when an error happens while burning a media
  // IDL: HRESULT _WMPOCXEvents_CdromBurnMediaErrorEventHandler (IWMPCdromBurn* pCdromBurn, IDispatch* pMedia);
  // VB6: Sub _WMPOCXEvents_CdromBurnMediaErrorEventHandler (ByVal pCdromBurn As IWMPCdromBurn, ByVal pMedia As IDispatch)
  public delegate void _WMPOCXEvents_CdromBurnMediaErrorEventHandler (IWMPCdromBurn pCdromBurn, [MarshalAs(UnmanagedType.IDispatch)] object pMedia);

  /// <summary><para>Delegate for handling <c>CdromBurnError</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a generic error happens while burning</para></summary>
  /// <remarks><para>An original IDL definition of <c>CdromBurnError</c> event was the following:  <c>HRESULT _WMPOCXEvents_CdromBurnErrorEventHandler (IWMPCdromBurn* pCdromBurn, HRESULT hrError)</c>;</para></remarks>
  // Occurs when a generic error happens while burning
  // IDL: HRESULT _WMPOCXEvents_CdromBurnErrorEventHandler (IWMPCdromBurn* pCdromBurn, HRESULT hrError);
  // VB6: Sub _WMPOCXEvents_CdromBurnErrorEventHandler (ByVal pCdromBurn As IWMPCdromBurn, ByVal hrError As Long)
  public delegate void _WMPOCXEvents_CdromBurnErrorEventHandler (IWMPCdromBurn pCdromBurn, uint hrError);

  /// <summary><para>Delegate for handling <c>LibraryConnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a library is connected</para></summary>
  /// <remarks><para>An original IDL definition of <c>LibraryConnect</c> event was the following:  <c>HRESULT _WMPOCXEvents_LibraryConnectEventHandler (IWMPLibrary* pLibrary)</c>;</para></remarks>
  // Occurs when a library is connected
  // IDL: HRESULT _WMPOCXEvents_LibraryConnectEventHandler (IWMPLibrary* pLibrary);
  // VB6: Sub _WMPOCXEvents_LibraryConnectEventHandler (ByVal pLibrary As IWMPLibrary)
  public delegate void _WMPOCXEvents_LibraryConnectEventHandler (IWMPLibrary pLibrary);

  /// <summary><para>Delegate for handling <c>LibraryDisconnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a library is disconnected</para></summary>
  /// <remarks><para>An original IDL definition of <c>LibraryDisconnect</c> event was the following:  <c>HRESULT _WMPOCXEvents_LibraryDisconnectEventHandler (IWMPLibrary* pLibrary)</c>;</para></remarks>
  // Occurs when a library is disconnected
  // IDL: HRESULT _WMPOCXEvents_LibraryDisconnectEventHandler (IWMPLibrary* pLibrary);
  // VB6: Sub _WMPOCXEvents_LibraryDisconnectEventHandler (ByVal pLibrary As IWMPLibrary)
  public delegate void _WMPOCXEvents_LibraryDisconnectEventHandler (IWMPLibrary pLibrary);

  /// <summary><para>Delegate for handling <c>FolderScanStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a folder scan state changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>FolderScanStateChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_FolderScanStateChangeEventHandler (WMPFolderScanState wmpfss)</c>;</para></remarks>
  // Occurs when a folder scan state changes
  // IDL: HRESULT _WMPOCXEvents_FolderScanStateChangeEventHandler (WMPFolderScanState wmpfss);
  // VB6: Sub _WMPOCXEvents_FolderScanStateChangeEventHandler (ByVal wmpfss As WMPFolderScanState)
  public delegate void _WMPOCXEvents_FolderScanStateChangeEventHandler (WMPFolderScanState wmpfss);

  /// <summary><para>Delegate for handling <c>StringCollectionChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a string collection changes</para></summary>
  /// <remarks><para>An original IDL definition of <c>StringCollectionChange</c> event was the following:  <c>HRESULT _WMPOCXEvents_StringCollectionChangeEventHandler (IDispatch* pdispStringCollection, WMPStringCollectionChangeEventType change, long lCollectionIndex)</c>;</para></remarks>
  // Sent when a string collection changes
  // IDL: HRESULT _WMPOCXEvents_StringCollectionChangeEventHandler (IDispatch* pdispStringCollection, WMPStringCollectionChangeEventType change, long lCollectionIndex);
  // VB6: Sub _WMPOCXEvents_StringCollectionChangeEventHandler (ByVal pdispStringCollection As IDispatch, ByVal change As WMPStringCollectionChangeEventType, ByVal lCollectionIndex As Long)
  public delegate void _WMPOCXEvents_StringCollectionChangeEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pdispStringCollection, WMPStringCollectionChangeEventType change, int lCollectionIndex);

  /// <summary><para>Delegate for handling <c>MediaCollectionMediaAdded</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a media is added to the local library</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionMediaAdded</c> event was the following:  <c>HRESULT _WMPOCXEvents_MediaCollectionMediaAddedEventHandler (IDispatch* pdispMedia)</c>;</para></remarks>
  // Sent when a media is added to the local library
  // IDL: HRESULT _WMPOCXEvents_MediaCollectionMediaAddedEventHandler (IDispatch* pdispMedia);
  // VB6: Sub _WMPOCXEvents_MediaCollectionMediaAddedEventHandler (ByVal pdispMedia As IDispatch)
  public delegate void _WMPOCXEvents_MediaCollectionMediaAddedEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

  /// <summary><para>Delegate for handling <c>MediaCollectionMediaRemoved</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a media is removed from the local library</para></summary>
  /// <remarks><para>An original IDL definition of <c>MediaCollectionMediaRemoved</c> event was the following:  <c>HRESULT _WMPOCXEvents_MediaCollectionMediaRemovedEventHandler (IDispatch* pdispMedia)</c>;</para></remarks>
  // Sent when a media is removed from the local library
  // IDL: HRESULT _WMPOCXEvents_MediaCollectionMediaRemovedEventHandler (IDispatch* pdispMedia);
  // VB6: Sub _WMPOCXEvents_MediaCollectionMediaRemovedEventHandler (ByVal pdispMedia As IDispatch)
  public delegate void _WMPOCXEvents_MediaCollectionMediaRemovedEventHandler ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

  /// <summary><para>Declaration of events of <c>_WMPOCXEvents</c> source interface.  </para><para>_WMPOCXEvents: Public interface.</para></summary>
  // _WMPOCXEvents: Public interface.
  [ComEventInterface(typeof(_WMPOCXEvents),typeof(_WMPOCXEvents_EventProvider))]
  [ComVisible(false)]
  public interface _WMPOCXEvents_Event
  {
    /// <summary><para><c>OpenStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control changes OpenState</para></summary>
    event _WMPOCXEvents_OpenStateChangeEventHandler OpenStateChange;

    /// <summary><para><c>PlayStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control changes PlayState</para></summary>
    event _WMPOCXEvents_PlayStateChangeEventHandler PlayStateChange;

    /// <summary><para><c>AudioLanguageChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the current audio language has changed</para></summary>
    event _WMPOCXEvents_AudioLanguageChangeEventHandler AudioLanguageChange;

    /// <summary><para><c>StatusChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the status string changes</para></summary>
    event _WMPOCXEvents_StatusChangeEventHandler StatusChange;

    /// <summary><para><c>ScriptCommand</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a synchronized command or URL is received</para></summary>
    event _WMPOCXEvents_ScriptCommandEventHandler ScriptCommand;

    /// <summary><para><c>NewStream</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a new stream is started in a channel</para></summary>
    event _WMPOCXEvents_NewStreamEventHandler NewStream;

    /// <summary><para><c>Disconnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control is disconnected from the server</para></summary>
    event _WMPOCXEvents_DisconnectEventHandler Disconnect;

    /// <summary><para><c>Buffering</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control begins or ends buffering</para></summary>
    event _WMPOCXEvents_BufferingEventHandler Buffering;

    /// <summary><para><c>Error</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control has an error condition</para></summary>
    event _WMPOCXEvents_ErrorEventHandler Error;

    /// <summary><para><c>Warning</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the control encounters a problem</para></summary>
    event _WMPOCXEvents_WarningEventHandler Warning;

    /// <summary><para><c>EndOfStream</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the end of file is reached</para></summary>
    event _WMPOCXEvents_EndOfStreamEventHandler EndOfStream;

    /// <summary><para><c>PositionChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Indicates that the current position of the movie has changed</para></summary>
    event _WMPOCXEvents_PositionChangeEventHandler PositionChange;

    /// <summary><para><c>MarkerHit</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a marker is reached</para></summary>
    event _WMPOCXEvents_MarkerHitEventHandler MarkerHit;

    /// <summary><para><c>DurationUnitChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Indicates that the unit used to express duration and position has changed</para></summary>
    event _WMPOCXEvents_DurationUnitChangeEventHandler DurationUnitChange;

    /// <summary><para><c>CdromMediaChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Indicates that the CD ROM media has changed</para></summary>
    event _WMPOCXEvents_CdromMediaChangeEventHandler CdromMediaChange;

    /// <summary><para><c>PlaylistChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist changes</para></summary>
    event _WMPOCXEvents_PlaylistChangeEventHandler PlaylistChange;

    /// <summary><para><c>CurrentPlaylistChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the current playlist changes</para></summary>
    event _WMPOCXEvents_CurrentPlaylistChangeEventHandler CurrentPlaylistChange;

    /// <summary><para><c>CurrentPlaylistItemAvailable</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a current playlist item becomes available</para></summary>
    event _WMPOCXEvents_CurrentPlaylistItemAvailableEventHandler CurrentPlaylistItemAvailable;

    /// <summary><para><c>MediaChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a media object changes</para></summary>
    event _WMPOCXEvents_MediaChangeEventHandler MediaChange;

    /// <summary><para><c>CurrentMediaItemAvailable</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a current media item becomes available</para></summary>
    event _WMPOCXEvents_CurrentMediaItemAvailableEventHandler CurrentMediaItemAvailable;

    /// <summary><para><c>CurrentItemChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the item selection on the current playlist changes</para></summary>
    event _WMPOCXEvents_CurrentItemChangeEventHandler CurrentItemChange;

    /// <summary><para><c>MediaCollectionChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the media collection needs to be requeried</para></summary>
    event _WMPOCXEvents_MediaCollectionChangeEventHandler MediaCollectionChange;

    /// <summary><para><c>MediaCollectionAttributeStringAdded</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when an attribute string is added in the media collection</para></summary>
    event _WMPOCXEvents_MediaCollectionAttributeStringAddedEventHandler MediaCollectionAttributeStringAdded;

    /// <summary><para><c>MediaCollectionAttributeStringRemoved</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when an attribute string is removed from the media collection</para></summary>
    event _WMPOCXEvents_MediaCollectionAttributeStringRemovedEventHandler MediaCollectionAttributeStringRemoved;

    /// <summary><para><c>MediaCollectionAttributeStringChanged</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when an attribute string is changed in the media collection</para></summary>
    event _WMPOCXEvents_MediaCollectionAttributeStringChangedEventHandler MediaCollectionAttributeStringChanged;

    /// <summary><para><c>PlaylistCollectionChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when playlist collection needs to be requeried</para></summary>
    event _WMPOCXEvents_PlaylistCollectionChangeEventHandler PlaylistCollectionChange;

    /// <summary><para><c>PlaylistCollectionPlaylistAdded</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist is added to the playlist collection</para></summary>
    event _WMPOCXEvents_PlaylistCollectionPlaylistAddedEventHandler PlaylistCollectionPlaylistAdded;

    /// <summary><para><c>PlaylistCollectionPlaylistRemoved</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist is removed from the playlist collection</para></summary>
    event _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEventHandler PlaylistCollectionPlaylistRemoved;

    /// <summary><para><c>PlaylistCollectionPlaylistSetAsDeleted</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a playlist has been set or reset as deleted</para></summary>
    event _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler PlaylistCollectionPlaylistSetAsDeleted;

    /// <summary><para><c>ModeChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Playlist playback mode has changed</para></summary>
    event _WMPOCXEvents_ModeChangeEventHandler ModeChange;

    /// <summary><para><c>MediaError</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the media object has an error condition</para></summary>
    event _WMPOCXEvents_MediaErrorEventHandler MediaError;

    /// <summary><para><c>OpenPlaylistSwitch</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Current playlist switch with no open state change</para></summary>
    event _WMPOCXEvents_OpenPlaylistSwitchEventHandler OpenPlaylistSwitch;

    /// <summary><para><c>DomainChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Send a current domain</para></summary>
    event _WMPOCXEvents_DomainChangeEventHandler DomainChange;

    /// <summary><para><c>SwitchedToPlayerApplication</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when display switches to player application</para></summary>
    event _WMPOCXEvents_SwitchedToPlayerApplicationEventHandler SwitchedToPlayerApplication;

    /// <summary><para><c>SwitchedToControl</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when display switches to control</para></summary>
    event _WMPOCXEvents_SwitchedToControlEventHandler SwitchedToControl;

    /// <summary><para><c>PlayerDockedStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the player docks or undocks</para></summary>
    event _WMPOCXEvents_PlayerDockedStateChangeEventHandler PlayerDockedStateChange;

    /// <summary><para><c>PlayerReconnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when the OCX reconnects to the player</para></summary>
    event _WMPOCXEvents_PlayerReconnectEventHandler PlayerReconnect;

    /// <summary><para><c>Click</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a user clicks the mouse</para></summary>
    event _WMPOCXEvents_ClickEventHandler Click;

    /// <summary><para><c>DoubleClick</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a user double-clicks the mouse</para></summary>
    event _WMPOCXEvents_DoubleClickEventHandler DoubleClick;

    /// <summary><para><c>KeyDown</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a key is pressed</para></summary>
    event _WMPOCXEvents_KeyDownEventHandler KeyDown;

    /// <summary><para><c>KeyPress</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a key is pressed and released</para></summary>
    event _WMPOCXEvents_KeyPressEventHandler KeyPress;

    /// <summary><para><c>KeyUp</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a key is released</para></summary>
    event _WMPOCXEvents_KeyUpEventHandler KeyUp;

    /// <summary><para><c>MouseDown</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a mouse button is pressed</para></summary>
    event _WMPOCXEvents_MouseDownEventHandler MouseDown;

    /// <summary><para><c>MouseMove</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a mouse pointer is moved</para></summary>
    event _WMPOCXEvents_MouseMoveEventHandler MouseMove;

    /// <summary><para><c>MouseUp</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a mouse button is released</para></summary>
    event _WMPOCXEvents_MouseUpEventHandler MouseUp;

    /// <summary><para><c>DeviceConnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device is connected</para></summary>
    event _WMPOCXEvents_DeviceConnectEventHandler DeviceConnect;

    /// <summary><para><c>DeviceDisconnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device is disconnected</para></summary>
    event _WMPOCXEvents_DeviceDisconnectEventHandler DeviceDisconnect;

    /// <summary><para><c>DeviceStatusChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device status changes</para></summary>
    event _WMPOCXEvents_DeviceStatusChangeEventHandler DeviceStatusChange;

    /// <summary><para><c>DeviceSyncStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device sync state changes</para></summary>
    event _WMPOCXEvents_DeviceSyncStateChangeEventHandler DeviceSyncStateChange;

    /// <summary><para><c>DeviceSyncError</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a device's media has an error</para></summary>
    event _WMPOCXEvents_DeviceSyncErrorEventHandler DeviceSyncError;

    /// <summary><para><c>CreatePartnershipComplete</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when createPartnership call completes</para></summary>
    event _WMPOCXEvents_CreatePartnershipCompleteEventHandler CreatePartnershipComplete;

    /// <summary><para><c>DeviceEstimation</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when the sync estimation completed</para></summary>
    event _WMPOCXEvents_DeviceEstimationEventHandler DeviceEstimation;

    /// <summary><para><c>CdromRipStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when ripping state changes</para></summary>
    event _WMPOCXEvents_CdromRipStateChangeEventHandler CdromRipStateChange;

    /// <summary><para><c>CdromRipMediaError</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when an error happens while ripping a media</para></summary>
    event _WMPOCXEvents_CdromRipMediaErrorEventHandler CdromRipMediaError;

    /// <summary><para><c>CdromBurnStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when burning state changes</para></summary>
    event _WMPOCXEvents_CdromBurnStateChangeEventHandler CdromBurnStateChange;

    /// <summary><para><c>CdromBurnMediaError</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when an error happens while burning a media</para></summary>
    event _WMPOCXEvents_CdromBurnMediaErrorEventHandler CdromBurnMediaError;

    /// <summary><para><c>CdromBurnError</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a generic error happens while burning</para></summary>
    event _WMPOCXEvents_CdromBurnErrorEventHandler CdromBurnError;

    /// <summary><para><c>LibraryConnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a library is connected</para></summary>
    event _WMPOCXEvents_LibraryConnectEventHandler LibraryConnect;

    /// <summary><para><c>LibraryDisconnect</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a library is disconnected</para></summary>
    event _WMPOCXEvents_LibraryDisconnectEventHandler LibraryDisconnect;

    /// <summary><para><c>FolderScanStateChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Occurs when a folder scan state changes</para></summary>
    event _WMPOCXEvents_FolderScanStateChangeEventHandler FolderScanStateChange;

    /// <summary><para><c>StringCollectionChange</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a string collection changes</para></summary>
    event _WMPOCXEvents_StringCollectionChangeEventHandler StringCollectionChange;

    /// <summary><para><c>MediaCollectionMediaAdded</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a media is added to the local library</para></summary>
    event _WMPOCXEvents_MediaCollectionMediaAddedEventHandler MediaCollectionMediaAdded;

    /// <summary><para><c>MediaCollectionMediaRemoved</c> event of <c>_WMPOCXEvents</c> interface.  </para><para>Sent when a media is removed from the local library</para></summary>
    event _WMPOCXEvents_MediaCollectionMediaRemovedEventHandler MediaCollectionMediaRemoved;
  }

  [ClassInterface(ClassInterfaceType.None)]
  internal class _WMPOCXEvents_SinkHelper: _WMPOCXEvents
  {
    public int Cookie = 0;

    public event _WMPOCXEvents_OpenStateChangeEventHandler OpenStateChangeDelegate = null;
    public void Set_OpenStateChangeDelegate(_WMPOCXEvents_OpenStateChangeEventHandler deleg)
    {
      OpenStateChangeDelegate = deleg;
    }
    public bool Is_OpenStateChangeDelegate(_WMPOCXEvents_OpenStateChangeEventHandler deleg)
    {
      return (OpenStateChangeDelegate == deleg);
    }
    public void Clear_OpenStateChangeDelegate()
    {
      OpenStateChangeDelegate = null;
    }
    void _WMPOCXEvents.OpenStateChange (int NewState)
    {
      if (OpenStateChangeDelegate!=null)
        OpenStateChangeDelegate(NewState);
    }

    public event _WMPOCXEvents_PlayStateChangeEventHandler PlayStateChangeDelegate = null;
    public void Set_PlayStateChangeDelegate(_WMPOCXEvents_PlayStateChangeEventHandler deleg)
    {
      PlayStateChangeDelegate = deleg;
    }
    public bool Is_PlayStateChangeDelegate(_WMPOCXEvents_PlayStateChangeEventHandler deleg)
    {
      return (PlayStateChangeDelegate == deleg);
    }
    public void Clear_PlayStateChangeDelegate()
    {
      PlayStateChangeDelegate = null;
    }
    void _WMPOCXEvents.PlayStateChange (int NewState)
    {
      if (PlayStateChangeDelegate!=null)
        PlayStateChangeDelegate(NewState);
    }

    public event _WMPOCXEvents_AudioLanguageChangeEventHandler AudioLanguageChangeDelegate = null;
    public void Set_AudioLanguageChangeDelegate(_WMPOCXEvents_AudioLanguageChangeEventHandler deleg)
    {
      AudioLanguageChangeDelegate = deleg;
    }
    public bool Is_AudioLanguageChangeDelegate(_WMPOCXEvents_AudioLanguageChangeEventHandler deleg)
    {
      return (AudioLanguageChangeDelegate == deleg);
    }
    public void Clear_AudioLanguageChangeDelegate()
    {
      AudioLanguageChangeDelegate = null;
    }
    void _WMPOCXEvents.AudioLanguageChange (int LangID)
    {
      if (AudioLanguageChangeDelegate!=null)
        AudioLanguageChangeDelegate(LangID);
    }

    public event _WMPOCXEvents_StatusChangeEventHandler StatusChangeDelegate = null;
    public void Set_StatusChangeDelegate(_WMPOCXEvents_StatusChangeEventHandler deleg)
    {
      StatusChangeDelegate = deleg;
    }
    public bool Is_StatusChangeDelegate(_WMPOCXEvents_StatusChangeEventHandler deleg)
    {
      return (StatusChangeDelegate == deleg);
    }
    public void Clear_StatusChangeDelegate()
    {
      StatusChangeDelegate = null;
    }
    void _WMPOCXEvents.StatusChange ()
    {
      if (StatusChangeDelegate!=null)
        StatusChangeDelegate();
    }

    public event _WMPOCXEvents_ScriptCommandEventHandler ScriptCommandDelegate = null;
    public void Set_ScriptCommandDelegate(_WMPOCXEvents_ScriptCommandEventHandler deleg)
    {
      ScriptCommandDelegate = deleg;
    }
    public bool Is_ScriptCommandDelegate(_WMPOCXEvents_ScriptCommandEventHandler deleg)
    {
      return (ScriptCommandDelegate == deleg);
    }
    public void Clear_ScriptCommandDelegate()
    {
      ScriptCommandDelegate = null;
    }
    void _WMPOCXEvents.ScriptCommand (string scType, string Param)
    {
      if (ScriptCommandDelegate!=null)
        ScriptCommandDelegate(scType, Param);
    }

    public event _WMPOCXEvents_NewStreamEventHandler NewStreamDelegate = null;
    public void Set_NewStreamDelegate(_WMPOCXEvents_NewStreamEventHandler deleg)
    {
      NewStreamDelegate = deleg;
    }
    public bool Is_NewStreamDelegate(_WMPOCXEvents_NewStreamEventHandler deleg)
    {
      return (NewStreamDelegate == deleg);
    }
    public void Clear_NewStreamDelegate()
    {
      NewStreamDelegate = null;
    }
    void _WMPOCXEvents.NewStream ()
    {
      if (NewStreamDelegate!=null)
        NewStreamDelegate();
    }

    public event _WMPOCXEvents_DisconnectEventHandler DisconnectDelegate = null;
    public void Set_DisconnectDelegate(_WMPOCXEvents_DisconnectEventHandler deleg)
    {
      DisconnectDelegate = deleg;
    }
    public bool Is_DisconnectDelegate(_WMPOCXEvents_DisconnectEventHandler deleg)
    {
      return (DisconnectDelegate == deleg);
    }
    public void Clear_DisconnectDelegate()
    {
      DisconnectDelegate = null;
    }
    void _WMPOCXEvents.Disconnect (int Result)
    {
      if (DisconnectDelegate!=null)
        DisconnectDelegate(Result);
    }

    public event _WMPOCXEvents_BufferingEventHandler BufferingDelegate = null;
    public void Set_BufferingDelegate(_WMPOCXEvents_BufferingEventHandler deleg)
    {
      BufferingDelegate = deleg;
    }
    public bool Is_BufferingDelegate(_WMPOCXEvents_BufferingEventHandler deleg)
    {
      return (BufferingDelegate == deleg);
    }
    public void Clear_BufferingDelegate()
    {
      BufferingDelegate = null;
    }
    void _WMPOCXEvents.Buffering (bool Start)
    {
      if (BufferingDelegate!=null)
        BufferingDelegate(Start);
    }

    public event _WMPOCXEvents_ErrorEventHandler ErrorDelegate = null;
    public void Set_ErrorDelegate(_WMPOCXEvents_ErrorEventHandler deleg)
    {
      ErrorDelegate = deleg;
    }
    public bool Is_ErrorDelegate(_WMPOCXEvents_ErrorEventHandler deleg)
    {
      return (ErrorDelegate == deleg);
    }
    public void Clear_ErrorDelegate()
    {
      ErrorDelegate = null;
    }
    void _WMPOCXEvents.Error ()
    {
      if (ErrorDelegate!=null)
        ErrorDelegate();
    }

    public event _WMPOCXEvents_WarningEventHandler WarningDelegate = null;
    public void Set_WarningDelegate(_WMPOCXEvents_WarningEventHandler deleg)
    {
      WarningDelegate = deleg;
    }
    public bool Is_WarningDelegate(_WMPOCXEvents_WarningEventHandler deleg)
    {
      return (WarningDelegate == deleg);
    }
    public void Clear_WarningDelegate()
    {
      WarningDelegate = null;
    }
    void _WMPOCXEvents.Warning (int WarningType, int Param, string Description)
    {
      if (WarningDelegate!=null)
        WarningDelegate(WarningType, Param, Description);
    }

    public event _WMPOCXEvents_EndOfStreamEventHandler EndOfStreamDelegate = null;
    public void Set_EndOfStreamDelegate(_WMPOCXEvents_EndOfStreamEventHandler deleg)
    {
      EndOfStreamDelegate = deleg;
    }
    public bool Is_EndOfStreamDelegate(_WMPOCXEvents_EndOfStreamEventHandler deleg)
    {
      return (EndOfStreamDelegate == deleg);
    }
    public void Clear_EndOfStreamDelegate()
    {
      EndOfStreamDelegate = null;
    }
    void _WMPOCXEvents.EndOfStream (int Result)
    {
      if (EndOfStreamDelegate!=null)
        EndOfStreamDelegate(Result);
    }

    public event _WMPOCXEvents_PositionChangeEventHandler PositionChangeDelegate = null;
    public void Set_PositionChangeDelegate(_WMPOCXEvents_PositionChangeEventHandler deleg)
    {
      PositionChangeDelegate = deleg;
    }
    public bool Is_PositionChangeDelegate(_WMPOCXEvents_PositionChangeEventHandler deleg)
    {
      return (PositionChangeDelegate == deleg);
    }
    public void Clear_PositionChangeDelegate()
    {
      PositionChangeDelegate = null;
    }
    void _WMPOCXEvents.PositionChange (double oldPosition, double newPosition)
    {
      if (PositionChangeDelegate!=null)
        PositionChangeDelegate(oldPosition, newPosition);
    }

    public event _WMPOCXEvents_MarkerHitEventHandler MarkerHitDelegate = null;
    public void Set_MarkerHitDelegate(_WMPOCXEvents_MarkerHitEventHandler deleg)
    {
      MarkerHitDelegate = deleg;
    }
    public bool Is_MarkerHitDelegate(_WMPOCXEvents_MarkerHitEventHandler deleg)
    {
      return (MarkerHitDelegate == deleg);
    }
    public void Clear_MarkerHitDelegate()
    {
      MarkerHitDelegate = null;
    }
    void _WMPOCXEvents.MarkerHit (int MarkerNum)
    {
      if (MarkerHitDelegate!=null)
        MarkerHitDelegate(MarkerNum);
    }

    public event _WMPOCXEvents_DurationUnitChangeEventHandler DurationUnitChangeDelegate = null;
    public void Set_DurationUnitChangeDelegate(_WMPOCXEvents_DurationUnitChangeEventHandler deleg)
    {
      DurationUnitChangeDelegate = deleg;
    }
    public bool Is_DurationUnitChangeDelegate(_WMPOCXEvents_DurationUnitChangeEventHandler deleg)
    {
      return (DurationUnitChangeDelegate == deleg);
    }
    public void Clear_DurationUnitChangeDelegate()
    {
      DurationUnitChangeDelegate = null;
    }
    void _WMPOCXEvents.DurationUnitChange (int NewDurationUnit)
    {
      if (DurationUnitChangeDelegate!=null)
        DurationUnitChangeDelegate(NewDurationUnit);
    }

    public event _WMPOCXEvents_CdromMediaChangeEventHandler CdromMediaChangeDelegate = null;
    public void Set_CdromMediaChangeDelegate(_WMPOCXEvents_CdromMediaChangeEventHandler deleg)
    {
      CdromMediaChangeDelegate = deleg;
    }
    public bool Is_CdromMediaChangeDelegate(_WMPOCXEvents_CdromMediaChangeEventHandler deleg)
    {
      return (CdromMediaChangeDelegate == deleg);
    }
    public void Clear_CdromMediaChangeDelegate()
    {
      CdromMediaChangeDelegate = null;
    }
    void _WMPOCXEvents.CdromMediaChange (int CdromNum)
    {
      if (CdromMediaChangeDelegate!=null)
        CdromMediaChangeDelegate(CdromNum);
    }

    public event _WMPOCXEvents_PlaylistChangeEventHandler PlaylistChangeDelegate = null;
    public void Set_PlaylistChangeDelegate(_WMPOCXEvents_PlaylistChangeEventHandler deleg)
    {
      PlaylistChangeDelegate = deleg;
    }
    public bool Is_PlaylistChangeDelegate(_WMPOCXEvents_PlaylistChangeEventHandler deleg)
    {
      return (PlaylistChangeDelegate == deleg);
    }
    public void Clear_PlaylistChangeDelegate()
    {
      PlaylistChangeDelegate = null;
    }
    void _WMPOCXEvents.PlaylistChange (object Playlist, WMPPlaylistChangeEventType change)
    {
      if (PlaylistChangeDelegate!=null)
        PlaylistChangeDelegate(Playlist, change);
    }

    public event _WMPOCXEvents_CurrentPlaylistChangeEventHandler CurrentPlaylistChangeDelegate = null;
    public void Set_CurrentPlaylistChangeDelegate(_WMPOCXEvents_CurrentPlaylistChangeEventHandler deleg)
    {
      CurrentPlaylistChangeDelegate = deleg;
    }
    public bool Is_CurrentPlaylistChangeDelegate(_WMPOCXEvents_CurrentPlaylistChangeEventHandler deleg)
    {
      return (CurrentPlaylistChangeDelegate == deleg);
    }
    public void Clear_CurrentPlaylistChangeDelegate()
    {
      CurrentPlaylistChangeDelegate = null;
    }
    void _WMPOCXEvents.CurrentPlaylistChange (WMPPlaylistChangeEventType change)
    {
      if (CurrentPlaylistChangeDelegate!=null)
        CurrentPlaylistChangeDelegate(change);
    }

    public event _WMPOCXEvents_CurrentPlaylistItemAvailableEventHandler CurrentPlaylistItemAvailableDelegate = null;
    public void Set_CurrentPlaylistItemAvailableDelegate(_WMPOCXEvents_CurrentPlaylistItemAvailableEventHandler deleg)
    {
      CurrentPlaylistItemAvailableDelegate = deleg;
    }
    public bool Is_CurrentPlaylistItemAvailableDelegate(_WMPOCXEvents_CurrentPlaylistItemAvailableEventHandler deleg)
    {
      return (CurrentPlaylistItemAvailableDelegate == deleg);
    }
    public void Clear_CurrentPlaylistItemAvailableDelegate()
    {
      CurrentPlaylistItemAvailableDelegate = null;
    }
    void _WMPOCXEvents.CurrentPlaylistItemAvailable (string bstrItemName)
    {
      if (CurrentPlaylistItemAvailableDelegate!=null)
        CurrentPlaylistItemAvailableDelegate(bstrItemName);
    }

    public event _WMPOCXEvents_MediaChangeEventHandler MediaChangeDelegate = null;
    public void Set_MediaChangeDelegate(_WMPOCXEvents_MediaChangeEventHandler deleg)
    {
      MediaChangeDelegate = deleg;
    }
    public bool Is_MediaChangeDelegate(_WMPOCXEvents_MediaChangeEventHandler deleg)
    {
      return (MediaChangeDelegate == deleg);
    }
    public void Clear_MediaChangeDelegate()
    {
      MediaChangeDelegate = null;
    }
    void _WMPOCXEvents.MediaChange (object Item)
    {
      if (MediaChangeDelegate!=null)
        MediaChangeDelegate(Item);
    }

    public event _WMPOCXEvents_CurrentMediaItemAvailableEventHandler CurrentMediaItemAvailableDelegate = null;
    public void Set_CurrentMediaItemAvailableDelegate(_WMPOCXEvents_CurrentMediaItemAvailableEventHandler deleg)
    {
      CurrentMediaItemAvailableDelegate = deleg;
    }
    public bool Is_CurrentMediaItemAvailableDelegate(_WMPOCXEvents_CurrentMediaItemAvailableEventHandler deleg)
    {
      return (CurrentMediaItemAvailableDelegate == deleg);
    }
    public void Clear_CurrentMediaItemAvailableDelegate()
    {
      CurrentMediaItemAvailableDelegate = null;
    }
    void _WMPOCXEvents.CurrentMediaItemAvailable (string bstrItemName)
    {
      if (CurrentMediaItemAvailableDelegate!=null)
        CurrentMediaItemAvailableDelegate(bstrItemName);
    }

    public event _WMPOCXEvents_CurrentItemChangeEventHandler CurrentItemChangeDelegate = null;
    public void Set_CurrentItemChangeDelegate(_WMPOCXEvents_CurrentItemChangeEventHandler deleg)
    {
      CurrentItemChangeDelegate = deleg;
    }
    public bool Is_CurrentItemChangeDelegate(_WMPOCXEvents_CurrentItemChangeEventHandler deleg)
    {
      return (CurrentItemChangeDelegate == deleg);
    }
    public void Clear_CurrentItemChangeDelegate()
    {
      CurrentItemChangeDelegate = null;
    }
    void _WMPOCXEvents.CurrentItemChange (object pdispMedia)
    {
      if (CurrentItemChangeDelegate!=null)
        CurrentItemChangeDelegate(pdispMedia);
    }

    public event _WMPOCXEvents_MediaCollectionChangeEventHandler MediaCollectionChangeDelegate = null;
    public void Set_MediaCollectionChangeDelegate(_WMPOCXEvents_MediaCollectionChangeEventHandler deleg)
    {
      MediaCollectionChangeDelegate = deleg;
    }
    public bool Is_MediaCollectionChangeDelegate(_WMPOCXEvents_MediaCollectionChangeEventHandler deleg)
    {
      return (MediaCollectionChangeDelegate == deleg);
    }
    public void Clear_MediaCollectionChangeDelegate()
    {
      MediaCollectionChangeDelegate = null;
    }
    void _WMPOCXEvents.MediaCollectionChange ()
    {
      if (MediaCollectionChangeDelegate!=null)
        MediaCollectionChangeDelegate();
    }

    public event _WMPOCXEvents_MediaCollectionAttributeStringAddedEventHandler MediaCollectionAttributeStringAddedDelegate = null;
    public void Set_MediaCollectionAttributeStringAddedDelegate(_WMPOCXEvents_MediaCollectionAttributeStringAddedEventHandler deleg)
    {
      MediaCollectionAttributeStringAddedDelegate = deleg;
    }
    public bool Is_MediaCollectionAttributeStringAddedDelegate(_WMPOCXEvents_MediaCollectionAttributeStringAddedEventHandler deleg)
    {
      return (MediaCollectionAttributeStringAddedDelegate == deleg);
    }
    public void Clear_MediaCollectionAttributeStringAddedDelegate()
    {
      MediaCollectionAttributeStringAddedDelegate = null;
    }
    void _WMPOCXEvents.MediaCollectionAttributeStringAdded (string bstrAttribName, string bstrAttribVal)
    {
      if (MediaCollectionAttributeStringAddedDelegate!=null)
        MediaCollectionAttributeStringAddedDelegate(bstrAttribName, bstrAttribVal);
    }

    public event _WMPOCXEvents_MediaCollectionAttributeStringRemovedEventHandler MediaCollectionAttributeStringRemovedDelegate = null;
    public void Set_MediaCollectionAttributeStringRemovedDelegate(_WMPOCXEvents_MediaCollectionAttributeStringRemovedEventHandler deleg)
    {
      MediaCollectionAttributeStringRemovedDelegate = deleg;
    }
    public bool Is_MediaCollectionAttributeStringRemovedDelegate(_WMPOCXEvents_MediaCollectionAttributeStringRemovedEventHandler deleg)
    {
      return (MediaCollectionAttributeStringRemovedDelegate == deleg);
    }
    public void Clear_MediaCollectionAttributeStringRemovedDelegate()
    {
      MediaCollectionAttributeStringRemovedDelegate = null;
    }
    void _WMPOCXEvents.MediaCollectionAttributeStringRemoved (string bstrAttribName, string bstrAttribVal)
    {
      if (MediaCollectionAttributeStringRemovedDelegate!=null)
        MediaCollectionAttributeStringRemovedDelegate(bstrAttribName, bstrAttribVal);
    }

    public event _WMPOCXEvents_MediaCollectionAttributeStringChangedEventHandler MediaCollectionAttributeStringChangedDelegate = null;
    public void Set_MediaCollectionAttributeStringChangedDelegate(_WMPOCXEvents_MediaCollectionAttributeStringChangedEventHandler deleg)
    {
      MediaCollectionAttributeStringChangedDelegate = deleg;
    }
    public bool Is_MediaCollectionAttributeStringChangedDelegate(_WMPOCXEvents_MediaCollectionAttributeStringChangedEventHandler deleg)
    {
      return (MediaCollectionAttributeStringChangedDelegate == deleg);
    }
    public void Clear_MediaCollectionAttributeStringChangedDelegate()
    {
      MediaCollectionAttributeStringChangedDelegate = null;
    }
    void _WMPOCXEvents.MediaCollectionAttributeStringChanged (string bstrAttribName, string bstrOldAttribVal, string bstrNewAttribVal)
    {
      if (MediaCollectionAttributeStringChangedDelegate!=null)
        MediaCollectionAttributeStringChangedDelegate(bstrAttribName, bstrOldAttribVal, bstrNewAttribVal);
    }

    public event _WMPOCXEvents_PlaylistCollectionChangeEventHandler PlaylistCollectionChangeDelegate = null;
    public void Set_PlaylistCollectionChangeDelegate(_WMPOCXEvents_PlaylistCollectionChangeEventHandler deleg)
    {
      PlaylistCollectionChangeDelegate = deleg;
    }
    public bool Is_PlaylistCollectionChangeDelegate(_WMPOCXEvents_PlaylistCollectionChangeEventHandler deleg)
    {
      return (PlaylistCollectionChangeDelegate == deleg);
    }
    public void Clear_PlaylistCollectionChangeDelegate()
    {
      PlaylistCollectionChangeDelegate = null;
    }
    void _WMPOCXEvents.PlaylistCollectionChange ()
    {
      if (PlaylistCollectionChangeDelegate!=null)
        PlaylistCollectionChangeDelegate();
    }

    public event _WMPOCXEvents_PlaylistCollectionPlaylistAddedEventHandler PlaylistCollectionPlaylistAddedDelegate = null;
    public void Set_PlaylistCollectionPlaylistAddedDelegate(_WMPOCXEvents_PlaylistCollectionPlaylistAddedEventHandler deleg)
    {
      PlaylistCollectionPlaylistAddedDelegate = deleg;
    }
    public bool Is_PlaylistCollectionPlaylistAddedDelegate(_WMPOCXEvents_PlaylistCollectionPlaylistAddedEventHandler deleg)
    {
      return (PlaylistCollectionPlaylistAddedDelegate == deleg);
    }
    public void Clear_PlaylistCollectionPlaylistAddedDelegate()
    {
      PlaylistCollectionPlaylistAddedDelegate = null;
    }
    void _WMPOCXEvents.PlaylistCollectionPlaylistAdded (string bstrPlaylistName)
    {
      if (PlaylistCollectionPlaylistAddedDelegate!=null)
        PlaylistCollectionPlaylistAddedDelegate(bstrPlaylistName);
    }

    public event _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEventHandler PlaylistCollectionPlaylistRemovedDelegate = null;
    public void Set_PlaylistCollectionPlaylistRemovedDelegate(_WMPOCXEvents_PlaylistCollectionPlaylistRemovedEventHandler deleg)
    {
      PlaylistCollectionPlaylistRemovedDelegate = deleg;
    }
    public bool Is_PlaylistCollectionPlaylistRemovedDelegate(_WMPOCXEvents_PlaylistCollectionPlaylistRemovedEventHandler deleg)
    {
      return (PlaylistCollectionPlaylistRemovedDelegate == deleg);
    }
    public void Clear_PlaylistCollectionPlaylistRemovedDelegate()
    {
      PlaylistCollectionPlaylistRemovedDelegate = null;
    }
    void _WMPOCXEvents.PlaylistCollectionPlaylistRemoved (string bstrPlaylistName)
    {
      if (PlaylistCollectionPlaylistRemovedDelegate!=null)
        PlaylistCollectionPlaylistRemovedDelegate(bstrPlaylistName);
    }

    public event _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler PlaylistCollectionPlaylistSetAsDeletedDelegate = null;
    public void Set_PlaylistCollectionPlaylistSetAsDeletedDelegate(_WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler deleg)
    {
      PlaylistCollectionPlaylistSetAsDeletedDelegate = deleg;
    }
    public bool Is_PlaylistCollectionPlaylistSetAsDeletedDelegate(_WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler deleg)
    {
      return (PlaylistCollectionPlaylistSetAsDeletedDelegate == deleg);
    }
    public void Clear_PlaylistCollectionPlaylistSetAsDeletedDelegate()
    {
      PlaylistCollectionPlaylistSetAsDeletedDelegate = null;
    }
    void _WMPOCXEvents.PlaylistCollectionPlaylistSetAsDeleted (string bstrPlaylistName, bool varfIsDeleted)
    {
      if (PlaylistCollectionPlaylistSetAsDeletedDelegate!=null)
        PlaylistCollectionPlaylistSetAsDeletedDelegate(bstrPlaylistName, varfIsDeleted);
    }

    public event _WMPOCXEvents_ModeChangeEventHandler ModeChangeDelegate = null;
    public void Set_ModeChangeDelegate(_WMPOCXEvents_ModeChangeEventHandler deleg)
    {
      ModeChangeDelegate = deleg;
    }
    public bool Is_ModeChangeDelegate(_WMPOCXEvents_ModeChangeEventHandler deleg)
    {
      return (ModeChangeDelegate == deleg);
    }
    public void Clear_ModeChangeDelegate()
    {
      ModeChangeDelegate = null;
    }
    void _WMPOCXEvents.ModeChange (string ModeName, bool NewValue)
    {
      if (ModeChangeDelegate!=null)
        ModeChangeDelegate(ModeName, NewValue);
    }

    public event _WMPOCXEvents_MediaErrorEventHandler MediaErrorDelegate = null;
    public void Set_MediaErrorDelegate(_WMPOCXEvents_MediaErrorEventHandler deleg)
    {
      MediaErrorDelegate = deleg;
    }
    public bool Is_MediaErrorDelegate(_WMPOCXEvents_MediaErrorEventHandler deleg)
    {
      return (MediaErrorDelegate == deleg);
    }
    public void Clear_MediaErrorDelegate()
    {
      MediaErrorDelegate = null;
    }
    void _WMPOCXEvents.MediaError (object pMediaObject)
    {
      if (MediaErrorDelegate!=null)
        MediaErrorDelegate(pMediaObject);
    }

    public event _WMPOCXEvents_OpenPlaylistSwitchEventHandler OpenPlaylistSwitchDelegate = null;
    public void Set_OpenPlaylistSwitchDelegate(_WMPOCXEvents_OpenPlaylistSwitchEventHandler deleg)
    {
      OpenPlaylistSwitchDelegate = deleg;
    }
    public bool Is_OpenPlaylistSwitchDelegate(_WMPOCXEvents_OpenPlaylistSwitchEventHandler deleg)
    {
      return (OpenPlaylistSwitchDelegate == deleg);
    }
    public void Clear_OpenPlaylistSwitchDelegate()
    {
      OpenPlaylistSwitchDelegate = null;
    }
    void _WMPOCXEvents.OpenPlaylistSwitch (object pItem)
    {
      if (OpenPlaylistSwitchDelegate!=null)
        OpenPlaylistSwitchDelegate(pItem);
    }

    public event _WMPOCXEvents_DomainChangeEventHandler DomainChangeDelegate = null;
    public void Set_DomainChangeDelegate(_WMPOCXEvents_DomainChangeEventHandler deleg)
    {
      DomainChangeDelegate = deleg;
    }
    public bool Is_DomainChangeDelegate(_WMPOCXEvents_DomainChangeEventHandler deleg)
    {
      return (DomainChangeDelegate == deleg);
    }
    public void Clear_DomainChangeDelegate()
    {
      DomainChangeDelegate = null;
    }
    void _WMPOCXEvents.DomainChange (string strDomain)
    {
      if (DomainChangeDelegate!=null)
        DomainChangeDelegate(strDomain);
    }

    public event _WMPOCXEvents_SwitchedToPlayerApplicationEventHandler SwitchedToPlayerApplicationDelegate = null;
    public void Set_SwitchedToPlayerApplicationDelegate(_WMPOCXEvents_SwitchedToPlayerApplicationEventHandler deleg)
    {
      SwitchedToPlayerApplicationDelegate = deleg;
    }
    public bool Is_SwitchedToPlayerApplicationDelegate(_WMPOCXEvents_SwitchedToPlayerApplicationEventHandler deleg)
    {
      return (SwitchedToPlayerApplicationDelegate == deleg);
    }
    public void Clear_SwitchedToPlayerApplicationDelegate()
    {
      SwitchedToPlayerApplicationDelegate = null;
    }
    void _WMPOCXEvents.SwitchedToPlayerApplication ()
    {
      if (SwitchedToPlayerApplicationDelegate!=null)
        SwitchedToPlayerApplicationDelegate();
    }

    public event _WMPOCXEvents_SwitchedToControlEventHandler SwitchedToControlDelegate = null;
    public void Set_SwitchedToControlDelegate(_WMPOCXEvents_SwitchedToControlEventHandler deleg)
    {
      SwitchedToControlDelegate = deleg;
    }
    public bool Is_SwitchedToControlDelegate(_WMPOCXEvents_SwitchedToControlEventHandler deleg)
    {
      return (SwitchedToControlDelegate == deleg);
    }
    public void Clear_SwitchedToControlDelegate()
    {
      SwitchedToControlDelegate = null;
    }
    void _WMPOCXEvents.SwitchedToControl ()
    {
      if (SwitchedToControlDelegate!=null)
        SwitchedToControlDelegate();
    }

    public event _WMPOCXEvents_PlayerDockedStateChangeEventHandler PlayerDockedStateChangeDelegate = null;
    public void Set_PlayerDockedStateChangeDelegate(_WMPOCXEvents_PlayerDockedStateChangeEventHandler deleg)
    {
      PlayerDockedStateChangeDelegate = deleg;
    }
    public bool Is_PlayerDockedStateChangeDelegate(_WMPOCXEvents_PlayerDockedStateChangeEventHandler deleg)
    {
      return (PlayerDockedStateChangeDelegate == deleg);
    }
    public void Clear_PlayerDockedStateChangeDelegate()
    {
      PlayerDockedStateChangeDelegate = null;
    }
    void _WMPOCXEvents.PlayerDockedStateChange ()
    {
      if (PlayerDockedStateChangeDelegate!=null)
        PlayerDockedStateChangeDelegate();
    }

    public event _WMPOCXEvents_PlayerReconnectEventHandler PlayerReconnectDelegate = null;
    public void Set_PlayerReconnectDelegate(_WMPOCXEvents_PlayerReconnectEventHandler deleg)
    {
      PlayerReconnectDelegate = deleg;
    }
    public bool Is_PlayerReconnectDelegate(_WMPOCXEvents_PlayerReconnectEventHandler deleg)
    {
      return (PlayerReconnectDelegate == deleg);
    }
    public void Clear_PlayerReconnectDelegate()
    {
      PlayerReconnectDelegate = null;
    }
    void _WMPOCXEvents.PlayerReconnect ()
    {
      if (PlayerReconnectDelegate!=null)
        PlayerReconnectDelegate();
    }

    public event _WMPOCXEvents_ClickEventHandler ClickDelegate = null;
    public void Set_ClickDelegate(_WMPOCXEvents_ClickEventHandler deleg)
    {
      ClickDelegate = deleg;
    }
    public bool Is_ClickDelegate(_WMPOCXEvents_ClickEventHandler deleg)
    {
      return (ClickDelegate == deleg);
    }
    public void Clear_ClickDelegate()
    {
      ClickDelegate = null;
    }
    void _WMPOCXEvents.Click (short nButton, short nShiftState, int fX, int fY)
    {
      if (ClickDelegate!=null)
        ClickDelegate(nButton, nShiftState, fX, fY);
    }

    public event _WMPOCXEvents_DoubleClickEventHandler DoubleClickDelegate = null;
    public void Set_DoubleClickDelegate(_WMPOCXEvents_DoubleClickEventHandler deleg)
    {
      DoubleClickDelegate = deleg;
    }
    public bool Is_DoubleClickDelegate(_WMPOCXEvents_DoubleClickEventHandler deleg)
    {
      return (DoubleClickDelegate == deleg);
    }
    public void Clear_DoubleClickDelegate()
    {
      DoubleClickDelegate = null;
    }
    void _WMPOCXEvents.DoubleClick (short nButton, short nShiftState, int fX, int fY)
    {
      if (DoubleClickDelegate!=null)
        DoubleClickDelegate(nButton, nShiftState, fX, fY);
    }

    public event _WMPOCXEvents_KeyDownEventHandler KeyDownDelegate = null;
    public void Set_KeyDownDelegate(_WMPOCXEvents_KeyDownEventHandler deleg)
    {
      KeyDownDelegate = deleg;
    }
    public bool Is_KeyDownDelegate(_WMPOCXEvents_KeyDownEventHandler deleg)
    {
      return (KeyDownDelegate == deleg);
    }
    public void Clear_KeyDownDelegate()
    {
      KeyDownDelegate = null;
    }
    void _WMPOCXEvents.KeyDown (short nKeyCode, short nShiftState)
    {
      if (KeyDownDelegate!=null)
        KeyDownDelegate(nKeyCode, nShiftState);
    }

    public event _WMPOCXEvents_KeyPressEventHandler KeyPressDelegate = null;
    public void Set_KeyPressDelegate(_WMPOCXEvents_KeyPressEventHandler deleg)
    {
      KeyPressDelegate = deleg;
    }
    public bool Is_KeyPressDelegate(_WMPOCXEvents_KeyPressEventHandler deleg)
    {
      return (KeyPressDelegate == deleg);
    }
    public void Clear_KeyPressDelegate()
    {
      KeyPressDelegate = null;
    }
    void _WMPOCXEvents.KeyPress (short nKeyAscii)
    {
      if (KeyPressDelegate!=null)
        KeyPressDelegate(nKeyAscii);
    }

    public event _WMPOCXEvents_KeyUpEventHandler KeyUpDelegate = null;
    public void Set_KeyUpDelegate(_WMPOCXEvents_KeyUpEventHandler deleg)
    {
      KeyUpDelegate = deleg;
    }
    public bool Is_KeyUpDelegate(_WMPOCXEvents_KeyUpEventHandler deleg)
    {
      return (KeyUpDelegate == deleg);
    }
    public void Clear_KeyUpDelegate()
    {
      KeyUpDelegate = null;
    }
    void _WMPOCXEvents.KeyUp (short nKeyCode, short nShiftState)
    {
      if (KeyUpDelegate!=null)
        KeyUpDelegate(nKeyCode, nShiftState);
    }

    public event _WMPOCXEvents_MouseDownEventHandler MouseDownDelegate = null;
    public void Set_MouseDownDelegate(_WMPOCXEvents_MouseDownEventHandler deleg)
    {
      MouseDownDelegate = deleg;
    }
    public bool Is_MouseDownDelegate(_WMPOCXEvents_MouseDownEventHandler deleg)
    {
      return (MouseDownDelegate == deleg);
    }
    public void Clear_MouseDownDelegate()
    {
      MouseDownDelegate = null;
    }
    void _WMPOCXEvents.MouseDown (short nButton, short nShiftState, int fX, int fY)
    {
      if (MouseDownDelegate!=null)
        MouseDownDelegate(nButton, nShiftState, fX, fY);
    }

    public event _WMPOCXEvents_MouseMoveEventHandler MouseMoveDelegate = null;
    public void Set_MouseMoveDelegate(_WMPOCXEvents_MouseMoveEventHandler deleg)
    {
      MouseMoveDelegate = deleg;
    }
    public bool Is_MouseMoveDelegate(_WMPOCXEvents_MouseMoveEventHandler deleg)
    {
      return (MouseMoveDelegate == deleg);
    }
    public void Clear_MouseMoveDelegate()
    {
      MouseMoveDelegate = null;
    }
    void _WMPOCXEvents.MouseMove (short nButton, short nShiftState, int fX, int fY)
    {
      if (MouseMoveDelegate!=null)
        MouseMoveDelegate(nButton, nShiftState, fX, fY);
    }

    public event _WMPOCXEvents_MouseUpEventHandler MouseUpDelegate = null;
    public void Set_MouseUpDelegate(_WMPOCXEvents_MouseUpEventHandler deleg)
    {
      MouseUpDelegate = deleg;
    }
    public bool Is_MouseUpDelegate(_WMPOCXEvents_MouseUpEventHandler deleg)
    {
      return (MouseUpDelegate == deleg);
    }
    public void Clear_MouseUpDelegate()
    {
      MouseUpDelegate = null;
    }
    void _WMPOCXEvents.MouseUp (short nButton, short nShiftState, int fX, int fY)
    {
      if (MouseUpDelegate!=null)
        MouseUpDelegate(nButton, nShiftState, fX, fY);
    }

    public event _WMPOCXEvents_DeviceConnectEventHandler DeviceConnectDelegate = null;
    public void Set_DeviceConnectDelegate(_WMPOCXEvents_DeviceConnectEventHandler deleg)
    {
      DeviceConnectDelegate = deleg;
    }
    public bool Is_DeviceConnectDelegate(_WMPOCXEvents_DeviceConnectEventHandler deleg)
    {
      return (DeviceConnectDelegate == deleg);
    }
    public void Clear_DeviceConnectDelegate()
    {
      DeviceConnectDelegate = null;
    }
    void _WMPOCXEvents.DeviceConnect (IWMPSyncDevice pDevice)
    {
      if (DeviceConnectDelegate!=null)
        DeviceConnectDelegate(pDevice);
    }

    public event _WMPOCXEvents_DeviceDisconnectEventHandler DeviceDisconnectDelegate = null;
    public void Set_DeviceDisconnectDelegate(_WMPOCXEvents_DeviceDisconnectEventHandler deleg)
    {
      DeviceDisconnectDelegate = deleg;
    }
    public bool Is_DeviceDisconnectDelegate(_WMPOCXEvents_DeviceDisconnectEventHandler deleg)
    {
      return (DeviceDisconnectDelegate == deleg);
    }
    public void Clear_DeviceDisconnectDelegate()
    {
      DeviceDisconnectDelegate = null;
    }
    void _WMPOCXEvents.DeviceDisconnect (IWMPSyncDevice pDevice)
    {
      if (DeviceDisconnectDelegate!=null)
        DeviceDisconnectDelegate(pDevice);
    }

    public event _WMPOCXEvents_DeviceStatusChangeEventHandler DeviceStatusChangeDelegate = null;
    public void Set_DeviceStatusChangeDelegate(_WMPOCXEvents_DeviceStatusChangeEventHandler deleg)
    {
      DeviceStatusChangeDelegate = deleg;
    }
    public bool Is_DeviceStatusChangeDelegate(_WMPOCXEvents_DeviceStatusChangeEventHandler deleg)
    {
      return (DeviceStatusChangeDelegate == deleg);
    }
    public void Clear_DeviceStatusChangeDelegate()
    {
      DeviceStatusChangeDelegate = null;
    }
    void _WMPOCXEvents.DeviceStatusChange (IWMPSyncDevice pDevice, WMPDeviceStatus NewStatus)
    {
      if (DeviceStatusChangeDelegate!=null)
        DeviceStatusChangeDelegate(pDevice, NewStatus);
    }

    public event _WMPOCXEvents_DeviceSyncStateChangeEventHandler DeviceSyncStateChangeDelegate = null;
    public void Set_DeviceSyncStateChangeDelegate(_WMPOCXEvents_DeviceSyncStateChangeEventHandler deleg)
    {
      DeviceSyncStateChangeDelegate = deleg;
    }
    public bool Is_DeviceSyncStateChangeDelegate(_WMPOCXEvents_DeviceSyncStateChangeEventHandler deleg)
    {
      return (DeviceSyncStateChangeDelegate == deleg);
    }
    public void Clear_DeviceSyncStateChangeDelegate()
    {
      DeviceSyncStateChangeDelegate = null;
    }
    void _WMPOCXEvents.DeviceSyncStateChange (IWMPSyncDevice pDevice, WMPSyncState NewState)
    {
      if (DeviceSyncStateChangeDelegate!=null)
        DeviceSyncStateChangeDelegate(pDevice, NewState);
    }

    public event _WMPOCXEvents_DeviceSyncErrorEventHandler DeviceSyncErrorDelegate = null;
    public void Set_DeviceSyncErrorDelegate(_WMPOCXEvents_DeviceSyncErrorEventHandler deleg)
    {
      DeviceSyncErrorDelegate = deleg;
    }
    public bool Is_DeviceSyncErrorDelegate(_WMPOCXEvents_DeviceSyncErrorEventHandler deleg)
    {
      return (DeviceSyncErrorDelegate == deleg);
    }
    public void Clear_DeviceSyncErrorDelegate()
    {
      DeviceSyncErrorDelegate = null;
    }
    void _WMPOCXEvents.DeviceSyncError (IWMPSyncDevice pDevice, object pMedia)
    {
      if (DeviceSyncErrorDelegate!=null)
        DeviceSyncErrorDelegate(pDevice, pMedia);
    }

    public event _WMPOCXEvents_CreatePartnershipCompleteEventHandler CreatePartnershipCompleteDelegate = null;
    public void Set_CreatePartnershipCompleteDelegate(_WMPOCXEvents_CreatePartnershipCompleteEventHandler deleg)
    {
      CreatePartnershipCompleteDelegate = deleg;
    }
    public bool Is_CreatePartnershipCompleteDelegate(_WMPOCXEvents_CreatePartnershipCompleteEventHandler deleg)
    {
      return (CreatePartnershipCompleteDelegate == deleg);
    }
    public void Clear_CreatePartnershipCompleteDelegate()
    {
      CreatePartnershipCompleteDelegate = null;
    }
    void _WMPOCXEvents.CreatePartnershipComplete (IWMPSyncDevice pDevice, uint hrResult)
    {
      if (CreatePartnershipCompleteDelegate!=null)
        CreatePartnershipCompleteDelegate(pDevice, hrResult);
    }

    public event _WMPOCXEvents_DeviceEstimationEventHandler DeviceEstimationDelegate = null;
    public void Set_DeviceEstimationDelegate(_WMPOCXEvents_DeviceEstimationEventHandler deleg)
    {
      DeviceEstimationDelegate = deleg;
    }
    public bool Is_DeviceEstimationDelegate(_WMPOCXEvents_DeviceEstimationEventHandler deleg)
    {
      return (DeviceEstimationDelegate == deleg);
    }
    public void Clear_DeviceEstimationDelegate()
    {
      DeviceEstimationDelegate = null;
    }
    void _WMPOCXEvents.DeviceEstimation (IWMPSyncDevice pDevice, uint hrResult, long qwEstimatedUsedSpace, long qwEstimatedSpace)
    {
      if (DeviceEstimationDelegate!=null)
        DeviceEstimationDelegate(pDevice, hrResult, qwEstimatedUsedSpace, qwEstimatedSpace);
    }

    public event _WMPOCXEvents_CdromRipStateChangeEventHandler CdromRipStateChangeDelegate = null;
    public void Set_CdromRipStateChangeDelegate(_WMPOCXEvents_CdromRipStateChangeEventHandler deleg)
    {
      CdromRipStateChangeDelegate = deleg;
    }
    public bool Is_CdromRipStateChangeDelegate(_WMPOCXEvents_CdromRipStateChangeEventHandler deleg)
    {
      return (CdromRipStateChangeDelegate == deleg);
    }
    public void Clear_CdromRipStateChangeDelegate()
    {
      CdromRipStateChangeDelegate = null;
    }
    void _WMPOCXEvents.CdromRipStateChange (IWMPCdromRip pCdromRip, WMPRipState wmprs)
    {
      if (CdromRipStateChangeDelegate!=null)
        CdromRipStateChangeDelegate(pCdromRip, wmprs);
    }

    public event _WMPOCXEvents_CdromRipMediaErrorEventHandler CdromRipMediaErrorDelegate = null;
    public void Set_CdromRipMediaErrorDelegate(_WMPOCXEvents_CdromRipMediaErrorEventHandler deleg)
    {
      CdromRipMediaErrorDelegate = deleg;
    }
    public bool Is_CdromRipMediaErrorDelegate(_WMPOCXEvents_CdromRipMediaErrorEventHandler deleg)
    {
      return (CdromRipMediaErrorDelegate == deleg);
    }
    public void Clear_CdromRipMediaErrorDelegate()
    {
      CdromRipMediaErrorDelegate = null;
    }
    void _WMPOCXEvents.CdromRipMediaError (IWMPCdromRip pCdromRip, object pMedia)
    {
      if (CdromRipMediaErrorDelegate!=null)
        CdromRipMediaErrorDelegate(pCdromRip, pMedia);
    }

    public event _WMPOCXEvents_CdromBurnStateChangeEventHandler CdromBurnStateChangeDelegate = null;
    public void Set_CdromBurnStateChangeDelegate(_WMPOCXEvents_CdromBurnStateChangeEventHandler deleg)
    {
      CdromBurnStateChangeDelegate = deleg;
    }
    public bool Is_CdromBurnStateChangeDelegate(_WMPOCXEvents_CdromBurnStateChangeEventHandler deleg)
    {
      return (CdromBurnStateChangeDelegate == deleg);
    }
    public void Clear_CdromBurnStateChangeDelegate()
    {
      CdromBurnStateChangeDelegate = null;
    }
    void _WMPOCXEvents.CdromBurnStateChange (IWMPCdromBurn pCdromBurn, WMPBurnState wmpbs)
    {
      if (CdromBurnStateChangeDelegate!=null)
        CdromBurnStateChangeDelegate(pCdromBurn, wmpbs);
    }

    public event _WMPOCXEvents_CdromBurnMediaErrorEventHandler CdromBurnMediaErrorDelegate = null;
    public void Set_CdromBurnMediaErrorDelegate(_WMPOCXEvents_CdromBurnMediaErrorEventHandler deleg)
    {
      CdromBurnMediaErrorDelegate = deleg;
    }
    public bool Is_CdromBurnMediaErrorDelegate(_WMPOCXEvents_CdromBurnMediaErrorEventHandler deleg)
    {
      return (CdromBurnMediaErrorDelegate == deleg);
    }
    public void Clear_CdromBurnMediaErrorDelegate()
    {
      CdromBurnMediaErrorDelegate = null;
    }
    void _WMPOCXEvents.CdromBurnMediaError (IWMPCdromBurn pCdromBurn, object pMedia)
    {
      if (CdromBurnMediaErrorDelegate!=null)
        CdromBurnMediaErrorDelegate(pCdromBurn, pMedia);
    }

    public event _WMPOCXEvents_CdromBurnErrorEventHandler CdromBurnErrorDelegate = null;
    public void Set_CdromBurnErrorDelegate(_WMPOCXEvents_CdromBurnErrorEventHandler deleg)
    {
      CdromBurnErrorDelegate = deleg;
    }
    public bool Is_CdromBurnErrorDelegate(_WMPOCXEvents_CdromBurnErrorEventHandler deleg)
    {
      return (CdromBurnErrorDelegate == deleg);
    }
    public void Clear_CdromBurnErrorDelegate()
    {
      CdromBurnErrorDelegate = null;
    }
    void _WMPOCXEvents.CdromBurnError (IWMPCdromBurn pCdromBurn, uint hrError)
    {
      if (CdromBurnErrorDelegate!=null)
        CdromBurnErrorDelegate(pCdromBurn, hrError);
    }

    public event _WMPOCXEvents_LibraryConnectEventHandler LibraryConnectDelegate = null;
    public void Set_LibraryConnectDelegate(_WMPOCXEvents_LibraryConnectEventHandler deleg)
    {
      LibraryConnectDelegate = deleg;
    }
    public bool Is_LibraryConnectDelegate(_WMPOCXEvents_LibraryConnectEventHandler deleg)
    {
      return (LibraryConnectDelegate == deleg);
    }
    public void Clear_LibraryConnectDelegate()
    {
      LibraryConnectDelegate = null;
    }
    void _WMPOCXEvents.LibraryConnect (IWMPLibrary pLibrary)
    {
      if (LibraryConnectDelegate!=null)
        LibraryConnectDelegate(pLibrary);
    }

    public event _WMPOCXEvents_LibraryDisconnectEventHandler LibraryDisconnectDelegate = null;
    public void Set_LibraryDisconnectDelegate(_WMPOCXEvents_LibraryDisconnectEventHandler deleg)
    {
      LibraryDisconnectDelegate = deleg;
    }
    public bool Is_LibraryDisconnectDelegate(_WMPOCXEvents_LibraryDisconnectEventHandler deleg)
    {
      return (LibraryDisconnectDelegate == deleg);
    }
    public void Clear_LibraryDisconnectDelegate()
    {
      LibraryDisconnectDelegate = null;
    }
    void _WMPOCXEvents.LibraryDisconnect (IWMPLibrary pLibrary)
    {
      if (LibraryDisconnectDelegate!=null)
        LibraryDisconnectDelegate(pLibrary);
    }

    public event _WMPOCXEvents_FolderScanStateChangeEventHandler FolderScanStateChangeDelegate = null;
    public void Set_FolderScanStateChangeDelegate(_WMPOCXEvents_FolderScanStateChangeEventHandler deleg)
    {
      FolderScanStateChangeDelegate = deleg;
    }
    public bool Is_FolderScanStateChangeDelegate(_WMPOCXEvents_FolderScanStateChangeEventHandler deleg)
    {
      return (FolderScanStateChangeDelegate == deleg);
    }
    public void Clear_FolderScanStateChangeDelegate()
    {
      FolderScanStateChangeDelegate = null;
    }
    void _WMPOCXEvents.FolderScanStateChange (WMPFolderScanState wmpfss)
    {
      if (FolderScanStateChangeDelegate!=null)
        FolderScanStateChangeDelegate(wmpfss);
    }

    public event _WMPOCXEvents_StringCollectionChangeEventHandler StringCollectionChangeDelegate = null;
    public void Set_StringCollectionChangeDelegate(_WMPOCXEvents_StringCollectionChangeEventHandler deleg)
    {
      StringCollectionChangeDelegate = deleg;
    }
    public bool Is_StringCollectionChangeDelegate(_WMPOCXEvents_StringCollectionChangeEventHandler deleg)
    {
      return (StringCollectionChangeDelegate == deleg);
    }
    public void Clear_StringCollectionChangeDelegate()
    {
      StringCollectionChangeDelegate = null;
    }
    void _WMPOCXEvents.StringCollectionChange (object pdispStringCollection, WMPStringCollectionChangeEventType change, int lCollectionIndex)
    {
      if (StringCollectionChangeDelegate!=null)
        StringCollectionChangeDelegate(pdispStringCollection, change, lCollectionIndex);
    }

    public event _WMPOCXEvents_MediaCollectionMediaAddedEventHandler MediaCollectionMediaAddedDelegate = null;
    public void Set_MediaCollectionMediaAddedDelegate(_WMPOCXEvents_MediaCollectionMediaAddedEventHandler deleg)
    {
      MediaCollectionMediaAddedDelegate = deleg;
    }
    public bool Is_MediaCollectionMediaAddedDelegate(_WMPOCXEvents_MediaCollectionMediaAddedEventHandler deleg)
    {
      return (MediaCollectionMediaAddedDelegate == deleg);
    }
    public void Clear_MediaCollectionMediaAddedDelegate()
    {
      MediaCollectionMediaAddedDelegate = null;
    }
    void _WMPOCXEvents.MediaCollectionMediaAdded (object pdispMedia)
    {
      if (MediaCollectionMediaAddedDelegate!=null)
        MediaCollectionMediaAddedDelegate(pdispMedia);
    }

    public event _WMPOCXEvents_MediaCollectionMediaRemovedEventHandler MediaCollectionMediaRemovedDelegate = null;
    public void Set_MediaCollectionMediaRemovedDelegate(_WMPOCXEvents_MediaCollectionMediaRemovedEventHandler deleg)
    {
      MediaCollectionMediaRemovedDelegate = deleg;
    }
    public bool Is_MediaCollectionMediaRemovedDelegate(_WMPOCXEvents_MediaCollectionMediaRemovedEventHandler deleg)
    {
      return (MediaCollectionMediaRemovedDelegate == deleg);
    }
    public void Clear_MediaCollectionMediaRemovedDelegate()
    {
      MediaCollectionMediaRemovedDelegate = null;
    }
    void _WMPOCXEvents.MediaCollectionMediaRemoved (object pdispMedia)
    {
      if (MediaCollectionMediaRemovedDelegate!=null)
        MediaCollectionMediaRemovedDelegate(pdispMedia);
    }
  }

  internal class _WMPOCXEvents_EventProvider: IDisposable, _WMPOCXEvents_Event
  {
    UCOMIConnectionPointContainer ConnectionPointContainer;
    UCOMIConnectionPoint ConnectionPoint;
    _WMPOCXEvents_SinkHelper EventSinkHelper;
    int ConnectionCount;

    // Constructor: remember ConnectionPointContainer
    _WMPOCXEvents_EventProvider(object CPContainer) : base()
    {
      ConnectionPointContainer = (UCOMIConnectionPointContainer)CPContainer;
    }

    // Force disconnection from ActiveX event source
    ~_WMPOCXEvents_EventProvider()
    {
      Disconnect();
      ConnectionPointContainer = null;
    }

    // Aletnative to destructor
    void IDisposable.Dispose()
    {
      Disconnect();
      ConnectionPointContainer = null;
      System.GC.SuppressFinalize(this);
    }

    // Connect to ActiveX event source
    void Connect()
    {
      if (ConnectionPoint == null)
      {
        ConnectionCount = 0;
        Guid g = new Guid("6BF52A51-394A-11D3-B153-00C04F79FAA6");
        ConnectionPointContainer.FindConnectionPoint(ref g, out ConnectionPoint);
        EventSinkHelper = new _WMPOCXEvents_SinkHelper();
        ConnectionPoint.Advise(EventSinkHelper, out EventSinkHelper.Cookie);
      }
    }

    // Disconnect from ActiveX event source
    void Disconnect()
    {
      System.Threading.Monitor.Enter(this);
      try {
        if (EventSinkHelper != null)
          ConnectionPoint.Unadvise(EventSinkHelper.Cookie);
        ConnectionPoint = null;
        EventSinkHelper = null;
      } catch { }
      System.Threading.Monitor.Exit(this);
    }

    // If no event handler present then disconnect from ActiveX event source
    void CheckDisconnect()
    {
      ConnectionCount--;
      if (ConnectionCount <= 0)
        Disconnect();
    }

    event _WMPOCXEvents_OpenStateChangeEventHandler _WMPOCXEvents_Event.OpenStateChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.OpenStateChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.OpenStateChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_PlayStateChangeEventHandler _WMPOCXEvents_Event.PlayStateChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlayStateChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlayStateChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_AudioLanguageChangeEventHandler _WMPOCXEvents_Event.AudioLanguageChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.AudioLanguageChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.AudioLanguageChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_StatusChangeEventHandler _WMPOCXEvents_Event.StatusChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.StatusChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.StatusChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_ScriptCommandEventHandler _WMPOCXEvents_Event.ScriptCommand
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ScriptCommandDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ScriptCommandDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_NewStreamEventHandler _WMPOCXEvents_Event.NewStream
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.NewStreamDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.NewStreamDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_DisconnectEventHandler _WMPOCXEvents_Event.Disconnect
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DisconnectDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DisconnectDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_BufferingEventHandler _WMPOCXEvents_Event.Buffering
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.BufferingDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.BufferingDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_ErrorEventHandler _WMPOCXEvents_Event.Error
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ErrorDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ErrorDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_WarningEventHandler _WMPOCXEvents_Event.Warning
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.WarningDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.WarningDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_EndOfStreamEventHandler _WMPOCXEvents_Event.EndOfStream
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.EndOfStreamDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.EndOfStreamDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_PositionChangeEventHandler _WMPOCXEvents_Event.PositionChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PositionChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PositionChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MarkerHitEventHandler _WMPOCXEvents_Event.MarkerHit
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MarkerHitDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MarkerHitDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_DurationUnitChangeEventHandler _WMPOCXEvents_Event.DurationUnitChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DurationUnitChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DurationUnitChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_CdromMediaChangeEventHandler _WMPOCXEvents_Event.CdromMediaChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CdromMediaChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CdromMediaChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_PlaylistChangeEventHandler _WMPOCXEvents_Event.PlaylistChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlaylistChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlaylistChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_CurrentPlaylistChangeEventHandler _WMPOCXEvents_Event.CurrentPlaylistChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CurrentPlaylistChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CurrentPlaylistChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_CurrentPlaylistItemAvailableEventHandler _WMPOCXEvents_Event.CurrentPlaylistItemAvailable
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CurrentPlaylistItemAvailableDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CurrentPlaylistItemAvailableDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MediaChangeEventHandler _WMPOCXEvents_Event.MediaChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_CurrentMediaItemAvailableEventHandler _WMPOCXEvents_Event.CurrentMediaItemAvailable
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CurrentMediaItemAvailableDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CurrentMediaItemAvailableDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_CurrentItemChangeEventHandler _WMPOCXEvents_Event.CurrentItemChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CurrentItemChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CurrentItemChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MediaCollectionChangeEventHandler _WMPOCXEvents_Event.MediaCollectionChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MediaCollectionAttributeStringAddedEventHandler _WMPOCXEvents_Event.MediaCollectionAttributeStringAdded
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionAttributeStringAddedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionAttributeStringAddedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MediaCollectionAttributeStringRemovedEventHandler _WMPOCXEvents_Event.MediaCollectionAttributeStringRemoved
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionAttributeStringRemovedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionAttributeStringRemovedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MediaCollectionAttributeStringChangedEventHandler _WMPOCXEvents_Event.MediaCollectionAttributeStringChanged
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionAttributeStringChangedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionAttributeStringChangedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_PlaylistCollectionChangeEventHandler _WMPOCXEvents_Event.PlaylistCollectionChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlaylistCollectionChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlaylistCollectionChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_PlaylistCollectionPlaylistAddedEventHandler _WMPOCXEvents_Event.PlaylistCollectionPlaylistAdded
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlaylistCollectionPlaylistAddedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlaylistCollectionPlaylistAddedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_PlaylistCollectionPlaylistRemovedEventHandler _WMPOCXEvents_Event.PlaylistCollectionPlaylistRemoved
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlaylistCollectionPlaylistRemovedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlaylistCollectionPlaylistRemovedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_PlaylistCollectionPlaylistSetAsDeletedEventHandler _WMPOCXEvents_Event.PlaylistCollectionPlaylistSetAsDeleted
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlaylistCollectionPlaylistSetAsDeletedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlaylistCollectionPlaylistSetAsDeletedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_ModeChangeEventHandler _WMPOCXEvents_Event.ModeChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ModeChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ModeChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MediaErrorEventHandler _WMPOCXEvents_Event.MediaError
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaErrorDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaErrorDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_OpenPlaylistSwitchEventHandler _WMPOCXEvents_Event.OpenPlaylistSwitch
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.OpenPlaylistSwitchDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.OpenPlaylistSwitchDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_DomainChangeEventHandler _WMPOCXEvents_Event.DomainChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DomainChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DomainChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_SwitchedToPlayerApplicationEventHandler _WMPOCXEvents_Event.SwitchedToPlayerApplication
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.SwitchedToPlayerApplicationDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.SwitchedToPlayerApplicationDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_SwitchedToControlEventHandler _WMPOCXEvents_Event.SwitchedToControl
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.SwitchedToControlDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.SwitchedToControlDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_PlayerDockedStateChangeEventHandler _WMPOCXEvents_Event.PlayerDockedStateChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlayerDockedStateChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlayerDockedStateChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_PlayerReconnectEventHandler _WMPOCXEvents_Event.PlayerReconnect
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.PlayerReconnectDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.PlayerReconnectDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_ClickEventHandler _WMPOCXEvents_Event.Click
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ClickDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ClickDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_DoubleClickEventHandler _WMPOCXEvents_Event.DoubleClick
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DoubleClickDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DoubleClickDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_KeyDownEventHandler _WMPOCXEvents_Event.KeyDown
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.KeyDownDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.KeyDownDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_KeyPressEventHandler _WMPOCXEvents_Event.KeyPress
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.KeyPressDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.KeyPressDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_KeyUpEventHandler _WMPOCXEvents_Event.KeyUp
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.KeyUpDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.KeyUpDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MouseDownEventHandler _WMPOCXEvents_Event.MouseDown
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MouseDownDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MouseDownDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MouseMoveEventHandler _WMPOCXEvents_Event.MouseMove
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MouseMoveDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MouseMoveDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MouseUpEventHandler _WMPOCXEvents_Event.MouseUp
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MouseUpDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MouseUpDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_DeviceConnectEventHandler _WMPOCXEvents_Event.DeviceConnect
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DeviceConnectDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DeviceConnectDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_DeviceDisconnectEventHandler _WMPOCXEvents_Event.DeviceDisconnect
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DeviceDisconnectDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DeviceDisconnectDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_DeviceStatusChangeEventHandler _WMPOCXEvents_Event.DeviceStatusChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DeviceStatusChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DeviceStatusChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_DeviceSyncStateChangeEventHandler _WMPOCXEvents_Event.DeviceSyncStateChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DeviceSyncStateChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DeviceSyncStateChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_DeviceSyncErrorEventHandler _WMPOCXEvents_Event.DeviceSyncError
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DeviceSyncErrorDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DeviceSyncErrorDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_CreatePartnershipCompleteEventHandler _WMPOCXEvents_Event.CreatePartnershipComplete
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CreatePartnershipCompleteDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CreatePartnershipCompleteDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_DeviceEstimationEventHandler _WMPOCXEvents_Event.DeviceEstimation
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.DeviceEstimationDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.DeviceEstimationDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_CdromRipStateChangeEventHandler _WMPOCXEvents_Event.CdromRipStateChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CdromRipStateChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CdromRipStateChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_CdromRipMediaErrorEventHandler _WMPOCXEvents_Event.CdromRipMediaError
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CdromRipMediaErrorDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CdromRipMediaErrorDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_CdromBurnStateChangeEventHandler _WMPOCXEvents_Event.CdromBurnStateChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CdromBurnStateChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CdromBurnStateChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_CdromBurnMediaErrorEventHandler _WMPOCXEvents_Event.CdromBurnMediaError
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CdromBurnMediaErrorDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CdromBurnMediaErrorDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_CdromBurnErrorEventHandler _WMPOCXEvents_Event.CdromBurnError
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.CdromBurnErrorDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.CdromBurnErrorDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_LibraryConnectEventHandler _WMPOCXEvents_Event.LibraryConnect
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.LibraryConnectDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.LibraryConnectDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_LibraryDisconnectEventHandler _WMPOCXEvents_Event.LibraryDisconnect
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.LibraryDisconnectDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.LibraryDisconnectDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_FolderScanStateChangeEventHandler _WMPOCXEvents_Event.FolderScanStateChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.FolderScanStateChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.FolderScanStateChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_StringCollectionChangeEventHandler _WMPOCXEvents_Event.StringCollectionChange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.StringCollectionChangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.StringCollectionChangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MediaCollectionMediaAddedEventHandler _WMPOCXEvents_Event.MediaCollectionMediaAdded
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionMediaAddedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionMediaAddedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event _WMPOCXEvents_MediaCollectionMediaRemovedEventHandler _WMPOCXEvents_Event.MediaCollectionMediaRemoved
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.MediaCollectionMediaRemovedDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.MediaCollectionMediaRemovedDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }
  }

  /// <summary><para><c>IAppDispatch</c> interface.  </para><para>IAppDispatch: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IAppDispatch: Not Public.  Internal interface used by Windows Media Player.
  [Guid("E41C88DD-2364-4FF7-A0F5-CA9859AF783F")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IAppDispatch
  {
    /// <summary><para><c>breadcrumbItemName</c> property get of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>breadcrumbItemName</c> property get was the following:  <c>HRESULT breadcrumbItemName (long lIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT breadcrumbItemName (long lIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function breadcrumbItemName (ByVal lIndex As Long) As String
    [DispId(148)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string breadcrumbItemName (int lIndex) /* property get method */;

    /// <summary><para><c>breadcrumbItemHasMenu</c> property get of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>breadcrumbItemHasMenu</c> property get was the following:  <c>HRESULT breadcrumbItemHasMenu (long lIndex, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT breadcrumbItemHasMenu (long lIndex, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function breadcrumbItemHasMenu (ByVal lIndex As Long) As Boolean
    [DispId(149)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool breadcrumbItemHasMenu (int lIndex) /* property get method */;

    /// <summary><para><c>breadcrumbItemClick</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>breadcrumbItemClick</c> method was the following:  <c>HRESULT breadcrumbItemClick (long lIndex)</c>;</para></remarks>
    // IDL: HRESULT breadcrumbItemClick (long lIndex);
    // VB6: Sub breadcrumbItemClick (ByVal lIndex As Long)
    [DispId(150)]
    void breadcrumbItemClick (int lIndex);

    /// <summary><para><c>gotoSkinMode</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>gotoSkinMode</c> method was the following:  <c>HRESULT gotoSkinMode (void)</c>;</para></remarks>
    // IDL: HRESULT gotoSkinMode (void);
    // VB6: Sub gotoSkinMode
    [DispId(105)]
    void gotoSkinMode ();

    /// <summary><para><c>gotoPlayerMode</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>gotoPlayerMode</c> method was the following:  <c>HRESULT gotoPlayerMode (void)</c>;</para></remarks>
    // IDL: HRESULT gotoPlayerMode (void);
    // VB6: Sub gotoPlayerMode
    [DispId(143)]
    void gotoPlayerMode ();

    /// <summary><para><c>gotoLibraryMode</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>gotoLibraryMode</c> method was the following:  <c>HRESULT gotoLibraryMode (long lButton)</c>;</para></remarks>
    // IDL: HRESULT gotoLibraryMode (long lButton);
    // VB6: Sub gotoLibraryMode (ByVal lButton As Long)
    [DispId(144)]
    void gotoLibraryMode (int lButton);

    /// <summary><para><c>navigatePrevious</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>navigatePrevious</c> method was the following:  <c>HRESULT navigatePrevious (void)</c>;</para></remarks>
    // IDL: HRESULT navigatePrevious (void);
    // VB6: Sub navigatePrevious
    [DispId(125)]
    void navigatePrevious ();

    /// <summary><para><c>navigateNext</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>navigateNext</c> method was the following:  <c>HRESULT navigateNext (void)</c>;</para></remarks>
    // IDL: HRESULT navigateNext (void);
    // VB6: Sub navigateNext
    [DispId(126)]
    void navigateNext ();

    /// <summary><para><c>goFullScreen</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>goFullScreen</c> method was the following:  <c>HRESULT goFullScreen (void)</c>;</para></remarks>
    // IDL: HRESULT goFullScreen (void);
    // VB6: Sub goFullScreen
    [DispId(142)]
    void goFullScreen ();

    /// <summary><para><c>serviceLogin</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>serviceLogin</c> method was the following:  <c>HRESULT serviceLogin (void)</c>;</para></remarks>
    // IDL: HRESULT serviceLogin (void);
    // VB6: Sub serviceLogin
    [DispId(134)]
    void serviceLogin ();

    /// <summary><para><c>serviceLogout</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>serviceLogout</c> method was the following:  <c>HRESULT serviceLogout (void)</c>;</para></remarks>
    // IDL: HRESULT serviceLogout (void);
    // VB6: Sub serviceLogout
    [DispId(135)]
    void serviceLogout ();

    /// <summary><para><c>serviceGetInfo</c> property get of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>serviceGetInfo</c> property get was the following:  <c>HRESULT serviceGetInfo (BSTR bstrItem, [out, retval] VARIANT* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT serviceGetInfo (BSTR bstrItem, [out, retval] VARIANT* ReturnValue);
    // VB6: Function serviceGetInfo (ByVal bstrItem As String) As Any
    [DispId(140)]
    object serviceGetInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItem) /* property get method */;

    /// <summary><para><c>navigateToAddress</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>navigateToAddress</c> method was the following:  <c>HRESULT navigateToAddress (BSTR address)</c>;</para></remarks>
    // IDL: HRESULT navigateToAddress (BSTR address);
    // VB6: Sub navigateToAddress (ByVal address As String)
    [DispId(130)]
    void navigateToAddress ([MarshalAs(UnmanagedType.BStr)] string address);

    /// <summary><para><c>adjustLeft</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>adjustLeft</c> method was the following:  <c>HRESULT adjustLeft (long nDistance)</c>;</para></remarks>
    // IDL: HRESULT adjustLeft (long nDistance);
    // VB6: Sub adjustLeft (ByVal nDistance As Long)
    [DispId(106)]
    void adjustLeft (int nDistance);

    /// <summary><para><c>previous</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>previous</c> method was the following:  <c>HRESULT previous (void)</c>;</para></remarks>
    // IDL: HRESULT previous (void);
    // VB6: Sub previous
    [DispId(115)]
    void previous ();

    /// <summary><para><c>configurePlugins</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>configurePlugins</c> method was the following:  <c>HRESULT configurePlugins (long nType)</c>;</para></remarks>
    // IDL: HRESULT configurePlugins (long nType);
    // VB6: Sub configurePlugins (ByVal nType As Long)
    [DispId(110)]
    void configurePlugins (int nType);

    /// <summary><para><c>getTimeString</c> method of <c>IAppDispatch</c> interface.  </para><para>method getTimeString</para></summary>
    /// <remarks><para>An original IDL definition of <c>getTimeString</c> method was the following:  <c>HRESULT getTimeString (double dTime, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getTimeString
    // IDL: HRESULT getTimeString (double dTime, [out, retval] BSTR* ReturnValue);
    // VB6: Function getTimeString (ByVal dTime As Double) As String
    [DispId(111)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getTimeString (double dTime);

    /// <summary><para><c>setWindowPos</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>setWindowPos</c> method was the following:  <c>HRESULT setWindowPos (long lTop, long lLeft, long lWidth, long lHeight)</c>;</para></remarks>
    // IDL: HRESULT setWindowPos (long lTop, long lLeft, long lWidth, long lHeight);
    // VB6: Sub setWindowPos (ByVal lTop As Long, ByVal lLeft As Long, ByVal lWidth As Long, ByVal lHeight As Long)
    [DispId(121)]
    void setWindowPos (int lTop, int lLeft, int lWidth, int lHeight);

    /// <summary><para><c>logData</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>logData</c> method was the following:  <c>HRESULT logData (BSTR ID, BSTR data)</c>;</para></remarks>
    // IDL: HRESULT logData (BSTR ID, BSTR data);
    // VB6: Sub logData (ByVal ID As String, ByVal data As String)
    [DispId(122)]
    void logData ([MarshalAs(UnmanagedType.BStr)] string ID, [MarshalAs(UnmanagedType.BStr)] string data);

    /// <summary><para><c>navigateNamespace</c> method of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>navigateNamespace</c> method was the following:  <c>HRESULT navigateNamespace (BSTR address)</c>;</para></remarks>
    // IDL: HRESULT navigateNamespace (BSTR address);
    // VB6: Sub navigateNamespace (ByVal address As String)
    [DispId(128)]
    void navigateNamespace ([MarshalAs(UnmanagedType.BStr)] string address);

    /// <summary><para><c>bgPluginRunning</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>bgPluginRunning</c> property was the following:  <c>VARIANT_BOOL bgPluginRunning</c>;</para></remarks>
    // IDL: VARIANT_BOOL bgPluginRunning;
    // VB6: bgPluginRunning As Boolean
    bool bgPluginRunning
    {
      // IDL: HRESULT bgPluginRunning ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function bgPluginRunning As Boolean
      [DispId(109)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>breadcrumbItemCount</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>breadcrumbItemCount</c> property was the following:  <c>long breadcrumbItemCount</c>;</para></remarks>
    // IDL: long breadcrumbItemCount;
    // VB6: breadcrumbItemCount As Long
    int breadcrumbItemCount
    {
      // IDL: HRESULT breadcrumbItemCount ([out, retval] long* ReturnValue);
      // VB6: Function breadcrumbItemCount As Long
      [DispId(147)]
      get;
    }

    /// <summary><para><c>currentTask</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentTask</c> property was the following:  <c>BSTR currentTask</c>;</para></remarks>
    // IDL: BSTR currentTask;
    // VB6: currentTask As String
    string currentTask
    {
      // IDL: HRESULT currentTask ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentTask As String
      [DispId(102)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT currentTask (BSTR value);
      // VB6: Sub currentTask (ByVal value As String)
      [DispId(102)]
      set;
    }

    /// <summary><para><c>DPI</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>DPI</c> property was the following:  <c>long DPI</c>;</para></remarks>
    // IDL: long DPI;
    // VB6: DPI As Long
    int DPI
    {
      // IDL: HRESULT DPI ([out, retval] long* ReturnValue);
      // VB6: Function DPI As Long
      [DispId(116)]
      get;
    }

    /// <summary><para><c>exclusiveService</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>exclusiveService</c> property was the following:  <c>BSTR exclusiveService</c>;</para></remarks>
    // IDL: BSTR exclusiveService;
    // VB6: exclusiveService As String
    string exclusiveService
    {
      // IDL: HRESULT exclusiveService ([out, retval] BSTR* ReturnValue);
      // VB6: Function exclusiveService As String
      [DispId(129)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>fullScreenEnabled</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>fullScreenEnabled</c> property was the following:  <c>VARIANT_BOOL fullScreenEnabled</c>;</para></remarks>
    // IDL: VARIANT_BOOL fullScreenEnabled;
    // VB6: fullScreenEnabled As Boolean
    bool fullScreenEnabled
    {
      // IDL: HRESULT fullScreenEnabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function fullScreenEnabled As Boolean
      [DispId(141)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>glassEnabled</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>glassEnabled</c> property was the following:  <c>VARIANT_BOOL glassEnabled</c>;</para></remarks>
    // IDL: VARIANT_BOOL glassEnabled;
    // VB6: glassEnabled As Boolean
    bool glassEnabled
    {
      // IDL: HRESULT glassEnabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function glassEnabled As Boolean
      [DispId(131)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>height</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>height</c> property was the following:  <c>long height</c>;</para></remarks>
    // IDL: long height;
    // VB6: height As Long
    int height
    {
      // IDL: HRESULT height ([out, retval] long* ReturnValue);
      // VB6: Function height As Long
      [DispId(120)]
      get;
      // IDL: HRESULT height (long value);
      // VB6: Sub height (ByVal value As Long)
      [DispId(120)]
      set;
    }

    /// <summary><para><c>inVistaPlus</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>inVistaPlus</c> property was the following:  <c>VARIANT_BOOL inVistaPlus</c>;</para></remarks>
    // IDL: VARIANT_BOOL inVistaPlus;
    // VB6: inVistaPlus As Boolean
    bool inVistaPlus
    {
      // IDL: HRESULT inVistaPlus ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function inVistaPlus As Boolean
      [DispId(136)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>left</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>left</c> property was the following:  <c>long left</c>;</para></remarks>
    // IDL: long left;
    // VB6: left As Long
    int left
    {
      // IDL: HRESULT left ([out, retval] long* ReturnValue);
      // VB6: Function left As Long
      [DispId(118)]
      get;
      // IDL: HRESULT left (long value);
      // VB6: Sub left (ByVal value As Long)
      [DispId(118)]
      set;
    }

    /// <summary><para><c>libraryBasketMode</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>libraryBasketMode</c> property was the following:  <c>long libraryBasketMode</c>;</para></remarks>
    // IDL: long libraryBasketMode;
    // VB6: libraryBasketMode As Long
    int libraryBasketMode
    {
      // IDL: HRESULT libraryBasketMode ([out, retval] long* ReturnValue);
      // VB6: Function libraryBasketMode As Long
      [DispId(145)]
      get;
      // IDL: HRESULT libraryBasketMode (long value);
      // VB6: Sub libraryBasketMode (ByVal value As Long)
      [DispId(145)]
      set;
    }

    /// <summary><para><c>libraryBasketWidth</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>libraryBasketWidth</c> property was the following:  <c>long libraryBasketWidth</c>;</para></remarks>
    // IDL: long libraryBasketWidth;
    // VB6: libraryBasketWidth As Long
    int libraryBasketWidth
    {
      // IDL: HRESULT libraryBasketWidth ([out, retval] long* ReturnValue);
      // VB6: Function libraryBasketWidth As Long
      [DispId(146)]
      get;
    }

    /// <summary><para><c>maximized</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>maximized</c> property was the following:  <c>VARIANT_BOOL maximized</c>;</para></remarks>
    // IDL: VARIANT_BOOL maximized;
    // VB6: maximized As Boolean
    bool maximized
    {
      // IDL: HRESULT maximized ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function maximized As Boolean
      [DispId(113)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>menubarCurrentlyVisible</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>menubarCurrentlyVisible</c> property was the following:  <c>VARIANT_BOOL menubarCurrentlyVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL menubarCurrentlyVisible;
    // VB6: menubarCurrentlyVisible As Boolean
    bool menubarCurrentlyVisible
    {
      // IDL: HRESULT menubarCurrentlyVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function menubarCurrentlyVisible As Boolean
      [DispId(137)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>navigateNextEnabled</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>navigateNextEnabled</c> property was the following:  <c>VARIANT_BOOL navigateNextEnabled</c>;</para></remarks>
    // IDL: VARIANT_BOOL navigateNextEnabled;
    // VB6: navigateNextEnabled As Boolean
    bool navigateNextEnabled
    {
      // IDL: HRESULT navigateNextEnabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function navigateNextEnabled As Boolean
      [DispId(124)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>navigatePreviousEnabled</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>navigatePreviousEnabled</c> property was the following:  <c>VARIANT_BOOL navigatePreviousEnabled</c>;</para></remarks>
    // IDL: VARIANT_BOOL navigatePreviousEnabled;
    // VB6: navigatePreviousEnabled As Boolean
    bool navigatePreviousEnabled
    {
      // IDL: HRESULT navigatePreviousEnabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function navigatePreviousEnabled As Boolean
      [DispId(123)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>playLibraryItemEnabled</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>playLibraryItemEnabled</c> property was the following:  <c>VARIANT_BOOL playLibraryItemEnabled</c>;</para></remarks>
    // IDL: VARIANT_BOOL playLibraryItemEnabled;
    // VB6: playLibraryItemEnabled As Boolean
    bool playLibraryItemEnabled
    {
      // IDL: HRESULT playLibraryItemEnabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function playLibraryItemEnabled As Boolean
      [DispId(139)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>playlistVisible</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>playlistVisible</c> property was the following:  <c>VARIANT_BOOL playlistVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL playlistVisible;
    // VB6: playlistVisible As Boolean
    bool playlistVisible
    {
      // IDL: HRESULT playlistVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function playlistVisible As Boolean
      [DispId(104)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT playlistVisible (VARIANT_BOOL value);
      // VB6: Sub playlistVisible (ByVal value As Boolean)
      [DispId(104)]
      set;
    }

    /// <summary><para><c>powerPersonality</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>powerPersonality</c> property was the following:  <c>BSTR powerPersonality</c>;</para></remarks>
    // IDL: BSTR powerPersonality;
    // VB6: powerPersonality As String
    string powerPersonality
    {
      // IDL: HRESULT powerPersonality ([out, retval] BSTR* ReturnValue);
      // VB6: Function powerPersonality As String
      [DispId(127)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>previousEnabled</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>previousEnabled</c> property was the following:  <c>VARIANT_BOOL previousEnabled</c>;</para></remarks>
    // IDL: VARIANT_BOOL previousEnabled;
    // VB6: previousEnabled As Boolean
    bool previousEnabled
    {
      // IDL: HRESULT previousEnabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function previousEnabled As Boolean
      [DispId(114)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>serviceLoginSignedIn</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>serviceLoginSignedIn</c> property was the following:  <c>VARIANT_BOOL serviceLoginSignedIn</c>;</para></remarks>
    // IDL: VARIANT_BOOL serviceLoginSignedIn;
    // VB6: serviceLoginSignedIn As Boolean
    bool serviceLoginSignedIn
    {
      // IDL: HRESULT serviceLoginSignedIn ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function serviceLoginSignedIn As Boolean
      [DispId(133)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>serviceLoginVisible</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>serviceLoginVisible</c> property was the following:  <c>VARIANT_BOOL serviceLoginVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL serviceLoginVisible;
    // VB6: serviceLoginVisible As Boolean
    bool serviceLoginVisible
    {
      // IDL: HRESULT serviceLoginVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function serviceLoginVisible As Boolean
      [DispId(132)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>settingsVisible</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>settingsVisible</c> property was the following:  <c>VARIANT_BOOL settingsVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL settingsVisible;
    // VB6: settingsVisible As Boolean
    bool settingsVisible
    {
      // IDL: HRESULT settingsVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function settingsVisible As Boolean
      [DispId(103)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT settingsVisible (VARIANT_BOOL value);
      // VB6: Sub settingsVisible (ByVal value As Boolean)
      [DispId(103)]
      set;
    }

    /// <summary><para><c>taskbarVisible</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>taskbarVisible</c> property was the following:  <c>VARIANT_BOOL taskbarVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL taskbarVisible;
    // VB6: taskbarVisible As Boolean
    bool taskbarVisible
    {
      // IDL: HRESULT taskbarVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function taskbarVisible As Boolean
      [DispId(107)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT taskbarVisible (VARIANT_BOOL value);
      // VB6: Sub taskbarVisible (ByVal value As Boolean)
      [DispId(107)]
      set;
    }

    /// <summary><para><c>titlebarAutoHide</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>titlebarAutoHide</c> property was the following:  <c>VARIANT_BOOL titlebarAutoHide</c>;</para></remarks>
    // IDL: VARIANT_BOOL titlebarAutoHide;
    // VB6: titlebarAutoHide As Boolean
    bool titlebarAutoHide
    {
      // IDL: HRESULT titlebarAutoHide ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function titlebarAutoHide As Boolean
      [DispId(101)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT titlebarAutoHide (VARIANT_BOOL value);
      // VB6: Sub titlebarAutoHide (ByVal value As Boolean)
      [DispId(101)]
      set;
    }

    /// <summary><para><c>titlebarCurrentlyVisible</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>titlebarCurrentlyVisible</c> property was the following:  <c>VARIANT_BOOL titlebarCurrentlyVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL titlebarCurrentlyVisible;
    // VB6: titlebarCurrentlyVisible As Boolean
    bool titlebarCurrentlyVisible
    {
      // IDL: HRESULT titlebarCurrentlyVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function titlebarCurrentlyVisible As Boolean
      [DispId(108)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>titlebarVisible</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>titlebarVisible</c> property was the following:  <c>VARIANT_BOOL titlebarVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL titlebarVisible;
    // VB6: titlebarVisible As Boolean
    bool titlebarVisible
    {
      // IDL: HRESULT titlebarVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function titlebarVisible As Boolean
      [DispId(100)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT titlebarVisible (VARIANT_BOOL value);
      // VB6: Sub titlebarVisible (ByVal value As Boolean)
      [DispId(100)]
      set;
    }

    /// <summary><para><c>top</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>top</c> property was the following:  <c>long top</c>;</para></remarks>
    // IDL: long top;
    // VB6: top As Long
    int top
    {
      // IDL: HRESULT top ([out, retval] long* ReturnValue);
      // VB6: Function top As Long
      [DispId(117)]
      get;
      // IDL: HRESULT top (long value);
      // VB6: Sub top (ByVal value As Long)
      [DispId(117)]
      set;
    }

    /// <summary><para><c>width</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>width</c> property was the following:  <c>long width</c>;</para></remarks>
    // IDL: long width;
    // VB6: width As Long
    int width
    {
      // IDL: HRESULT width ([out, retval] long* ReturnValue);
      // VB6: Function width As Long
      [DispId(119)]
      get;
      // IDL: HRESULT width (long value);
      // VB6: Sub width (ByVal value As Long)
      [DispId(119)]
      set;
    }

    /// <summary><para><c>windowText</c> property of <c>IAppDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>windowText</c> property was the following:  <c>BSTR windowText</c>;</para></remarks>
    // IDL: BSTR windowText;
    // VB6: windowText As String
    string windowText
    {
      // IDL: HRESULT windowText (BSTR value);
      // VB6: Sub windowText (ByVal value As String)
      [DispId(138)]
      set;
    }
  }

  /// <summary><para><c>IBarsEffect</c> interface.  </para><para>IBarsEffect: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IBarsEffect: Not Public.  Internal interface used by Windows Media Player.
  [Guid("33E9291A-F6A9-11D2-9435-00A0C92A2F2D")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IBarsEffect
  {
    /// <summary><para><c>backgroundColor</c> property of <c>IBarsEffect</c> interface.  </para><para>property backgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // property backgroundColor
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(8007)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundColor (BSTR value);
      // VB6: Sub backgroundColor (ByVal value As String)
      [DispId(8007)]
      set;
    }

    /// <summary><para><c>displayMode</c> property of <c>IBarsEffect</c> interface.  </para><para>property displayMode</para></summary>
    /// <remarks><para>An original IDL definition of <c>displayMode</c> property was the following:  <c>long displayMode</c>;</para></remarks>
    // property displayMode
    // IDL: long displayMode;
    // VB6: displayMode As Long
    int displayMode
    {
      // IDL: HRESULT displayMode ([out, retval] long* ReturnValue);
      // VB6: Function displayMode As Long
      [DispId(8000)]
      get;
      // IDL: HRESULT displayMode (long value);
      // VB6: Sub displayMode (ByVal value As Long)
      [DispId(8000)]
      set;
    }

    /// <summary><para><c>fadeMode</c> property of <c>IBarsEffect</c> interface.  </para><para>property fadeMode</para></summary>
    /// <remarks><para>An original IDL definition of <c>fadeMode</c> property was the following:  <c>long fadeMode</c>;</para></remarks>
    // property fadeMode
    // IDL: long fadeMode;
    // VB6: fadeMode As Long
    int fadeMode
    {
      // IDL: HRESULT fadeMode ([out, retval] long* ReturnValue);
      // VB6: Function fadeMode As Long
      [DispId(8015)]
      get;
      // IDL: HRESULT fadeMode (long value);
      // VB6: Sub fadeMode (ByVal value As Long)
      [DispId(8015)]
      set;
    }

    /// <summary><para><c>fadeRate</c> property of <c>IBarsEffect</c> interface.  </para><para>property fadeRate</para></summary>
    /// <remarks><para>An original IDL definition of <c>fadeRate</c> property was the following:  <c>long fadeRate</c>;</para></remarks>
    // property fadeRate
    // IDL: long fadeRate;
    // VB6: fadeRate As Long
    int fadeRate
    {
      // IDL: HRESULT fadeRate ([out, retval] long* ReturnValue);
      // VB6: Function fadeRate As Long
      [DispId(8014)]
      get;
      // IDL: HRESULT fadeRate (long value);
      // VB6: Sub fadeRate (ByVal value As Long)
      [DispId(8014)]
      set;
    }

    /// <summary><para><c>horizontalSpacing</c> property of <c>IBarsEffect</c> interface.  </para><para>property horizontalSpacing</para></summary>
    /// <remarks><para>An original IDL definition of <c>horizontalSpacing</c> property was the following:  <c>long horizontalSpacing</c>;</para></remarks>
    // property horizontalSpacing
    // IDL: long horizontalSpacing;
    // VB6: horizontalSpacing As Long
    int horizontalSpacing
    {
      // IDL: HRESULT horizontalSpacing ([out, retval] long* ReturnValue);
      // VB6: Function horizontalSpacing As Long
      [DispId(8010)]
      get;
      // IDL: HRESULT horizontalSpacing (long value);
      // VB6: Sub horizontalSpacing (ByVal value As Long)
      [DispId(8010)]
      set;
    }

    /// <summary><para><c>levelColor</c> property of <c>IBarsEffect</c> interface.  </para><para>property levelColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>levelColor</c> property was the following:  <c>BSTR levelColor</c>;</para></remarks>
    // property levelColor
    // IDL: BSTR levelColor;
    // VB6: levelColor As String
    string levelColor
    {
      // IDL: HRESULT levelColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function levelColor As String
      [DispId(8008)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT levelColor (BSTR value);
      // VB6: Sub levelColor (ByVal value As String)
      [DispId(8008)]
      set;
    }

    /// <summary><para><c>levelFallbackAcceleration</c> property of <c>IBarsEffect</c> interface.  </para><para>property levelFallbackAcceleration</para></summary>
    /// <remarks><para>An original IDL definition of <c>levelFallbackAcceleration</c> property was the following:  <c>float levelFallbackAcceleration</c>;</para></remarks>
    // property levelFallbackAcceleration
    // IDL: float levelFallbackAcceleration;
    // VB6: levelFallbackAcceleration As Single
    float levelFallbackAcceleration
    {
      // IDL: HRESULT levelFallbackAcceleration ([out, retval] float* ReturnValue);
      // VB6: Function levelFallbackAcceleration As Single
      [DispId(8005)]
      get;
      // IDL: HRESULT levelFallbackAcceleration (float value);
      // VB6: Sub levelFallbackAcceleration (ByVal value As Single)
      [DispId(8005)]
      set;
    }

    /// <summary><para><c>levelFallbackSpeed</c> property of <c>IBarsEffect</c> interface.  </para><para>property levelFallbackSpeed</para></summary>
    /// <remarks><para>An original IDL definition of <c>levelFallbackSpeed</c> property was the following:  <c>float levelFallbackSpeed</c>;</para></remarks>
    // property levelFallbackSpeed
    // IDL: float levelFallbackSpeed;
    // VB6: levelFallbackSpeed As Single
    float levelFallbackSpeed
    {
      // IDL: HRESULT levelFallbackSpeed ([out, retval] float* ReturnValue);
      // VB6: Function levelFallbackSpeed As Single
      [DispId(8006)]
      get;
      // IDL: HRESULT levelFallbackSpeed (float value);
      // VB6: Sub levelFallbackSpeed (ByVal value As Single)
      [DispId(8006)]
      set;
    }

    /// <summary><para><c>levelScale</c> property of <c>IBarsEffect</c> interface.  </para><para>property levelScale</para></summary>
    /// <remarks><para>An original IDL definition of <c>levelScale</c> property was the following:  <c>float levelScale</c>;</para></remarks>
    // property levelScale
    // IDL: float levelScale;
    // VB6: levelScale As Single
    float levelScale
    {
      // IDL: HRESULT levelScale ([out, retval] float* ReturnValue);
      // VB6: Function levelScale As Single
      [DispId(8013)]
      get;
      // IDL: HRESULT levelScale (float value);
      // VB6: Sub levelScale (ByVal value As Single)
      [DispId(8013)]
      set;
    }

    /// <summary><para><c>levelWidth</c> property of <c>IBarsEffect</c> interface.  </para><para>property levelWidth</para></summary>
    /// <remarks><para>An original IDL definition of <c>levelWidth</c> property was the following:  <c>long levelWidth</c>;</para></remarks>
    // property levelWidth
    // IDL: long levelWidth;
    // VB6: levelWidth As Long
    int levelWidth
    {
      // IDL: HRESULT levelWidth ([out, retval] long* ReturnValue);
      // VB6: Function levelWidth As Long
      [DispId(8012)]
      get;
      // IDL: HRESULT levelWidth (long value);
      // VB6: Sub levelWidth (ByVal value As Long)
      [DispId(8012)]
      set;
    }

    /// <summary><para><c>peakColor</c> property of <c>IBarsEffect</c> interface.  </para><para>property peakColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>peakColor</c> property was the following:  <c>BSTR peakColor</c>;</para></remarks>
    // property peakColor
    // IDL: BSTR peakColor;
    // VB6: peakColor As String
    string peakColor
    {
      // IDL: HRESULT peakColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function peakColor As String
      [DispId(8009)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT peakColor (BSTR value);
      // VB6: Sub peakColor (ByVal value As String)
      [DispId(8009)]
      set;
    }

    /// <summary><para><c>peakFallbackAcceleration</c> property of <c>IBarsEffect</c> interface.  </para><para>property peakFallbackAcceleration</para></summary>
    /// <remarks><para>An original IDL definition of <c>peakFallbackAcceleration</c> property was the following:  <c>float peakFallbackAcceleration</c>;</para></remarks>
    // property peakFallbackAcceleration
    // IDL: float peakFallbackAcceleration;
    // VB6: peakFallbackAcceleration As Single
    float peakFallbackAcceleration
    {
      // IDL: HRESULT peakFallbackAcceleration ([out, retval] float* ReturnValue);
      // VB6: Function peakFallbackAcceleration As Single
      [DispId(8003)]
      get;
      // IDL: HRESULT peakFallbackAcceleration (float value);
      // VB6: Sub peakFallbackAcceleration (ByVal value As Single)
      [DispId(8003)]
      set;
    }

    /// <summary><para><c>peakFallbackSpeed</c> property of <c>IBarsEffect</c> interface.  </para><para>property peakFallbackSpeed</para></summary>
    /// <remarks><para>An original IDL definition of <c>peakFallbackSpeed</c> property was the following:  <c>float peakFallbackSpeed</c>;</para></remarks>
    // property peakFallbackSpeed
    // IDL: float peakFallbackSpeed;
    // VB6: peakFallbackSpeed As Single
    float peakFallbackSpeed
    {
      // IDL: HRESULT peakFallbackSpeed ([out, retval] float* ReturnValue);
      // VB6: Function peakFallbackSpeed As Single
      [DispId(8004)]
      get;
      // IDL: HRESULT peakFallbackSpeed (float value);
      // VB6: Sub peakFallbackSpeed (ByVal value As Single)
      [DispId(8004)]
      set;
    }

    /// <summary><para><c>peakHangTime</c> property of <c>IBarsEffect</c> interface.  </para><para>property peakHangTime</para></summary>
    /// <remarks><para>An original IDL definition of <c>peakHangTime</c> property was the following:  <c>long peakHangTime</c>;</para></remarks>
    // property peakHangTime
    // IDL: long peakHangTime;
    // VB6: peakHangTime As Long
    int peakHangTime
    {
      // IDL: HRESULT peakHangTime ([out, retval] long* ReturnValue);
      // VB6: Function peakHangTime As Long
      [DispId(8002)]
      get;
      // IDL: HRESULT peakHangTime (long value);
      // VB6: Sub peakHangTime (ByVal value As Long)
      [DispId(8002)]
      set;
    }

    /// <summary><para><c>showPeaks</c> property of <c>IBarsEffect</c> interface.  </para><para>property showPeaks</para></summary>
    /// <remarks><para>An original IDL definition of <c>showPeaks</c> property was the following:  <c>VARIANT_BOOL showPeaks</c>;</para></remarks>
    // property showPeaks
    // IDL: VARIANT_BOOL showPeaks;
    // VB6: showPeaks As Boolean
    bool showPeaks
    {
      // IDL: HRESULT showPeaks ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function showPeaks As Boolean
      [DispId(8001)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT showPeaks (VARIANT_BOOL value);
      // VB6: Sub showPeaks (ByVal value As Boolean)
      [DispId(8001)]
      set;
    }

    /// <summary><para><c>transparent</c> property of <c>IBarsEffect</c> interface.  </para><para>property transparent</para></summary>
    /// <remarks><para>An original IDL definition of <c>transparent</c> property was the following:  <c>VARIANT_BOOL transparent</c>;</para></remarks>
    // property transparent
    // IDL: VARIANT_BOOL transparent;
    // VB6: transparent As Boolean
    bool transparent
    {
      // IDL: HRESULT transparent ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function transparent As Boolean
      [DispId(8016)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT transparent (VARIANT_BOOL value);
      // VB6: Sub transparent (ByVal value As Boolean)
      [DispId(8016)]
      set;
    }
  }

  /// <summary><para><c>IBattery</c> interface.  </para><para>IBattery: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IBattery: Not Public.  Internal interface used by Windows Media Player.
  [Guid("F8578BFA-CD8F-4CE1-A684-5B7E85FCA7DC")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IBattery
  {
    /// <summary><para><c>preset</c> property get of <c>IBattery</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>preset</c> property get was the following:  <c>HRESULT preset (long nIndex, [out, retval] IDispatch** ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT preset (long nIndex, [out, retval] IDispatch** ReturnValue);
    // VB6: Function preset (ByVal nIndex As Long) As IDispatch
    [DispId(2)]
    [return: MarshalAs(UnmanagedType.IDispatch)]
    object preset (int nIndex) /* property get method */;

    /// <summary><para><c>presetCount</c> property of <c>IBattery</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>presetCount</c> property was the following:  <c>long presetCount</c>;</para></remarks>
    // IDL: long presetCount;
    // VB6: presetCount As Long
    int presetCount
    {
      // IDL: HRESULT presetCount ([out, retval] long* ReturnValue);
      // VB6: Function presetCount As Long
      [DispId(1)]
      get;
    }
  }

  /// <summary><para><c>IBatteryPreset</c> interface.  </para><para>IBatteryPreset: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IBatteryPreset: Not Public.  Internal interface used by Windows Media Player.
  [Guid("40C6BDE7-9C90-49D4-AD20-BEF81A6C5F22")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IBatteryPreset
  {
    /// <summary><para><c>title</c> property of <c>IBatteryPreset</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>title</c> property was the following:  <c>BSTR title</c>;</para></remarks>
    // IDL: BSTR title;
    // VB6: title As String
    string title
    {
      // IDL: HRESULT title ([out, retval] BSTR* ReturnValue);
      // VB6: Function title As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT title (BSTR value);
      // VB6: Sub title (ByVal value As String)
      [DispId(1)]
      set;
    }
  }

  /// <summary><para><c>IBatteryRandomPreset</c> interface.  </para><para>IBatteryRandomPreset: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IBatteryRandomPreset: Not Public.  Internal interface used by Windows Media Player.
  [Guid("F85E2D65-207D-48DB-84B1-915E1735DB17")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IBatteryRandomPreset
  {
    /// <summary><para><c>title</c> property of <c>IBatteryRandomPreset</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>title</c> property was the following:  <c>BSTR title</c>;</para></remarks>
    // IDL: BSTR title;
    // VB6: title As String
    string title
    {
      // IDL: HRESULT title ([out, retval] BSTR* ReturnValue);
      // VB6: Function title As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT title (BSTR value);
      // VB6: Sub title (ByVal value As String)
      [DispId(1)]
      set;
    }
  }

  /// <summary><para><c>IBatterySavedPreset</c> interface.  </para><para>IBatterySavedPreset: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IBatterySavedPreset: Not Public.  Internal interface used by Windows Media Player.
  [Guid("876E7208-0172-4EBB-B08B-2E1D30DFE44C")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IBatterySavedPreset
  {
    /// <summary><para><c>title</c> property of <c>IBatterySavedPreset</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>title</c> property was the following:  <c>BSTR title</c>;</para></remarks>
    // IDL: BSTR title;
    // VB6: title As String
    string title
    {
      // IDL: HRESULT title ([out, retval] BSTR* ReturnValue);
      // VB6: Function title As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT title (BSTR value);
      // VB6: Sub title (ByVal value As String)
      [DispId(1)]
      set;
    }
  }

  /// <summary><para><c>ITaskCntrCtrl</c> interface.  </para><para>ITaskCntrCtrl: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // ITaskCntrCtrl: Not Public.  Internal interface used by Windows Media Player.
  [Guid("891EADB1-1C45-48B0-B704-49A888DA98C4")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface ITaskCntrCtrl
  {
    /// <summary><para><c>Activate</c> method of <c>ITaskCntrCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>Activate</c> method was the following:  <c>HRESULT Activate (void)</c>;</para></remarks>
    // IDL: HRESULT Activate (void);
    // VB6: Sub Activate
    [DispId(1610743810)]
    void Activate ();

    /// <summary><para><c>CurrentContainer</c> property of <c>ITaskCntrCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentContainer</c> property was the following:  <c>IUnknown* CurrentContainer</c>;</para></remarks>
    // IDL: IUnknown* CurrentContainer;
    // VB6: CurrentContainer As IUnknown
    object CurrentContainer
    {
      // IDL: HRESULT CurrentContainer ([out, retval] IUnknown** ReturnValue);
      // VB6: Function CurrentContainer As IUnknown
      [DispId(1610743808)]
      [return: MarshalAs(UnmanagedType.IUnknown)]
      get;
      // IDL: HRESULT CurrentContainer (IUnknown* value);
      // VB6: Sub CurrentContainer (ByVal value As IUnknown)
      [DispId(1610743808)]
      set;
    }
  }

  /// <summary><para><c>IWMPAutoMenuCtrl</c> interface.  </para><para>IWMPAutoMenuCtrl: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPAutoMenuCtrl: Not Public.  Internal interface used by Windows Media Player.
  [Guid("1AD13E0B-4F3A-41DF-9BE2-F9E6FE0A7875")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPAutoMenuCtrl
  {
    /// <summary><para><c>show</c> method of <c>IWMPAutoMenuCtrl</c> interface.  </para><para>method show</para></summary>
    /// <remarks><para>An original IDL definition of <c>show</c> method was the following:  <c>HRESULT show (BSTR newVal)</c>;</para></remarks>
    // method show
    // IDL: HRESULT show (BSTR newVal);
    // VB6: Sub show (ByVal newVal As String)
    [DispId(6501)]
    void show ([MarshalAs(UnmanagedType.BStr)] string newVal);
  }

  /// <summary><para><c>IWMPBaseExternal</c> interface.  </para><para>IWMPBaseExternal: Public interface for scripting object model.</para></summary>
  // IWMPBaseExternal: Public interface for scripting object model.
  [Guid("F81B2A59-02BC-4003-8B2F-C124AF66FC66")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPBaseExternal
  {
    /// <summary><para><c>appColorLight</c> property of <c>IWMPBaseExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorLight</c> property was the following:  <c>BSTR appColorLight</c>;</para></remarks>
    // IDL: BSTR appColorLight;
    // VB6: appColorLight As String
    string appColorLight
    {
      // IDL: HRESULT appColorLight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorLight As String
      [DispId(10012)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>OnColorChange</c> property of <c>IWMPBaseExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnColorChange</c> property was the following:  <c>IDispatch OnColorChange</c>;</para></remarks>
    // IDL: IDispatch OnColorChange;
    // VB6: OnColorChange As IDispatch
    object OnColorChange
    {
      // IDL: HRESULT OnColorChange (IDispatch* value);
      // VB6: Sub OnColorChange (ByVal value As IDispatch)
      [DispId(10018)]
      set;
    }

    /// <summary><para><c>version</c> property of <c>IWMPBaseExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>version</c> property was the following:  <c>BSTR version</c>;</para></remarks>
    // IDL: BSTR version;
    // VB6: version As String
    string version
    {
      // IDL: HRESULT version ([out, retval] BSTR* ReturnValue);
      // VB6: Function version As String
      [DispId(10005)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPBrandDispatch</c> interface.  </para><para>IWMPBrandDispatch: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPBrandDispatch: Not Public.  Internal interface used by Windows Media Player.
  [Guid("98BB02D4-ED74-43CC-AD6A-45888F2E0DCC")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPBrandDispatch
  {
    /// <summary><para><c>setNavigateProps</c> method of <c>IWMPBrandDispatch</c> interface.  </para><para>method setNavigateProps</para></summary>
    /// <remarks><para>An original IDL definition of <c>setNavigateProps</c> method was the following:  <c>HRESULT setNavigateProps (BSTR bstrPane, long lDispid, BSTR bstrParams)</c>;</para></remarks>
    // method setNavigateProps
    // IDL: HRESULT setNavigateProps (BSTR bstrPane, long lDispid, BSTR bstrParams);
    // VB6: Sub setNavigateProps (ByVal bstrPane As String, ByVal lDispid As Long, ByVal bstrParams As String)
    [DispId(3041)]
    void setNavigateProps ([MarshalAs(UnmanagedType.BStr)] string bstrPane, int lDispid, [MarshalAs(UnmanagedType.BStr)] string bstrParams);

    /// <summary><para><c>getMediaParams</c> method of <c>IWMPBrandDispatch</c> interface.  </para><para>method getMediaParams</para></summary>
    /// <remarks><para>An original IDL definition of <c>getMediaParams</c> method was the following:  <c>HRESULT getMediaParams (IUnknown* pObject, BSTR bstrURL, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getMediaParams
    // IDL: HRESULT getMediaParams (IUnknown* pObject, BSTR bstrURL, [out, retval] BSTR* ReturnValue);
    // VB6: Function getMediaParams (ByVal pObject As IUnknown, ByVal bstrURL As String) As String
    [DispId(3042)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getMediaParams ([MarshalAs(UnmanagedType.IUnknown)] object pObject, [MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>albumInfoUrl</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property albumInfoUrl</para></summary>
    /// <remarks><para>An original IDL definition of <c>albumInfoUrl</c> property was the following:  <c>BSTR albumInfoUrl</c>;</para></remarks>
    // property albumInfoUrl
    // IDL: BSTR albumInfoUrl;
    // VB6: albumInfoUrl As String
    string albumInfoUrl
    {
      // IDL: HRESULT albumInfoUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function albumInfoUrl As String
      [DispId(3025)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>buyCDUrl</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property buyCDUrl</para></summary>
    /// <remarks><para>An original IDL definition of <c>buyCDUrl</c> property was the following:  <c>BSTR buyCDUrl</c>;</para></remarks>
    // property buyCDUrl
    // IDL: BSTR buyCDUrl;
    // VB6: buyCDUrl As String
    string buyCDUrl
    {
      // IDL: HRESULT buyCDUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function buyCDUrl As String
      [DispId(3026)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>colorPlayer</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property colorPlayer</para></summary>
    /// <remarks><para>An original IDL definition of <c>colorPlayer</c> property was the following:  <c>BSTR colorPlayer</c>;</para></remarks>
    // property colorPlayer
    // IDL: BSTR colorPlayer;
    // VB6: colorPlayer As String
    string colorPlayer
    {
      // IDL: HRESULT colorPlayer ([out, retval] BSTR* ReturnValue);
      // VB6: Function colorPlayer As String
      [DispId(3031)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>colorPlayerText</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property colorPlayerText</para></summary>
    /// <remarks><para>An original IDL definition of <c>colorPlayerText</c> property was the following:  <c>BSTR colorPlayerText</c>;</para></remarks>
    // property colorPlayerText
    // IDL: BSTR colorPlayerText;
    // VB6: colorPlayerText As String
    string colorPlayerText
    {
      // IDL: HRESULT colorPlayerText ([out, retval] BSTR* ReturnValue);
      // VB6: Function colorPlayerText As String
      [DispId(3032)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>contentPartnerSelected</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property contentPartnerSelected</para></summary>
    /// <remarks><para>An original IDL definition of <c>contentPartnerSelected</c> property was the following:  <c>VARIANT_BOOL contentPartnerSelected</c>;</para></remarks>
    // property contentPartnerSelected
    // IDL: VARIANT_BOOL contentPartnerSelected;
    // VB6: contentPartnerSelected As Boolean
    bool contentPartnerSelected
    {
      // IDL: HRESULT contentPartnerSelected ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function contentPartnerSelected As Boolean
      [DispId(3043)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>cookieUrl</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property cookieUrl</para></summary>
    /// <remarks><para>An original IDL definition of <c>cookieUrl</c> property was the following:  <c>BSTR cookieUrl</c>;</para></remarks>
    // property cookieUrl
    // IDL: BSTR cookieUrl;
    // VB6: cookieUrl As String
    string cookieUrl
    {
      // IDL: HRESULT cookieUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function cookieUrl As String
      [DispId(3029)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>downloadStatusUrl</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property downloadStatusUrl</para></summary>
    /// <remarks><para>An original IDL definition of <c>downloadStatusUrl</c> property was the following:  <c>BSTR downloadStatusUrl</c>;</para></remarks>
    // property downloadStatusUrl
    // IDL: BSTR downloadStatusUrl;
    // VB6: downloadStatusUrl As String
    string downloadStatusUrl
    {
      // IDL: HRESULT downloadStatusUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function downloadStatusUrl As String
      [DispId(3030)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>friendlyName</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property friendlyName</para></summary>
    /// <remarks><para>An original IDL definition of <c>friendlyName</c> property was the following:  <c>BSTR friendlyName</c>;</para></remarks>
    // property friendlyName
    // IDL: BSTR friendlyName;
    // VB6: friendlyName As String
    string friendlyName
    {
      // IDL: HRESULT friendlyName ([out, retval] BSTR* ReturnValue);
      // VB6: Function friendlyName As String
      [DispId(3000)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>fullServiceName</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property fullServiceName</para></summary>
    /// <remarks><para>An original IDL definition of <c>fullServiceName</c> property was the following:  <c>BSTR fullServiceName</c>;</para></remarks>
    // property fullServiceName
    // IDL: BSTR fullServiceName;
    // VB6: fullServiceName As String
    string fullServiceName
    {
      // IDL: HRESULT fullServiceName ([out, retval] BSTR* ReturnValue);
      // VB6: Function fullServiceName As String
      [DispId(3040)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>guideAccText</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property guideAccText</para></summary>
    /// <remarks><para>An original IDL definition of <c>guideAccText</c> property was the following:  <c>BSTR guideAccText</c>;</para></remarks>
    // property guideAccText
    // IDL: BSTR guideAccText;
    // VB6: guideAccText As String
    string guideAccText
    {
      // IDL: HRESULT guideAccText ([out, retval] BSTR* ReturnValue);
      // VB6: Function guideAccText As String
      [DispId(3004)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>guideButtonText</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property guideButtonText</para></summary>
    /// <remarks><para>An original IDL definition of <c>guideButtonText</c> property was the following:  <c>BSTR guideButtonText</c>;</para></remarks>
    // property guideButtonText
    // IDL: BSTR guideButtonText;
    // VB6: guideButtonText As String
    string guideButtonText
    {
      // IDL: HRESULT guideButtonText ([out, retval] BSTR* ReturnValue);
      // VB6: Function guideButtonText As String
      [DispId(3001)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>guideButtonTip</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property guideButtonTip</para></summary>
    /// <remarks><para>An original IDL definition of <c>guideButtonTip</c> property was the following:  <c>BSTR guideButtonTip</c>;</para></remarks>
    // property guideButtonTip
    // IDL: BSTR guideButtonTip;
    // VB6: guideButtonTip As String
    string guideButtonTip
    {
      // IDL: HRESULT guideButtonTip ([out, retval] BSTR* ReturnValue);
      // VB6: Function guideButtonTip As String
      [DispId(3002)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>guideMenuText</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property guideMenuText</para></summary>
    /// <remarks><para>An original IDL definition of <c>guideMenuText</c> property was the following:  <c>BSTR guideMenuText</c>;</para></remarks>
    // property guideMenuText
    // IDL: BSTR guideMenuText;
    // VB6: guideMenuText As String
    string guideMenuText
    {
      // IDL: HRESULT guideMenuText ([out, retval] BSTR* ReturnValue);
      // VB6: Function guideMenuText As String
      [DispId(3003)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>guideUrl</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property guideUrl</para></summary>
    /// <remarks><para>An original IDL definition of <c>guideUrl</c> property was the following:  <c>BSTR guideUrl</c>;</para></remarks>
    // property guideUrl
    // IDL: BSTR guideUrl;
    // VB6: guideUrl As String
    string guideUrl
    {
      // IDL: HRESULT guideUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function guideUrl As String
      [DispId(3017)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>htmlViewUrl</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property htmlViewUrl</para></summary>
    /// <remarks><para>An original IDL definition of <c>htmlViewUrl</c> property was the following:  <c>BSTR htmlViewUrl</c>;</para></remarks>
    // property htmlViewUrl
    // IDL: BSTR htmlViewUrl;
    // VB6: htmlViewUrl As String
    string htmlViewUrl
    {
      // IDL: HRESULT htmlViewUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function htmlViewUrl As String
      [DispId(3027)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>imageLargeUrl</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property imageLargeUrl</para></summary>
    /// <remarks><para>An original IDL definition of <c>imageLargeUrl</c> property was the following:  <c>BSTR imageLargeUrl</c>;</para></remarks>
    // property imageLargeUrl
    // IDL: BSTR imageLargeUrl;
    // VB6: imageLargeUrl As String
    string imageLargeUrl
    {
      // IDL: HRESULT imageLargeUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function imageLargeUrl As String
      [DispId(3021)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>imageMenuUrl</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property imageMenuUrl</para></summary>
    /// <remarks><para>An original IDL definition of <c>imageMenuUrl</c> property was the following:  <c>BSTR imageMenuUrl</c>;</para></remarks>
    // property imageMenuUrl
    // IDL: BSTR imageMenuUrl;
    // VB6: imageMenuUrl As String
    string imageMenuUrl
    {
      // IDL: HRESULT imageMenuUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function imageMenuUrl As String
      [DispId(3023)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>imageSmallUrl</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property imageSmallUrl</para></summary>
    /// <remarks><para>An original IDL definition of <c>imageSmallUrl</c> property was the following:  <c>BSTR imageSmallUrl</c>;</para></remarks>
    // property imageSmallUrl
    // IDL: BSTR imageSmallUrl;
    // VB6: imageSmallUrl As String
    string imageSmallUrl
    {
      // IDL: HRESULT imageSmallUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function imageSmallUrl As String
      [DispId(3022)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>infoCenterUrl</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property infoCenterUrl</para></summary>
    /// <remarks><para>An original IDL definition of <c>infoCenterUrl</c> property was the following:  <c>BSTR infoCenterUrl</c>;</para></remarks>
    // property infoCenterUrl
    // IDL: BSTR infoCenterUrl;
    // VB6: infoCenterUrl As String
    string infoCenterUrl
    {
      // IDL: HRESULT infoCenterUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function infoCenterUrl As String
      [DispId(3024)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>navigateDispid</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property navigateDispid</para></summary>
    /// <remarks><para>An original IDL definition of <c>navigateDispid</c> property was the following:  <c>long navigateDispid</c>;</para></remarks>
    // property navigateDispid
    // IDL: long navigateDispid;
    // VB6: navigateDispid As Long
    int navigateDispid
    {
      // IDL: HRESULT navigateDispid ([out, retval] long* ReturnValue);
      // VB6: Function navigateDispid As Long
      [DispId(3035)]
      get;
    }

    /// <summary><para><c>navigatePane</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property navigatePane</para></summary>
    /// <remarks><para>An original IDL definition of <c>navigatePane</c> property was the following:  <c>BSTR navigatePane</c>;</para></remarks>
    // property navigatePane
    // IDL: BSTR navigatePane;
    // VB6: navigatePane As String
    string navigatePane
    {
      // IDL: HRESULT navigatePane ([out, retval] BSTR* ReturnValue);
      // VB6: Function navigatePane As String
      [DispId(3037)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>navigateParams</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property navigateParams</para></summary>
    /// <remarks><para>An original IDL definition of <c>navigateParams</c> property was the following:  <c>BSTR navigateParams</c>;</para></remarks>
    // property navigateParams
    // IDL: BSTR navigateParams;
    // VB6: navigateParams As String
    string navigateParams
    {
      // IDL: HRESULT navigateParams ([out, retval] BSTR* ReturnValue);
      // VB6: Function navigateParams As String
      [DispId(3036)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>navigateUrl</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property navigateUrl</para></summary>
    /// <remarks><para>An original IDL definition of <c>navigateUrl</c> property was the following:  <c>BSTR navigateUrl</c>;</para></remarks>
    // property navigateUrl
    // IDL: BSTR navigateUrl;
    // VB6: navigateUrl As String
    string navigateUrl
    {
      // IDL: HRESULT navigateUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function navigateUrl As String
      [DispId(3028)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>selectedPane</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property selectedPane</para></summary>
    /// <remarks><para>An original IDL definition of <c>selectedPane</c> property was the following:  <c>BSTR selectedPane</c>;</para></remarks>
    // property selectedPane
    // IDL: BSTR selectedPane;
    // VB6: selectedPane As String
    string selectedPane
    {
      // IDL: HRESULT selectedPane ([out, retval] BSTR* ReturnValue);
      // VB6: Function selectedPane As String
      [DispId(3038)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT selectedPane (BSTR value);
      // VB6: Sub selectedPane (ByVal value As String)
      [DispId(3038)]
      set;
    }

    /// <summary><para><c>selectedTask</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property selectedTask</para></summary>
    /// <remarks><para>An original IDL definition of <c>selectedTask</c> property was the following:  <c>long selectedTask</c>;</para></remarks>
    // property selectedTask
    // IDL: long selectedTask;
    // VB6: selectedTask As Long
    int selectedTask
    {
      // IDL: HRESULT selectedTask (long value);
      // VB6: Sub selectedTask (ByVal value As Long)
      [DispId(3039)]
      set;
    }

    /// <summary><para><c>task1AccText</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property task1AccText</para></summary>
    /// <remarks><para>An original IDL definition of <c>task1AccText</c> property was the following:  <c>BSTR task1AccText</c>;</para></remarks>
    // property task1AccText
    // IDL: BSTR task1AccText;
    // VB6: task1AccText As String
    string task1AccText
    {
      // IDL: HRESULT task1AccText ([out, retval] BSTR* ReturnValue);
      // VB6: Function task1AccText As String
      [DispId(3008)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>task1ButtonText</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property task1ButtonText</para></summary>
    /// <remarks><para>An original IDL definition of <c>task1ButtonText</c> property was the following:  <c>BSTR task1ButtonText</c>;</para></remarks>
    // property task1ButtonText
    // IDL: BSTR task1ButtonText;
    // VB6: task1ButtonText As String
    string task1ButtonText
    {
      // IDL: HRESULT task1ButtonText ([out, retval] BSTR* ReturnValue);
      // VB6: Function task1ButtonText As String
      [DispId(3005)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>task1ButtonTip</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property task1ButtonTip</para></summary>
    /// <remarks><para>An original IDL definition of <c>task1ButtonTip</c> property was the following:  <c>BSTR task1ButtonTip</c>;</para></remarks>
    // property task1ButtonTip
    // IDL: BSTR task1ButtonTip;
    // VB6: task1ButtonTip As String
    string task1ButtonTip
    {
      // IDL: HRESULT task1ButtonTip ([out, retval] BSTR* ReturnValue);
      // VB6: Function task1ButtonTip As String
      [DispId(3006)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>task1MenuText</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property task1MenuText</para></summary>
    /// <remarks><para>An original IDL definition of <c>task1MenuText</c> property was the following:  <c>BSTR task1MenuText</c>;</para></remarks>
    // property task1MenuText
    // IDL: BSTR task1MenuText;
    // VB6: task1MenuText As String
    string task1MenuText
    {
      // IDL: HRESULT task1MenuText ([out, retval] BSTR* ReturnValue);
      // VB6: Function task1MenuText As String
      [DispId(3007)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>task1Url</c> property of <c>IWMPBrandDispatch</c> interface.  </para><para>property task1Url</para></summary>
    /// <remarks><para>An original IDL definition of <c>task1Url</c> property was the following:  <c>BSTR task1Url</c>;</para></remarks>
    // property task1Url
    // IDL: BSTR task1Url;
    // VB6: task1Url As String
    string task1Url
    {
      // IDL: HRESULT task1Url ([out, retval] BSTR* ReturnValue);
      // VB6: Function task1Url As String
      [DispId(3018)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPButtonCtrl</c> interface.  </para><para>IWMPButtonCtrl: Public interface for skin object model.</para></summary>
  // IWMPButtonCtrl: Public interface for skin object model.
  [Guid("87291B50-0C8E-11D3-BB2A-00A0C93CA73A")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPButtonCtrl
  {
    /// <summary><para><c>cursor</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>cursor</c> property was the following:  <c>BSTR cursor</c>;</para></remarks>
    // IDL: BSTR cursor;
    // VB6: cursor As String
    string cursor
    {
      // IDL: HRESULT cursor ([out, retval] BSTR* ReturnValue);
      // VB6: Function cursor As String
      [DispId(5114)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT cursor (BSTR value);
      // VB6: Sub cursor (ByVal value As String)
      [DispId(5114)]
      set;
    }

    /// <summary><para><c>disabledImage</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>disabledImage</c> property was the following:  <c>BSTR disabledImage</c>;</para></remarks>
    // IDL: BSTR disabledImage;
    // VB6: disabledImage As String
    string disabledImage
    {
      // IDL: HRESULT disabledImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function disabledImage As String
      [DispId(5105)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT disabledImage (BSTR value);
      // VB6: Sub disabledImage (ByVal value As String)
      [DispId(5105)]
      set;
    }

    /// <summary><para><c>down</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>down</c> property was the following:  <c>VARIANT_BOOL down</c>;</para></remarks>
    // IDL: VARIANT_BOOL down;
    // VB6: down As Boolean
    bool down
    {
      // IDL: HRESULT down ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function down As Boolean
      [DispId(5109)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT down (VARIANT_BOOL value);
      // VB6: Sub down (ByVal value As Boolean)
      [DispId(5109)]
      set;
    }

    /// <summary><para><c>downImage</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>downImage</c> property was the following:  <c>BSTR downImage</c>;</para></remarks>
    // IDL: BSTR downImage;
    // VB6: downImage As String
    string downImage
    {
      // IDL: HRESULT downImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function downImage As String
      [DispId(5104)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT downImage (BSTR value);
      // VB6: Sub downImage (ByVal value As String)
      [DispId(5104)]
      set;
    }

    /// <summary><para><c>downToolTip</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>downToolTip</c> property was the following:  <c>BSTR downToolTip</c>;</para></remarks>
    // IDL: BSTR downToolTip;
    // VB6: downToolTip As String
    string downToolTip
    {
      // IDL: HRESULT downToolTip ([out, retval] BSTR* ReturnValue);
      // VB6: Function downToolTip As String
      [DispId(5113)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT downToolTip (BSTR value);
      // VB6: Sub downToolTip (ByVal value As String)
      [DispId(5113)]
      set;
    }

    /// <summary><para><c>hoverDownImage</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>hoverDownImage</c> property was the following:  <c>BSTR hoverDownImage</c>;</para></remarks>
    // IDL: BSTR hoverDownImage;
    // VB6: hoverDownImage As String
    string hoverDownImage
    {
      // IDL: HRESULT hoverDownImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function hoverDownImage As String
      [DispId(5106)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT hoverDownImage (BSTR value);
      // VB6: Sub hoverDownImage (ByVal value As String)
      [DispId(5106)]
      set;
    }

    /// <summary><para><c>hoverImage</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>hoverImage</c> property was the following:  <c>BSTR hoverImage</c>;</para></remarks>
    // IDL: BSTR hoverImage;
    // VB6: hoverImage As String
    string hoverImage
    {
      // IDL: HRESULT hoverImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function hoverImage As String
      [DispId(5103)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT hoverImage (BSTR value);
      // VB6: Sub hoverImage (ByVal value As String)
      [DispId(5103)]
      set;
    }

    /// <summary><para><c>image</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>image</c> property was the following:  <c>BSTR image</c>;</para></remarks>
    // IDL: BSTR image;
    // VB6: image As String
    string image
    {
      // IDL: HRESULT image ([out, retval] BSTR* ReturnValue);
      // VB6: Function image As String
      [DispId(5102)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT image (BSTR value);
      // VB6: Sub image (ByVal value As String)
      [DispId(5102)]
      set;
    }

    /// <summary><para><c>sticky</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>sticky</c> property was the following:  <c>VARIANT_BOOL sticky</c>;</para></remarks>
    // IDL: VARIANT_BOOL sticky;
    // VB6: sticky As Boolean
    bool sticky
    {
      // IDL: HRESULT sticky ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function sticky As Boolean
      [DispId(5110)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT sticky (VARIANT_BOOL value);
      // VB6: Sub sticky (ByVal value As Boolean)
      [DispId(5110)]
      set;
    }

    /// <summary><para><c>tiled</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>tiled</c> property was the following:  <c>VARIANT_BOOL tiled</c>;</para></remarks>
    // IDL: VARIANT_BOOL tiled;
    // VB6: tiled As Boolean
    bool tiled
    {
      // IDL: HRESULT tiled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function tiled As Boolean
      [DispId(5107)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT tiled (VARIANT_BOOL value);
      // VB6: Sub tiled (ByVal value As Boolean)
      [DispId(5107)]
      set;
    }

    /// <summary><para><c>transparencyColor</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>transparencyColor</c> property was the following:  <c>BSTR transparencyColor</c>;</para></remarks>
    // IDL: BSTR transparencyColor;
    // VB6: transparencyColor As String
    string transparencyColor
    {
      // IDL: HRESULT transparencyColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function transparencyColor As String
      [DispId(5108)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT transparencyColor (BSTR value);
      // VB6: Sub transparencyColor (ByVal value As String)
      [DispId(5108)]
      set;
    }

    /// <summary><para><c>upToolTip</c> property of <c>IWMPButtonCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>upToolTip</c> property was the following:  <c>BSTR upToolTip</c>;</para></remarks>
    // IDL: BSTR upToolTip;
    // VB6: upToolTip As String
    string upToolTip
    {
      // IDL: HRESULT upToolTip ([out, retval] BSTR* ReturnValue);
      // VB6: Function upToolTip As String
      [DispId(5112)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT upToolTip (BSTR value);
      // VB6: Sub upToolTip (ByVal value As String)
      [DispId(5112)]
      set;
    }
  }

  /// <summary><para><c>IWMPButtonCtrlEvents</c> interface.  </para><para>IWMPButtonCtrlEvents: Public interface for skin object model.</para></summary>
  // IWMPButtonCtrlEvents: Public interface for skin object model.
  [Guid("BB17FFF7-1692-4555-918A-6AF7BFACEDD2")]
  [ComImport]
  [TypeLibType((short)4096)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPButtonCtrlEvents
  {
    /// <summary><para><c>onclick</c> method of <c>IWMPButtonCtrlEvents</c> interface.  </para><para>event ondragbegin</para></summary>
    /// <remarks><para>An original IDL definition of <c>onclick</c> method was the following:  <c>HRESULT onclick (void)</c>;</para></remarks>
    // event ondragbegin
    // IDL: HRESULT onclick (void);
    // VB6: Sub onclick
    [DispId(5120)]
    void onclick ();
  }

  /// <summary><para>Delegate for handling <c>onclick</c> event of <c>IWMPButtonCtrlEvents</c> interface.  </para><para>event ondragbegin</para></summary>
  /// <remarks><para>An original IDL definition of <c>onclick</c> event was the following:  <c>HRESULT IWMPButtonCtrlEvents_onclickEventHandler (void)</c>;</para></remarks>
  // event ondragbegin
  // IDL: HRESULT IWMPButtonCtrlEvents_onclickEventHandler (void);
  // VB6: Sub IWMPButtonCtrlEvents_onclickEventHandler
  public delegate void IWMPButtonCtrlEvents_onclickEventHandler ();

  /// <summary><para>Declaration of events of <c>IWMPButtonCtrlEvents</c> source interface.  </para><para>IWMPButtonCtrlEvents: Public interface for skin object model.</para></summary>
  // IWMPButtonCtrlEvents: Public interface for skin object model.
  [ComEventInterface(typeof(IWMPButtonCtrlEvents),typeof(IWMPButtonCtrlEvents_EventProvider))]
  [ComVisible(false)]
  public interface IWMPButtonCtrlEvents_Event
  {
    /// <summary><para><c>onclick</c> event of <c>IWMPButtonCtrlEvents</c> interface.  </para><para>event ondragbegin</para></summary>
    event IWMPButtonCtrlEvents_onclickEventHandler onclick;
  }

  [ClassInterface(ClassInterfaceType.None)]
  internal class IWMPButtonCtrlEvents_SinkHelper: IWMPButtonCtrlEvents
  {
    public int Cookie = 0;

    public event IWMPButtonCtrlEvents_onclickEventHandler onclickDelegate = null;
    public void Set_onclickDelegate(IWMPButtonCtrlEvents_onclickEventHandler deleg)
    {
      onclickDelegate = deleg;
    }
    public bool Is_onclickDelegate(IWMPButtonCtrlEvents_onclickEventHandler deleg)
    {
      return (onclickDelegate == deleg);
    }
    public void Clear_onclickDelegate()
    {
      onclickDelegate = null;
    }
    void IWMPButtonCtrlEvents.onclick ()
    {
      if (onclickDelegate!=null)
        onclickDelegate();
    }
  }

  internal class IWMPButtonCtrlEvents_EventProvider: IDisposable, IWMPButtonCtrlEvents_Event
  {
    UCOMIConnectionPointContainer ConnectionPointContainer;
    UCOMIConnectionPoint ConnectionPoint;
    IWMPButtonCtrlEvents_SinkHelper EventSinkHelper;
    int ConnectionCount;

    // Constructor: remember ConnectionPointContainer
    IWMPButtonCtrlEvents_EventProvider(object CPContainer) : base()
    {
      ConnectionPointContainer = (UCOMIConnectionPointContainer)CPContainer;
    }

    // Force disconnection from ActiveX event source
    ~IWMPButtonCtrlEvents_EventProvider()
    {
      Disconnect();
      ConnectionPointContainer = null;
    }

    // Aletnative to destructor
    void IDisposable.Dispose()
    {
      Disconnect();
      ConnectionPointContainer = null;
      System.GC.SuppressFinalize(this);
    }

    // Connect to ActiveX event source
    void Connect()
    {
      if (ConnectionPoint == null)
      {
        ConnectionCount = 0;
        Guid g = new Guid("BB17FFF7-1692-4555-918A-6AF7BFACEDD2");
        ConnectionPointContainer.FindConnectionPoint(ref g, out ConnectionPoint);
        EventSinkHelper = new IWMPButtonCtrlEvents_SinkHelper();
        ConnectionPoint.Advise(EventSinkHelper, out EventSinkHelper.Cookie);
      }
    }

    // Disconnect from ActiveX event source
    void Disconnect()
    {
      System.Threading.Monitor.Enter(this);
      try {
        if (EventSinkHelper != null)
          ConnectionPoint.Unadvise(EventSinkHelper.Cookie);
        ConnectionPoint = null;
        EventSinkHelper = null;
      } catch { }
      System.Threading.Monitor.Exit(this);
    }

    // If no event handler present then disconnect from ActiveX event source
    void CheckDisconnect()
    {
      ConnectionCount--;
      if (ConnectionCount <= 0)
        Disconnect();
    }

    event IWMPButtonCtrlEvents_onclickEventHandler IWMPButtonCtrlEvents_Event.onclick
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onclickDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onclickDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }
  }

  /// <summary><para><c>IWMPCDDVDWizardExternal</c> interface.  </para><para>IWMPCDDVDWizardExternal: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPCDDVDWizardExternal: Not Public.  Internal interface used by Windows Media Player.
  [Guid("2D7EF888-1D3C-484A-A906-9F49D99BB344")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPCDDVDWizardExternal
  {
    /// <summary><para><c>WriteNames</c> method of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>WriteNames</c> method was the following:  <c>HRESULT WriteNames (BSTR bstrTOC, BSTR bstrMetadata)</c>;</para></remarks>
    // IDL: HRESULT WriteNames (BSTR bstrTOC, BSTR bstrMetadata);
    // VB6: Sub WriteNames (ByVal bstrTOC As String, ByVal bstrMetadata As String)
    [DispId(10001)]
    void WriteNames ([MarshalAs(UnmanagedType.BStr)] string bstrTOC, [MarshalAs(UnmanagedType.BStr)] string bstrMetadata);

    /// <summary><para><c>ReturnToMainTask</c> method of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>ReturnToMainTask</c> method was the following:  <c>HRESULT ReturnToMainTask (void)</c>;</para></remarks>
    // IDL: HRESULT ReturnToMainTask (void);
    // VB6: Sub ReturnToMainTask
    [DispId(10002)]
    void ReturnToMainTask ();

    /// <summary><para><c>WriteNamesEx</c> method of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>WriteNamesEx</c> method was the following:  <c>HRESULT WriteNamesEx (WMP_WRITENAMESEX_TYPE type, BSTR bstrTypeId, BSTR bstrMetadata, VARIANT_BOOL fRenameRegroupFiles)</c>;</para></remarks>
    // IDL: HRESULT WriteNamesEx (WMP_WRITENAMESEX_TYPE type, BSTR bstrTypeId, BSTR bstrMetadata, VARIANT_BOOL fRenameRegroupFiles);
    // VB6: Sub WriteNamesEx (ByVal type As WMP_WRITENAMESEX_TYPE, ByVal bstrTypeId As String, ByVal bstrMetadata As String, ByVal fRenameRegroupFiles As Boolean)
    [DispId(10007)]
    void WriteNamesEx (WMP_WRITENAMESEX_TYPE type, [MarshalAs(UnmanagedType.BStr)] string bstrTypeId, [MarshalAs(UnmanagedType.BStr)] string bstrMetadata, [MarshalAs(UnmanagedType.VariantBool)] bool fRenameRegroupFiles);

    /// <summary><para><c>GetMDQByRequestID</c> method of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetMDQByRequestID</c> method was the following:  <c>HRESULT GetMDQByRequestID (BSTR bstrRequestID, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT GetMDQByRequestID (BSTR bstrRequestID, [out, retval] BSTR* ReturnValue);
    // VB6: Function GetMDQByRequestID (ByVal bstrRequestID As String) As String
    [DispId(10008)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string GetMDQByRequestID ([MarshalAs(UnmanagedType.BStr)] string bstrRequestID);

    /// <summary><para><c>EditMetadata</c> method of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>EditMetadata</c> method was the following:  <c>HRESULT EditMetadata (void)</c>;</para></remarks>
    // IDL: HRESULT EditMetadata (void);
    // VB6: Sub EditMetadata
    [DispId(10011)]
    void EditMetadata ();

    /// <summary><para><c>IsMetadataAvailableForEdit</c> method of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>IsMetadataAvailableForEdit</c> method was the following:  <c>HRESULT IsMetadataAvailableForEdit ([out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT IsMetadataAvailableForEdit ([out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function IsMetadataAvailableForEdit As Boolean
    [DispId(10010)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool IsMetadataAvailableForEdit ();

    /// <summary><para><c>BuyCD</c> method of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>BuyCD</c> method was the following:  <c>HRESULT BuyCD (BSTR bstrTitle, BSTR bstrArtist, BSTR bstrAlbum, BSTR bstrUFID, BSTR bstrWMID)</c>;</para></remarks>
    // IDL: HRESULT BuyCD (BSTR bstrTitle, BSTR bstrArtist, BSTR bstrAlbum, BSTR bstrUFID, BSTR bstrWMID);
    // VB6: Sub BuyCD (ByVal bstrTitle As String, ByVal bstrArtist As String, ByVal bstrAlbum As String, ByVal bstrUFID As String, ByVal bstrWMID As String)
    [DispId(10023)]
    void BuyCD ([MarshalAs(UnmanagedType.BStr)] string bstrTitle, [MarshalAs(UnmanagedType.BStr)] string bstrArtist, [MarshalAs(UnmanagedType.BStr)] string bstrAlbum, [MarshalAs(UnmanagedType.BStr)] string bstrUFID, [MarshalAs(UnmanagedType.BStr)] string bstrWMID);

    /// <summary><para><c>appColorButtonHighlight</c> property of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHighlight</c> property was the following:  <c>BSTR appColorButtonHighlight</c>;</para></remarks>
    // IDL: BSTR appColorButtonHighlight;
    // VB6: appColorButtonHighlight As String
    string appColorButtonHighlight
    {
      // IDL: HRESULT appColorButtonHighlight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHighlight As String
      [DispId(10015)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonHoverFace</c> property of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHoverFace</c> property was the following:  <c>BSTR appColorButtonHoverFace</c>;</para></remarks>
    // IDL: BSTR appColorButtonHoverFace;
    // VB6: appColorButtonHoverFace As String
    string appColorButtonHoverFace
    {
      // IDL: HRESULT appColorButtonHoverFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHoverFace As String
      [DispId(10017)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonShadow</c> property of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonShadow</c> property was the following:  <c>BSTR appColorButtonShadow</c>;</para></remarks>
    // IDL: BSTR appColorButtonShadow;
    // VB6: appColorButtonShadow As String
    string appColorButtonShadow
    {
      // IDL: HRESULT appColorButtonShadow ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonShadow As String
      [DispId(10016)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorDark</c> property of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorDark</c> property was the following:  <c>BSTR appColorDark</c>;</para></remarks>
    // IDL: BSTR appColorDark;
    // VB6: appColorDark As String
    string appColorDark
    {
      // IDL: HRESULT appColorDark ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorDark As String
      [DispId(10014)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorLight</c> property of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorLight</c> property was the following:  <c>BSTR appColorLight</c>;</para></remarks>
    // IDL: BSTR appColorLight;
    // VB6: appColorLight As String
    string appColorLight
    {
      // IDL: HRESULT appColorLight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorLight As String
      [DispId(10012)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorMedium</c> property of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorMedium</c> property was the following:  <c>BSTR appColorMedium</c>;</para></remarks>
    // IDL: BSTR appColorMedium;
    // VB6: appColorMedium As String
    string appColorMedium
    {
      // IDL: HRESULT appColorMedium ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorMedium As String
      [DispId(10013)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>OnColorChange</c> property of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnColorChange</c> property was the following:  <c>IDispatch OnColorChange</c>;</para></remarks>
    // IDL: IDispatch OnColorChange;
    // VB6: OnColorChange As IDispatch
    object OnColorChange
    {
      // IDL: HRESULT OnColorChange (IDispatch* value);
      // VB6: Sub OnColorChange (ByVal value As IDispatch)
      [DispId(10018)]
      set;
    }

    /// <summary><para><c>version</c> property of <c>IWMPCDDVDWizardExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>version</c> property was the following:  <c>BSTR version</c>;</para></remarks>
    // IDL: BSTR version;
    // VB6: version As String
    string version
    {
      // IDL: HRESULT version ([out, retval] BSTR* ReturnValue);
      // VB6: Function version As String
      [DispId(10005)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPCdrom</c> interface.  </para><para>IWMPCdrom: Public interface.</para></summary>
  // IWMPCdrom: Public interface.
  [Guid("CFAB6E98-8730-11D3-B388-00C04F68574B")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPCdrom
  {
    /// <summary><para><c>eject</c> method of <c>IWMPCdrom</c> interface.  </para><para>Eject the CD in the CDROM drive</para></summary>
    /// <remarks><para>An original IDL definition of <c>eject</c> method was the following:  <c>HRESULT eject (void)</c>;</para></remarks>
    // Eject the CD in the CDROM drive
    // IDL: HRESULT eject (void);
    // VB6: Sub eject
    [DispId(253)]
    void eject ();

    /// <summary><para><c>driveSpecifier</c> property of <c>IWMPCdrom</c> interface.  </para><para>Returns the CDROM drive specifier</para></summary>
    /// <remarks><para>An original IDL definition of <c>driveSpecifier</c> property was the following:  <c>BSTR driveSpecifier</c>;</para></remarks>
    // Returns the CDROM drive specifier
    // IDL: BSTR driveSpecifier;
    // VB6: driveSpecifier As String
    string driveSpecifier
    {
      // IDL: HRESULT driveSpecifier ([out, retval] BSTR* ReturnValue);
      // VB6: Function driveSpecifier As String
      [DispId(251)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>Playlist</c> property of <c>IWMPCdrom</c> interface.  </para><para>Returns the playlist of tracks currently in the CDROM drive</para></summary>
    /// <remarks><para>An original IDL definition of <c>Playlist</c> property was the following:  <c>IWMPPlaylist* Playlist</c>;</para></remarks>
    // Returns the playlist of tracks currently in the CDROM drive
    // IDL: IWMPPlaylist* Playlist;
    // VB6: Playlist As IWMPPlaylist
    IWMPPlaylist Playlist
    {
      // IDL: HRESULT Playlist ([out, retval] IWMPPlaylist** ReturnValue);
      // VB6: Function Playlist As IWMPPlaylist
      [DispId(252)]
      get;
    }
  }

  /// <summary><para><c>IWMPCdromCollection</c> interface.  </para><para>IWMPCdromCollection: Public interface.</para></summary>
  // IWMPCdromCollection: Public interface.
  [Guid("EE4C8FE2-34B2-11D3-A3BF-006097C9B344")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPCdromCollection
  {
    /// <summary><para><c>Item</c> method of <c>IWMPCdromCollection</c> interface.  </para><para>Returns the CDROM object at the given index</para></summary>
    /// <remarks><para>An original IDL definition of <c>Item</c> method was the following:  <c>HRESULT Item (long lIndex, [out, retval] IWMPCdrom** ReturnValue)</c>;</para></remarks>
    // Returns the CDROM object at the given index
    // IDL: HRESULT Item (long lIndex, [out, retval] IWMPCdrom** ReturnValue);
    // VB6: Function Item (ByVal lIndex As Long) As IWMPCdrom
    [DispId(302)]
    IWMPCdrom Item (int lIndex);

    /// <summary><para><c>getByDriveSpecifier</c> method of <c>IWMPCdromCollection</c> interface.  </para><para>Returns the CDROM object associated with a particular drive specifier, e.g. F:</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByDriveSpecifier</c> method was the following:  <c>HRESULT getByDriveSpecifier (BSTR bstrDriveSpecifier, [out, retval] IWMPCdrom** ReturnValue)</c>;</para></remarks>
    // Returns the CDROM object associated with a particular drive specifier, e.g. F:
    // IDL: HRESULT getByDriveSpecifier (BSTR bstrDriveSpecifier, [out, retval] IWMPCdrom** ReturnValue);
    // VB6: Function getByDriveSpecifier (ByVal bstrDriveSpecifier As String) As IWMPCdrom
    [DispId(303)]
    IWMPCdrom getByDriveSpecifier ([MarshalAs(UnmanagedType.BStr)] string bstrDriveSpecifier);

    /// <summary><para><c>count</c> property of <c>IWMPCdromCollection</c> interface.  </para><para>Returns the number of items in the cdrom collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>count</c> property was the following:  <c>long count</c>;</para></remarks>
    // Returns the number of items in the cdrom collection
    // IDL: long count;
    // VB6: count As Long
    int count
    {
      // IDL: HRESULT count ([out, retval] long* ReturnValue);
      // VB6: Function count As Long
      [DispId(301)]
      get;
    }
  }

  /// <summary><para><c>IWMPClosedCaption</c> interface.  </para><para>IWMPClosedCaption: Public interface.</para></summary>
  // IWMPClosedCaption: Public interface.
  [Guid("4F2DF574-C588-11D3-9ED0-00C04FB6E937")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPClosedCaption
  {
    /// <summary><para><c>captioningId</c> property of <c>IWMPClosedCaption</c> interface.  </para><para>Returns the previously set Captioning ID</para></summary>
    /// <remarks><para>An original IDL definition of <c>captioningId</c> property was the following:  <c>BSTR captioningId</c>;</para></remarks>
    // Returns the previously set Captioning ID
    // IDL: BSTR captioningId;
    // VB6: captioningId As String
    string captioningId
    {
      // IDL: HRESULT captioningId ([out, retval] BSTR* ReturnValue);
      // VB6: Function captioningId As String
      [DispId(954)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT captioningId (BSTR value);
      // VB6: Sub captioningId (ByVal value As String)
      [DispId(954)]
      set;
    }

    /// <summary><para><c>SAMIFileName</c> property of <c>IWMPClosedCaption</c> interface.  </para><para>Returns the previously set SAMI file name</para></summary>
    /// <remarks><para>An original IDL definition of <c>SAMIFileName</c> property was the following:  <c>BSTR SAMIFileName</c>;</para></remarks>
    // Returns the previously set SAMI file name
    // IDL: BSTR SAMIFileName;
    // VB6: SAMIFileName As String
    string SAMIFileName
    {
      // IDL: HRESULT SAMIFileName ([out, retval] BSTR* ReturnValue);
      // VB6: Function SAMIFileName As String
      [DispId(953)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT SAMIFileName (BSTR value);
      // VB6: Sub SAMIFileName (ByVal value As String)
      [DispId(953)]
      set;
    }

    /// <summary><para><c>SAMILang</c> property of <c>IWMPClosedCaption</c> interface.  </para><para>Returns the previously set SAMI language</para></summary>
    /// <remarks><para>An original IDL definition of <c>SAMILang</c> property was the following:  <c>BSTR SAMILang</c>;</para></remarks>
    // Returns the previously set SAMI language
    // IDL: BSTR SAMILang;
    // VB6: SAMILang As String
    string SAMILang
    {
      // IDL: HRESULT SAMILang ([out, retval] BSTR* ReturnValue);
      // VB6: Function SAMILang As String
      [DispId(952)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT SAMILang (BSTR value);
      // VB6: Sub SAMILang (ByVal value As String)
      [DispId(952)]
      set;
    }

    /// <summary><para><c>SAMIStyle</c> property of <c>IWMPClosedCaption</c> interface.  </para><para>Returns the previously set SAMI style</para></summary>
    /// <remarks><para>An original IDL definition of <c>SAMIStyle</c> property was the following:  <c>BSTR SAMIStyle</c>;</para></remarks>
    // Returns the previously set SAMI style
    // IDL: BSTR SAMIStyle;
    // VB6: SAMIStyle As String
    string SAMIStyle
    {
      // IDL: HRESULT SAMIStyle ([out, retval] BSTR* ReturnValue);
      // VB6: Function SAMIStyle As String
      [DispId(951)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT SAMIStyle (BSTR value);
      // VB6: Sub SAMIStyle (ByVal value As String)
      [DispId(951)]
      set;
    }
  }

  /// <summary><para><c>IWMPClosedCaption2</c> interface.  </para><para>IWMPClosedCaption2: Public interface.</para></summary>
  // IWMPClosedCaption2: Public interface.
  [Guid("350BA78B-6BC8-4113-A5F5-312056934EB6")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPClosedCaption2
  {
    /// <summary><para><c>getSAMILangName</c> method of <c>IWMPClosedCaption2</c> interface.  </para><para>Returns the name of a SAMI language by index</para></summary>
    /// <remarks><para>An original IDL definition of <c>getSAMILangName</c> method was the following:  <c>HRESULT getSAMILangName (long nIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the name of a SAMI language by index
    // IDL: HRESULT getSAMILangName (long nIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function getSAMILangName (ByVal nIndex As Long) As String
    [DispId(956)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getSAMILangName (int nIndex);

    /// <summary><para><c>getSAMILangID</c> method of <c>IWMPClosedCaption2</c> interface.  </para><para>Returns the ID of a SAMI language by index</para></summary>
    /// <remarks><para>An original IDL definition of <c>getSAMILangID</c> method was the following:  <c>HRESULT getSAMILangID (long nIndex, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // Returns the ID of a SAMI language by index
    // IDL: HRESULT getSAMILangID (long nIndex, [out, retval] long* ReturnValue);
    // VB6: Function getSAMILangID (ByVal nIndex As Long) As Long
    [DispId(957)]
    int getSAMILangID (int nIndex);

    /// <summary><para><c>getSAMIStyleName</c> method of <c>IWMPClosedCaption2</c> interface.  </para><para>Returns the name of a SAMI style by index</para></summary>
    /// <remarks><para>An original IDL definition of <c>getSAMIStyleName</c> method was the following:  <c>HRESULT getSAMIStyleName (long nIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the name of a SAMI style by index
    // IDL: HRESULT getSAMIStyleName (long nIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function getSAMIStyleName (ByVal nIndex As Long) As String
    [DispId(959)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getSAMIStyleName (int nIndex);

    /// <summary><para><c>captioningId</c> property of <c>IWMPClosedCaption2</c> interface.  </para><para>Returns the previously set Captioning ID</para></summary>
    /// <remarks><para>An original IDL definition of <c>captioningId</c> property was the following:  <c>BSTR captioningId</c>;</para></remarks>
    // Returns the previously set Captioning ID
    // IDL: BSTR captioningId;
    // VB6: captioningId As String
    string captioningId
    {
      // IDL: HRESULT captioningId ([out, retval] BSTR* ReturnValue);
      // VB6: Function captioningId As String
      [DispId(954)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT captioningId (BSTR value);
      // VB6: Sub captioningId (ByVal value As String)
      [DispId(954)]
      set;
    }

    /// <summary><para><c>SAMIFileName</c> property of <c>IWMPClosedCaption2</c> interface.  </para><para>Returns the previously set SAMI file name</para></summary>
    /// <remarks><para>An original IDL definition of <c>SAMIFileName</c> property was the following:  <c>BSTR SAMIFileName</c>;</para></remarks>
    // Returns the previously set SAMI file name
    // IDL: BSTR SAMIFileName;
    // VB6: SAMIFileName As String
    string SAMIFileName
    {
      // IDL: HRESULT SAMIFileName ([out, retval] BSTR* ReturnValue);
      // VB6: Function SAMIFileName As String
      [DispId(953)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT SAMIFileName (BSTR value);
      // VB6: Sub SAMIFileName (ByVal value As String)
      [DispId(953)]
      set;
    }

    /// <summary><para><c>SAMILang</c> property of <c>IWMPClosedCaption2</c> interface.  </para><para>Returns the previously set SAMI language</para></summary>
    /// <remarks><para>An original IDL definition of <c>SAMILang</c> property was the following:  <c>BSTR SAMILang</c>;</para></remarks>
    // Returns the previously set SAMI language
    // IDL: BSTR SAMILang;
    // VB6: SAMILang As String
    string SAMILang
    {
      // IDL: HRESULT SAMILang ([out, retval] BSTR* ReturnValue);
      // VB6: Function SAMILang As String
      [DispId(952)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT SAMILang (BSTR value);
      // VB6: Sub SAMILang (ByVal value As String)
      [DispId(952)]
      set;
    }

    /// <summary><para><c>SAMILangCount</c> property of <c>IWMPClosedCaption2</c> interface.  </para><para>Returns the count of SAMI languages</para></summary>
    /// <remarks><para>An original IDL definition of <c>SAMILangCount</c> property was the following:  <c>long SAMILangCount</c>;</para></remarks>
    // Returns the count of SAMI languages
    // IDL: long SAMILangCount;
    // VB6: SAMILangCount As Long
    int SAMILangCount
    {
      // IDL: HRESULT SAMILangCount ([out, retval] long* ReturnValue);
      // VB6: Function SAMILangCount As Long
      [DispId(955)]
      get;
    }

    /// <summary><para><c>SAMIStyle</c> property of <c>IWMPClosedCaption2</c> interface.  </para><para>Returns the previously set SAMI style</para></summary>
    /// <remarks><para>An original IDL definition of <c>SAMIStyle</c> property was the following:  <c>BSTR SAMIStyle</c>;</para></remarks>
    // Returns the previously set SAMI style
    // IDL: BSTR SAMIStyle;
    // VB6: SAMIStyle As String
    string SAMIStyle
    {
      // IDL: HRESULT SAMIStyle ([out, retval] BSTR* ReturnValue);
      // VB6: Function SAMIStyle As String
      [DispId(951)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT SAMIStyle (BSTR value);
      // VB6: Sub SAMIStyle (ByVal value As String)
      [DispId(951)]
      set;
    }

    /// <summary><para><c>SAMIStyleCount</c> property of <c>IWMPClosedCaption2</c> interface.  </para><para>Returns the count of SAMI styles</para></summary>
    /// <remarks><para>An original IDL definition of <c>SAMIStyleCount</c> property was the following:  <c>long SAMIStyleCount</c>;</para></remarks>
    // Returns the count of SAMI styles
    // IDL: long SAMIStyleCount;
    // VB6: SAMIStyleCount As Long
    int SAMIStyleCount
    {
      // IDL: HRESULT SAMIStyleCount ([out, retval] long* ReturnValue);
      // VB6: Function SAMIStyleCount As Long
      [DispId(958)]
      get;
    }
  }

  /// <summary><para><c>IWMPControls</c> interface.  </para><para>IWMPControls: Public interface.</para></summary>
  // IWMPControls: Public interface.
  [Guid("74C09E02-F828-11D2-A74B-00A0C905F36E")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPControls
  {
    /// <summary><para><c>isAvailable</c> property get of <c>IWMPControls</c> interface.  </para><para>Returns whether or not the specified media functionality is available</para></summary>
    /// <remarks><para>An original IDL definition of <c>isAvailable</c> property get was the following:  <c>HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Returns whether or not the specified media functionality is available
    // IDL: HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isAvailable (ByVal bstrItem As String) As Boolean
    [DispId(62)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItem) /* property get method */;

    /// <summary><para><c>play</c> method of <c>IWMPControls</c> interface.  </para><para>Begins playing media</para></summary>
    /// <remarks><para>An original IDL definition of <c>play</c> method was the following:  <c>HRESULT play (void)</c>;</para></remarks>
    // Begins playing media
    // IDL: HRESULT play (void);
    // VB6: Sub play
    [DispId(51)]
    void play ();

    /// <summary><para><c>stop</c> method of <c>IWMPControls</c> interface.  </para><para>Stops play of media</para></summary>
    /// <remarks><para>An original IDL definition of <c>stop</c> method was the following:  <c>HRESULT stop (void)</c>;</para></remarks>
    // Stops play of media
    // IDL: HRESULT stop (void);
    // VB6: Sub stop
    [DispId(52)]
    void stop ();

    /// <summary><para><c>pause</c> method of <c>IWMPControls</c> interface.  </para><para>Pauses play of media</para></summary>
    /// <remarks><para>An original IDL definition of <c>pause</c> method was the following:  <c>HRESULT pause (void)</c>;</para></remarks>
    // Pauses play of media
    // IDL: HRESULT pause (void);
    // VB6: Sub pause
    [DispId(53)]
    void pause ();

    /// <summary><para><c>fastForward</c> method of <c>IWMPControls</c> interface.  </para><para>Fast play of media in forward direction</para></summary>
    /// <remarks><para>An original IDL definition of <c>fastForward</c> method was the following:  <c>HRESULT fastForward (void)</c>;</para></remarks>
    // Fast play of media in forward direction
    // IDL: HRESULT fastForward (void);
    // VB6: Sub fastForward
    [DispId(54)]
    void fastForward ();

    /// <summary><para><c>fastReverse</c> method of <c>IWMPControls</c> interface.  </para><para>Fast play of media in reverse direction</para></summary>
    /// <remarks><para>An original IDL definition of <c>fastReverse</c> method was the following:  <c>HRESULT fastReverse (void)</c>;</para></remarks>
    // Fast play of media in reverse direction
    // IDL: HRESULT fastReverse (void);
    // VB6: Sub fastReverse
    [DispId(55)]
    void fastReverse ();

    /// <summary><para><c>next</c> method of <c>IWMPControls</c> interface.  </para><para>Sets the current item to the next item in the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>next</c> method was the following:  <c>HRESULT next (void)</c>;</para></remarks>
    // Sets the current item to the next item in the playlist
    // IDL: HRESULT next (void);
    // VB6: Sub next
    [DispId(58)]
    void next ();

    /// <summary><para><c>previous</c> method of <c>IWMPControls</c> interface.  </para><para>Sets the current item to the previous item in the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>previous</c> method was the following:  <c>HRESULT previous (void)</c>;</para></remarks>
    // Sets the current item to the previous item in the playlist
    // IDL: HRESULT previous (void);
    // VB6: Sub previous
    [DispId(59)]
    void previous ();

    /// <summary><para><c>playItem</c> method of <c>IWMPControls</c> interface.  </para><para>Sets the current item and plays it</para></summary>
    /// <remarks><para>An original IDL definition of <c>playItem</c> method was the following:  <c>HRESULT playItem (IWMPMedia* pIWMPMedia)</c>;</para></remarks>
    // Sets the current item and plays it
    // IDL: HRESULT playItem (IWMPMedia* pIWMPMedia);
    // VB6: Sub playItem (ByVal pIWMPMedia As IWMPMedia)
    [DispId(63)]
    void playItem (IWMPMedia pIWMPMedia);

    /// <summary><para><c>currentItem</c> property of <c>IWMPControls</c> interface.  </para><para>Returns/Sets the play item</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentItem</c> property was the following:  <c>IWMPMedia* currentItem</c>;</para></remarks>
    // Returns/Sets the play item
    // IDL: IWMPMedia* currentItem;
    // VB6: currentItem As IWMPMedia
    IWMPMedia currentItem
    {
      // IDL: HRESULT currentItem ([out, retval] IWMPMedia** ReturnValue);
      // VB6: Function currentItem As IWMPMedia
      [DispId(60)]
      get;
      // IDL: HRESULT currentItem (IWMPMedia* value);
      // VB6: Sub currentItem (ByVal value As IWMPMedia)
      [DispId(60)]
      set;
    }

    /// <summary><para><c>currentMarker</c> property of <c>IWMPControls</c> interface.  </para><para>Returns the current marker</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentMarker</c> property was the following:  <c>long currentMarker</c>;</para></remarks>
    // Returns the current marker
    // IDL: long currentMarker;
    // VB6: currentMarker As Long
    int currentMarker
    {
      // IDL: HRESULT currentMarker ([out, retval] long* ReturnValue);
      // VB6: Function currentMarker As Long
      [DispId(61)]
      get;
      // IDL: HRESULT currentMarker (long value);
      // VB6: Sub currentMarker (ByVal value As Long)
      [DispId(61)]
      set;
    }

    /// <summary><para><c>currentPosition</c> property of <c>IWMPControls</c> interface.  </para><para>Returns the current position in media</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPosition</c> property was the following:  <c>double currentPosition</c>;</para></remarks>
    // Returns the current position in media
    // IDL: double currentPosition;
    // VB6: currentPosition As Double
    double currentPosition
    {
      // IDL: HRESULT currentPosition ([out, retval] double* ReturnValue);
      // VB6: Function currentPosition As Double
      [DispId(56)]
      get;
      // IDL: HRESULT currentPosition (double value);
      // VB6: Sub currentPosition (ByVal value As Double)
      [DispId(56)]
      set;
    }

    /// <summary><para><c>currentPositionString</c> property of <c>IWMPControls</c> interface.  </para><para>Returns the current position in media as a string</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPositionString</c> property was the following:  <c>BSTR currentPositionString</c>;</para></remarks>
    // Returns the current position in media as a string
    // IDL: BSTR currentPositionString;
    // VB6: currentPositionString As String
    string currentPositionString
    {
      // IDL: HRESULT currentPositionString ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentPositionString As String
      [DispId(57)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPControls2</c> interface.  </para><para>IWMPControls2: Public interface.</para></summary>
  // IWMPControls2: Public interface.
  [Guid("6F030D25-0890-480F-9775-1F7E40AB5B8E")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPControls2
  {
    /// <summary><para><c>isAvailable</c> property get of <c>IWMPControls2</c> interface.  </para><para>Returns whether or not the specified media functionality is available</para></summary>
    /// <remarks><para>An original IDL definition of <c>isAvailable</c> property get was the following:  <c>HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Returns whether or not the specified media functionality is available
    // IDL: HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isAvailable (ByVal bstrItem As String) As Boolean
    [DispId(62)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItem) /* property get method */;

    /// <summary><para><c>play</c> method of <c>IWMPControls2</c> interface.  </para><para>Begins playing media</para></summary>
    /// <remarks><para>An original IDL definition of <c>play</c> method was the following:  <c>HRESULT play (void)</c>;</para></remarks>
    // Begins playing media
    // IDL: HRESULT play (void);
    // VB6: Sub play
    [DispId(51)]
    void play ();

    /// <summary><para><c>stop</c> method of <c>IWMPControls2</c> interface.  </para><para>Stops play of media</para></summary>
    /// <remarks><para>An original IDL definition of <c>stop</c> method was the following:  <c>HRESULT stop (void)</c>;</para></remarks>
    // Stops play of media
    // IDL: HRESULT stop (void);
    // VB6: Sub stop
    [DispId(52)]
    void stop ();

    /// <summary><para><c>pause</c> method of <c>IWMPControls2</c> interface.  </para><para>Pauses play of media</para></summary>
    /// <remarks><para>An original IDL definition of <c>pause</c> method was the following:  <c>HRESULT pause (void)</c>;</para></remarks>
    // Pauses play of media
    // IDL: HRESULT pause (void);
    // VB6: Sub pause
    [DispId(53)]
    void pause ();

    /// <summary><para><c>fastForward</c> method of <c>IWMPControls2</c> interface.  </para><para>Fast play of media in forward direction</para></summary>
    /// <remarks><para>An original IDL definition of <c>fastForward</c> method was the following:  <c>HRESULT fastForward (void)</c>;</para></remarks>
    // Fast play of media in forward direction
    // IDL: HRESULT fastForward (void);
    // VB6: Sub fastForward
    [DispId(54)]
    void fastForward ();

    /// <summary><para><c>fastReverse</c> method of <c>IWMPControls2</c> interface.  </para><para>Fast play of media in reverse direction</para></summary>
    /// <remarks><para>An original IDL definition of <c>fastReverse</c> method was the following:  <c>HRESULT fastReverse (void)</c>;</para></remarks>
    // Fast play of media in reverse direction
    // IDL: HRESULT fastReverse (void);
    // VB6: Sub fastReverse
    [DispId(55)]
    void fastReverse ();

    /// <summary><para><c>next</c> method of <c>IWMPControls2</c> interface.  </para><para>Sets the current item to the next item in the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>next</c> method was the following:  <c>HRESULT next (void)</c>;</para></remarks>
    // Sets the current item to the next item in the playlist
    // IDL: HRESULT next (void);
    // VB6: Sub next
    [DispId(58)]
    void next ();

    /// <summary><para><c>previous</c> method of <c>IWMPControls2</c> interface.  </para><para>Sets the current item to the previous item in the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>previous</c> method was the following:  <c>HRESULT previous (void)</c>;</para></remarks>
    // Sets the current item to the previous item in the playlist
    // IDL: HRESULT previous (void);
    // VB6: Sub previous
    [DispId(59)]
    void previous ();

    /// <summary><para><c>playItem</c> method of <c>IWMPControls2</c> interface.  </para><para>Sets the current item and plays it</para></summary>
    /// <remarks><para>An original IDL definition of <c>playItem</c> method was the following:  <c>HRESULT playItem (IWMPMedia* pIWMPMedia)</c>;</para></remarks>
    // Sets the current item and plays it
    // IDL: HRESULT playItem (IWMPMedia* pIWMPMedia);
    // VB6: Sub playItem (ByVal pIWMPMedia As IWMPMedia)
    [DispId(63)]
    void playItem (IWMPMedia pIWMPMedia);

    /// <summary><para><c>step</c> method of <c>IWMPControls2</c> interface.  </para><para>Advances the video one frame</para></summary>
    /// <remarks><para>An original IDL definition of <c>step</c> method was the following:  <c>HRESULT step (long lStep)</c>;</para></remarks>
    // Advances the video one frame
    // IDL: HRESULT step (long lStep);
    // VB6: Sub step (ByVal lStep As Long)
    [DispId(64)]
    void step (int lStep);

    /// <summary><para><c>currentItem</c> property of <c>IWMPControls2</c> interface.  </para><para>Returns/Sets the play item</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentItem</c> property was the following:  <c>IWMPMedia* currentItem</c>;</para></remarks>
    // Returns/Sets the play item
    // IDL: IWMPMedia* currentItem;
    // VB6: currentItem As IWMPMedia
    IWMPMedia currentItem
    {
      // IDL: HRESULT currentItem ([out, retval] IWMPMedia** ReturnValue);
      // VB6: Function currentItem As IWMPMedia
      [DispId(60)]
      get;
      // IDL: HRESULT currentItem (IWMPMedia* value);
      // VB6: Sub currentItem (ByVal value As IWMPMedia)
      [DispId(60)]
      set;
    }

    /// <summary><para><c>currentMarker</c> property of <c>IWMPControls2</c> interface.  </para><para>Returns the current marker</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentMarker</c> property was the following:  <c>long currentMarker</c>;</para></remarks>
    // Returns the current marker
    // IDL: long currentMarker;
    // VB6: currentMarker As Long
    int currentMarker
    {
      // IDL: HRESULT currentMarker ([out, retval] long* ReturnValue);
      // VB6: Function currentMarker As Long
      [DispId(61)]
      get;
      // IDL: HRESULT currentMarker (long value);
      // VB6: Sub currentMarker (ByVal value As Long)
      [DispId(61)]
      set;
    }

    /// <summary><para><c>currentPosition</c> property of <c>IWMPControls2</c> interface.  </para><para>Returns the current position in media</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPosition</c> property was the following:  <c>double currentPosition</c>;</para></remarks>
    // Returns the current position in media
    // IDL: double currentPosition;
    // VB6: currentPosition As Double
    double currentPosition
    {
      // IDL: HRESULT currentPosition ([out, retval] double* ReturnValue);
      // VB6: Function currentPosition As Double
      [DispId(56)]
      get;
      // IDL: HRESULT currentPosition (double value);
      // VB6: Sub currentPosition (ByVal value As Double)
      [DispId(56)]
      set;
    }

    /// <summary><para><c>currentPositionString</c> property of <c>IWMPControls2</c> interface.  </para><para>Returns the current position in media as a string</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPositionString</c> property was the following:  <c>BSTR currentPositionString</c>;</para></remarks>
    // Returns the current position in media as a string
    // IDL: BSTR currentPositionString;
    // VB6: currentPositionString As String
    string currentPositionString
    {
      // IDL: HRESULT currentPositionString ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentPositionString As String
      [DispId(57)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPControls3</c> interface.  </para><para>IWMPControls3: Public interface.</para></summary>
  // IWMPControls3: Public interface.
  [Guid("A1D1110E-D545-476A-9A78-AC3E4CB1E6BD")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPControls3
  {
    /// <summary><para><c>isAvailable</c> property get of <c>IWMPControls3</c> interface.  </para><para>Returns whether or not the specified media functionality is available</para></summary>
    /// <remarks><para>An original IDL definition of <c>isAvailable</c> property get was the following:  <c>HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Returns whether or not the specified media functionality is available
    // IDL: HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isAvailable (ByVal bstrItem As String) As Boolean
    [DispId(62)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItem) /* property get method */;

    /// <summary><para><c>play</c> method of <c>IWMPControls3</c> interface.  </para><para>Begins playing media</para></summary>
    /// <remarks><para>An original IDL definition of <c>play</c> method was the following:  <c>HRESULT play (void)</c>;</para></remarks>
    // Begins playing media
    // IDL: HRESULT play (void);
    // VB6: Sub play
    [DispId(51)]
    void play ();

    /// <summary><para><c>stop</c> method of <c>IWMPControls3</c> interface.  </para><para>Stops play of media</para></summary>
    /// <remarks><para>An original IDL definition of <c>stop</c> method was the following:  <c>HRESULT stop (void)</c>;</para></remarks>
    // Stops play of media
    // IDL: HRESULT stop (void);
    // VB6: Sub stop
    [DispId(52)]
    void stop ();

    /// <summary><para><c>pause</c> method of <c>IWMPControls3</c> interface.  </para><para>Pauses play of media</para></summary>
    /// <remarks><para>An original IDL definition of <c>pause</c> method was the following:  <c>HRESULT pause (void)</c>;</para></remarks>
    // Pauses play of media
    // IDL: HRESULT pause (void);
    // VB6: Sub pause
    [DispId(53)]
    void pause ();

    /// <summary><para><c>fastForward</c> method of <c>IWMPControls3</c> interface.  </para><para>Fast play of media in forward direction</para></summary>
    /// <remarks><para>An original IDL definition of <c>fastForward</c> method was the following:  <c>HRESULT fastForward (void)</c>;</para></remarks>
    // Fast play of media in forward direction
    // IDL: HRESULT fastForward (void);
    // VB6: Sub fastForward
    [DispId(54)]
    void fastForward ();

    /// <summary><para><c>fastReverse</c> method of <c>IWMPControls3</c> interface.  </para><para>Fast play of media in reverse direction</para></summary>
    /// <remarks><para>An original IDL definition of <c>fastReverse</c> method was the following:  <c>HRESULT fastReverse (void)</c>;</para></remarks>
    // Fast play of media in reverse direction
    // IDL: HRESULT fastReverse (void);
    // VB6: Sub fastReverse
    [DispId(55)]
    void fastReverse ();

    /// <summary><para><c>next</c> method of <c>IWMPControls3</c> interface.  </para><para>Sets the current item to the next item in the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>next</c> method was the following:  <c>HRESULT next (void)</c>;</para></remarks>
    // Sets the current item to the next item in the playlist
    // IDL: HRESULT next (void);
    // VB6: Sub next
    [DispId(58)]
    void next ();

    /// <summary><para><c>previous</c> method of <c>IWMPControls3</c> interface.  </para><para>Sets the current item to the previous item in the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>previous</c> method was the following:  <c>HRESULT previous (void)</c>;</para></remarks>
    // Sets the current item to the previous item in the playlist
    // IDL: HRESULT previous (void);
    // VB6: Sub previous
    [DispId(59)]
    void previous ();

    /// <summary><para><c>playItem</c> method of <c>IWMPControls3</c> interface.  </para><para>Sets the current item and plays it</para></summary>
    /// <remarks><para>An original IDL definition of <c>playItem</c> method was the following:  <c>HRESULT playItem (IWMPMedia* pIWMPMedia)</c>;</para></remarks>
    // Sets the current item and plays it
    // IDL: HRESULT playItem (IWMPMedia* pIWMPMedia);
    // VB6: Sub playItem (ByVal pIWMPMedia As IWMPMedia)
    [DispId(63)]
    void playItem (IWMPMedia pIWMPMedia);

    /// <summary><para><c>step</c> method of <c>IWMPControls3</c> interface.  </para><para>Advances the video one frame</para></summary>
    /// <remarks><para>An original IDL definition of <c>step</c> method was the following:  <c>HRESULT step (long lStep)</c>;</para></remarks>
    // Advances the video one frame
    // IDL: HRESULT step (long lStep);
    // VB6: Sub step (ByVal lStep As Long)
    [DispId(64)]
    void step (int lStep);

    /// <summary><para><c>getAudioLanguageID</c> method of <c>IWMPControls3</c> interface.  </para><para>Returns the LCID corresponding to the index</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAudioLanguageID</c> method was the following:  <c>HRESULT getAudioLanguageID (long lIndex, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // Returns the LCID corresponding to the index
    // IDL: HRESULT getAudioLanguageID (long lIndex, [out, retval] long* ReturnValue);
    // VB6: Function getAudioLanguageID (ByVal lIndex As Long) As Long
    [DispId(66)]
    int getAudioLanguageID (int lIndex);

    /// <summary><para><c>getAudioLanguageDescription</c> method of <c>IWMPControls3</c> interface.  </para><para>Returns the desription corresponding to the index</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAudioLanguageDescription</c> method was the following:  <c>HRESULT getAudioLanguageDescription (long lIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the desription corresponding to the index
    // IDL: HRESULT getAudioLanguageDescription (long lIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function getAudioLanguageDescription (ByVal lIndex As Long) As String
    [DispId(67)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getAudioLanguageDescription (int lIndex);

    /// <summary><para><c>getLanguageName</c> method of <c>IWMPControls3</c> interface.  </para><para>Returns the human-readable name of language specified by LCID</para></summary>
    /// <remarks><para>An original IDL definition of <c>getLanguageName</c> method was the following:  <c>HRESULT getLanguageName (long lLangID, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the human-readable name of language specified by LCID
    // IDL: HRESULT getLanguageName (long lLangID, [out, retval] BSTR* ReturnValue);
    // VB6: Function getLanguageName (ByVal lLangID As Long) As String
    [DispId(70)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getLanguageName (int lLangID);

    /// <summary><para><c>audioLanguageCount</c> property of <c>IWMPControls3</c> interface.  </para><para>Returns the count of supported audio languages</para></summary>
    /// <remarks><para>An original IDL definition of <c>audioLanguageCount</c> property was the following:  <c>long audioLanguageCount</c>;</para></remarks>
    // Returns the count of supported audio languages
    // IDL: long audioLanguageCount;
    // VB6: audioLanguageCount As Long
    int audioLanguageCount
    {
      // IDL: HRESULT audioLanguageCount ([out, retval] long* ReturnValue);
      // VB6: Function audioLanguageCount As Long
      [DispId(65)]
      get;
    }

    /// <summary><para><c>currentAudioLanguage</c> property of <c>IWMPControls3</c> interface.  </para><para>Gets the current audio language setting for playback</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentAudioLanguage</c> property was the following:  <c>long currentAudioLanguage</c>;</para></remarks>
    // Gets the current audio language setting for playback
    // IDL: long currentAudioLanguage;
    // VB6: currentAudioLanguage As Long
    int currentAudioLanguage
    {
      // IDL: HRESULT currentAudioLanguage ([out, retval] long* ReturnValue);
      // VB6: Function currentAudioLanguage As Long
      [DispId(68)]
      get;
      // IDL: HRESULT currentAudioLanguage (long value);
      // VB6: Sub currentAudioLanguage (ByVal value As Long)
      [DispId(68)]
      set;
    }

    /// <summary><para><c>currentAudioLanguageIndex</c> property of <c>IWMPControls3</c> interface.  </para><para>Gets the current audio language index setting for playback</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentAudioLanguageIndex</c> property was the following:  <c>long currentAudioLanguageIndex</c>;</para></remarks>
    // Gets the current audio language index setting for playback
    // IDL: long currentAudioLanguageIndex;
    // VB6: currentAudioLanguageIndex As Long
    int currentAudioLanguageIndex
    {
      // IDL: HRESULT currentAudioLanguageIndex ([out, retval] long* ReturnValue);
      // VB6: Function currentAudioLanguageIndex As Long
      [DispId(69)]
      get;
      // IDL: HRESULT currentAudioLanguageIndex (long value);
      // VB6: Sub currentAudioLanguageIndex (ByVal value As Long)
      [DispId(69)]
      set;
    }

    /// <summary><para><c>currentItem</c> property of <c>IWMPControls3</c> interface.  </para><para>Returns/Sets the play item</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentItem</c> property was the following:  <c>IWMPMedia* currentItem</c>;</para></remarks>
    // Returns/Sets the play item
    // IDL: IWMPMedia* currentItem;
    // VB6: currentItem As IWMPMedia
    IWMPMedia currentItem
    {
      // IDL: HRESULT currentItem ([out, retval] IWMPMedia** ReturnValue);
      // VB6: Function currentItem As IWMPMedia
      [DispId(60)]
      get;
      // IDL: HRESULT currentItem (IWMPMedia* value);
      // VB6: Sub currentItem (ByVal value As IWMPMedia)
      [DispId(60)]
      set;
    }

    /// <summary><para><c>currentMarker</c> property of <c>IWMPControls3</c> interface.  </para><para>Returns the current marker</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentMarker</c> property was the following:  <c>long currentMarker</c>;</para></remarks>
    // Returns the current marker
    // IDL: long currentMarker;
    // VB6: currentMarker As Long
    int currentMarker
    {
      // IDL: HRESULT currentMarker ([out, retval] long* ReturnValue);
      // VB6: Function currentMarker As Long
      [DispId(61)]
      get;
      // IDL: HRESULT currentMarker (long value);
      // VB6: Sub currentMarker (ByVal value As Long)
      [DispId(61)]
      set;
    }

    /// <summary><para><c>currentPosition</c> property of <c>IWMPControls3</c> interface.  </para><para>Returns the current position in media</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPosition</c> property was the following:  <c>double currentPosition</c>;</para></remarks>
    // Returns the current position in media
    // IDL: double currentPosition;
    // VB6: currentPosition As Double
    double currentPosition
    {
      // IDL: HRESULT currentPosition ([out, retval] double* ReturnValue);
      // VB6: Function currentPosition As Double
      [DispId(56)]
      get;
      // IDL: HRESULT currentPosition (double value);
      // VB6: Sub currentPosition (ByVal value As Double)
      [DispId(56)]
      set;
    }

    /// <summary><para><c>currentPositionString</c> property of <c>IWMPControls3</c> interface.  </para><para>Returns the current position in media as a string</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPositionString</c> property was the following:  <c>BSTR currentPositionString</c>;</para></remarks>
    // Returns the current position in media as a string
    // IDL: BSTR currentPositionString;
    // VB6: currentPositionString As String
    string currentPositionString
    {
      // IDL: HRESULT currentPositionString ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentPositionString As String
      [DispId(57)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>currentPositionTimecode</c> property of <c>IWMPControls3</c> interface.  </para><para>Returns the current timecode position in media</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPositionTimecode</c> property was the following:  <c>BSTR currentPositionTimecode</c>;</para></remarks>
    // Returns the current timecode position in media
    // IDL: BSTR currentPositionTimecode;
    // VB6: currentPositionTimecode As String
    string currentPositionTimecode
    {
      // IDL: HRESULT currentPositionTimecode ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentPositionTimecode As String
      [DispId(71)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT currentPositionTimecode (BSTR value);
      // VB6: Sub currentPositionTimecode (ByVal value As String)
      [DispId(71)]
      set;
    }
  }

  /// <summary><para><c>IWMPCore</c> interface.  </para><para>IWMPCore: Public interface.</para></summary>
  // IWMPCore: Public interface.
  [Guid("D84CCA99-CCE2-11D2-9ECC-0000F8085981")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPCore
  {
    /// <summary><para><c>close</c> method of <c>IWMPCore</c> interface.  </para><para>Closes the media</para></summary>
    /// <remarks><para>An original IDL definition of <c>close</c> method was the following:  <c>HRESULT close (void)</c>;</para></remarks>
    // Closes the media
    // IDL: HRESULT close (void);
    // VB6: Sub close
    [DispId(3)]
    void close ();

    /// <summary><para><c>launchURL</c> method of <c>IWMPCore</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>launchURL</c> method was the following:  <c>HRESULT launchURL (BSTR bstrURL)</c>;</para></remarks>
    // IDL: HRESULT launchURL (BSTR bstrURL);
    // VB6: Sub launchURL (ByVal bstrURL As String)
    [DispId(12)]
    void launchURL ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>cdromCollection</c> property of <c>IWMPCore</c> interface.  </para><para>Get the CDROM drive collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>cdromCollection</c> property was the following:  <c>IWMPCdromCollection* cdromCollection</c>;</para></remarks>
    // Get the CDROM drive collection
    // IDL: IWMPCdromCollection* cdromCollection;
    // VB6: cdromCollection As IWMPCdromCollection
    IWMPCdromCollection cdromCollection
    {
      // IDL: HRESULT cdromCollection ([out, retval] IWMPCdromCollection** ReturnValue);
      // VB6: Function cdromCollection As IWMPCdromCollection
      [DispId(14)]
      get;
    }

    /// <summary><para><c>closedCaption</c> property of <c>IWMPCore</c> interface.  </para><para>Returns the closed caption handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>closedCaption</c> property was the following:  <c>IWMPClosedCaption* closedCaption</c>;</para></remarks>
    // Returns the closed caption handler
    // IDL: IWMPClosedCaption* closedCaption;
    // VB6: closedCaption As IWMPClosedCaption
    IWMPClosedCaption closedCaption
    {
      // IDL: HRESULT closedCaption ([out, retval] IWMPClosedCaption** ReturnValue);
      // VB6: Function closedCaption As IWMPClosedCaption
      [DispId(15)]
      get;
    }

    /// <summary><para><c>controls</c> property of <c>IWMPCore</c> interface.  </para><para>Returns the control handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>controls</c> property was the following:  <c>IWMPControls* controls</c>;</para></remarks>
    // Returns the control handler
    // IDL: IWMPControls* controls;
    // VB6: controls As IWMPControls
    IWMPControls controls
    {
      // IDL: HRESULT controls ([out, retval] IWMPControls** ReturnValue);
      // VB6: Function controls As IWMPControls
      [DispId(4)]
      get;
    }

    /// <summary><para><c>currentMedia</c> property of <c>IWMPCore</c> interface.  </para><para>Returns or sets the current media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentMedia</c> property was the following:  <c>IWMPMedia* currentMedia</c>;</para></remarks>
    // Returns or sets the current media object
    // IDL: IWMPMedia* currentMedia;
    // VB6: currentMedia As IWMPMedia
    IWMPMedia currentMedia
    {
      // IDL: HRESULT currentMedia ([out, retval] IWMPMedia** ReturnValue);
      // VB6: Function currentMedia As IWMPMedia
      [DispId(6)]
      get;
      // IDL: HRESULT currentMedia (IWMPMedia* value);
      // VB6: Sub currentMedia (ByVal value As IWMPMedia)
      [DispId(6)]
      set;
    }

    /// <summary><para><c>currentPlaylist</c> property of <c>IWMPCore</c> interface.  </para><para>Returns/sets the current playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPlaylist</c> property was the following:  <c>IWMPPlaylist* currentPlaylist</c>;</para></remarks>
    // Returns/sets the current playlist
    // IDL: IWMPPlaylist* currentPlaylist;
    // VB6: currentPlaylist As IWMPPlaylist
    IWMPPlaylist currentPlaylist
    {
      // IDL: HRESULT currentPlaylist ([out, retval] IWMPPlaylist** ReturnValue);
      // VB6: Function currentPlaylist As IWMPPlaylist
      [DispId(13)]
      get;
      // IDL: HRESULT currentPlaylist (IWMPPlaylist* value);
      // VB6: Sub currentPlaylist (ByVal value As IWMPPlaylist)
      [DispId(13)]
      set;
    }

    /// <summary><para><c>Error</c> property of <c>IWMPCore</c> interface.  </para><para>Returns the error object</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> property was the following:  <c>IWMPError* Error</c>;</para></remarks>
    // Returns the error object
    // IDL: IWMPError* Error;
    // VB6: Error As IWMPError
    IWMPError Error
    {
      // IDL: HRESULT Error ([out, retval] IWMPError** ReturnValue);
      // VB6: Function Error As IWMPError
      [DispId(17)]
      get;
    }

    /// <summary><para><c>isOnline</c> property of <c>IWMPCore</c> interface.  </para><para>Returns whether the machine is online.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isOnline</c> property was the following:  <c>VARIANT_BOOL isOnline</c>;</para></remarks>
    // Returns whether the machine is online.
    // IDL: VARIANT_BOOL isOnline;
    // VB6: isOnline As Boolean
    bool isOnline
    {
      // IDL: HRESULT isOnline ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isOnline As Boolean
      [DispId(16)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>mediaCollection</c> property of <c>IWMPCore</c> interface.  </para><para>Returns the media collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>mediaCollection</c> property was the following:  <c>IWMPMediaCollection* mediaCollection</c>;</para></remarks>
    // Returns the media collection handler
    // IDL: IWMPMediaCollection* mediaCollection;
    // VB6: mediaCollection As IWMPMediaCollection
    IWMPMediaCollection mediaCollection
    {
      // IDL: HRESULT mediaCollection ([out, retval] IWMPMediaCollection** ReturnValue);
      // VB6: Function mediaCollection As IWMPMediaCollection
      [DispId(8)]
      get;
    }

    /// <summary><para><c>network</c> property of <c>IWMPCore</c> interface.  </para><para>Returns the network information handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>network</c> property was the following:  <c>IWMPNetwork* network</c>;</para></remarks>
    // Returns the network information handler
    // IDL: IWMPNetwork* network;
    // VB6: network As IWMPNetwork
    IWMPNetwork network
    {
      // IDL: HRESULT network ([out, retval] IWMPNetwork** ReturnValue);
      // VB6: Function network As IWMPNetwork
      [DispId(7)]
      get;
    }

    /// <summary><para><c>openState</c> property of <c>IWMPCore</c> interface.  </para><para>Returns the open state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>openState</c> property was the following:  <c>WMPOpenState openState</c>;</para></remarks>
    // Returns the open state of the player
    // IDL: WMPOpenState openState;
    // VB6: openState As WMPOpenState
    WMPOpenState openState
    {
      // IDL: HRESULT openState ([out, retval] WMPOpenState* ReturnValue);
      // VB6: Function openState As WMPOpenState
      [DispId(2)]
      get;
    }

    /// <summary><para><c>playlistCollection</c> property of <c>IWMPCore</c> interface.  </para><para>Returns the playlist collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>playlistCollection</c> property was the following:  <c>IWMPPlaylistCollection* playlistCollection</c>;</para></remarks>
    // Returns the playlist collection handler
    // IDL: IWMPPlaylistCollection* playlistCollection;
    // VB6: playlistCollection As IWMPPlaylistCollection
    IWMPPlaylistCollection playlistCollection
    {
      // IDL: HRESULT playlistCollection ([out, retval] IWMPPlaylistCollection** ReturnValue);
      // VB6: Function playlistCollection As IWMPPlaylistCollection
      [DispId(9)]
      get;
    }

    /// <summary><para><c>playState</c> property of <c>IWMPCore</c> interface.  </para><para>Returns the play state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>playState</c> property was the following:  <c>WMPPlayState playState</c>;</para></remarks>
    // Returns the play state of the player
    // IDL: WMPPlayState playState;
    // VB6: playState As WMPPlayState
    WMPPlayState playState
    {
      // IDL: HRESULT playState ([out, retval] WMPPlayState* ReturnValue);
      // VB6: Function playState As WMPPlayState
      [DispId(10)]
      get;
    }

    /// <summary><para><c>settings</c> property of <c>IWMPCore</c> interface.  </para><para>Returns the settings handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>settings</c> property was the following:  <c>IWMPSettings* settings</c>;</para></remarks>
    // Returns the settings handler
    // IDL: IWMPSettings* settings;
    // VB6: settings As IWMPSettings
    IWMPSettings settings
    {
      // IDL: HRESULT settings ([out, retval] IWMPSettings** ReturnValue);
      // VB6: Function settings As IWMPSettings
      [DispId(5)]
      get;
    }

    /// <summary><para><c>status</c> property of <c>IWMPCore</c> interface.  </para><para>Returns status string</para></summary>
    /// <remarks><para>An original IDL definition of <c>status</c> property was the following:  <c>BSTR status</c>;</para></remarks>
    // Returns status string
    // IDL: BSTR status;
    // VB6: status As String
    string status
    {
      // IDL: HRESULT status ([out, retval] BSTR* ReturnValue);
      // VB6: Function status As String
      [DispId(18)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>URL</c> property of <c>IWMPCore</c> interface.  </para><para>Returns or sets the URL</para></summary>
    /// <remarks><para>An original IDL definition of <c>URL</c> property was the following:  <c>BSTR URL</c>;</para></remarks>
    // Returns or sets the URL
    // IDL: BSTR URL;
    // VB6: URL As String
    string URL
    {
      // IDL: HRESULT URL ([out, retval] BSTR* ReturnValue);
      // VB6: Function URL As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT URL (BSTR value);
      // VB6: Sub URL (ByVal value As String)
      [DispId(1)]
      set;
    }

    /// <summary><para><c>versionInfo</c> property of <c>IWMPCore</c> interface.  </para><para>Returns the version information for the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>versionInfo</c> property was the following:  <c>BSTR versionInfo</c>;</para></remarks>
    // Returns the version information for the player
    // IDL: BSTR versionInfo;
    // VB6: versionInfo As String
    string versionInfo
    {
      // IDL: HRESULT versionInfo ([out, retval] BSTR* ReturnValue);
      // VB6: Function versionInfo As String
      [DispId(11)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPCore2</c> interface.  </para><para>IWMPCore2: Public interface.</para></summary>
  // IWMPCore2: Public interface.
  [Guid("BC17E5B7-7561-4C18-BB90-17D485775659")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPCore2
  {
    /// <summary><para><c>close</c> method of <c>IWMPCore2</c> interface.  </para><para>Closes the media</para></summary>
    /// <remarks><para>An original IDL definition of <c>close</c> method was the following:  <c>HRESULT close (void)</c>;</para></remarks>
    // Closes the media
    // IDL: HRESULT close (void);
    // VB6: Sub close
    [DispId(3)]
    void close ();

    /// <summary><para><c>launchURL</c> method of <c>IWMPCore2</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>launchURL</c> method was the following:  <c>HRESULT launchURL (BSTR bstrURL)</c>;</para></remarks>
    // IDL: HRESULT launchURL (BSTR bstrURL);
    // VB6: Sub launchURL (ByVal bstrURL As String)
    [DispId(12)]
    void launchURL ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>cdromCollection</c> property of <c>IWMPCore2</c> interface.  </para><para>Get the CDROM drive collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>cdromCollection</c> property was the following:  <c>IWMPCdromCollection* cdromCollection</c>;</para></remarks>
    // Get the CDROM drive collection
    // IDL: IWMPCdromCollection* cdromCollection;
    // VB6: cdromCollection As IWMPCdromCollection
    IWMPCdromCollection cdromCollection
    {
      // IDL: HRESULT cdromCollection ([out, retval] IWMPCdromCollection** ReturnValue);
      // VB6: Function cdromCollection As IWMPCdromCollection
      [DispId(14)]
      get;
    }

    /// <summary><para><c>closedCaption</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns the closed caption handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>closedCaption</c> property was the following:  <c>IWMPClosedCaption* closedCaption</c>;</para></remarks>
    // Returns the closed caption handler
    // IDL: IWMPClosedCaption* closedCaption;
    // VB6: closedCaption As IWMPClosedCaption
    IWMPClosedCaption closedCaption
    {
      // IDL: HRESULT closedCaption ([out, retval] IWMPClosedCaption** ReturnValue);
      // VB6: Function closedCaption As IWMPClosedCaption
      [DispId(15)]
      get;
    }

    /// <summary><para><c>controls</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns the control handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>controls</c> property was the following:  <c>IWMPControls* controls</c>;</para></remarks>
    // Returns the control handler
    // IDL: IWMPControls* controls;
    // VB6: controls As IWMPControls
    IWMPControls controls
    {
      // IDL: HRESULT controls ([out, retval] IWMPControls** ReturnValue);
      // VB6: Function controls As IWMPControls
      [DispId(4)]
      get;
    }

    /// <summary><para><c>currentMedia</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns or sets the current media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentMedia</c> property was the following:  <c>IWMPMedia* currentMedia</c>;</para></remarks>
    // Returns or sets the current media object
    // IDL: IWMPMedia* currentMedia;
    // VB6: currentMedia As IWMPMedia
    IWMPMedia currentMedia
    {
      // IDL: HRESULT currentMedia ([out, retval] IWMPMedia** ReturnValue);
      // VB6: Function currentMedia As IWMPMedia
      [DispId(6)]
      get;
      // IDL: HRESULT currentMedia (IWMPMedia* value);
      // VB6: Sub currentMedia (ByVal value As IWMPMedia)
      [DispId(6)]
      set;
    }

    /// <summary><para><c>currentPlaylist</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns/sets the current playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPlaylist</c> property was the following:  <c>IWMPPlaylist* currentPlaylist</c>;</para></remarks>
    // Returns/sets the current playlist
    // IDL: IWMPPlaylist* currentPlaylist;
    // VB6: currentPlaylist As IWMPPlaylist
    IWMPPlaylist currentPlaylist
    {
      // IDL: HRESULT currentPlaylist ([out, retval] IWMPPlaylist** ReturnValue);
      // VB6: Function currentPlaylist As IWMPPlaylist
      [DispId(13)]
      get;
      // IDL: HRESULT currentPlaylist (IWMPPlaylist* value);
      // VB6: Sub currentPlaylist (ByVal value As IWMPPlaylist)
      [DispId(13)]
      set;
    }

    /// <summary><para><c>dvd</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns the DVD handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>dvd</c> property was the following:  <c>IWMPDVD* dvd</c>;</para></remarks>
    // Returns the DVD handler
    // IDL: IWMPDVD* dvd;
    // VB6: dvd As IWMPDVD
    IWMPDVD dvd
    {
      // IDL: HRESULT dvd ([out, retval] IWMPDVD** ReturnValue);
      // VB6: Function dvd As IWMPDVD
      [DispId(40)]
      get;
    }

    /// <summary><para><c>Error</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns the error object</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> property was the following:  <c>IWMPError* Error</c>;</para></remarks>
    // Returns the error object
    // IDL: IWMPError* Error;
    // VB6: Error As IWMPError
    IWMPError Error
    {
      // IDL: HRESULT Error ([out, retval] IWMPError** ReturnValue);
      // VB6: Function Error As IWMPError
      [DispId(17)]
      get;
    }

    /// <summary><para><c>isOnline</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns whether the machine is online.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isOnline</c> property was the following:  <c>VARIANT_BOOL isOnline</c>;</para></remarks>
    // Returns whether the machine is online.
    // IDL: VARIANT_BOOL isOnline;
    // VB6: isOnline As Boolean
    bool isOnline
    {
      // IDL: HRESULT isOnline ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isOnline As Boolean
      [DispId(16)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>mediaCollection</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns the media collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>mediaCollection</c> property was the following:  <c>IWMPMediaCollection* mediaCollection</c>;</para></remarks>
    // Returns the media collection handler
    // IDL: IWMPMediaCollection* mediaCollection;
    // VB6: mediaCollection As IWMPMediaCollection
    IWMPMediaCollection mediaCollection
    {
      // IDL: HRESULT mediaCollection ([out, retval] IWMPMediaCollection** ReturnValue);
      // VB6: Function mediaCollection As IWMPMediaCollection
      [DispId(8)]
      get;
    }

    /// <summary><para><c>network</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns the network information handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>network</c> property was the following:  <c>IWMPNetwork* network</c>;</para></remarks>
    // Returns the network information handler
    // IDL: IWMPNetwork* network;
    // VB6: network As IWMPNetwork
    IWMPNetwork network
    {
      // IDL: HRESULT network ([out, retval] IWMPNetwork** ReturnValue);
      // VB6: Function network As IWMPNetwork
      [DispId(7)]
      get;
    }

    /// <summary><para><c>openState</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns the open state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>openState</c> property was the following:  <c>WMPOpenState openState</c>;</para></remarks>
    // Returns the open state of the player
    // IDL: WMPOpenState openState;
    // VB6: openState As WMPOpenState
    WMPOpenState openState
    {
      // IDL: HRESULT openState ([out, retval] WMPOpenState* ReturnValue);
      // VB6: Function openState As WMPOpenState
      [DispId(2)]
      get;
    }

    /// <summary><para><c>playlistCollection</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns the playlist collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>playlistCollection</c> property was the following:  <c>IWMPPlaylistCollection* playlistCollection</c>;</para></remarks>
    // Returns the playlist collection handler
    // IDL: IWMPPlaylistCollection* playlistCollection;
    // VB6: playlistCollection As IWMPPlaylistCollection
    IWMPPlaylistCollection playlistCollection
    {
      // IDL: HRESULT playlistCollection ([out, retval] IWMPPlaylistCollection** ReturnValue);
      // VB6: Function playlistCollection As IWMPPlaylistCollection
      [DispId(9)]
      get;
    }

    /// <summary><para><c>playState</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns the play state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>playState</c> property was the following:  <c>WMPPlayState playState</c>;</para></remarks>
    // Returns the play state of the player
    // IDL: WMPPlayState playState;
    // VB6: playState As WMPPlayState
    WMPPlayState playState
    {
      // IDL: HRESULT playState ([out, retval] WMPPlayState* ReturnValue);
      // VB6: Function playState As WMPPlayState
      [DispId(10)]
      get;
    }

    /// <summary><para><c>settings</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns the settings handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>settings</c> property was the following:  <c>IWMPSettings* settings</c>;</para></remarks>
    // Returns the settings handler
    // IDL: IWMPSettings* settings;
    // VB6: settings As IWMPSettings
    IWMPSettings settings
    {
      // IDL: HRESULT settings ([out, retval] IWMPSettings** ReturnValue);
      // VB6: Function settings As IWMPSettings
      [DispId(5)]
      get;
    }

    /// <summary><para><c>status</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns status string</para></summary>
    /// <remarks><para>An original IDL definition of <c>status</c> property was the following:  <c>BSTR status</c>;</para></remarks>
    // Returns status string
    // IDL: BSTR status;
    // VB6: status As String
    string status
    {
      // IDL: HRESULT status ([out, retval] BSTR* ReturnValue);
      // VB6: Function status As String
      [DispId(18)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>URL</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns or sets the URL</para></summary>
    /// <remarks><para>An original IDL definition of <c>URL</c> property was the following:  <c>BSTR URL</c>;</para></remarks>
    // Returns or sets the URL
    // IDL: BSTR URL;
    // VB6: URL As String
    string URL
    {
      // IDL: HRESULT URL ([out, retval] BSTR* ReturnValue);
      // VB6: Function URL As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT URL (BSTR value);
      // VB6: Sub URL (ByVal value As String)
      [DispId(1)]
      set;
    }

    /// <summary><para><c>versionInfo</c> property of <c>IWMPCore2</c> interface.  </para><para>Returns the version information for the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>versionInfo</c> property was the following:  <c>BSTR versionInfo</c>;</para></remarks>
    // Returns the version information for the player
    // IDL: BSTR versionInfo;
    // VB6: versionInfo As String
    string versionInfo
    {
      // IDL: HRESULT versionInfo ([out, retval] BSTR* ReturnValue);
      // VB6: Function versionInfo As String
      [DispId(11)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPCore3</c> interface.  </para><para>IWMPCore3: Public interface.</para></summary>
  // IWMPCore3: Public interface.
  [Guid("7587C667-628F-499F-88E7-6A6F4E888464")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPCore3
  {
    /// <summary><para><c>close</c> method of <c>IWMPCore3</c> interface.  </para><para>Closes the media</para></summary>
    /// <remarks><para>An original IDL definition of <c>close</c> method was the following:  <c>HRESULT close (void)</c>;</para></remarks>
    // Closes the media
    // IDL: HRESULT close (void);
    // VB6: Sub close
    [DispId(3)]
    void close ();

    /// <summary><para><c>launchURL</c> method of <c>IWMPCore3</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>launchURL</c> method was the following:  <c>HRESULT launchURL (BSTR bstrURL)</c>;</para></remarks>
    // IDL: HRESULT launchURL (BSTR bstrURL);
    // VB6: Sub launchURL (ByVal bstrURL As String)
    [DispId(12)]
    void launchURL ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>newPlaylist</c> method of <c>IWMPCore3</c> interface.  </para><para>Creates a new playlist object</para></summary>
    /// <remarks><para>An original IDL definition of <c>newPlaylist</c> method was the following:  <c>HRESULT newPlaylist (BSTR bstrName, BSTR bstrURL, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Creates a new playlist object
    // IDL: HRESULT newPlaylist (BSTR bstrName, BSTR bstrURL, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function newPlaylist (ByVal bstrName As String, ByVal bstrURL As String) As IWMPPlaylist
    [DispId(41)]
    IWMPPlaylist newPlaylist ([MarshalAs(UnmanagedType.BStr)] string bstrName, [MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>newMedia</c> method of <c>IWMPCore3</c> interface.  </para><para>Creates a new media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>newMedia</c> method was the following:  <c>HRESULT newMedia (BSTR bstrURL, [out, retval] IWMPMedia** ReturnValue)</c>;</para></remarks>
    // Creates a new media object
    // IDL: HRESULT newMedia (BSTR bstrURL, [out, retval] IWMPMedia** ReturnValue);
    // VB6: Function newMedia (ByVal bstrURL As String) As IWMPMedia
    [DispId(42)]
    IWMPMedia newMedia ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>cdromCollection</c> property of <c>IWMPCore3</c> interface.  </para><para>Get the CDROM drive collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>cdromCollection</c> property was the following:  <c>IWMPCdromCollection* cdromCollection</c>;</para></remarks>
    // Get the CDROM drive collection
    // IDL: IWMPCdromCollection* cdromCollection;
    // VB6: cdromCollection As IWMPCdromCollection
    IWMPCdromCollection cdromCollection
    {
      // IDL: HRESULT cdromCollection ([out, retval] IWMPCdromCollection** ReturnValue);
      // VB6: Function cdromCollection As IWMPCdromCollection
      [DispId(14)]
      get;
    }

    /// <summary><para><c>closedCaption</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns the closed caption handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>closedCaption</c> property was the following:  <c>IWMPClosedCaption* closedCaption</c>;</para></remarks>
    // Returns the closed caption handler
    // IDL: IWMPClosedCaption* closedCaption;
    // VB6: closedCaption As IWMPClosedCaption
    IWMPClosedCaption closedCaption
    {
      // IDL: HRESULT closedCaption ([out, retval] IWMPClosedCaption** ReturnValue);
      // VB6: Function closedCaption As IWMPClosedCaption
      [DispId(15)]
      get;
    }

    /// <summary><para><c>controls</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns the control handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>controls</c> property was the following:  <c>IWMPControls* controls</c>;</para></remarks>
    // Returns the control handler
    // IDL: IWMPControls* controls;
    // VB6: controls As IWMPControls
    IWMPControls controls
    {
      // IDL: HRESULT controls ([out, retval] IWMPControls** ReturnValue);
      // VB6: Function controls As IWMPControls
      [DispId(4)]
      get;
    }

    /// <summary><para><c>currentMedia</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns or sets the current media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentMedia</c> property was the following:  <c>IWMPMedia* currentMedia</c>;</para></remarks>
    // Returns or sets the current media object
    // IDL: IWMPMedia* currentMedia;
    // VB6: currentMedia As IWMPMedia
    IWMPMedia currentMedia
    {
      // IDL: HRESULT currentMedia ([out, retval] IWMPMedia** ReturnValue);
      // VB6: Function currentMedia As IWMPMedia
      [DispId(6)]
      get;
      // IDL: HRESULT currentMedia (IWMPMedia* value);
      // VB6: Sub currentMedia (ByVal value As IWMPMedia)
      [DispId(6)]
      set;
    }

    /// <summary><para><c>currentPlaylist</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns/sets the current playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPlaylist</c> property was the following:  <c>IWMPPlaylist* currentPlaylist</c>;</para></remarks>
    // Returns/sets the current playlist
    // IDL: IWMPPlaylist* currentPlaylist;
    // VB6: currentPlaylist As IWMPPlaylist
    IWMPPlaylist currentPlaylist
    {
      // IDL: HRESULT currentPlaylist ([out, retval] IWMPPlaylist** ReturnValue);
      // VB6: Function currentPlaylist As IWMPPlaylist
      [DispId(13)]
      get;
      // IDL: HRESULT currentPlaylist (IWMPPlaylist* value);
      // VB6: Sub currentPlaylist (ByVal value As IWMPPlaylist)
      [DispId(13)]
      set;
    }

    /// <summary><para><c>dvd</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns the DVD handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>dvd</c> property was the following:  <c>IWMPDVD* dvd</c>;</para></remarks>
    // Returns the DVD handler
    // IDL: IWMPDVD* dvd;
    // VB6: dvd As IWMPDVD
    IWMPDVD dvd
    {
      // IDL: HRESULT dvd ([out, retval] IWMPDVD** ReturnValue);
      // VB6: Function dvd As IWMPDVD
      [DispId(40)]
      get;
    }

    /// <summary><para><c>Error</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns the error object</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> property was the following:  <c>IWMPError* Error</c>;</para></remarks>
    // Returns the error object
    // IDL: IWMPError* Error;
    // VB6: Error As IWMPError
    IWMPError Error
    {
      // IDL: HRESULT Error ([out, retval] IWMPError** ReturnValue);
      // VB6: Function Error As IWMPError
      [DispId(17)]
      get;
    }

    /// <summary><para><c>isOnline</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns whether the machine is online.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isOnline</c> property was the following:  <c>VARIANT_BOOL isOnline</c>;</para></remarks>
    // Returns whether the machine is online.
    // IDL: VARIANT_BOOL isOnline;
    // VB6: isOnline As Boolean
    bool isOnline
    {
      // IDL: HRESULT isOnline ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isOnline As Boolean
      [DispId(16)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>mediaCollection</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns the media collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>mediaCollection</c> property was the following:  <c>IWMPMediaCollection* mediaCollection</c>;</para></remarks>
    // Returns the media collection handler
    // IDL: IWMPMediaCollection* mediaCollection;
    // VB6: mediaCollection As IWMPMediaCollection
    IWMPMediaCollection mediaCollection
    {
      // IDL: HRESULT mediaCollection ([out, retval] IWMPMediaCollection** ReturnValue);
      // VB6: Function mediaCollection As IWMPMediaCollection
      [DispId(8)]
      get;
    }

    /// <summary><para><c>network</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns the network information handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>network</c> property was the following:  <c>IWMPNetwork* network</c>;</para></remarks>
    // Returns the network information handler
    // IDL: IWMPNetwork* network;
    // VB6: network As IWMPNetwork
    IWMPNetwork network
    {
      // IDL: HRESULT network ([out, retval] IWMPNetwork** ReturnValue);
      // VB6: Function network As IWMPNetwork
      [DispId(7)]
      get;
    }

    /// <summary><para><c>openState</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns the open state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>openState</c> property was the following:  <c>WMPOpenState openState</c>;</para></remarks>
    // Returns the open state of the player
    // IDL: WMPOpenState openState;
    // VB6: openState As WMPOpenState
    WMPOpenState openState
    {
      // IDL: HRESULT openState ([out, retval] WMPOpenState* ReturnValue);
      // VB6: Function openState As WMPOpenState
      [DispId(2)]
      get;
    }

    /// <summary><para><c>playlistCollection</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns the playlist collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>playlistCollection</c> property was the following:  <c>IWMPPlaylistCollection* playlistCollection</c>;</para></remarks>
    // Returns the playlist collection handler
    // IDL: IWMPPlaylistCollection* playlistCollection;
    // VB6: playlistCollection As IWMPPlaylistCollection
    IWMPPlaylistCollection playlistCollection
    {
      // IDL: HRESULT playlistCollection ([out, retval] IWMPPlaylistCollection** ReturnValue);
      // VB6: Function playlistCollection As IWMPPlaylistCollection
      [DispId(9)]
      get;
    }

    /// <summary><para><c>playState</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns the play state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>playState</c> property was the following:  <c>WMPPlayState playState</c>;</para></remarks>
    // Returns the play state of the player
    // IDL: WMPPlayState playState;
    // VB6: playState As WMPPlayState
    WMPPlayState playState
    {
      // IDL: HRESULT playState ([out, retval] WMPPlayState* ReturnValue);
      // VB6: Function playState As WMPPlayState
      [DispId(10)]
      get;
    }

    /// <summary><para><c>settings</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns the settings handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>settings</c> property was the following:  <c>IWMPSettings* settings</c>;</para></remarks>
    // Returns the settings handler
    // IDL: IWMPSettings* settings;
    // VB6: settings As IWMPSettings
    IWMPSettings settings
    {
      // IDL: HRESULT settings ([out, retval] IWMPSettings** ReturnValue);
      // VB6: Function settings As IWMPSettings
      [DispId(5)]
      get;
    }

    /// <summary><para><c>status</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns status string</para></summary>
    /// <remarks><para>An original IDL definition of <c>status</c> property was the following:  <c>BSTR status</c>;</para></remarks>
    // Returns status string
    // IDL: BSTR status;
    // VB6: status As String
    string status
    {
      // IDL: HRESULT status ([out, retval] BSTR* ReturnValue);
      // VB6: Function status As String
      [DispId(18)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>URL</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns or sets the URL</para></summary>
    /// <remarks><para>An original IDL definition of <c>URL</c> property was the following:  <c>BSTR URL</c>;</para></remarks>
    // Returns or sets the URL
    // IDL: BSTR URL;
    // VB6: URL As String
    string URL
    {
      // IDL: HRESULT URL ([out, retval] BSTR* ReturnValue);
      // VB6: Function URL As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT URL (BSTR value);
      // VB6: Sub URL (ByVal value As String)
      [DispId(1)]
      set;
    }

    /// <summary><para><c>versionInfo</c> property of <c>IWMPCore3</c> interface.  </para><para>Returns the version information for the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>versionInfo</c> property was the following:  <c>BSTR versionInfo</c>;</para></remarks>
    // Returns the version information for the player
    // IDL: BSTR versionInfo;
    // VB6: versionInfo As String
    string versionInfo
    {
      // IDL: HRESULT versionInfo ([out, retval] BSTR* ReturnValue);
      // VB6: Function versionInfo As String
      [DispId(11)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPCustomSlider</c> interface.  </para><para>IWMPCustomSlider: Public interface for skin object model.</para></summary>
  // IWMPCustomSlider: Public interface for skin object model.
  [Guid("95F45AA2-ED0A-11D2-BA67-0000F80855E6")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPCustomSlider
  {
    /// <summary><para><c>cursor</c> property of <c>IWMPCustomSlider</c> interface.  </para><para>property cursor</para></summary>
    /// <remarks><para>An original IDL definition of <c>cursor</c> property was the following:  <c>BSTR cursor</c>;</para></remarks>
    // property cursor
    // IDL: BSTR cursor;
    // VB6: cursor As String
    string cursor
    {
      // IDL: HRESULT cursor ([out, retval] BSTR* ReturnValue);
      // VB6: Function cursor As String
      [DispId(5009)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT cursor (BSTR value);
      // VB6: Sub cursor (ByVal value As String)
      [DispId(5009)]
      set;
    }

    /// <summary><para><c>disabledImage</c> property of <c>IWMPCustomSlider</c> interface.  </para><para>property disabledImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>disabledImage</c> property was the following:  <c>BSTR disabledImage</c>;</para></remarks>
    // property disabledImage
    // IDL: BSTR disabledImage;
    // VB6: disabledImage As String
    string disabledImage
    {
      // IDL: HRESULT disabledImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function disabledImage As String
      [DispId(5004)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT disabledImage (BSTR value);
      // VB6: Sub disabledImage (ByVal value As String)
      [DispId(5004)]
      set;
    }

    /// <summary><para><c>downImage</c> property of <c>IWMPCustomSlider</c> interface.  </para><para>property downImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>downImage</c> property was the following:  <c>BSTR downImage</c>;</para></remarks>
    // property downImage
    // IDL: BSTR downImage;
    // VB6: downImage As String
    string downImage
    {
      // IDL: HRESULT downImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function downImage As String
      [DispId(5012)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT downImage (BSTR value);
      // VB6: Sub downImage (ByVal value As String)
      [DispId(5012)]
      set;
    }

    /// <summary><para><c>hoverImage</c> property of <c>IWMPCustomSlider</c> interface.  </para><para>property hoverImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>hoverImage</c> property was the following:  <c>BSTR hoverImage</c>;</para></remarks>
    // property hoverImage
    // IDL: BSTR hoverImage;
    // VB6: hoverImage As String
    string hoverImage
    {
      // IDL: HRESULT hoverImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function hoverImage As String
      [DispId(5003)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT hoverImage (BSTR value);
      // VB6: Sub hoverImage (ByVal value As String)
      [DispId(5003)]
      set;
    }

    /// <summary><para><c>image</c> property of <c>IWMPCustomSlider</c> interface.  </para><para>property image</para></summary>
    /// <remarks><para>An original IDL definition of <c>image</c> property was the following:  <c>BSTR image</c>;</para></remarks>
    // property image
    // IDL: BSTR image;
    // VB6: image As String
    string image
    {
      // IDL: HRESULT image ([out, retval] BSTR* ReturnValue);
      // VB6: Function image As String
      [DispId(5001)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT image (BSTR value);
      // VB6: Sub image (ByVal value As String)
      [DispId(5001)]
      set;
    }

    /// <summary><para><c>max</c> property of <c>IWMPCustomSlider</c> interface.  </para><para>property max</para></summary>
    /// <remarks><para>An original IDL definition of <c>max</c> property was the following:  <c>float max</c>;</para></remarks>
    // property max
    // IDL: float max;
    // VB6: max As Single
    float max
    {
      // IDL: HRESULT max ([out, retval] float* ReturnValue);
      // VB6: Function max As Single
      [DispId(5006)]
      get;
      // IDL: HRESULT max (float value);
      // VB6: Sub max (ByVal value As Single)
      [DispId(5006)]
      set;
    }

    /// <summary><para><c>min</c> property of <c>IWMPCustomSlider</c> interface.  </para><para>property min</para></summary>
    /// <remarks><para>An original IDL definition of <c>min</c> property was the following:  <c>float min</c>;</para></remarks>
    // property min
    // IDL: float min;
    // VB6: min As Single
    float min
    {
      // IDL: HRESULT min ([out, retval] float* ReturnValue);
      // VB6: Function min As Single
      [DispId(5005)]
      get;
      // IDL: HRESULT min (float value);
      // VB6: Sub min (ByVal value As Single)
      [DispId(5005)]
      set;
    }

    /// <summary><para><c>positionImage</c> property of <c>IWMPCustomSlider</c> interface.  </para><para>property positionImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>positionImage</c> property was the following:  <c>BSTR positionImage</c>;</para></remarks>
    // property positionImage
    // IDL: BSTR positionImage;
    // VB6: positionImage As String
    string positionImage
    {
      // IDL: HRESULT positionImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function positionImage As String
      [DispId(5002)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT positionImage (BSTR value);
      // VB6: Sub positionImage (ByVal value As String)
      [DispId(5002)]
      set;
    }

    /// <summary><para><c>toolTip</c> property of <c>IWMPCustomSlider</c> interface.  </para><para>property toolTip</para></summary>
    /// <remarks><para>An original IDL definition of <c>toolTip</c> property was the following:  <c>BSTR toolTip</c>;</para></remarks>
    // property toolTip
    // IDL: BSTR toolTip;
    // VB6: toolTip As String
    string toolTip
    {
      // IDL: HRESULT toolTip ([out, retval] BSTR* ReturnValue);
      // VB6: Function toolTip As String
      [DispId(5011)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT toolTip (BSTR value);
      // VB6: Sub toolTip (ByVal value As String)
      [DispId(5011)]
      set;
    }

    /// <summary><para><c>transparencyColor</c> property of <c>IWMPCustomSlider</c> interface.  </para><para>property transparancyColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>transparencyColor</c> property was the following:  <c>BSTR transparencyColor</c>;</para></remarks>
    // property transparancyColor
    // IDL: BSTR transparencyColor;
    // VB6: transparencyColor As String
    string transparencyColor
    {
      // IDL: HRESULT transparencyColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function transparencyColor As String
      [DispId(5008)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT transparencyColor (BSTR value);
      // VB6: Sub transparencyColor (ByVal value As String)
      [DispId(5008)]
      set;
    }

    /// <summary><para><c>value</c> property of <c>IWMPCustomSlider</c> interface.  </para><para>property value</para></summary>
    /// <remarks><para>An original IDL definition of <c>value</c> property was the following:  <c>float value</c>;</para></remarks>
    // property value
    // IDL: float value;
    // VB6: value As Single
    float value
    {
      // IDL: HRESULT value ([out, retval] float* ReturnValue);
      // VB6: Function value As Single
      [DispId(5010)]
      get;
      // IDL: HRESULT value (float value);
      // VB6: Sub value (ByVal value As Single)
      [DispId(5010)]
      set;
    }
  }

  /// <summary><para><c>IWMPCustomSliderCtrlEvents</c> interface.  </para><para>IWMPCustomSliderCtrlEvents: Public interface for skin object model.</para></summary>
  // IWMPCustomSliderCtrlEvents: Public interface for skin object model.
  [Guid("95F45AA4-ED0A-11D2-BA67-0000F80855E6")]
  [ComImport]
  [TypeLibType((short)4096)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPCustomSliderCtrlEvents
  {
    /// <summary><para><c>ondragbegin</c> method of <c>IWMPCustomSliderCtrlEvents</c> interface.  </para><para>event ondragbegin</para></summary>
    /// <remarks><para>An original IDL definition of <c>ondragbegin</c> method was the following:  <c>HRESULT ondragbegin (void)</c>;</para></remarks>
    // event ondragbegin
    // IDL: HRESULT ondragbegin (void);
    // VB6: Sub ondragbegin
    [DispId(5020)]
    void ondragbegin ();

    /// <summary><para><c>ondragend</c> method of <c>IWMPCustomSliderCtrlEvents</c> interface.  </para><para>event ondragend</para></summary>
    /// <remarks><para>An original IDL definition of <c>ondragend</c> method was the following:  <c>HRESULT ondragend (void)</c>;</para></remarks>
    // event ondragend
    // IDL: HRESULT ondragend (void);
    // VB6: Sub ondragend
    [DispId(5021)]
    void ondragend ();

    /// <summary><para><c>onpositionchange</c> method of <c>IWMPCustomSliderCtrlEvents</c> interface.  </para><para>event onpositionchange</para></summary>
    /// <remarks><para>An original IDL definition of <c>onpositionchange</c> method was the following:  <c>HRESULT onpositionchange (void)</c>;</para></remarks>
    // event onpositionchange
    // IDL: HRESULT onpositionchange (void);
    // VB6: Sub onpositionchange
    [DispId(5022)]
    void onpositionchange ();
  }

  /// <summary><para>Delegate for handling <c>ondragbegin</c> event of <c>IWMPCustomSliderCtrlEvents</c> interface.  </para><para>event ondragbegin</para></summary>
  /// <remarks><para>An original IDL definition of <c>ondragbegin</c> event was the following:  <c>HRESULT IWMPCustomSliderCtrlEvents_ondragbeginEventHandler (void)</c>;</para></remarks>
  // event ondragbegin
  // IDL: HRESULT IWMPCustomSliderCtrlEvents_ondragbeginEventHandler (void);
  // VB6: Sub IWMPCustomSliderCtrlEvents_ondragbeginEventHandler
  public delegate void IWMPCustomSliderCtrlEvents_ondragbeginEventHandler ();

  /// <summary><para>Delegate for handling <c>ondragend</c> event of <c>IWMPCustomSliderCtrlEvents</c> interface.  </para><para>event ondragend</para></summary>
  /// <remarks><para>An original IDL definition of <c>ondragend</c> event was the following:  <c>HRESULT IWMPCustomSliderCtrlEvents_ondragendEventHandler (void)</c>;</para></remarks>
  // event ondragend
  // IDL: HRESULT IWMPCustomSliderCtrlEvents_ondragendEventHandler (void);
  // VB6: Sub IWMPCustomSliderCtrlEvents_ondragendEventHandler
  public delegate void IWMPCustomSliderCtrlEvents_ondragendEventHandler ();

  /// <summary><para>Delegate for handling <c>onpositionchange</c> event of <c>IWMPCustomSliderCtrlEvents</c> interface.  </para><para>event onpositionchange</para></summary>
  /// <remarks><para>An original IDL definition of <c>onpositionchange</c> event was the following:  <c>HRESULT IWMPCustomSliderCtrlEvents_onpositionchangeEventHandler (void)</c>;</para></remarks>
  // event onpositionchange
  // IDL: HRESULT IWMPCustomSliderCtrlEvents_onpositionchangeEventHandler (void);
  // VB6: Sub IWMPCustomSliderCtrlEvents_onpositionchangeEventHandler
  public delegate void IWMPCustomSliderCtrlEvents_onpositionchangeEventHandler ();

  /// <summary><para>Declaration of events of <c>IWMPCustomSliderCtrlEvents</c> source interface.  </para><para>IWMPCustomSliderCtrlEvents: Public interface for skin object model.</para></summary>
  // IWMPCustomSliderCtrlEvents: Public interface for skin object model.
  [ComEventInterface(typeof(IWMPCustomSliderCtrlEvents),typeof(IWMPCustomSliderCtrlEvents_EventProvider))]
  [ComVisible(false)]
  public interface IWMPCustomSliderCtrlEvents_Event
  {
    /// <summary><para><c>ondragbegin</c> event of <c>IWMPCustomSliderCtrlEvents</c> interface.  </para><para>event ondragbegin</para></summary>
    event IWMPCustomSliderCtrlEvents_ondragbeginEventHandler ondragbegin;

    /// <summary><para><c>ondragend</c> event of <c>IWMPCustomSliderCtrlEvents</c> interface.  </para><para>event ondragend</para></summary>
    event IWMPCustomSliderCtrlEvents_ondragendEventHandler ondragend;

    /// <summary><para><c>onpositionchange</c> event of <c>IWMPCustomSliderCtrlEvents</c> interface.  </para><para>event onpositionchange</para></summary>
    event IWMPCustomSliderCtrlEvents_onpositionchangeEventHandler onpositionchange;
  }

  [ClassInterface(ClassInterfaceType.None)]
  internal class IWMPCustomSliderCtrlEvents_SinkHelper: IWMPCustomSliderCtrlEvents
  {
    public int Cookie = 0;

    public event IWMPCustomSliderCtrlEvents_ondragbeginEventHandler ondragbeginDelegate = null;
    public void Set_ondragbeginDelegate(IWMPCustomSliderCtrlEvents_ondragbeginEventHandler deleg)
    {
      ondragbeginDelegate = deleg;
    }
    public bool Is_ondragbeginDelegate(IWMPCustomSliderCtrlEvents_ondragbeginEventHandler deleg)
    {
      return (ondragbeginDelegate == deleg);
    }
    public void Clear_ondragbeginDelegate()
    {
      ondragbeginDelegate = null;
    }
    void IWMPCustomSliderCtrlEvents.ondragbegin ()
    {
      if (ondragbeginDelegate!=null)
        ondragbeginDelegate();
    }

    public event IWMPCustomSliderCtrlEvents_ondragendEventHandler ondragendDelegate = null;
    public void Set_ondragendDelegate(IWMPCustomSliderCtrlEvents_ondragendEventHandler deleg)
    {
      ondragendDelegate = deleg;
    }
    public bool Is_ondragendDelegate(IWMPCustomSliderCtrlEvents_ondragendEventHandler deleg)
    {
      return (ondragendDelegate == deleg);
    }
    public void Clear_ondragendDelegate()
    {
      ondragendDelegate = null;
    }
    void IWMPCustomSliderCtrlEvents.ondragend ()
    {
      if (ondragendDelegate!=null)
        ondragendDelegate();
    }

    public event IWMPCustomSliderCtrlEvents_onpositionchangeEventHandler onpositionchangeDelegate = null;
    public void Set_onpositionchangeDelegate(IWMPCustomSliderCtrlEvents_onpositionchangeEventHandler deleg)
    {
      onpositionchangeDelegate = deleg;
    }
    public bool Is_onpositionchangeDelegate(IWMPCustomSliderCtrlEvents_onpositionchangeEventHandler deleg)
    {
      return (onpositionchangeDelegate == deleg);
    }
    public void Clear_onpositionchangeDelegate()
    {
      onpositionchangeDelegate = null;
    }
    void IWMPCustomSliderCtrlEvents.onpositionchange ()
    {
      if (onpositionchangeDelegate!=null)
        onpositionchangeDelegate();
    }
  }

  internal class IWMPCustomSliderCtrlEvents_EventProvider: IDisposable, IWMPCustomSliderCtrlEvents_Event
  {
    UCOMIConnectionPointContainer ConnectionPointContainer;
    UCOMIConnectionPoint ConnectionPoint;
    IWMPCustomSliderCtrlEvents_SinkHelper EventSinkHelper;
    int ConnectionCount;

    // Constructor: remember ConnectionPointContainer
    IWMPCustomSliderCtrlEvents_EventProvider(object CPContainer) : base()
    {
      ConnectionPointContainer = (UCOMIConnectionPointContainer)CPContainer;
    }

    // Force disconnection from ActiveX event source
    ~IWMPCustomSliderCtrlEvents_EventProvider()
    {
      Disconnect();
      ConnectionPointContainer = null;
    }

    // Aletnative to destructor
    void IDisposable.Dispose()
    {
      Disconnect();
      ConnectionPointContainer = null;
      System.GC.SuppressFinalize(this);
    }

    // Connect to ActiveX event source
    void Connect()
    {
      if (ConnectionPoint == null)
      {
        ConnectionCount = 0;
        Guid g = new Guid("95F45AA4-ED0A-11D2-BA67-0000F80855E6");
        ConnectionPointContainer.FindConnectionPoint(ref g, out ConnectionPoint);
        EventSinkHelper = new IWMPCustomSliderCtrlEvents_SinkHelper();
        ConnectionPoint.Advise(EventSinkHelper, out EventSinkHelper.Cookie);
      }
    }

    // Disconnect from ActiveX event source
    void Disconnect()
    {
      System.Threading.Monitor.Enter(this);
      try {
        if (EventSinkHelper != null)
          ConnectionPoint.Unadvise(EventSinkHelper.Cookie);
        ConnectionPoint = null;
        EventSinkHelper = null;
      } catch { }
      System.Threading.Monitor.Exit(this);
    }

    // If no event handler present then disconnect from ActiveX event source
    void CheckDisconnect()
    {
      ConnectionCount--;
      if (ConnectionCount <= 0)
        Disconnect();
    }

    event IWMPCustomSliderCtrlEvents_ondragbeginEventHandler IWMPCustomSliderCtrlEvents_Event.ondragbegin
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ondragbeginDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ondragbeginDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPCustomSliderCtrlEvents_ondragendEventHandler IWMPCustomSliderCtrlEvents_Event.ondragend
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ondragendDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ondragendDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPCustomSliderCtrlEvents_onpositionchangeEventHandler IWMPCustomSliderCtrlEvents_Event.onpositionchange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onpositionchangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onpositionchangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }
  }

  /// <summary><para><c>IWMPDiscoExternal</c> interface.  </para><para>IWMPDiscoExternal: Public interface for scripting object model.</para></summary>
  // IWMPDiscoExternal: Public interface for scripting object model.
  [Guid("A915CEA2-72DF-41E1-A576-EF0BAE5E5169")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPDiscoExternal
  {
    /// <summary><para><c>NavigateTaskPaneURL</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>NavigateTaskPaneURL</c> method was the following:  <c>HRESULT NavigateTaskPaneURL (BSTR bstrKeyName, BSTR bstrTaskPane, BSTR bstrParams)</c>;</para></remarks>
    // IDL: HRESULT NavigateTaskPaneURL (BSTR bstrKeyName, BSTR bstrTaskPane, BSTR bstrParams);
    // VB6: Sub NavigateTaskPaneURL (ByVal bstrKeyName As String, ByVal bstrTaskPane As String, ByVal bstrParams As String)
    [DispId(10026)]
    void NavigateTaskPaneURL ([MarshalAs(UnmanagedType.BStr)] string bstrKeyName, [MarshalAs(UnmanagedType.BStr)] string bstrTaskPane, [MarshalAs(UnmanagedType.BStr)] string bstrParams);

    /// <summary><para><c>attemptLogin</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>attemptLogin</c> method was the following:  <c>HRESULT attemptLogin (void)</c>;</para></remarks>
    // IDL: HRESULT attemptLogin (void);
    // VB6: Sub attemptLogin
    [DispId(10030)]
    void attemptLogin ();

    /// <summary><para><c>changeView</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>changeView</c> method was the following:  <c>HRESULT changeView (BSTR bstrLibraryLocationType, BSTR bstrLibraryLocationID, BSTR bstrFilter, BSTR bstrViewParams)</c>;</para></remarks>
    // IDL: HRESULT changeView (BSTR bstrLibraryLocationType, BSTR bstrLibraryLocationID, BSTR bstrFilter, BSTR bstrViewParams);
    // VB6: Sub changeView (ByVal bstrLibraryLocationType As String, ByVal bstrLibraryLocationID As String, ByVal bstrFilter As String, ByVal bstrViewParams As String)
    [DispId(10033)]
    void changeView ([MarshalAs(UnmanagedType.BStr)] string bstrLibraryLocationType, [MarshalAs(UnmanagedType.BStr)] string bstrLibraryLocationID, [MarshalAs(UnmanagedType.BStr)] string bstrFilter, [MarshalAs(UnmanagedType.BStr)] string bstrViewParams);

    /// <summary><para><c>changeViewOnlineList</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>changeViewOnlineList</c> method was the following:  <c>HRESULT changeViewOnlineList (BSTR bstrLibraryLocationType, BSTR bstrLibraryLocationID, BSTR bstrParams, BSTR bstrFriendlyName, BSTR bstrListType, BSTR bstrViewMode)</c>;</para></remarks>
    // IDL: HRESULT changeViewOnlineList (BSTR bstrLibraryLocationType, BSTR bstrLibraryLocationID, BSTR bstrParams, BSTR bstrFriendlyName, BSTR bstrListType, BSTR bstrViewMode);
    // VB6: Sub changeViewOnlineList (ByVal bstrLibraryLocationType As String, ByVal bstrLibraryLocationID As String, ByVal bstrParams As String, ByVal bstrFriendlyName As String, ByVal bstrListType As String, ByVal bstrViewMode As String)
    [DispId(10034)]
    void changeViewOnlineList ([MarshalAs(UnmanagedType.BStr)] string bstrLibraryLocationType, [MarshalAs(UnmanagedType.BStr)] string bstrLibraryLocationID, [MarshalAs(UnmanagedType.BStr)] string bstrParams, [MarshalAs(UnmanagedType.BStr)] string bstrFriendlyName, [MarshalAs(UnmanagedType.BStr)] string bstrListType, [MarshalAs(UnmanagedType.BStr)] string bstrViewMode);

    /// <summary><para><c>cancelNavigate</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>cancelNavigate</c> method was the following:  <c>HRESULT cancelNavigate (void)</c>;</para></remarks>
    // IDL: HRESULT cancelNavigate (void);
    // VB6: Sub cancelNavigate
    [DispId(10042)]
    void cancelNavigate ();

    /// <summary><para><c>showPopup</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>showPopup</c> method was the following:  <c>HRESULT showPopup (long lPopupIndex, BSTR bstrParameters)</c>;</para></remarks>
    // IDL: HRESULT showPopup (long lPopupIndex, BSTR bstrParameters);
    // VB6: Sub showPopup (ByVal lPopupIndex As Long, ByVal bstrParameters As String)
    [DispId(10043)]
    void showPopup (int lPopupIndex, [MarshalAs(UnmanagedType.BStr)] string bstrParameters);

    /// <summary><para><c>addToBasket</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>addToBasket</c> method was the following:  <c>HRESULT addToBasket (BSTR bstrViewType, BSTR bstrViewIDs)</c>;</para></remarks>
    // IDL: HRESULT addToBasket (BSTR bstrViewType, BSTR bstrViewIDs);
    // VB6: Sub addToBasket (ByVal bstrViewType As String, ByVal bstrViewIDs As String)
    [DispId(10044)]
    void addToBasket ([MarshalAs(UnmanagedType.BStr)] string bstrViewType, [MarshalAs(UnmanagedType.BStr)] string bstrViewIDs);

    /// <summary><para><c>play</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>play</c> method was the following:  <c>HRESULT play (BSTR bstrLibraryLocationType, BSTR bstrLibraryLocationIDs)</c>;</para></remarks>
    // IDL: HRESULT play (BSTR bstrLibraryLocationType, BSTR bstrLibraryLocationIDs);
    // VB6: Sub play (ByVal bstrLibraryLocationType As String, ByVal bstrLibraryLocationIDs As String)
    [DispId(10046)]
    void play ([MarshalAs(UnmanagedType.BStr)] string bstrLibraryLocationType, [MarshalAs(UnmanagedType.BStr)] string bstrLibraryLocationIDs);

    /// <summary><para><c>download</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>download</c> method was the following:  <c>HRESULT download (BSTR bstrViewType, BSTR bstrViewIDs)</c>;</para></remarks>
    // IDL: HRESULT download (BSTR bstrViewType, BSTR bstrViewIDs);
    // VB6: Sub download (ByVal bstrViewType As String, ByVal bstrViewIDs As String)
    [DispId(10047)]
    void download ([MarshalAs(UnmanagedType.BStr)] string bstrViewType, [MarshalAs(UnmanagedType.BStr)] string bstrViewIDs);

    /// <summary><para><c>buy</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>buy</c> method was the following:  <c>HRESULT buy (BSTR bstrViewType, BSTR bstrViewIDs)</c>;</para></remarks>
    // IDL: HRESULT buy (BSTR bstrViewType, BSTR bstrViewIDs);
    // VB6: Sub buy (ByVal bstrViewType As String, ByVal bstrViewIDs As String)
    [DispId(10048)]
    void buy ([MarshalAs(UnmanagedType.BStr)] string bstrViewType, [MarshalAs(UnmanagedType.BStr)] string bstrViewIDs);

    /// <summary><para><c>saveCurrentViewToLibrary</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>saveCurrentViewToLibrary</c> method was the following:  <c>HRESULT saveCurrentViewToLibrary (BSTR bstrFriendlyListType, VARIANT_BOOL fDynamic)</c>;</para></remarks>
    // IDL: HRESULT saveCurrentViewToLibrary (BSTR bstrFriendlyListType, VARIANT_BOOL fDynamic);
    // VB6: Sub saveCurrentViewToLibrary (ByVal bstrFriendlyListType As String, ByVal fDynamic As Boolean)
    [DispId(10049)]
    void saveCurrentViewToLibrary ([MarshalAs(UnmanagedType.BStr)] string bstrFriendlyListType, [MarshalAs(UnmanagedType.VariantBool)] bool fDynamic);

    /// <summary><para><c>authenticate</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>authenticate</c> method was the following:  <c>HRESULT authenticate (long lAuthenticationIndex)</c>;</para></remarks>
    // IDL: HRESULT authenticate (long lAuthenticationIndex);
    // VB6: Sub authenticate (ByVal lAuthenticationIndex As Long)
    [DispId(10050)]
    void authenticate (int lAuthenticationIndex);

    /// <summary><para><c>sendMessage</c> method of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>sendMessage</c> method was the following:  <c>HRESULT sendMessage (BSTR bstrMsg, BSTR bstrParam)</c>;</para></remarks>
    // IDL: HRESULT sendMessage (BSTR bstrMsg, BSTR bstrParam);
    // VB6: Sub sendMessage (ByVal bstrMsg As String, ByVal bstrParam As String)
    [DispId(10051)]
    void sendMessage ([MarshalAs(UnmanagedType.BStr)] string bstrMsg, [MarshalAs(UnmanagedType.BStr)] string bstrParam);

    /// <summary><para><c>accountType</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>accountType</c> property was the following:  <c>BSTR accountType</c>;</para></remarks>
    // IDL: BSTR accountType;
    // VB6: accountType As String
    string accountType
    {
      // IDL: HRESULT accountType ([out, retval] BSTR* ReturnValue);
      // VB6: Function accountType As String
      [DispId(10031)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonHighlight</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHighlight</c> property was the following:  <c>BSTR appColorButtonHighlight</c>;</para></remarks>
    // IDL: BSTR appColorButtonHighlight;
    // VB6: appColorButtonHighlight As String
    string appColorButtonHighlight
    {
      // IDL: HRESULT appColorButtonHighlight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHighlight As String
      [DispId(10015)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonHoverFace</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHoverFace</c> property was the following:  <c>BSTR appColorButtonHoverFace</c>;</para></remarks>
    // IDL: BSTR appColorButtonHoverFace;
    // VB6: appColorButtonHoverFace As String
    string appColorButtonHoverFace
    {
      // IDL: HRESULT appColorButtonHoverFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHoverFace As String
      [DispId(10017)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonShadow</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonShadow</c> property was the following:  <c>BSTR appColorButtonShadow</c>;</para></remarks>
    // IDL: BSTR appColorButtonShadow;
    // VB6: appColorButtonShadow As String
    string appColorButtonShadow
    {
      // IDL: HRESULT appColorButtonShadow ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonShadow As String
      [DispId(10016)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorDark</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorDark</c> property was the following:  <c>BSTR appColorDark</c>;</para></remarks>
    // IDL: BSTR appColorDark;
    // VB6: appColorDark As String
    string appColorDark
    {
      // IDL: HRESULT appColorDark ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorDark As String
      [DispId(10014)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorLight</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorLight</c> property was the following:  <c>BSTR appColorLight</c>;</para></remarks>
    // IDL: BSTR appColorLight;
    // VB6: appColorLight As String
    string appColorLight
    {
      // IDL: HRESULT appColorLight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorLight As String
      [DispId(10012)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorMedium</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorMedium</c> property was the following:  <c>BSTR appColorMedium</c>;</para></remarks>
    // IDL: BSTR appColorMedium;
    // VB6: appColorMedium As String
    string appColorMedium
    {
      // IDL: HRESULT appColorMedium ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorMedium As String
      [DispId(10013)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>basketTitle</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>basketTitle</c> property was the following:  <c>BSTR basketTitle</c>;</para></remarks>
    // IDL: BSTR basketTitle;
    // VB6: basketTitle As String
    string basketTitle
    {
      // IDL: HRESULT basketTitle ([out, retval] BSTR* ReturnValue);
      // VB6: Function basketTitle As String
      [DispId(10045)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>DownloadManager</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>DownloadManager</c> property was the following:  <c>IWMPDownloadManager* DownloadManager</c>;</para></remarks>
    // IDL: IWMPDownloadManager* DownloadManager;
    // VB6: DownloadManager As IWMPDownloadManager
    IWMPDownloadManager DownloadManager
    {
      // IDL: HRESULT DownloadManager ([out, retval] IWMPDownloadManager** ReturnValue);
      // VB6: Function DownloadManager As IWMPDownloadManager
      [DispId(10009)]
      get;
    }

    /// <summary><para><c>filter</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>filter</c> property was the following:  <c>BSTR filter</c>;</para></remarks>
    // IDL: BSTR filter;
    // VB6: filter As String
    string filter
    {
      // IDL: HRESULT filter ([out, retval] BSTR* ReturnValue);
      // VB6: Function filter As String
      [DispId(10039)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>ignoreIEHistory</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>ignoreIEHistory</c> property was the following:  <c>VARIANT_BOOL ignoreIEHistory</c>;</para></remarks>
    // IDL: VARIANT_BOOL ignoreIEHistory;
    // VB6: ignoreIEHistory As Boolean
    bool ignoreIEHistory
    {
      // IDL: HRESULT ignoreIEHistory (VARIANT_BOOL value);
      // VB6: Sub ignoreIEHistory (ByVal value As Boolean)
      [DispId(10053)]
      set;
    }

    /// <summary><para><c>libraryLocationID</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>libraryLocationID</c> property was the following:  <c>BSTR libraryLocationID</c>;</para></remarks>
    // IDL: BSTR libraryLocationID;
    // VB6: libraryLocationID As String
    string libraryLocationID
    {
      // IDL: HRESULT libraryLocationID ([out, retval] BSTR* ReturnValue);
      // VB6: Function libraryLocationID As String
      [DispId(10036)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>libraryLocationType</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>libraryLocationType</c> property was the following:  <c>BSTR libraryLocationType</c>;</para></remarks>
    // IDL: BSTR libraryLocationType;
    // VB6: libraryLocationType As String
    string libraryLocationType
    {
      // IDL: HRESULT libraryLocationType ([out, retval] BSTR* ReturnValue);
      // VB6: Function libraryLocationType As String
      [DispId(10035)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>OnChangeViewError</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnChangeViewError</c> property was the following:  <c>IDispatch OnChangeViewError</c>;</para></remarks>
    // IDL: IDispatch OnChangeViewError;
    // VB6: OnChangeViewError As IDispatch
    object OnChangeViewError
    {
      // IDL: HRESULT OnChangeViewError (IDispatch* value);
      // VB6: Sub OnChangeViewError (ByVal value As IDispatch)
      [DispId(10056)]
      set;
    }

    /// <summary><para><c>OnChangeViewOnlineListError</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnChangeViewOnlineListError</c> property was the following:  <c>IDispatch OnChangeViewOnlineListError</c>;</para></remarks>
    // IDL: IDispatch OnChangeViewOnlineListError;
    // VB6: OnChangeViewOnlineListError As IDispatch
    object OnChangeViewOnlineListError
    {
      // IDL: HRESULT OnChangeViewOnlineListError (IDispatch* value);
      // VB6: Sub OnChangeViewOnlineListError (ByVal value As IDispatch)
      [DispId(10057)]
      set;
    }

    /// <summary><para><c>OnColorChange</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnColorChange</c> property was the following:  <c>IDispatch OnColorChange</c>;</para></remarks>
    // IDL: IDispatch OnColorChange;
    // VB6: OnColorChange As IDispatch
    object OnColorChange
    {
      // IDL: HRESULT OnColorChange (IDispatch* value);
      // VB6: Sub OnColorChange (ByVal value As IDispatch)
      [DispId(10018)]
      set;
    }

    /// <summary><para><c>OnLoginChange</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnLoginChange</c> property was the following:  <c>IDispatch OnLoginChange</c>;</para></remarks>
    // IDL: IDispatch OnLoginChange;
    // VB6: OnLoginChange As IDispatch
    object OnLoginChange
    {
      // IDL: HRESULT OnLoginChange (IDispatch* value);
      // VB6: Sub OnLoginChange (ByVal value As IDispatch)
      [DispId(10028)]
      set;
    }

    /// <summary><para><c>OnSendMessageComplete</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnSendMessageComplete</c> property was the following:  <c>IDispatch OnSendMessageComplete</c>;</para></remarks>
    // IDL: IDispatch OnSendMessageComplete;
    // VB6: OnSendMessageComplete As IDispatch
    object OnSendMessageComplete
    {
      // IDL: HRESULT OnSendMessageComplete (IDispatch* value);
      // VB6: Sub OnSendMessageComplete (ByVal value As IDispatch)
      [DispId(10052)]
      set;
    }

    /// <summary><para><c>OnViewChange</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnViewChange</c> property was the following:  <c>IDispatch OnViewChange</c>;</para></remarks>
    // IDL: IDispatch OnViewChange;
    // VB6: OnViewChange As IDispatch
    object OnViewChange
    {
      // IDL: HRESULT OnViewChange (IDispatch* value);
      // VB6: Sub OnViewChange (ByVal value As IDispatch)
      [DispId(10032)]
      set;
    }

    /// <summary><para><c>pluginRunning</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>pluginRunning</c> property was the following:  <c>VARIANT_BOOL pluginRunning</c>;</para></remarks>
    // IDL: VARIANT_BOOL pluginRunning;
    // VB6: pluginRunning As Boolean
    bool pluginRunning
    {
      // IDL: HRESULT pluginRunning ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function pluginRunning As Boolean
      [DispId(10054)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>selectedItemID</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>selectedItemID</c> property was the following:  <c>BSTR selectedItemID</c>;</para></remarks>
    // IDL: BSTR selectedItemID;
    // VB6: selectedItemID As String
    string selectedItemID
    {
      // IDL: HRESULT selectedItemID ([out, retval] BSTR* ReturnValue);
      // VB6: Function selectedItemID As String
      [DispId(10038)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>selectedItemType</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>selectedItemType</c> property was the following:  <c>BSTR selectedItemType</c>;</para></remarks>
    // IDL: BSTR selectedItemType;
    // VB6: selectedItemType As String
    string selectedItemType
    {
      // IDL: HRESULT selectedItemType ([out, retval] BSTR* ReturnValue);
      // VB6: Function selectedItemType As String
      [DispId(10037)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>SelectedTaskPane</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>SelectedTaskPane</c> property was the following:  <c>BSTR SelectedTaskPane</c>;</para></remarks>
    // IDL: BSTR SelectedTaskPane;
    // VB6: SelectedTaskPane As String
    string SelectedTaskPane
    {
      // IDL: HRESULT SelectedTaskPane ([out, retval] BSTR* ReturnValue);
      // VB6: Function SelectedTaskPane As String
      [DispId(10027)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT SelectedTaskPane (BSTR value);
      // VB6: Sub SelectedTaskPane (ByVal value As String)
      [DispId(10027)]
      set;
    }

    /// <summary><para><c>task</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>task</c> property was the following:  <c>BSTR task</c>;</para></remarks>
    // IDL: BSTR task;
    // VB6: task As String
    string task
    {
      // IDL: HRESULT task ([out, retval] BSTR* ReturnValue);
      // VB6: Function task As String
      [DispId(10040)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>templateBeingDisplayedInLocalLibrary</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>templateBeingDisplayedInLocalLibrary</c> property was the following:  <c>VARIANT_BOOL templateBeingDisplayedInLocalLibrary</c>;</para></remarks>
    // IDL: VARIANT_BOOL templateBeingDisplayedInLocalLibrary;
    // VB6: templateBeingDisplayedInLocalLibrary As Boolean
    bool templateBeingDisplayedInLocalLibrary
    {
      // IDL: HRESULT templateBeingDisplayedInLocalLibrary ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function templateBeingDisplayedInLocalLibrary As Boolean
      [DispId(10055)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>userLoggedIn</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>userLoggedIn</c> property was the following:  <c>VARIANT_BOOL userLoggedIn</c>;</para></remarks>
    // IDL: VARIANT_BOOL userLoggedIn;
    // VB6: userLoggedIn As Boolean
    bool userLoggedIn
    {
      // IDL: HRESULT userLoggedIn ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function userLoggedIn As Boolean
      [DispId(10029)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>version</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>version</c> property was the following:  <c>BSTR version</c>;</para></remarks>
    // IDL: BSTR version;
    // VB6: version As String
    string version
    {
      // IDL: HRESULT version ([out, retval] BSTR* ReturnValue);
      // VB6: Function version As String
      [DispId(10005)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>viewParameters</c> property of <c>IWMPDiscoExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>viewParameters</c> property was the following:  <c>BSTR viewParameters</c>;</para></remarks>
    // IDL: BSTR viewParameters;
    // VB6: viewParameters As String
    string viewParameters
    {
      // IDL: HRESULT viewParameters ([out, retval] BSTR* ReturnValue);
      // VB6: Function viewParameters As String
      [DispId(10041)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPDMRAVTransportService</c> interface.  </para><para>IWMPDMRAVTransportService Interface</para></summary>
  // IWMPDMRAVTransportService Interface
  [Guid("4E195DB1-9E29-47FC-9CE1-DE9937D32925")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPDMRAVTransportService
  {
    /// <summary><para><c>SetAVTransportURI</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method SetAVTransportURI</para></summary>
    /// <remarks><para>An original IDL definition of <c>SetAVTransportURI</c> method was the following:  <c>HRESULT SetAVTransportURI (IUnknown* punkRemoteEndpointInfo, unsigned long ulInstanceID, BSTR bstrCurrentURI, BSTR bstrCurrentURIMetaData)</c>;</para></remarks>
    // Method SetAVTransportURI
    // IDL: HRESULT SetAVTransportURI (IUnknown* punkRemoteEndpointInfo, unsigned long ulInstanceID, BSTR bstrCurrentURI, BSTR bstrCurrentURIMetaData);
    // VB6: Sub SetAVTransportURI (ByVal punkRemoteEndpointInfo As IUnknown, ByVal ulInstanceID As Long, ByVal bstrCurrentURI As String, ByVal bstrCurrentURIMetaData As String)
    [DispId(31)]
    void SetAVTransportURI ([MarshalAs(UnmanagedType.IUnknown)] object punkRemoteEndpointInfo, uint ulInstanceID, [MarshalAs(UnmanagedType.BStr)] string bstrCurrentURI, [MarshalAs(UnmanagedType.BStr)] string bstrCurrentURIMetaData);

    /// <summary><para><c>GetMediaInfo</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method GetMediaInfo</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetMediaInfo</c> method was the following:  <c>HRESULT GetMediaInfo (unsigned long ulInstanceID, [out] unsigned long* pulNumTracks, [out] BSTR* pbstrMediaDuration, [out] BSTR* pbstrCurrentURI, [out] BSTR* pbstrCurrentURIMetaData, [out] BSTR* pbstrNextURI, [out] BSTR* pNextURIMetaData, [out] BSTR* pbstrPlayMedium, [out] BSTR* pbstrRecordMedium, [out] BSTR* pbstrWriteStatus)</c>;</para></remarks>
    // Method GetMediaInfo
    // IDL: HRESULT GetMediaInfo (unsigned long ulInstanceID, [out] unsigned long* pulNumTracks, [out] BSTR* pbstrMediaDuration, [out] BSTR* pbstrCurrentURI, [out] BSTR* pbstrCurrentURIMetaData, [out] BSTR* pbstrNextURI, [out] BSTR* pNextURIMetaData, [out] BSTR* pbstrPlayMedium, [out] BSTR* pbstrRecordMedium, [out] BSTR* pbstrWriteStatus);
    // VB6: Sub GetMediaInfo (ByVal ulInstanceID As Long, pulNumTracks As Long, pbstrMediaDuration As String, pbstrCurrentURI As String, pbstrCurrentURIMetaData As String, pbstrNextURI As String, pNextURIMetaData As String, pbstrPlayMedium As String, pbstrRecordMedium As String, pbstrWriteStatus As String)
    [DispId(33)]
    void GetMediaInfo (uint ulInstanceID, [Out] out uint pulNumTracks, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrMediaDuration, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrCurrentURI, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrCurrentURIMetaData, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrNextURI, [Out, MarshalAs(UnmanagedType.BStr)] out string pNextURIMetaData, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrPlayMedium, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrRecordMedium, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrWriteStatus);

    /// <summary><para><c>GetTransportInfo</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method GetTransportInfo</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetTransportInfo</c> method was the following:  <c>HRESULT GetTransportInfo (unsigned long ulInstanceID, [out] BSTR* pbstrCurrentTransportState, [out] BSTR* pbstrCurrentTransportStatus, [out] BSTR* pbstrCurrentSpeed)</c>;</para></remarks>
    // Method GetTransportInfo
    // IDL: HRESULT GetTransportInfo (unsigned long ulInstanceID, [out] BSTR* pbstrCurrentTransportState, [out] BSTR* pbstrCurrentTransportStatus, [out] BSTR* pbstrCurrentSpeed);
    // VB6: Sub GetTransportInfo (ByVal ulInstanceID As Long, pbstrCurrentTransportState As String, pbstrCurrentTransportStatus As String, pbstrCurrentSpeed As String)
    [DispId(34)]
    void GetTransportInfo (uint ulInstanceID, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrCurrentTransportState, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrCurrentTransportStatus, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrCurrentSpeed);

    /// <summary><para><c>GetPositionInfo</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method GetPositionInfo</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetPositionInfo</c> method was the following:  <c>HRESULT GetPositionInfo (unsigned long ulInstanceID, [out] unsigned long* pTrack, [out] BSTR* pbstrTrackDuration, [out] BSTR* pbstrTrackMetaData, [out] BSTR* pbstrTrackURI, [out] BSTR* pbstrRelTime, [out] BSTR* pbstrAbsTime, [out] long* plRelCount, [out] long* plAbsCount)</c>;</para></remarks>
    // Method GetPositionInfo
    // IDL: HRESULT GetPositionInfo (unsigned long ulInstanceID, [out] unsigned long* pTrack, [out] BSTR* pbstrTrackDuration, [out] BSTR* pbstrTrackMetaData, [out] BSTR* pbstrTrackURI, [out] BSTR* pbstrRelTime, [out] BSTR* pbstrAbsTime, [out] long* plRelCount, [out] long* plAbsCount);
    // VB6: Sub GetPositionInfo (ByVal ulInstanceID As Long, pTrack As Long, pbstrTrackDuration As String, pbstrTrackMetaData As String, pbstrTrackURI As String, pbstrRelTime As String, pbstrAbsTime As String, plRelCount As Long, plAbsCount As Long)
    [DispId(35)]
    void GetPositionInfo (uint ulInstanceID, [Out] out uint pTrack, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrTrackDuration, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrTrackMetaData, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrTrackURI, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrRelTime, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrAbsTime, [Out] out int plRelCount, [Out] out int plAbsCount);

    /// <summary><para><c>GetDeviceCapabilities</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method GetDeviceCapabilities</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetDeviceCapabilities</c> method was the following:  <c>HRESULT GetDeviceCapabilities (unsigned long ulInstanceID, [out] BSTR* pbstrPlayMedia, [out] BSTR* pbstrRecMedia, [out] BSTR* pbstrRecQualityModes)</c>;</para></remarks>
    // Method GetDeviceCapabilities
    // IDL: HRESULT GetDeviceCapabilities (unsigned long ulInstanceID, [out] BSTR* pbstrPlayMedia, [out] BSTR* pbstrRecMedia, [out] BSTR* pbstrRecQualityModes);
    // VB6: Sub GetDeviceCapabilities (ByVal ulInstanceID As Long, pbstrPlayMedia As String, pbstrRecMedia As String, pbstrRecQualityModes As String)
    [DispId(36)]
    void GetDeviceCapabilities (uint ulInstanceID, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrPlayMedia, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrRecMedia, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrRecQualityModes);

    /// <summary><para><c>GetTransportSettings</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method GetTransportSettings</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetTransportSettings</c> method was the following:  <c>HRESULT GetTransportSettings (unsigned long ulInstanceID, [out] BSTR* pbstrPlayMode, [out] BSTR* pbstrRecQualityMode)</c>;</para></remarks>
    // Method GetTransportSettings
    // IDL: HRESULT GetTransportSettings (unsigned long ulInstanceID, [out] BSTR* pbstrPlayMode, [out] BSTR* pbstrRecQualityMode);
    // VB6: Sub GetTransportSettings (ByVal ulInstanceID As Long, pbstrPlayMode As String, pbstrRecQualityMode As String)
    [DispId(37)]
    void GetTransportSettings (uint ulInstanceID, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrPlayMode, [Out, MarshalAs(UnmanagedType.BStr)] out string pbstrRecQualityMode);

    /// <summary><para><c>stop</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method Stop</para></summary>
    /// <remarks><para>An original IDL definition of <c>stop</c> method was the following:  <c>HRESULT stop (unsigned long ulInstanceID)</c>;</para></remarks>
    // Method Stop
    // IDL: HRESULT stop (unsigned long ulInstanceID);
    // VB6: Sub stop (ByVal ulInstanceID As Long)
    [DispId(38)]
    void stop (uint ulInstanceID);

    /// <summary><para><c>play</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method Play</para></summary>
    /// <remarks><para>An original IDL definition of <c>play</c> method was the following:  <c>HRESULT play (unsigned long ulInstanceID, BSTR bstrSpeed)</c>;</para></remarks>
    // Method Play
    // IDL: HRESULT play (unsigned long ulInstanceID, BSTR bstrSpeed);
    // VB6: Sub play (ByVal ulInstanceID As Long, ByVal bstrSpeed As String)
    [DispId(39)]
    void play (uint ulInstanceID, [MarshalAs(UnmanagedType.BStr)] string bstrSpeed);

    /// <summary><para><c>pause</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method Pause</para></summary>
    /// <remarks><para>An original IDL definition of <c>pause</c> method was the following:  <c>HRESULT pause (unsigned long ulInstanceID)</c>;</para></remarks>
    // Method Pause
    // IDL: HRESULT pause (unsigned long ulInstanceID);
    // VB6: Sub pause (ByVal ulInstanceID As Long)
    [DispId(40)]
    void pause (uint ulInstanceID);

    /// <summary><para><c>Seek</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method Seek</para></summary>
    /// <remarks><para>An original IDL definition of <c>Seek</c> method was the following:  <c>HRESULT Seek (unsigned long ulInstanceID, BSTR bstrUnit, BSTR bstrTarget)</c>;</para></remarks>
    // Method Seek
    // IDL: HRESULT Seek (unsigned long ulInstanceID, BSTR bstrUnit, BSTR bstrTarget);
    // VB6: Sub Seek (ByVal ulInstanceID As Long, ByVal bstrUnit As String, ByVal bstrTarget As String)
    [DispId(41)]
    void Seek (uint ulInstanceID, [MarshalAs(UnmanagedType.BStr)] string bstrUnit, [MarshalAs(UnmanagedType.BStr)] string bstrTarget);

    /// <summary><para><c>next</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method Next</para></summary>
    /// <remarks><para>An original IDL definition of <c>next</c> method was the following:  <c>HRESULT next (unsigned long ulInstanceID)</c>;</para></remarks>
    // Method Next
    // IDL: HRESULT next (unsigned long ulInstanceID);
    // VB6: Sub next (ByVal ulInstanceID As Long)
    [DispId(42)]
    void next (uint ulInstanceID);

    /// <summary><para><c>previous</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method Previous</para></summary>
    /// <remarks><para>An original IDL definition of <c>previous</c> method was the following:  <c>HRESULT previous (unsigned long ulInstanceID)</c>;</para></remarks>
    // Method Previous
    // IDL: HRESULT previous (unsigned long ulInstanceID);
    // VB6: Sub previous (ByVal ulInstanceID As Long)
    [DispId(43)]
    void previous (uint ulInstanceID);

    /// <summary><para><c>GetCurrentTransportActions</c> method of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Method GetCurrentTransportActions</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetCurrentTransportActions</c> method was the following:  <c>HRESULT GetCurrentTransportActions (unsigned long ulInstanceID, [in, out] BSTR* pbstrActions)</c>;</para></remarks>
    // Method GetCurrentTransportActions
    // IDL: HRESULT GetCurrentTransportActions (unsigned long ulInstanceID, [in, out] BSTR* pbstrActions);
    // VB6: Sub GetCurrentTransportActions (ByVal ulInstanceID As Long, pbstrActions As String)
    [DispId(44)]
    void GetCurrentTransportActions (uint ulInstanceID, [In, Out, MarshalAs(UnmanagedType.BStr)] ref string pbstrActions);

    /// <summary><para><c>A_ARG_TYPE_InstanceID</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property A_ARG_TYPE_InstanceID</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_InstanceID</c> property was the following:  <c>unsigned long A_ARG_TYPE_InstanceID</c>;</para></remarks>
    // Property A_ARG_TYPE_InstanceID
    // IDL: unsigned long A_ARG_TYPE_InstanceID;
    // VB6: A_ARG_TYPE_InstanceID As Long
    uint A_ARG_TYPE_InstanceID
    {
      // IDL: HRESULT A_ARG_TYPE_InstanceID ([out, retval] unsigned long* ReturnValue);
      // VB6: Function A_ARG_TYPE_InstanceID As Long
      [DispId(30)]
      get;
    }

    /// <summary><para><c>A_ARG_TYPE_SeekMode</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property A_ARG_TYPE_SeekMode</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_SeekMode</c> property was the following:  <c>BSTR A_ARG_TYPE_SeekMode</c>;</para></remarks>
    // Property A_ARG_TYPE_SeekMode
    // IDL: BSTR A_ARG_TYPE_SeekMode;
    // VB6: A_ARG_TYPE_SeekMode As String
    string A_ARG_TYPE_SeekMode
    {
      // IDL: HRESULT A_ARG_TYPE_SeekMode ([out, retval] BSTR* ReturnValue);
      // VB6: Function A_ARG_TYPE_SeekMode As String
      [DispId(28)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>A_ARG_TYPE_SeekTarget</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property A_ARG_TYPE_SeekTarget</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_SeekTarget</c> property was the following:  <c>BSTR A_ARG_TYPE_SeekTarget</c>;</para></remarks>
    // Property A_ARG_TYPE_SeekTarget
    // IDL: BSTR A_ARG_TYPE_SeekTarget;
    // VB6: A_ARG_TYPE_SeekTarget As String
    string A_ARG_TYPE_SeekTarget
    {
      // IDL: HRESULT A_ARG_TYPE_SeekTarget ([out, retval] BSTR* ReturnValue);
      // VB6: Function A_ARG_TYPE_SeekTarget As String
      [DispId(29)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>AbsoluteCounterPosition</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property AbsoluteCounterPosition</para></summary>
    /// <remarks><para>An original IDL definition of <c>AbsoluteCounterPosition</c> property was the following:  <c>long AbsoluteCounterPosition</c>;</para></remarks>
    // Property AbsoluteCounterPosition
    // IDL: long AbsoluteCounterPosition;
    // VB6: AbsoluteCounterPosition As Long
    int AbsoluteCounterPosition
    {
      // IDL: HRESULT AbsoluteCounterPosition ([out, retval] long* ReturnValue);
      // VB6: Function AbsoluteCounterPosition As Long
      [DispId(25)]
      get;
    }

    /// <summary><para><c>AbsoluteTimePosition</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property AbsoluteTimePosition</para></summary>
    /// <remarks><para>An original IDL definition of <c>AbsoluteTimePosition</c> property was the following:  <c>BSTR AbsoluteTimePosition</c>;</para></remarks>
    // Property AbsoluteTimePosition
    // IDL: BSTR AbsoluteTimePosition;
    // VB6: AbsoluteTimePosition As String
    string AbsoluteTimePosition
    {
      // IDL: HRESULT AbsoluteTimePosition ([out, retval] BSTR* ReturnValue);
      // VB6: Function AbsoluteTimePosition As String
      [DispId(23)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>AVTransportURI</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property AVTransportURI</para></summary>
    /// <remarks><para>An original IDL definition of <c>AVTransportURI</c> property was the following:  <c>BSTR AVTransportURI</c>;</para></remarks>
    // Property AVTransportURI
    // IDL: BSTR AVTransportURI;
    // VB6: AVTransportURI As String
    string AVTransportURI
    {
      // IDL: HRESULT AVTransportURI ([out, retval] BSTR* ReturnValue);
      // VB6: Function AVTransportURI As String
      [DispId(18)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>AVTransportURIMetaData</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property AVTransportURIMetaData</para></summary>
    /// <remarks><para>An original IDL definition of <c>AVTransportURIMetaData</c> property was the following:  <c>BSTR AVTransportURIMetaData</c>;</para></remarks>
    // Property AVTransportURIMetaData
    // IDL: BSTR AVTransportURIMetaData;
    // VB6: AVTransportURIMetaData As String
    string AVTransportURIMetaData
    {
      // IDL: HRESULT AVTransportURIMetaData ([out, retval] BSTR* ReturnValue);
      // VB6: Function AVTransportURIMetaData As String
      [DispId(19)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>CurrentMediaDuration</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property CurrentMediaDuration</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentMediaDuration</c> property was the following:  <c>BSTR CurrentMediaDuration</c>;</para></remarks>
    // Property CurrentMediaDuration
    // IDL: BSTR CurrentMediaDuration;
    // VB6: CurrentMediaDuration As String
    string CurrentMediaDuration
    {
      // IDL: HRESULT CurrentMediaDuration ([out, retval] BSTR* ReturnValue);
      // VB6: Function CurrentMediaDuration As String
      [DispId(15)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>CurrentPlayMode</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property CurrentPlayMode</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentPlayMode</c> property was the following:  <c>BSTR CurrentPlayMode</c>;</para></remarks>
    // Property CurrentPlayMode
    // IDL: BSTR CurrentPlayMode;
    // VB6: CurrentPlayMode As String
    string CurrentPlayMode
    {
      // IDL: HRESULT CurrentPlayMode ([out, retval] BSTR* ReturnValue);
      // VB6: Function CurrentPlayMode As String
      [DispId(7)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>CurrentProtocolInfo</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property CurrentProtocolInfo</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentProtocolInfo</c> property was the following:  <c>BSTR CurrentProtocolInfo</c>;</para></remarks>
    // Property CurrentProtocolInfo
    // IDL: BSTR CurrentProtocolInfo;
    // VB6: CurrentProtocolInfo As String
    string CurrentProtocolInfo
    {
      // IDL: HRESULT CurrentProtocolInfo ([out, retval] BSTR* ReturnValue);
      // VB6: Function CurrentProtocolInfo As String
      [DispId(45)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>CurrentRecordQualityMode</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property CurrentRecordQualityMode</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentRecordQualityMode</c> property was the following:  <c>BSTR CurrentRecordQualityMode</c>;</para></remarks>
    // Property CurrentRecordQualityMode
    // IDL: BSTR CurrentRecordQualityMode;
    // VB6: CurrentRecordQualityMode As String
    string CurrentRecordQualityMode
    {
      // IDL: HRESULT CurrentRecordQualityMode ([out, retval] BSTR* ReturnValue);
      // VB6: Function CurrentRecordQualityMode As String
      [DispId(10)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>CurrentTrack</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property CurrentTrack</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentTrack</c> property was the following:  <c>unsigned long CurrentTrack</c>;</para></remarks>
    // Property CurrentTrack
    // IDL: unsigned long CurrentTrack;
    // VB6: CurrentTrack As Long
    uint CurrentTrack
    {
      // IDL: HRESULT CurrentTrack ([out, retval] unsigned long* ReturnValue);
      // VB6: Function CurrentTrack As Long
      [DispId(13)]
      get;
    }

    /// <summary><para><c>CurrentTrackDuration</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property CurrentTrackDuration</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentTrackDuration</c> property was the following:  <c>BSTR CurrentTrackDuration</c>;</para></remarks>
    // Property CurrentTrackDuration
    // IDL: BSTR CurrentTrackDuration;
    // VB6: CurrentTrackDuration As String
    string CurrentTrackDuration
    {
      // IDL: HRESULT CurrentTrackDuration ([out, retval] BSTR* ReturnValue);
      // VB6: Function CurrentTrackDuration As String
      [DispId(14)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>CurrentTrackMetaData</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property CurrentTrackMetaData</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentTrackMetaData</c> property was the following:  <c>BSTR CurrentTrackMetaData</c>;</para></remarks>
    // Property CurrentTrackMetaData
    // IDL: BSTR CurrentTrackMetaData;
    // VB6: CurrentTrackMetaData As String
    string CurrentTrackMetaData
    {
      // IDL: HRESULT CurrentTrackMetaData ([out, retval] BSTR* ReturnValue);
      // VB6: Function CurrentTrackMetaData As String
      [DispId(16)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>CurrentTrackURI</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property CurrentTrackURI</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentTrackURI</c> property was the following:  <c>BSTR CurrentTrackURI</c>;</para></remarks>
    // Property CurrentTrackURI
    // IDL: BSTR CurrentTrackURI;
    // VB6: CurrentTrackURI As String
    string CurrentTrackURI
    {
      // IDL: HRESULT CurrentTrackURI ([out, retval] BSTR* ReturnValue);
      // VB6: Function CurrentTrackURI As String
      [DispId(17)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>CurrentTransportActions</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property CurrentTransportActions</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentTransportActions</c> property was the following:  <c>BSTR CurrentTransportActions</c>;</para></remarks>
    // Property CurrentTransportActions
    // IDL: BSTR CurrentTransportActions;
    // VB6: CurrentTransportActions As String
    string CurrentTransportActions
    {
      // IDL: HRESULT CurrentTransportActions ([out, retval] BSTR* ReturnValue);
      // VB6: Function CurrentTransportActions As String
      [DispId(26)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>LastChange</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property LastChange</para></summary>
    /// <remarks><para>An original IDL definition of <c>LastChange</c> property was the following:  <c>BSTR LastChange</c>;</para></remarks>
    // Property LastChange
    // IDL: BSTR LastChange;
    // VB6: LastChange As String
    string LastChange
    {
      // IDL: HRESULT LastChange ([out, retval] BSTR* ReturnValue);
      // VB6: Function LastChange As String
      [DispId(27)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>NextAVTransportURI</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property NextAVTransportURI</para></summary>
    /// <remarks><para>An original IDL definition of <c>NextAVTransportURI</c> property was the following:  <c>BSTR NextAVTransportURI</c>;</para></remarks>
    // Property NextAVTransportURI
    // IDL: BSTR NextAVTransportURI;
    // VB6: NextAVTransportURI As String
    string NextAVTransportURI
    {
      // IDL: HRESULT NextAVTransportURI ([out, retval] BSTR* ReturnValue);
      // VB6: Function NextAVTransportURI As String
      [DispId(20)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>NextAVTransportURIMetaData</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property NextAVTransportURIMetaData</para></summary>
    /// <remarks><para>An original IDL definition of <c>NextAVTransportURIMetaData</c> property was the following:  <c>BSTR NextAVTransportURIMetaData</c>;</para></remarks>
    // Property NextAVTransportURIMetaData
    // IDL: BSTR NextAVTransportURIMetaData;
    // VB6: NextAVTransportURIMetaData As String
    string NextAVTransportURIMetaData
    {
      // IDL: HRESULT NextAVTransportURIMetaData ([out, retval] BSTR* ReturnValue);
      // VB6: Function NextAVTransportURIMetaData As String
      [DispId(21)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>NumberOfTracks</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property NumberOfTracks</para></summary>
    /// <remarks><para>An original IDL definition of <c>NumberOfTracks</c> property was the following:  <c>unsigned long NumberOfTracks</c>;</para></remarks>
    // Property NumberOfTracks
    // IDL: unsigned long NumberOfTracks;
    // VB6: NumberOfTracks As Long
    uint NumberOfTracks
    {
      // IDL: HRESULT NumberOfTracks ([out, retval] unsigned long* ReturnValue);
      // VB6: Function NumberOfTracks As Long
      [DispId(12)]
      get;
    }

    /// <summary><para><c>PlaybackStorageMedium</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property PlaybackStorageMedium</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaybackStorageMedium</c> property was the following:  <c>BSTR PlaybackStorageMedium</c>;</para></remarks>
    // Property PlaybackStorageMedium
    // IDL: BSTR PlaybackStorageMedium;
    // VB6: PlaybackStorageMedium As String
    string PlaybackStorageMedium
    {
      // IDL: HRESULT PlaybackStorageMedium ([out, retval] BSTR* ReturnValue);
      // VB6: Function PlaybackStorageMedium As String
      [DispId(3)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>PossiblePlaybackStorageMedia</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property PossiblePlaybackStorageMedia</para></summary>
    /// <remarks><para>An original IDL definition of <c>PossiblePlaybackStorageMedia</c> property was the following:  <c>BSTR PossiblePlaybackStorageMedia</c>;</para></remarks>
    // Property PossiblePlaybackStorageMedia
    // IDL: BSTR PossiblePlaybackStorageMedia;
    // VB6: PossiblePlaybackStorageMedia As String
    string PossiblePlaybackStorageMedia
    {
      // IDL: HRESULT PossiblePlaybackStorageMedia ([out, retval] BSTR* ReturnValue);
      // VB6: Function PossiblePlaybackStorageMedia As String
      [DispId(5)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>PossibleRecordQualityModes</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property PossibleRecordQualityModes</para></summary>
    /// <remarks><para>An original IDL definition of <c>PossibleRecordQualityModes</c> property was the following:  <c>BSTR PossibleRecordQualityModes</c>;</para></remarks>
    // Property PossibleRecordQualityModes
    // IDL: BSTR PossibleRecordQualityModes;
    // VB6: PossibleRecordQualityModes As String
    string PossibleRecordQualityModes
    {
      // IDL: HRESULT PossibleRecordQualityModes ([out, retval] BSTR* ReturnValue);
      // VB6: Function PossibleRecordQualityModes As String
      [DispId(11)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>PossibleRecordStorageMedia</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property PossibleRecordStorageMedia</para></summary>
    /// <remarks><para>An original IDL definition of <c>PossibleRecordStorageMedia</c> property was the following:  <c>BSTR PossibleRecordStorageMedia</c>;</para></remarks>
    // Property PossibleRecordStorageMedia
    // IDL: BSTR PossibleRecordStorageMedia;
    // VB6: PossibleRecordStorageMedia As String
    string PossibleRecordStorageMedia
    {
      // IDL: HRESULT PossibleRecordStorageMedia ([out, retval] BSTR* ReturnValue);
      // VB6: Function PossibleRecordStorageMedia As String
      [DispId(6)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>RecordMediumWriteStatus</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property RecordMediumWriteStatus</para></summary>
    /// <remarks><para>An original IDL definition of <c>RecordMediumWriteStatus</c> property was the following:  <c>BSTR RecordMediumWriteStatus</c>;</para></remarks>
    // Property RecordMediumWriteStatus
    // IDL: BSTR RecordMediumWriteStatus;
    // VB6: RecordMediumWriteStatus As String
    string RecordMediumWriteStatus
    {
      // IDL: HRESULT RecordMediumWriteStatus ([out, retval] BSTR* ReturnValue);
      // VB6: Function RecordMediumWriteStatus As String
      [DispId(9)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>RecordStorageMedium</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property RecordStorageMedium</para></summary>
    /// <remarks><para>An original IDL definition of <c>RecordStorageMedium</c> property was the following:  <c>BSTR RecordStorageMedium</c>;</para></remarks>
    // Property RecordStorageMedium
    // IDL: BSTR RecordStorageMedium;
    // VB6: RecordStorageMedium As String
    string RecordStorageMedium
    {
      // IDL: HRESULT RecordStorageMedium ([out, retval] BSTR* ReturnValue);
      // VB6: Function RecordStorageMedium As String
      [DispId(4)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>RelativeCounterPosition</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property RelativeCounterPosition</para></summary>
    /// <remarks><para>An original IDL definition of <c>RelativeCounterPosition</c> property was the following:  <c>long RelativeCounterPosition</c>;</para></remarks>
    // Property RelativeCounterPosition
    // IDL: long RelativeCounterPosition;
    // VB6: RelativeCounterPosition As Long
    int RelativeCounterPosition
    {
      // IDL: HRESULT RelativeCounterPosition ([out, retval] long* ReturnValue);
      // VB6: Function RelativeCounterPosition As Long
      [DispId(24)]
      get;
    }

    /// <summary><para><c>RelativeTimePosition</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property RelativeTimePosition</para></summary>
    /// <remarks><para>An original IDL definition of <c>RelativeTimePosition</c> property was the following:  <c>BSTR RelativeTimePosition</c>;</para></remarks>
    // Property RelativeTimePosition
    // IDL: BSTR RelativeTimePosition;
    // VB6: RelativeTimePosition As String
    string RelativeTimePosition
    {
      // IDL: HRESULT RelativeTimePosition ([out, retval] BSTR* ReturnValue);
      // VB6: Function RelativeTimePosition As String
      [DispId(22)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>TransportPlaySpeed</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property TransportPlaySpeed</para></summary>
    /// <remarks><para>An original IDL definition of <c>TransportPlaySpeed</c> property was the following:  <c>BSTR TransportPlaySpeed</c>;</para></remarks>
    // Property TransportPlaySpeed
    // IDL: BSTR TransportPlaySpeed;
    // VB6: TransportPlaySpeed As String
    string TransportPlaySpeed
    {
      // IDL: HRESULT TransportPlaySpeed ([out, retval] BSTR* ReturnValue);
      // VB6: Function TransportPlaySpeed As String
      [DispId(8)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>TransportState</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property TransportState</para></summary>
    /// <remarks><para>An original IDL definition of <c>TransportState</c> property was the following:  <c>BSTR TransportState</c>;</para></remarks>
    // Property TransportState
    // IDL: BSTR TransportState;
    // VB6: TransportState As String
    string TransportState
    {
      // IDL: HRESULT TransportState ([out, retval] BSTR* ReturnValue);
      // VB6: Function TransportState As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>TransportStatus</c> property of <c>IWMPDMRAVTransportService</c> interface.  </para><para>Property TransportStatus</para></summary>
    /// <remarks><para>An original IDL definition of <c>TransportStatus</c> property was the following:  <c>BSTR TransportStatus</c>;</para></remarks>
    // Property TransportStatus
    // IDL: BSTR TransportStatus;
    // VB6: TransportStatus As String
    string TransportStatus
    {
      // IDL: HRESULT TransportStatus ([out, retval] BSTR* ReturnValue);
      // VB6: Function TransportStatus As String
      [DispId(2)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPDMRConnectionManagerService</c> interface.</para></summary>
  [Guid("FB61CD38-8DE7-4479-8B76-A8D097C20C70")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPDMRConnectionManagerService
  {
    /// <summary><para><c>GetProtocolInfo</c> method of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Method GetProtocolInfo</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetProtocolInfo</c> method was the following:  <c>HRESULT GetProtocolInfo ([in, out] BSTR* pbstrSource, [in, out] BSTR* pbstrSink)</c>;</para></remarks>
    // Method GetProtocolInfo
    // IDL: HRESULT GetProtocolInfo ([in, out] BSTR* pbstrSource, [in, out] BSTR* pbstrSink);
    // VB6: Sub GetProtocolInfo (pbstrSource As String, pbstrSink As String)
    [DispId(11)]
    void GetProtocolInfo ([In, Out, MarshalAs(UnmanagedType.BStr)] ref string pbstrSource, [In, Out, MarshalAs(UnmanagedType.BStr)] ref string pbstrSink);

    /// <summary><para><c>GetCurrentConnectionIDs</c> method of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Method GetCurrentConnectionIDs</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetCurrentConnectionIDs</c> method was the following:  <c>HRESULT GetCurrentConnectionIDs ([in, out] BSTR* pbstrConnectionIDs)</c>;</para></remarks>
    // Method GetCurrentConnectionIDs
    // IDL: HRESULT GetCurrentConnectionIDs ([in, out] BSTR* pbstrConnectionIDs);
    // VB6: Sub GetCurrentConnectionIDs (pbstrConnectionIDs As String)
    [DispId(12)]
    void GetCurrentConnectionIDs ([In, Out, MarshalAs(UnmanagedType.BStr)] ref string pbstrConnectionIDs);

    /// <summary><para><c>GetCurrentConnectionInfo</c> method of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Method GetCurrentConnectionInfo</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetCurrentConnectionInfo</c> method was the following:  <c>HRESULT GetCurrentConnectionInfo (long lConnectionID, [in, out] long* plResID, [in, out] long* plAVTransportID, [in, out] BSTR* pbstrProtocolInfo, [in, out] BSTR* pbstrPeerConnectionManager, [in, out] long* plPeerConnectionID, [in, out] BSTR* pbstrDirection, [in, out] BSTR* pbstrStatus)</c>;</para></remarks>
    // Method GetCurrentConnectionInfo
    // IDL: HRESULT GetCurrentConnectionInfo (long lConnectionID, [in, out] long* plResID, [in, out] long* plAVTransportID, [in, out] BSTR* pbstrProtocolInfo, [in, out] BSTR* pbstrPeerConnectionManager, [in, out] long* plPeerConnectionID, [in, out] BSTR* pbstrDirection, [in, out] BSTR* pbstrStatus);
    // VB6: Sub GetCurrentConnectionInfo (ByVal lConnectionID As Long, plResID As Long, plAVTransportID As Long, pbstrProtocolInfo As String, pbstrPeerConnectionManager As String, plPeerConnectionID As Long, pbstrDirection As String, pbstrStatus As String)
    [DispId(13)]
    void GetCurrentConnectionInfo (int lConnectionID, [In, Out] ref int plResID, [In, Out] ref int plAVTransportID, [In, Out, MarshalAs(UnmanagedType.BStr)] ref string pbstrProtocolInfo, [In, Out, MarshalAs(UnmanagedType.BStr)] ref string pbstrPeerConnectionManager, [In, Out] ref int plPeerConnectionID, [In, Out, MarshalAs(UnmanagedType.BStr)] ref string pbstrDirection, [In, Out, MarshalAs(UnmanagedType.BStr)] ref string pbstrStatus);

    /// <summary><para><c>A_ARG_TYPE_AVTransportID</c> property of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Property A_ARG_TYPE_AVTransportID</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_AVTransportID</c> property was the following:  <c>long A_ARG_TYPE_AVTransportID</c>;</para></remarks>
    // Property A_ARG_TYPE_AVTransportID
    // IDL: long A_ARG_TYPE_AVTransportID;
    // VB6: A_ARG_TYPE_AVTransportID As Long
    int A_ARG_TYPE_AVTransportID
    {
      // IDL: HRESULT A_ARG_TYPE_AVTransportID ([out, retval] long* ReturnValue);
      // VB6: Function A_ARG_TYPE_AVTransportID As Long
      [DispId(9)]
      get;
    }

    /// <summary><para><c>A_ARG_TYPE_ConnectionID</c> property of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Property A_ARG_TYPE_ConnectionID</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_ConnectionID</c> property was the following:  <c>long A_ARG_TYPE_ConnectionID</c>;</para></remarks>
    // Property A_ARG_TYPE_ConnectionID
    // IDL: long A_ARG_TYPE_ConnectionID;
    // VB6: A_ARG_TYPE_ConnectionID As Long
    int A_ARG_TYPE_ConnectionID
    {
      // IDL: HRESULT A_ARG_TYPE_ConnectionID ([out, retval] long* ReturnValue);
      // VB6: Function A_ARG_TYPE_ConnectionID As Long
      [DispId(8)]
      get;
    }

    /// <summary><para><c>A_ARG_TYPE_ConnectionManager</c> property of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Property A_ARG_TYPE_ConnectionManager</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_ConnectionManager</c> property was the following:  <c>BSTR A_ARG_TYPE_ConnectionManager</c>;</para></remarks>
    // Property A_ARG_TYPE_ConnectionManager
    // IDL: BSTR A_ARG_TYPE_ConnectionManager;
    // VB6: A_ARG_TYPE_ConnectionManager As String
    string A_ARG_TYPE_ConnectionManager
    {
      // IDL: HRESULT A_ARG_TYPE_ConnectionManager ([out, retval] BSTR* ReturnValue);
      // VB6: Function A_ARG_TYPE_ConnectionManager As String
      [DispId(5)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>A_ARG_TYPE_ConnectionStatus</c> property of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Property A_ARG_TYPE_ConnectionStatus</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_ConnectionStatus</c> property was the following:  <c>BSTR A_ARG_TYPE_ConnectionStatus</c>;</para></remarks>
    // Property A_ARG_TYPE_ConnectionStatus
    // IDL: BSTR A_ARG_TYPE_ConnectionStatus;
    // VB6: A_ARG_TYPE_ConnectionStatus As String
    string A_ARG_TYPE_ConnectionStatus
    {
      // IDL: HRESULT A_ARG_TYPE_ConnectionStatus ([out, retval] BSTR* ReturnValue);
      // VB6: Function A_ARG_TYPE_ConnectionStatus As String
      [DispId(4)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>A_ARG_TYPE_Direction</c> property of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Property A_ARG_TYPE_Direction</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_Direction</c> property was the following:  <c>BSTR A_ARG_TYPE_Direction</c>;</para></remarks>
    // Property A_ARG_TYPE_Direction
    // IDL: BSTR A_ARG_TYPE_Direction;
    // VB6: A_ARG_TYPE_Direction As String
    string A_ARG_TYPE_Direction
    {
      // IDL: HRESULT A_ARG_TYPE_Direction ([out, retval] BSTR* ReturnValue);
      // VB6: Function A_ARG_TYPE_Direction As String
      [DispId(6)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>A_ARG_TYPE_ProtocolInfo</c> property of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Property A_ARG_TYPE_ProtocolInfo</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_ProtocolInfo</c> property was the following:  <c>BSTR A_ARG_TYPE_ProtocolInfo</c>;</para></remarks>
    // Property A_ARG_TYPE_ProtocolInfo
    // IDL: BSTR A_ARG_TYPE_ProtocolInfo;
    // VB6: A_ARG_TYPE_ProtocolInfo As String
    string A_ARG_TYPE_ProtocolInfo
    {
      // IDL: HRESULT A_ARG_TYPE_ProtocolInfo ([out, retval] BSTR* ReturnValue);
      // VB6: Function A_ARG_TYPE_ProtocolInfo As String
      [DispId(7)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>A_ARG_TYPE_RcsID</c> property of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Property A_ARG_TYPE_RcsID</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_RcsID</c> property was the following:  <c>long A_ARG_TYPE_RcsID</c>;</para></remarks>
    // Property A_ARG_TYPE_RcsID
    // IDL: long A_ARG_TYPE_RcsID;
    // VB6: A_ARG_TYPE_RcsID As Long
    int A_ARG_TYPE_RcsID
    {
      // IDL: HRESULT A_ARG_TYPE_RcsID ([out, retval] long* ReturnValue);
      // VB6: Function A_ARG_TYPE_RcsID As Long
      [DispId(10)]
      get;
    }

    /// <summary><para><c>CurrentConnectionIDs</c> property of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Property CurrentConnectionIDs</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentConnectionIDs</c> property was the following:  <c>BSTR CurrentConnectionIDs</c>;</para></remarks>
    // Property CurrentConnectionIDs
    // IDL: BSTR CurrentConnectionIDs;
    // VB6: CurrentConnectionIDs As String
    string CurrentConnectionIDs
    {
      // IDL: HRESULT CurrentConnectionIDs ([out, retval] BSTR* ReturnValue);
      // VB6: Function CurrentConnectionIDs As String
      [DispId(3)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>SinkProtocolInfo</c> property of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Property SinkProtocolInfo</para></summary>
    /// <remarks><para>An original IDL definition of <c>SinkProtocolInfo</c> property was the following:  <c>BSTR SinkProtocolInfo</c>;</para></remarks>
    // Property SinkProtocolInfo
    // IDL: BSTR SinkProtocolInfo;
    // VB6: SinkProtocolInfo As String
    string SinkProtocolInfo
    {
      // IDL: HRESULT SinkProtocolInfo ([out, retval] BSTR* ReturnValue);
      // VB6: Function SinkProtocolInfo As String
      [DispId(2)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>SourceProtocolInfo</c> property of <c>IWMPDMRConnectionManagerService</c> interface.  </para><para>Property SourceProtocolInfo</para></summary>
    /// <remarks><para>An original IDL definition of <c>SourceProtocolInfo</c> property was the following:  <c>BSTR SourceProtocolInfo</c>;</para></remarks>
    // Property SourceProtocolInfo
    // IDL: BSTR SourceProtocolInfo;
    // VB6: SourceProtocolInfo As String
    string SourceProtocolInfo
    {
      // IDL: HRESULT SourceProtocolInfo ([out, retval] BSTR* ReturnValue);
      // VB6: Function SourceProtocolInfo As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPDMRRenderingControlService</c> interface.  </para><para>IWMPDMRRenderingControlService Interface</para></summary>
  // IWMPDMRRenderingControlService Interface
  [Guid("FF4B1BDA-19F0-42CF-8DDA-19162950C543")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPDMRRenderingControlService
  {
    /// <summary><para><c>ListPresets</c> method of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Method ListPresets</para></summary>
    /// <remarks><para>An original IDL definition of <c>ListPresets</c> method was the following:  <c>HRESULT ListPresets (unsigned long ulInstanceID, [in, out] BSTR* pbstrCurrentPresetList)</c>;</para></remarks>
    // Method ListPresets
    // IDL: HRESULT ListPresets (unsigned long ulInstanceID, [in, out] BSTR* pbstrCurrentPresetList);
    // VB6: Sub ListPresets (ByVal ulInstanceID As Long, pbstrCurrentPresetList As String)
    [DispId(8)]
    void ListPresets (uint ulInstanceID, [In, Out, MarshalAs(UnmanagedType.BStr)] ref string pbstrCurrentPresetList);

    /// <summary><para><c>SelectPreset</c> method of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Method SelectPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>SelectPreset</c> method was the following:  <c>HRESULT SelectPreset (unsigned long ulInstanceID, BSTR bstrPresetName)</c>;</para></remarks>
    // Method SelectPreset
    // IDL: HRESULT SelectPreset (unsigned long ulInstanceID, BSTR bstrPresetName);
    // VB6: Sub SelectPreset (ByVal ulInstanceID As Long, ByVal bstrPresetName As String)
    [DispId(9)]
    void SelectPreset (uint ulInstanceID, [MarshalAs(UnmanagedType.BStr)] string bstrPresetName);

    /// <summary><para><c>GetMute</c> method of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Method GetMute</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetMute</c> method was the following:  <c>HRESULT GetMute (unsigned long ulInstanceID, BSTR bstrChannel, [in, out] VARIANT_BOOL* pbCurrentMute)</c>;</para></remarks>
    // Method GetMute
    // IDL: HRESULT GetMute (unsigned long ulInstanceID, BSTR bstrChannel, [in, out] VARIANT_BOOL* pbCurrentMute);
    // VB6: Sub GetMute (ByVal ulInstanceID As Long, ByVal bstrChannel As String, pbCurrentMute As Boolean)
    [DispId(10)]
    void GetMute (uint ulInstanceID, [MarshalAs(UnmanagedType.BStr)] string bstrChannel, [In, Out, MarshalAs(UnmanagedType.VariantBool)] ref bool pbCurrentMute);

    /// <summary><para><c>SetMute</c> method of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Method SetMute</para></summary>
    /// <remarks><para>An original IDL definition of <c>SetMute</c> method was the following:  <c>HRESULT SetMute (unsigned long ulInstanceID, BSTR bstrChannel, VARIANT_BOOL bDesiredMute)</c>;</para></remarks>
    // Method SetMute
    // IDL: HRESULT SetMute (unsigned long ulInstanceID, BSTR bstrChannel, VARIANT_BOOL bDesiredMute);
    // VB6: Sub SetMute (ByVal ulInstanceID As Long, ByVal bstrChannel As String, ByVal bDesiredMute As Boolean)
    [DispId(11)]
    void SetMute (uint ulInstanceID, [MarshalAs(UnmanagedType.BStr)] string bstrChannel, [MarshalAs(UnmanagedType.VariantBool)] bool bDesiredMute);

    /// <summary><para><c>GetVolume</c> method of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Method GetVolume</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetVolume</c> method was the following:  <c>HRESULT GetVolume (unsigned long ulInstanceID, BSTR bstrChannel, [in, out] unsigned short* puiCurrentVolume)</c>;</para></remarks>
    // Method GetVolume
    // IDL: HRESULT GetVolume (unsigned long ulInstanceID, BSTR bstrChannel, [in, out] unsigned short* puiCurrentVolume);
    // VB6: Sub GetVolume (ByVal ulInstanceID As Long, ByVal bstrChannel As String, puiCurrentVolume As Integer)
    [DispId(12)]
    void GetVolume (uint ulInstanceID, [MarshalAs(UnmanagedType.BStr)] string bstrChannel, [In, Out] ref ushort puiCurrentVolume);

    /// <summary><para><c>SetVolume</c> method of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Method SetVolume</para></summary>
    /// <remarks><para>An original IDL definition of <c>SetVolume</c> method was the following:  <c>HRESULT SetVolume (unsigned long ulInstanceID, BSTR bstrChannel, unsigned short uiDesiredVolume)</c>;</para></remarks>
    // Method SetVolume
    // IDL: HRESULT SetVolume (unsigned long ulInstanceID, BSTR bstrChannel, unsigned short uiDesiredVolume);
    // VB6: Sub SetVolume (ByVal ulInstanceID As Long, ByVal bstrChannel As String, ByVal uiDesiredVolume As Integer)
    [DispId(13)]
    void SetVolume (uint ulInstanceID, [MarshalAs(UnmanagedType.BStr)] string bstrChannel, ushort uiDesiredVolume);

    /// <summary><para><c>A_ARG_TYPE_Channel</c> property of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Property A_ARG_TYPE_Channel</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_Channel</c> property was the following:  <c>BSTR A_ARG_TYPE_Channel</c>;</para></remarks>
    // Property A_ARG_TYPE_Channel
    // IDL: BSTR A_ARG_TYPE_Channel;
    // VB6: A_ARG_TYPE_Channel As String
    string A_ARG_TYPE_Channel
    {
      // IDL: HRESULT A_ARG_TYPE_Channel ([out, retval] BSTR* ReturnValue);
      // VB6: Function A_ARG_TYPE_Channel As String
      [DispId(5)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>A_ARG_TYPE_InstanceID</c> property of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Property A_ARG_TYPE_InstanceID</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_InstanceID</c> property was the following:  <c>unsigned long A_ARG_TYPE_InstanceID</c>;</para></remarks>
    // Property A_ARG_TYPE_InstanceID
    // IDL: unsigned long A_ARG_TYPE_InstanceID;
    // VB6: A_ARG_TYPE_InstanceID As Long
    uint A_ARG_TYPE_InstanceID
    {
      // IDL: HRESULT A_ARG_TYPE_InstanceID ([out, retval] unsigned long* ReturnValue);
      // VB6: Function A_ARG_TYPE_InstanceID As Long
      [DispId(6)]
      get;
    }

    /// <summary><para><c>A_ARG_TYPE_PresetName</c> property of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Property A_ARG_TYPE_PresetName</para></summary>
    /// <remarks><para>An original IDL definition of <c>A_ARG_TYPE_PresetName</c> property was the following:  <c>BSTR A_ARG_TYPE_PresetName</c>;</para></remarks>
    // Property A_ARG_TYPE_PresetName
    // IDL: BSTR A_ARG_TYPE_PresetName;
    // VB6: A_ARG_TYPE_PresetName As String
    string A_ARG_TYPE_PresetName
    {
      // IDL: HRESULT A_ARG_TYPE_PresetName ([out, retval] BSTR* ReturnValue);
      // VB6: Function A_ARG_TYPE_PresetName As String
      [DispId(7)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>LastChange</c> property of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Property LastChange</para></summary>
    /// <remarks><para>An original IDL definition of <c>LastChange</c> property was the following:  <c>BSTR LastChange</c>;</para></remarks>
    // Property LastChange
    // IDL: BSTR LastChange;
    // VB6: LastChange As String
    string LastChange
    {
      // IDL: HRESULT LastChange ([out, retval] BSTR* ReturnValue);
      // VB6: Function LastChange As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>mute</c> property of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Property Mute</para></summary>
    /// <remarks><para>An original IDL definition of <c>mute</c> property was the following:  <c>VARIANT_BOOL mute</c>;</para></remarks>
    // Property Mute
    // IDL: VARIANT_BOOL mute;
    // VB6: mute As Boolean
    bool mute
    {
      // IDL: HRESULT mute ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function mute As Boolean
      [DispId(3)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>PresetNameList</c> property of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Property PresetNameList</para></summary>
    /// <remarks><para>An original IDL definition of <c>PresetNameList</c> property was the following:  <c>BSTR PresetNameList</c>;</para></remarks>
    // Property PresetNameList
    // IDL: BSTR PresetNameList;
    // VB6: PresetNameList As String
    string PresetNameList
    {
      // IDL: HRESULT PresetNameList ([out, retval] BSTR* ReturnValue);
      // VB6: Function PresetNameList As String
      [DispId(2)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>volume</c> property of <c>IWMPDMRRenderingControlService</c> interface.  </para><para>Property Volume</para></summary>
    /// <remarks><para>An original IDL definition of <c>volume</c> property was the following:  <c>unsigned short volume</c>;</para></remarks>
    // Property Volume
    // IDL: unsigned short volume;
    // VB6: volume As Integer
    ushort volume
    {
      // IDL: HRESULT volume ([out, retval] unsigned short* ReturnValue);
      // VB6: Function volume As Integer
      [DispId(4)]
      get;
    }
  }

  /// <summary><para><c>IWMPDolbyDigitalSettingsCtrl</c> interface.  </para><para>IWMPDolbyDigitalSettingsCtrl: Public interface for skin object model.</para></summary>
  // IWMPDolbyDigitalSettingsCtrl: Public interface for skin object model.
  [Guid("BBD6801A-A1D4-4D05-9F2D-29E0024C3FD9")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPDolbyDigitalSettingsCtrl
  {
    /// <summary><para><c>reset</c> method of <c>IWMPDolbyDigitalSettingsCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>reset</c> method was the following:  <c>HRESULT reset (void)</c>;</para></remarks>
    // IDL: HRESULT reset (void);
    // VB6: Sub reset
    [DispId(5950)]
    void reset ();

    /// <summary><para><c>currentPreset</c> property of <c>IWMPDolbyDigitalSettingsCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPreset</c> property was the following:  <c>long currentPreset</c>;</para></remarks>
    // IDL: long currentPreset;
    // VB6: currentPreset As Long
    int currentPreset
    {
      // IDL: HRESULT currentPreset ([out, retval] long* ReturnValue);
      // VB6: Function currentPreset As Long
      [DispId(5951)]
      get;
      // IDL: HRESULT currentPreset (long value);
      // VB6: Sub currentPreset (ByVal value As Long)
      [DispId(5951)]
      set;
    }
  }

  /// <summary><para><c>IWMPDownloadCollection</c> interface.  </para><para>IWMPDownloadCollection: Public interface.</para></summary>
  // IWMPDownloadCollection: Public interface.
  [Guid("0A319C7F-85F9-436C-B88E-82FD88000E1C")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPDownloadCollection
  {
    /// <summary><para><c>Item</c> method of <c>IWMPDownloadCollection</c> interface.  </para><para>Returns a pending download object</para></summary>
    /// <remarks><para>An original IDL definition of <c>Item</c> method was the following:  <c>HRESULT Item (long lItem, [out, retval] IWMPDownloadItem2** ReturnValue)</c>;</para></remarks>
    // Returns a pending download object
    // IDL: HRESULT Item (long lItem, [out, retval] IWMPDownloadItem2** ReturnValue);
    // VB6: Function Item (ByVal lItem As Long) As IWMPDownloadItem2
    [DispId(1203)]
    IWMPDownloadItem2 Item (int lItem);

    /// <summary><para><c>startDownload</c> method of <c>IWMPDownloadCollection</c> interface.  </para><para>Queues a download</para></summary>
    /// <remarks><para>An original IDL definition of <c>startDownload</c> method was the following:  <c>HRESULT startDownload (BSTR bstrSourceURL, BSTR bstrType, [out, retval] IWMPDownloadItem2** ReturnValue)</c>;</para></remarks>
    // Queues a download
    // IDL: HRESULT startDownload (BSTR bstrSourceURL, BSTR bstrType, [out, retval] IWMPDownloadItem2** ReturnValue);
    // VB6: Function startDownload (ByVal bstrSourceURL As String, ByVal bstrType As String) As IWMPDownloadItem2
    [DispId(1204)]
    IWMPDownloadItem2 startDownload ([MarshalAs(UnmanagedType.BStr)] string bstrSourceURL, [MarshalAs(UnmanagedType.BStr)] string bstrType);

    /// <summary><para><c>removeItem</c> method of <c>IWMPDownloadCollection</c> interface.  </para><para>Remove a download from the collection. Cancel if in progress.</para></summary>
    /// <remarks><para>An original IDL definition of <c>removeItem</c> method was the following:  <c>HRESULT removeItem (long lItem)</c>;</para></remarks>
    // Remove a download from the collection. Cancel if in progress.
    // IDL: HRESULT removeItem (long lItem);
    // VB6: Sub removeItem (ByVal lItem As Long)
    [DispId(1205)]
    void removeItem (int lItem);

    /// <summary><para><c>clear</c> method of <c>IWMPDownloadCollection</c> interface.  </para><para>Clear the download collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>clear</c> method was the following:  <c>HRESULT clear (void)</c>;</para></remarks>
    // Clear the download collection
    // IDL: HRESULT clear (void);
    // VB6: Sub clear
    [DispId(1206)]
    void clear ();

    /// <summary><para><c>count</c> property of <c>IWMPDownloadCollection</c> interface.  </para><para>Returns the number of pending downloads</para></summary>
    /// <remarks><para>An original IDL definition of <c>count</c> property was the following:  <c>long count</c>;</para></remarks>
    // Returns the number of pending downloads
    // IDL: long count;
    // VB6: count As Long
    int count
    {
      // IDL: HRESULT count ([out, retval] long* ReturnValue);
      // VB6: Function count As Long
      [DispId(1202)]
      get;
    }

    /// <summary><para><c>ID</c> property of <c>IWMPDownloadCollection</c> interface.  </para><para>Returns the unique identifier of the collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>ID</c> property was the following:  <c>long ID</c>;</para></remarks>
    // Returns the unique identifier of the collection
    // IDL: long ID;
    // VB6: ID As Long
    int ID
    {
      // IDL: HRESULT ID ([out, retval] long* ReturnValue);
      // VB6: Function ID As Long
      [DispId(1201)]
      get;
    }
  }

  /// <summary><para><c>IWMPDownloadItem</c> interface.  </para><para>IWMPDownloadItem: Public interface.</para></summary>
  // IWMPDownloadItem: Public interface.
  [Guid("C9470E8E-3F6B-46A9-A0A9-452815C34297")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPDownloadItem
  {
    /// <summary><para><c>pause</c> method of <c>IWMPDownloadItem</c> interface.  </para><para>Pauses the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>pause</c> method was the following:  <c>HRESULT pause (void)</c>;</para></remarks>
    // Pauses the download
    // IDL: HRESULT pause (void);
    // VB6: Sub pause
    [DispId(1256)]
    void pause ();

    /// <summary><para><c>resume</c> method of <c>IWMPDownloadItem</c> interface.  </para><para>Resumes the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>resume</c> method was the following:  <c>HRESULT resume (void)</c>;</para></remarks>
    // Resumes the download
    // IDL: HRESULT resume (void);
    // VB6: Sub resume
    [DispId(1257)]
    void resume ();

    /// <summary><para><c>cancel</c> method of <c>IWMPDownloadItem</c> interface.  </para><para>Cancels the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>cancel</c> method was the following:  <c>HRESULT cancel (void)</c>;</para></remarks>
    // Cancels the download
    // IDL: HRESULT cancel (void);
    // VB6: Sub cancel
    [DispId(1258)]
    void cancel ();

    /// <summary><para><c>downloadState</c> property of <c>IWMPDownloadItem</c> interface.  </para><para>Returns the state of the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>downloadState</c> property was the following:  <c>WMPSubscriptionDownloadState downloadState</c>;</para></remarks>
    // Returns the state of the download
    // IDL: WMPSubscriptionDownloadState downloadState;
    // VB6: downloadState As WMPSubscriptionDownloadState
    WMPSubscriptionDownloadState downloadState
    {
      // IDL: HRESULT downloadState ([out, retval] WMPSubscriptionDownloadState* ReturnValue);
      // VB6: Function downloadState As WMPSubscriptionDownloadState
      [DispId(1255)]
      get;
    }

    /// <summary><para><c>progress</c> property of <c>IWMPDownloadItem</c> interface.  </para><para>Returns the progress (in bytes) of the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>progress</c> property was the following:  <c>long progress</c>;</para></remarks>
    // Returns the progress (in bytes) of the download
    // IDL: long progress;
    // VB6: progress As Long
    int progress
    {
      // IDL: HRESULT progress ([out, retval] long* ReturnValue);
      // VB6: Function progress As Long
      [DispId(1254)]
      get;
    }

    /// <summary><para><c>size</c> property of <c>IWMPDownloadItem</c> interface.  </para><para>Returns the size of the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>size</c> property was the following:  <c>long size</c>;</para></remarks>
    // Returns the size of the download
    // IDL: long size;
    // VB6: size As Long
    int size
    {
      // IDL: HRESULT size ([out, retval] long* ReturnValue);
      // VB6: Function size As Long
      [DispId(1252)]
      get;
    }

    /// <summary><para><c>sourceURL</c> property of <c>IWMPDownloadItem</c> interface.  </para><para>Returns the source URL of the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>sourceURL</c> property was the following:  <c>BSTR sourceURL</c>;</para></remarks>
    // Returns the source URL of the download
    // IDL: BSTR sourceURL;
    // VB6: sourceURL As String
    string sourceURL
    {
      // IDL: HRESULT sourceURL ([out, retval] BSTR* ReturnValue);
      // VB6: Function sourceURL As String
      [DispId(1251)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>type</c> property of <c>IWMPDownloadItem</c> interface.  </para><para>Returns the type of the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>type</c> property was the following:  <c>BSTR type</c>;</para></remarks>
    // Returns the type of the download
    // IDL: BSTR type;
    // VB6: type As String
    string type
    {
      // IDL: HRESULT type ([out, retval] BSTR* ReturnValue);
      // VB6: Function type As String
      [DispId(1253)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPDownloadItem2</c> interface.  </para><para>IWMPDownloadItem2: Public interface.</para></summary>
  // IWMPDownloadItem2: Public interface.
  [Guid("9FBB3336-6DA3-479D-B8FF-67D46E20A987")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPDownloadItem2
  {
    /// <summary><para><c>pause</c> method of <c>IWMPDownloadItem2</c> interface.  </para><para>Pauses the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>pause</c> method was the following:  <c>HRESULT pause (void)</c>;</para></remarks>
    // Pauses the download
    // IDL: HRESULT pause (void);
    // VB6: Sub pause
    [DispId(1256)]
    void pause ();

    /// <summary><para><c>resume</c> method of <c>IWMPDownloadItem2</c> interface.  </para><para>Resumes the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>resume</c> method was the following:  <c>HRESULT resume (void)</c>;</para></remarks>
    // Resumes the download
    // IDL: HRESULT resume (void);
    // VB6: Sub resume
    [DispId(1257)]
    void resume ();

    /// <summary><para><c>cancel</c> method of <c>IWMPDownloadItem2</c> interface.  </para><para>Cancels the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>cancel</c> method was the following:  <c>HRESULT cancel (void)</c>;</para></remarks>
    // Cancels the download
    // IDL: HRESULT cancel (void);
    // VB6: Sub cancel
    [DispId(1258)]
    void cancel ();

    /// <summary><para><c>getItemInfo</c> method of <c>IWMPDownloadItem2</c> interface.  </para><para>Returns the value of specified attribute for this download item</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfo</c> method was the following:  <c>HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the value of specified attribute for this download item
    // IDL: HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfo (ByVal bstrItemName As String) As String
    [DispId(1301)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>downloadState</c> property of <c>IWMPDownloadItem2</c> interface.  </para><para>Returns the state of the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>downloadState</c> property was the following:  <c>WMPSubscriptionDownloadState downloadState</c>;</para></remarks>
    // Returns the state of the download
    // IDL: WMPSubscriptionDownloadState downloadState;
    // VB6: downloadState As WMPSubscriptionDownloadState
    WMPSubscriptionDownloadState downloadState
    {
      // IDL: HRESULT downloadState ([out, retval] WMPSubscriptionDownloadState* ReturnValue);
      // VB6: Function downloadState As WMPSubscriptionDownloadState
      [DispId(1255)]
      get;
    }

    /// <summary><para><c>progress</c> property of <c>IWMPDownloadItem2</c> interface.  </para><para>Returns the progress (in bytes) of the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>progress</c> property was the following:  <c>long progress</c>;</para></remarks>
    // Returns the progress (in bytes) of the download
    // IDL: long progress;
    // VB6: progress As Long
    int progress
    {
      // IDL: HRESULT progress ([out, retval] long* ReturnValue);
      // VB6: Function progress As Long
      [DispId(1254)]
      get;
    }

    /// <summary><para><c>size</c> property of <c>IWMPDownloadItem2</c> interface.  </para><para>Returns the size of the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>size</c> property was the following:  <c>long size</c>;</para></remarks>
    // Returns the size of the download
    // IDL: long size;
    // VB6: size As Long
    int size
    {
      // IDL: HRESULT size ([out, retval] long* ReturnValue);
      // VB6: Function size As Long
      [DispId(1252)]
      get;
    }

    /// <summary><para><c>sourceURL</c> property of <c>IWMPDownloadItem2</c> interface.  </para><para>Returns the source URL of the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>sourceURL</c> property was the following:  <c>BSTR sourceURL</c>;</para></remarks>
    // Returns the source URL of the download
    // IDL: BSTR sourceURL;
    // VB6: sourceURL As String
    string sourceURL
    {
      // IDL: HRESULT sourceURL ([out, retval] BSTR* ReturnValue);
      // VB6: Function sourceURL As String
      [DispId(1251)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>type</c> property of <c>IWMPDownloadItem2</c> interface.  </para><para>Returns the type of the download</para></summary>
    /// <remarks><para>An original IDL definition of <c>type</c> property was the following:  <c>BSTR type</c>;</para></remarks>
    // Returns the type of the download
    // IDL: BSTR type;
    // VB6: type As String
    string type
    {
      // IDL: HRESULT type ([out, retval] BSTR* ReturnValue);
      // VB6: Function type As String
      [DispId(1253)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPDownloadManager</c> interface.  </para><para>IWMPDownloadManager: Public interface.</para></summary>
  // IWMPDownloadManager: Public interface.
  [Guid("E15E9AD1-8F20-4CC4-9EC7-1A328CA86A0D")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPDownloadManager
  {
    /// <summary><para><c>getDownloadCollection</c> method of <c>IWMPDownloadManager</c> interface.  </para><para>Returns a specific download collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>getDownloadCollection</c> method was the following:  <c>HRESULT getDownloadCollection (long lCollectionId, [out, retval] IWMPDownloadCollection** ReturnValue)</c>;</para></remarks>
    // Returns a specific download collection
    // IDL: HRESULT getDownloadCollection (long lCollectionId, [out, retval] IWMPDownloadCollection** ReturnValue);
    // VB6: Function getDownloadCollection (ByVal lCollectionId As Long) As IWMPDownloadCollection
    [DispId(1151)]
    IWMPDownloadCollection getDownloadCollection (int lCollectionId);

    /// <summary><para><c>createDownloadCollection</c> method of <c>IWMPDownloadManager</c> interface.  </para><para>Creates a download collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>createDownloadCollection</c> method was the following:  <c>HRESULT createDownloadCollection ([out, retval] IWMPDownloadCollection** ReturnValue)</c>;</para></remarks>
    // Creates a download collection
    // IDL: HRESULT createDownloadCollection ([out, retval] IWMPDownloadCollection** ReturnValue);
    // VB6: Function createDownloadCollection As IWMPDownloadCollection
    [DispId(1152)]
    IWMPDownloadCollection createDownloadCollection ();
  }

  /// <summary><para><c>IWMPDVD</c> interface.  </para><para>IWMPDVD: Public interface.</para></summary>
  // IWMPDVD: Public interface.
  [Guid("8DA61686-4668-4A5C-AE5D-803193293DBE")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPDVD
  {
    /// <summary><para><c>isAvailable</c> property get of <c>IWMPDVD</c> interface.  </para><para>Returns whether or not the specified DVD functionality is available</para></summary>
    /// <remarks><para>An original IDL definition of <c>isAvailable</c> property get was the following:  <c>HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Returns whether or not the specified DVD functionality is available
    // IDL: HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isAvailable (ByVal bstrItem As String) As Boolean
    [DispId(1001)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItem) /* property get method */;

    /// <summary><para><c>topMenu</c> method of <c>IWMPDVD</c> interface.  </para><para>Displays the top menu of the DVD</para></summary>
    /// <remarks><para>An original IDL definition of <c>topMenu</c> method was the following:  <c>HRESULT topMenu (void)</c>;</para></remarks>
    // Displays the top menu of the DVD
    // IDL: HRESULT topMenu (void);
    // VB6: Sub topMenu
    [DispId(1003)]
    void topMenu ();

    /// <summary><para><c>titleMenu</c> method of <c>IWMPDVD</c> interface.  </para><para>Displays the title menu of the current DVD title</para></summary>
    /// <remarks><para>An original IDL definition of <c>titleMenu</c> method was the following:  <c>HRESULT titleMenu (void)</c>;</para></remarks>
    // Displays the title menu of the current DVD title
    // IDL: HRESULT titleMenu (void);
    // VB6: Sub titleMenu
    [DispId(1004)]
    void titleMenu ();

    /// <summary><para><c>back</c> method of <c>IWMPDVD</c> interface.  </para><para>Navigates back one menu</para></summary>
    /// <remarks><para>An original IDL definition of <c>back</c> method was the following:  <c>HRESULT back (void)</c>;</para></remarks>
    // Navigates back one menu
    // IDL: HRESULT back (void);
    // VB6: Sub back
    [DispId(1005)]
    void back ();

    /// <summary><para><c>resume</c> method of <c>IWMPDVD</c> interface.  </para><para>Removes the menu from the screen and returns to playing the DVD</para></summary>
    /// <remarks><para>An original IDL definition of <c>resume</c> method was the following:  <c>HRESULT resume (void)</c>;</para></remarks>
    // Removes the menu from the screen and returns to playing the DVD
    // IDL: HRESULT resume (void);
    // VB6: Sub resume
    [DispId(1006)]
    void resume ();

    /// <summary><para><c>domain</c> property of <c>IWMPDVD</c> interface.  </para><para>Returns the current DVD domain</para></summary>
    /// <remarks><para>An original IDL definition of <c>domain</c> property was the following:  <c>BSTR domain</c>;</para></remarks>
    // Returns the current DVD domain
    // IDL: BSTR domain;
    // VB6: domain As String
    string domain
    {
      // IDL: HRESULT domain ([out, retval] BSTR* ReturnValue);
      // VB6: Function domain As String
      [DispId(1002)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPEditCtrl</c> interface.  </para><para>IWMPEditCtrl: Public interface for skin object model.</para></summary>
  // IWMPEditCtrl: Public interface for skin object model.
  [Guid("70E1217C-C617-4CFD-BD8A-69CA2043E70B")]
  [ComImport]
  [TypeLibType((short)4160)]
  [DefaultMember("value")]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPEditCtrl
  {
    /// <summary><para><c>getLine</c> method of <c>IWMPEditCtrl</c> interface.  </para><para>method getLine</para></summary>
    /// <remarks><para>An original IDL definition of <c>getLine</c> method was the following:  <c>HRESULT getLine (long nIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getLine
    // IDL: HRESULT getLine (long nIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function getLine (ByVal nIndex As Long) As String
    [DispId(6012)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getLine (int nIndex);

    /// <summary><para><c>getSelectionStart</c> method of <c>IWMPEditCtrl</c> interface.  </para><para>method getSelectionStart</para></summary>
    /// <remarks><para>An original IDL definition of <c>getSelectionStart</c> method was the following:  <c>HRESULT getSelectionStart ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getSelectionStart
    // IDL: HRESULT getSelectionStart ([out, retval] long* ReturnValue);
    // VB6: Function getSelectionStart As Long
    [DispId(6013)]
    int getSelectionStart ();

    /// <summary><para><c>getSelectionEnd</c> method of <c>IWMPEditCtrl</c> interface.  </para><para>method getSelectionEnd</para></summary>
    /// <remarks><para>An original IDL definition of <c>getSelectionEnd</c> method was the following:  <c>HRESULT getSelectionEnd ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getSelectionEnd
    // IDL: HRESULT getSelectionEnd ([out, retval] long* ReturnValue);
    // VB6: Function getSelectionEnd As Long
    [DispId(6014)]
    int getSelectionEnd ();

    /// <summary><para><c>setSelection</c> method of <c>IWMPEditCtrl</c> interface.  </para><para>method setSelection</para></summary>
    /// <remarks><para>An original IDL definition of <c>setSelection</c> method was the following:  <c>HRESULT setSelection (long nStart, long nEnd)</c>;</para></remarks>
    // method setSelection
    // IDL: HRESULT setSelection (long nStart, long nEnd);
    // VB6: Sub setSelection (ByVal nStart As Long, ByVal nEnd As Long)
    [DispId(6015)]
    void setSelection (int nStart, int nEnd);

    /// <summary><para><c>replaceSelection</c> method of <c>IWMPEditCtrl</c> interface.  </para><para>method replaceSelection</para></summary>
    /// <remarks><para>An original IDL definition of <c>replaceSelection</c> method was the following:  <c>HRESULT replaceSelection (BSTR newVal)</c>;</para></remarks>
    // method replaceSelection
    // IDL: HRESULT replaceSelection (BSTR newVal);
    // VB6: Sub replaceSelection (ByVal newVal As String)
    [DispId(6016)]
    void replaceSelection ([MarshalAs(UnmanagedType.BStr)] string newVal);

    /// <summary><para><c>getLineIndex</c> method of <c>IWMPEditCtrl</c> interface.  </para><para>method getLineIndex</para></summary>
    /// <remarks><para>An original IDL definition of <c>getLineIndex</c> method was the following:  <c>HRESULT getLineIndex (long nIndex, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getLineIndex
    // IDL: HRESULT getLineIndex (long nIndex, [out, retval] long* ReturnValue);
    // VB6: Function getLineIndex (ByVal nIndex As Long) As Long
    [DispId(6017)]
    int getLineIndex (int nIndex);

    /// <summary><para><c>getLineFromChar</c> method of <c>IWMPEditCtrl</c> interface.  </para><para>method getLineFromChar</para></summary>
    /// <remarks><para>An original IDL definition of <c>getLineFromChar</c> method was the following:  <c>HRESULT getLineFromChar (long nPosition, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getLineFromChar
    // IDL: HRESULT getLineFromChar (long nPosition, [out, retval] long* ReturnValue);
    // VB6: Function getLineFromChar (ByVal nPosition As Long) As Long
    [DispId(6018)]
    int getLineFromChar (int nPosition);

    /// <summary><para><c>backgroundColor</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property backgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // property backgroundColor
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(6006)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundColor (BSTR value);
      // VB6: Sub backgroundColor (ByVal value As String)
      [DispId(6006)]
      set;
    }

    /// <summary><para><c>border</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property border</para></summary>
    /// <remarks><para>An original IDL definition of <c>border</c> property was the following:  <c>VARIANT_BOOL border</c>;</para></remarks>
    // property border
    // IDL: VARIANT_BOOL border;
    // VB6: border As Boolean
    bool border
    {
      // IDL: HRESULT border ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function border As Boolean
      [DispId(6000)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT border (VARIANT_BOOL value);
      // VB6: Sub border (ByVal value As Boolean)
      [DispId(6000)]
      set;
    }

    /// <summary><para><c>editStyle</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property editStyle</para></summary>
    /// <remarks><para>An original IDL definition of <c>editStyle</c> property was the following:  <c>BSTR editStyle</c>;</para></remarks>
    // property editStyle
    // IDL: BSTR editStyle;
    // VB6: editStyle As String
    string editStyle
    {
      // IDL: HRESULT editStyle ([out, retval] BSTR* ReturnValue);
      // VB6: Function editStyle As String
      [DispId(6002)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT editStyle (BSTR value);
      // VB6: Sub editStyle (ByVal value As String)
      [DispId(6002)]
      set;
    }

    /// <summary><para><c>fontFace</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property fontFace</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontFace</c> property was the following:  <c>BSTR fontFace</c>;</para></remarks>
    // property fontFace
    // IDL: BSTR fontFace;
    // VB6: fontFace As String
    string fontFace
    {
      // IDL: HRESULT fontFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function fontFace As String
      [DispId(6009)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT fontFace (BSTR value);
      // VB6: Sub fontFace (ByVal value As String)
      [DispId(6009)]
      set;
    }

    /// <summary><para><c>fontSize</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property fontSize</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontSize</c> property was the following:  <c>long fontSize</c>;</para></remarks>
    // property fontSize
    // IDL: long fontSize;
    // VB6: fontSize As Long
    int fontSize
    {
      // IDL: HRESULT fontSize ([out, retval] long* ReturnValue);
      // VB6: Function fontSize As Long
      [DispId(6007)]
      get;
      // IDL: HRESULT fontSize (long value);
      // VB6: Sub fontSize (ByVal value As Long)
      [DispId(6007)]
      set;
    }

    /// <summary><para><c>fontStyle</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property fontStyle</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontStyle</c> property was the following:  <c>BSTR fontStyle</c>;</para></remarks>
    // property fontStyle
    // IDL: BSTR fontStyle;
    // VB6: fontStyle As String
    string fontStyle
    {
      // IDL: HRESULT fontStyle ([out, retval] BSTR* ReturnValue);
      // VB6: Function fontStyle As String
      [DispId(6008)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT fontStyle (BSTR value);
      // VB6: Sub fontStyle (ByVal value As String)
      [DispId(6008)]
      set;
    }

    /// <summary><para><c>foregroundColor</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property foregroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>foregroundColor</c> property was the following:  <c>BSTR foregroundColor</c>;</para></remarks>
    // property foregroundColor
    // IDL: BSTR foregroundColor;
    // VB6: foregroundColor As String
    string foregroundColor
    {
      // IDL: HRESULT foregroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function foregroundColor As String
      [DispId(6005)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT foregroundColor (BSTR value);
      // VB6: Sub foregroundColor (ByVal value As String)
      [DispId(6005)]
      set;
    }

    /// <summary><para><c>justification</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property justification</para></summary>
    /// <remarks><para>An original IDL definition of <c>justification</c> property was the following:  <c>BSTR justification</c>;</para></remarks>
    // property justification
    // IDL: BSTR justification;
    // VB6: justification As String
    string justification
    {
      // IDL: HRESULT justification ([out, retval] BSTR* ReturnValue);
      // VB6: Function justification As String
      [DispId(6001)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT justification (BSTR value);
      // VB6: Sub justification (ByVal value As String)
      [DispId(6001)]
      set;
    }

    /// <summary><para><c>lineCount</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property lineCount</para></summary>
    /// <remarks><para>An original IDL definition of <c>lineCount</c> property was the following:  <c>long lineCount</c>;</para></remarks>
    // property lineCount
    // IDL: long lineCount;
    // VB6: lineCount As Long
    int lineCount
    {
      // IDL: HRESULT lineCount ([out, retval] long* ReturnValue);
      // VB6: Function lineCount As Long
      [DispId(6011)]
      get;
    }

    /// <summary><para><c>readOnly</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property readOnly</para></summary>
    /// <remarks><para>An original IDL definition of <c>readOnly</c> property was the following:  <c>VARIANT_BOOL readOnly</c>;</para></remarks>
    // property readOnly
    // IDL: VARIANT_BOOL readOnly;
    // VB6: readOnly As Boolean
    bool readOnly
    {
      // IDL: HRESULT readOnly ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function readOnly As Boolean
      [DispId(6004)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT readOnly (VARIANT_BOOL value);
      // VB6: Sub readOnly (ByVal value As Boolean)
      [DispId(6004)]
      set;
    }

    /// <summary><para><c>textLimit</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property textLimit</para></summary>
    /// <remarks><para>An original IDL definition of <c>textLimit</c> property was the following:  <c>long textLimit</c>;</para></remarks>
    // property textLimit
    // IDL: long textLimit;
    // VB6: textLimit As Long
    int textLimit
    {
      // IDL: HRESULT textLimit ([out, retval] long* ReturnValue);
      // VB6: Function textLimit As Long
      [DispId(6010)]
      get;
      // IDL: HRESULT textLimit (long value);
      // VB6: Sub textLimit (ByVal value As Long)
      [DispId(6010)]
      set;
    }

    /// <summary><para><c>value</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property value</para></summary>
    /// <remarks><para>An original IDL definition of <c>value</c> property was the following:  <c>BSTR value</c>;</para></remarks>
    // property value
    // IDL: BSTR value;
    // VB6: value As String
    string value
    {
      // IDL: HRESULT value ([out, retval] BSTR* ReturnValue);
      // VB6: Function value As String
      [DispId(0)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT value (BSTR value);
      // VB6: Sub value (ByVal value As String)
      [DispId(0)]
      set;
    }

    /// <summary><para><c>wordWrap</c> property of <c>IWMPEditCtrl</c> interface.  </para><para>property wordWrap</para></summary>
    /// <remarks><para>An original IDL definition of <c>wordWrap</c> property was the following:  <c>VARIANT_BOOL wordWrap</c>;</para></remarks>
    // property wordWrap
    // IDL: VARIANT_BOOL wordWrap;
    // VB6: wordWrap As Boolean
    bool wordWrap
    {
      // IDL: HRESULT wordWrap ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function wordWrap As Boolean
      [DispId(6003)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT wordWrap (VARIANT_BOOL value);
      // VB6: Sub wordWrap (ByVal value As Boolean)
      [DispId(6003)]
      set;
    }
  }

  /// <summary><para><c>IWMPEffectsCtrl</c> interface.  </para><para>IWMPEffectsCtrl: Public interface for skin object model.</para></summary>
  // IWMPEffectsCtrl: Public interface for skin object model.
  [Guid("A9EFAB80-0A60-4C3F-BBD1-4558DD2A9769")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPEffectsCtrl
  {
    /// <summary><para><c>next</c> method of <c>IWMPEffectsCtrl</c> interface.  </para><para>method next</para></summary>
    /// <remarks><para>An original IDL definition of <c>next</c> method was the following:  <c>HRESULT next (void)</c>;</para></remarks>
    // method next
    // IDL: HRESULT next (void);
    // VB6: Sub next
    [DispId(5502)]
    void next ();

    /// <summary><para><c>previous</c> method of <c>IWMPEffectsCtrl</c> interface.  </para><para>method previous</para></summary>
    /// <remarks><para>An original IDL definition of <c>previous</c> method was the following:  <c>HRESULT previous (void)</c>;</para></remarks>
    // method previous
    // IDL: HRESULT previous (void);
    // VB6: Sub previous
    [DispId(5503)]
    void previous ();

    /// <summary><para><c>settings</c> method of <c>IWMPEffectsCtrl</c> interface.  </para><para>method settings</para></summary>
    /// <remarks><para>An original IDL definition of <c>settings</c> method was the following:  <c>HRESULT settings (void)</c>;</para></remarks>
    // method settings
    // IDL: HRESULT settings (void);
    // VB6: Sub settings
    [DispId(5504)]
    void settings ();

    /// <summary><para><c>nextEffect</c> method of <c>IWMPEffectsCtrl</c> interface.  </para><para>method nextEffect</para></summary>
    /// <remarks><para>An original IDL definition of <c>nextEffect</c> method was the following:  <c>HRESULT nextEffect (void)</c>;</para></remarks>
    // method nextEffect
    // IDL: HRESULT nextEffect (void);
    // VB6: Sub nextEffect
    [DispId(5509)]
    void nextEffect ();

    /// <summary><para><c>previousEffect</c> method of <c>IWMPEffectsCtrl</c> interface.  </para><para>method previousEffect</para></summary>
    /// <remarks><para>An original IDL definition of <c>previousEffect</c> method was the following:  <c>HRESULT previousEffect (void)</c>;</para></remarks>
    // method previousEffect
    // IDL: HRESULT previousEffect (void);
    // VB6: Sub previousEffect
    [DispId(5510)]
    void previousEffect ();

    /// <summary><para><c>nextPreset</c> method of <c>IWMPEffectsCtrl</c> interface.  </para><para>method nextPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>nextPreset</c> method was the following:  <c>HRESULT nextPreset (void)</c>;</para></remarks>
    // method nextPreset
    // IDL: HRESULT nextPreset (void);
    // VB6: Sub nextPreset
    [DispId(5511)]
    void nextPreset ();

    /// <summary><para><c>previousPreset</c> method of <c>IWMPEffectsCtrl</c> interface.  </para><para>method previousPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>previousPreset</c> method was the following:  <c>HRESULT previousPreset (void)</c>;</para></remarks>
    // method previousPreset
    // IDL: HRESULT previousPreset (void);
    // VB6: Sub previousPreset
    [DispId(5512)]
    void previousPreset ();

    /// <summary><para><c>effectTitle</c> property get of <c>IWMPEffectsCtrl</c> interface.  </para><para>property effectTitle(index)</para></summary>
    /// <remarks><para>An original IDL definition of <c>effectTitle</c> property get was the following:  <c>HRESULT effectTitle (long index, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // property effectTitle(index)
    // IDL: HRESULT effectTitle (long index, [out, retval] BSTR* ReturnValue);
    // VB6: Function effectTitle (ByVal index As Long) As String
    [DispId(5521)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string effectTitle (int index) /* property get method */;

    /// <summary><para><c>effectType</c> property get of <c>IWMPEffectsCtrl</c> interface.  </para><para>property effectType(index)</para></summary>
    /// <remarks><para>An original IDL definition of <c>effectType</c> property get was the following:  <c>HRESULT effectType (long index, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // property effectType(index)
    // IDL: HRESULT effectType (long index, [out, retval] BSTR* ReturnValue);
    // VB6: Function effectType (ByVal index As Long) As String
    [DispId(5522)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string effectType (int index) /* property get method */;

    /// <summary><para><c>allowAll</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property allowAll</para></summary>
    /// <remarks><para>An original IDL definition of <c>allowAll</c> property was the following:  <c>VARIANT_BOOL allowAll</c>;</para></remarks>
    // property allowAll
    // IDL: VARIANT_BOOL allowAll;
    // VB6: allowAll As Boolean
    bool allowAll
    {
      // IDL: HRESULT allowAll ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function allowAll As Boolean
      [DispId(5501)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT allowAll (VARIANT_BOOL value);
      // VB6: Sub allowAll (ByVal value As Boolean)
      [DispId(5501)]
      set;
    }

    /// <summary><para><c>currentEffect</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property currentEffect</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentEffect</c> property was the following:  <c>IDispatch* currentEffect</c>;</para></remarks>
    // property currentEffect
    // IDL: IDispatch* currentEffect;
    // VB6: currentEffect As IDispatch
    object currentEffect
    {
      // IDL: HRESULT currentEffect ([out, retval] IDispatch** ReturnValue);
      // VB6: Function currentEffect As IDispatch
      [DispId(5505)]
      [return: MarshalAs(UnmanagedType.IDispatch)]
      get;
      // IDL: HRESULT currentEffect (IDispatch* value);
      // VB6: Sub currentEffect (ByVal value As IDispatch)
      [DispId(5505)]
      set;
    }

    /// <summary><para><c>currentEffectPresetCount</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property currentEffectPresetCount</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentEffectPresetCount</c> property was the following:  <c>long currentEffectPresetCount</c>;</para></remarks>
    // property currentEffectPresetCount
    // IDL: long currentEffectPresetCount;
    // VB6: currentEffectPresetCount As Long
    int currentEffectPresetCount
    {
      // IDL: HRESULT currentEffectPresetCount ([out, retval] long* ReturnValue);
      // VB6: Function currentEffectPresetCount As Long
      [DispId(5515)]
      get;
    }

    /// <summary><para><c>currentEffectTitle</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property currentEffectTitle</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentEffectTitle</c> property was the following:  <c>BSTR currentEffectTitle</c>;</para></remarks>
    // property currentEffectTitle
    // IDL: BSTR currentEffectTitle;
    // VB6: currentEffectTitle As String
    string currentEffectTitle
    {
      // IDL: HRESULT currentEffectTitle ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentEffectTitle As String
      [DispId(5506)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>currentEffectType</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property currentEffectType</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentEffectType</c> property was the following:  <c>BSTR currentEffectType</c>;</para></remarks>
    // property currentEffectType
    // IDL: BSTR currentEffectType;
    // VB6: currentEffectType As String
    string currentEffectType
    {
      // IDL: HRESULT currentEffectType ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentEffectType As String
      [DispId(5507)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT currentEffectType (BSTR value);
      // VB6: Sub currentEffectType (ByVal value As String)
      [DispId(5507)]
      set;
    }

    /// <summary><para><c>currentPreset</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property currentPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPreset</c> property was the following:  <c>long currentPreset</c>;</para></remarks>
    // property currentPreset
    // IDL: long currentPreset;
    // VB6: currentPreset As Long
    int currentPreset
    {
      // IDL: HRESULT currentPreset ([out, retval] long* ReturnValue);
      // VB6: Function currentPreset As Long
      [DispId(5513)]
      get;
      // IDL: HRESULT currentPreset (long value);
      // VB6: Sub currentPreset (ByVal value As Long)
      [DispId(5513)]
      set;
    }

    /// <summary><para><c>currentPresetTitle</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property currentPresetTitle</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPresetTitle</c> property was the following:  <c>BSTR currentPresetTitle</c>;</para></remarks>
    // property currentPresetTitle
    // IDL: BSTR currentPresetTitle;
    // VB6: currentPresetTitle As String
    string currentPresetTitle
    {
      // IDL: HRESULT currentPresetTitle ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentPresetTitle As String
      [DispId(5514)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>effectCanGoFullScreen</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property canGoFullScreen</para></summary>
    /// <remarks><para>An original IDL definition of <c>effectCanGoFullScreen</c> property was the following:  <c>VARIANT_BOOL effectCanGoFullScreen</c>;</para></remarks>
    // property canGoFullScreen
    // IDL: VARIANT_BOOL effectCanGoFullScreen;
    // VB6: effectCanGoFullScreen As Boolean
    bool effectCanGoFullScreen
    {
      // IDL: HRESULT effectCanGoFullScreen ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function effectCanGoFullScreen As Boolean
      [DispId(5517)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>effectCount</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property effectCount</para></summary>
    /// <remarks><para>An original IDL definition of <c>effectCount</c> property was the following:  <c>long effectCount</c>;</para></remarks>
    // property effectCount
    // IDL: long effectCount;
    // VB6: effectCount As Long
    int effectCount
    {
      // IDL: HRESULT effectCount ([out, retval] long* ReturnValue);
      // VB6: Function effectCount As Long
      [DispId(5520)]
      get;
    }

    /// <summary><para><c>effectHasPropertyPage</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property canGoFullScreen</para></summary>
    /// <remarks><para>An original IDL definition of <c>effectHasPropertyPage</c> property was the following:  <c>VARIANT_BOOL effectHasPropertyPage</c>;</para></remarks>
    // property canGoFullScreen
    // IDL: VARIANT_BOOL effectHasPropertyPage;
    // VB6: effectHasPropertyPage As Boolean
    bool effectHasPropertyPage
    {
      // IDL: HRESULT effectHasPropertyPage ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function effectHasPropertyPage As Boolean
      [DispId(5518)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>fullScreen</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property fullScreen</para></summary>
    /// <remarks><para>An original IDL definition of <c>fullScreen</c> property was the following:  <c>VARIANT_BOOL fullScreen</c>;</para></remarks>
    // property fullScreen
    // IDL: VARIANT_BOOL fullScreen;
    // VB6: fullScreen As Boolean
    bool fullScreen
    {
      // IDL: HRESULT fullScreen ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function fullScreen As Boolean
      [DispId(5516)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT fullScreen (VARIANT_BOOL value);
      // VB6: Sub fullScreen (ByVal value As Boolean)
      [DispId(5516)]
      set;
    }

    /// <summary><para><c>windowed</c> property of <c>IWMPEffectsCtrl</c> interface.  </para><para>property windowed</para></summary>
    /// <remarks><para>An original IDL definition of <c>windowed</c> property was the following:  <c>VARIANT_BOOL windowed</c>;</para></remarks>
    // property windowed
    // IDL: VARIANT_BOOL windowed;
    // VB6: windowed As Boolean
    bool windowed
    {
      // IDL: HRESULT windowed ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function windowed As Boolean
      [DispId(5500)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT windowed (VARIANT_BOOL value);
      // VB6: Sub windowed (ByVal value As Boolean)
      [DispId(5500)]
      set;
    }
  }

  /// <summary><para><c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>IWMPEqualizerSettingsCtrl: Public interface for skin object model.</para></summary>
  // IWMPEqualizerSettingsCtrl: Public interface for skin object model.
  [Guid("2BD3716F-A914-49FB-8655-996D5F495498")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPEqualizerSettingsCtrl
  {
    /// <summary><para><c>gainLevels</c> property get of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevels</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevels</c> property get was the following:  <c>HRESULT gainLevels (long iIndex, [out, retval] float* ReturnValue)</c>;</para></remarks>
    // property gainLevels
    // IDL: HRESULT gainLevels (long iIndex, [out, retval] float* ReturnValue);
    // VB6: Function gainLevels (ByVal iIndex As Long) As Single
    [DispId(5815)]
    float gainLevels (int iIndex) /* property get method */;

    /// <summary><para><c>gainLevels</c> property put of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevels</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevels</c> property put was the following:  <c>HRESULT gainLevels (long iIndex, float value)</c>;</para></remarks>
    // property gainLevels
    // IDL: HRESULT gainLevels (long iIndex, float value);
    // VB6: Sub gainLevels (ByVal iIndex As Long, ByVal value As Single)
    [DispId(5815)]
    void gainLevels (int iIndex, float value) /* property put method */;

    /// <summary><para><c>reset</c> method of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>method reset</para></summary>
    /// <remarks><para>An original IDL definition of <c>reset</c> method was the following:  <c>HRESULT reset (void)</c>;</para></remarks>
    // method reset
    // IDL: HRESULT reset (void);
    // VB6: Sub reset
    [DispId(5814)]
    void reset ();

    /// <summary><para><c>nextPreset</c> method of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>method nextPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>nextPreset</c> method was the following:  <c>HRESULT nextPreset (void)</c>;</para></remarks>
    // method nextPreset
    // IDL: HRESULT nextPreset (void);
    // VB6: Sub nextPreset
    [DispId(5816)]
    void nextPreset ();

    /// <summary><para><c>previousPreset</c> method of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>method previousPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>previousPreset</c> method was the following:  <c>HRESULT previousPreset (void)</c>;</para></remarks>
    // method previousPreset
    // IDL: HRESULT previousPreset (void);
    // VB6: Sub previousPreset
    [DispId(5817)]
    void previousPreset ();

    /// <summary><para><c>presetTitle</c> property get of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property presetTitle</para></summary>
    /// <remarks><para>An original IDL definition of <c>presetTitle</c> property get was the following:  <c>HRESULT presetTitle (long iIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // property presetTitle
    // IDL: HRESULT presetTitle (long iIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function presetTitle (ByVal iIndex As Long) As String
    [DispId(5828)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string presetTitle (int iIndex) /* property get method */;

    /// <summary><para><c>bands</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>bands</c> property was the following:  <c>long bands</c>;</para></remarks>
    // IDL: long bands;
    // VB6: bands As Long
    int bands
    {
      // IDL: HRESULT bands ([out, retval] long* ReturnValue);
      // VB6: Function bands As Long
      [DispId(5801)]
      get;
    }

    /// <summary><para><c>bypass</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property bypass</para></summary>
    /// <remarks><para>An original IDL definition of <c>bypass</c> property was the following:  <c>VARIANT_BOOL bypass</c>;</para></remarks>
    // property bypass
    // IDL: VARIANT_BOOL bypass;
    // VB6: bypass As Boolean
    bool bypass
    {
      // IDL: HRESULT bypass ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function bypass As Boolean
      [DispId(5800)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT bypass (VARIANT_BOOL value);
      // VB6: Sub bypass (ByVal value As Boolean)
      [DispId(5800)]
      set;
    }

    /// <summary><para><c>crossFade</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property crossFade</para></summary>
    /// <remarks><para>An original IDL definition of <c>crossFade</c> property was the following:  <c>VARIANT_BOOL crossFade</c>;</para></remarks>
    // property crossFade
    // IDL: VARIANT_BOOL crossFade;
    // VB6: crossFade As Boolean
    bool crossFade
    {
      // IDL: HRESULT crossFade ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function crossFade As Boolean
      [DispId(5832)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT crossFade (VARIANT_BOOL value);
      // VB6: Sub crossFade (ByVal value As Boolean)
      [DispId(5832)]
      set;
    }

    /// <summary><para><c>crossFadeWindow</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property crossFadeWindow</para></summary>
    /// <remarks><para>An original IDL definition of <c>crossFadeWindow</c> property was the following:  <c>long crossFadeWindow</c>;</para></remarks>
    // property crossFadeWindow
    // IDL: long crossFadeWindow;
    // VB6: crossFadeWindow As Long
    int crossFadeWindow
    {
      // IDL: HRESULT crossFadeWindow ([out, retval] long* ReturnValue);
      // VB6: Function crossFadeWindow As Long
      [DispId(5833)]
      get;
      // IDL: HRESULT crossFadeWindow (long value);
      // VB6: Sub crossFadeWindow (ByVal value As Long)
      [DispId(5833)]
      set;
    }

    /// <summary><para><c>currentPreset</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property currentPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPreset</c> property was the following:  <c>long currentPreset</c>;</para></remarks>
    // property currentPreset
    // IDL: long currentPreset;
    // VB6: currentPreset As Long
    int currentPreset
    {
      // IDL: HRESULT currentPreset ([out, retval] long* ReturnValue);
      // VB6: Function currentPreset As Long
      [DispId(5818)]
      get;
      // IDL: HRESULT currentPreset (long value);
      // VB6: Sub currentPreset (ByVal value As Long)
      [DispId(5818)]
      set;
    }

    /// <summary><para><c>currentPresetTitle</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property currentPresetTitle</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPresetTitle</c> property was the following:  <c>BSTR currentPresetTitle</c>;</para></remarks>
    // property currentPresetTitle
    // IDL: BSTR currentPresetTitle;
    // VB6: currentPresetTitle As String
    string currentPresetTitle
    {
      // IDL: HRESULT currentPresetTitle ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentPresetTitle As String
      [DispId(5819)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>currentSpeakerName</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property currentSpeakerName</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentSpeakerName</c> property was the following:  <c>BSTR currentSpeakerName</c>;</para></remarks>
    // property currentSpeakerName
    // IDL: BSTR currentSpeakerName;
    // VB6: currentSpeakerName As String
    string currentSpeakerName
    {
      // IDL: HRESULT currentSpeakerName ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentSpeakerName As String
      [DispId(5823)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>enableSplineTension</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property enableSplineTension</para></summary>
    /// <remarks><para>An original IDL definition of <c>enableSplineTension</c> property was the following:  <c>VARIANT_BOOL enableSplineTension</c>;</para></remarks>
    // property enableSplineTension
    // IDL: VARIANT_BOOL enableSplineTension;
    // VB6: enableSplineTension As Boolean
    bool enableSplineTension
    {
      // IDL: HRESULT enableSplineTension ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enableSplineTension As Boolean
      [DispId(5826)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enableSplineTension (VARIANT_BOOL value);
      // VB6: Sub enableSplineTension (ByVal value As Boolean)
      [DispId(5826)]
      set;
    }

    /// <summary><para><c>enhancedAudio</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property enhancedAudio</para></summary>
    /// <remarks><para>An original IDL definition of <c>enhancedAudio</c> property was the following:  <c>VARIANT_BOOL enhancedAudio</c>;</para></remarks>
    // property enhancedAudio
    // IDL: VARIANT_BOOL enhancedAudio;
    // VB6: enhancedAudio As Boolean
    bool enhancedAudio
    {
      // IDL: HRESULT enhancedAudio ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enhancedAudio As Boolean
      [DispId(5821)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enhancedAudio (VARIANT_BOOL value);
      // VB6: Sub enhancedAudio (ByVal value As Boolean)
      [DispId(5821)]
      set;
    }

    /// <summary><para><c>gainLevel1</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevel1</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevel1</c> property was the following:  <c>float gainLevel1</c>;</para></remarks>
    // property gainLevel1
    // IDL: float gainLevel1;
    // VB6: gainLevel1 As Single
    float gainLevel1
    {
      // IDL: HRESULT gainLevel1 ([out, retval] float* ReturnValue);
      // VB6: Function gainLevel1 As Single
      [DispId(5804)]
      get;
      // IDL: HRESULT gainLevel1 (float value);
      // VB6: Sub gainLevel1 (ByVal value As Single)
      [DispId(5804)]
      set;
    }

    /// <summary><para><c>gainLevel10</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevel10</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevel10</c> property was the following:  <c>float gainLevel10</c>;</para></remarks>
    // property gainLevel10
    // IDL: float gainLevel10;
    // VB6: gainLevel10 As Single
    float gainLevel10
    {
      // IDL: HRESULT gainLevel10 ([out, retval] float* ReturnValue);
      // VB6: Function gainLevel10 As Single
      [DispId(5813)]
      get;
      // IDL: HRESULT gainLevel10 (float value);
      // VB6: Sub gainLevel10 (ByVal value As Single)
      [DispId(5813)]
      set;
    }

    /// <summary><para><c>gainLevel2</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevel2</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevel2</c> property was the following:  <c>float gainLevel2</c>;</para></remarks>
    // property gainLevel2
    // IDL: float gainLevel2;
    // VB6: gainLevel2 As Single
    float gainLevel2
    {
      // IDL: HRESULT gainLevel2 ([out, retval] float* ReturnValue);
      // VB6: Function gainLevel2 As Single
      [DispId(5805)]
      get;
      // IDL: HRESULT gainLevel2 (float value);
      // VB6: Sub gainLevel2 (ByVal value As Single)
      [DispId(5805)]
      set;
    }

    /// <summary><para><c>gainLevel3</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevel3</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevel3</c> property was the following:  <c>float gainLevel3</c>;</para></remarks>
    // property gainLevel3
    // IDL: float gainLevel3;
    // VB6: gainLevel3 As Single
    float gainLevel3
    {
      // IDL: HRESULT gainLevel3 ([out, retval] float* ReturnValue);
      // VB6: Function gainLevel3 As Single
      [DispId(5806)]
      get;
      // IDL: HRESULT gainLevel3 (float value);
      // VB6: Sub gainLevel3 (ByVal value As Single)
      [DispId(5806)]
      set;
    }

    /// <summary><para><c>gainLevel4</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevel4</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevel4</c> property was the following:  <c>float gainLevel4</c>;</para></remarks>
    // property gainLevel4
    // IDL: float gainLevel4;
    // VB6: gainLevel4 As Single
    float gainLevel4
    {
      // IDL: HRESULT gainLevel4 ([out, retval] float* ReturnValue);
      // VB6: Function gainLevel4 As Single
      [DispId(5807)]
      get;
      // IDL: HRESULT gainLevel4 (float value);
      // VB6: Sub gainLevel4 (ByVal value As Single)
      [DispId(5807)]
      set;
    }

    /// <summary><para><c>gainLevel5</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevel5</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevel5</c> property was the following:  <c>float gainLevel5</c>;</para></remarks>
    // property gainLevel5
    // IDL: float gainLevel5;
    // VB6: gainLevel5 As Single
    float gainLevel5
    {
      // IDL: HRESULT gainLevel5 ([out, retval] float* ReturnValue);
      // VB6: Function gainLevel5 As Single
      [DispId(5808)]
      get;
      // IDL: HRESULT gainLevel5 (float value);
      // VB6: Sub gainLevel5 (ByVal value As Single)
      [DispId(5808)]
      set;
    }

    /// <summary><para><c>gainLevel6</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevel6</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevel6</c> property was the following:  <c>float gainLevel6</c>;</para></remarks>
    // property gainLevel6
    // IDL: float gainLevel6;
    // VB6: gainLevel6 As Single
    float gainLevel6
    {
      // IDL: HRESULT gainLevel6 ([out, retval] float* ReturnValue);
      // VB6: Function gainLevel6 As Single
      [DispId(5809)]
      get;
      // IDL: HRESULT gainLevel6 (float value);
      // VB6: Sub gainLevel6 (ByVal value As Single)
      [DispId(5809)]
      set;
    }

    /// <summary><para><c>gainLevel7</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevel7</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevel7</c> property was the following:  <c>float gainLevel7</c>;</para></remarks>
    // property gainLevel7
    // IDL: float gainLevel7;
    // VB6: gainLevel7 As Single
    float gainLevel7
    {
      // IDL: HRESULT gainLevel7 ([out, retval] float* ReturnValue);
      // VB6: Function gainLevel7 As Single
      [DispId(5810)]
      get;
      // IDL: HRESULT gainLevel7 (float value);
      // VB6: Sub gainLevel7 (ByVal value As Single)
      [DispId(5810)]
      set;
    }

    /// <summary><para><c>gainLevel8</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevel8</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevel8</c> property was the following:  <c>float gainLevel8</c>;</para></remarks>
    // property gainLevel8
    // IDL: float gainLevel8;
    // VB6: gainLevel8 As Single
    float gainLevel8
    {
      // IDL: HRESULT gainLevel8 ([out, retval] float* ReturnValue);
      // VB6: Function gainLevel8 As Single
      [DispId(5811)]
      get;
      // IDL: HRESULT gainLevel8 (float value);
      // VB6: Sub gainLevel8 (ByVal value As Single)
      [DispId(5811)]
      set;
    }

    /// <summary><para><c>gainLevel9</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property gainLevel9</para></summary>
    /// <remarks><para>An original IDL definition of <c>gainLevel9</c> property was the following:  <c>float gainLevel9</c>;</para></remarks>
    // property gainLevel9
    // IDL: float gainLevel9;
    // VB6: gainLevel9 As Single
    float gainLevel9
    {
      // IDL: HRESULT gainLevel9 ([out, retval] float* ReturnValue);
      // VB6: Function gainLevel9 As Single
      [DispId(5812)]
      get;
      // IDL: HRESULT gainLevel9 (float value);
      // VB6: Sub gainLevel9 (ByVal value As Single)
      [DispId(5812)]
      set;
    }

    /// <summary><para><c>normalization</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property normalization</para></summary>
    /// <remarks><para>An original IDL definition of <c>normalization</c> property was the following:  <c>VARIANT_BOOL normalization</c>;</para></remarks>
    // property normalization
    // IDL: VARIANT_BOOL normalization;
    // VB6: normalization As Boolean
    bool normalization
    {
      // IDL: HRESULT normalization ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function normalization As Boolean
      [DispId(5829)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT normalization (VARIANT_BOOL value);
      // VB6: Sub normalization (ByVal value As Boolean)
      [DispId(5829)]
      set;
    }

    /// <summary><para><c>normalizationAverage</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property normalizationAverage</para></summary>
    /// <remarks><para>An original IDL definition of <c>normalizationAverage</c> property was the following:  <c>float normalizationAverage</c>;</para></remarks>
    // property normalizationAverage
    // IDL: float normalizationAverage;
    // VB6: normalizationAverage As Single
    float normalizationAverage
    {
      // IDL: HRESULT normalizationAverage ([out, retval] float* ReturnValue);
      // VB6: Function normalizationAverage As Single
      [DispId(5830)]
      get;
    }

    /// <summary><para><c>normalizationPeak</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property normalizationPeak</para></summary>
    /// <remarks><para>An original IDL definition of <c>normalizationPeak</c> property was the following:  <c>float normalizationPeak</c>;</para></remarks>
    // property normalizationPeak
    // IDL: float normalizationPeak;
    // VB6: normalizationPeak As Single
    float normalizationPeak
    {
      // IDL: HRESULT normalizationPeak ([out, retval] float* ReturnValue);
      // VB6: Function normalizationPeak As Single
      [DispId(5831)]
      get;
    }

    /// <summary><para><c>presetCount</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property presetCount</para></summary>
    /// <remarks><para>An original IDL definition of <c>presetCount</c> property was the following:  <c>long presetCount</c>;</para></remarks>
    // property presetCount
    // IDL: long presetCount;
    // VB6: presetCount As Long
    int presetCount
    {
      // IDL: HRESULT presetCount ([out, retval] long* ReturnValue);
      // VB6: Function presetCount As Long
      [DispId(5820)]
      get;
    }

    /// <summary><para><c>speakerSize</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property speakerSize</para></summary>
    /// <remarks><para>An original IDL definition of <c>speakerSize</c> property was the following:  <c>long speakerSize</c>;</para></remarks>
    // property speakerSize
    // IDL: long speakerSize;
    // VB6: speakerSize As Long
    int speakerSize
    {
      // IDL: HRESULT speakerSize ([out, retval] long* ReturnValue);
      // VB6: Function speakerSize As Long
      [DispId(5822)]
      get;
      // IDL: HRESULT speakerSize (long value);
      // VB6: Sub speakerSize (ByVal value As Long)
      [DispId(5822)]
      set;
    }

    /// <summary><para><c>splineTension</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property splineTension</para></summary>
    /// <remarks><para>An original IDL definition of <c>splineTension</c> property was the following:  <c>float splineTension</c>;</para></remarks>
    // property splineTension
    // IDL: float splineTension;
    // VB6: splineTension As Single
    float splineTension
    {
      // IDL: HRESULT splineTension ([out, retval] float* ReturnValue);
      // VB6: Function splineTension As Single
      [DispId(5827)]
      get;
      // IDL: HRESULT splineTension (float value);
      // VB6: Sub splineTension (ByVal value As Single)
      [DispId(5827)]
      set;
    }

    /// <summary><para><c>truBassLevel</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property truBassLevel</para></summary>
    /// <remarks><para>An original IDL definition of <c>truBassLevel</c> property was the following:  <c>long truBassLevel</c>;</para></remarks>
    // property truBassLevel
    // IDL: long truBassLevel;
    // VB6: truBassLevel As Long
    int truBassLevel
    {
      // IDL: HRESULT truBassLevel ([out, retval] long* ReturnValue);
      // VB6: Function truBassLevel As Long
      [DispId(5824)]
      get;
      // IDL: HRESULT truBassLevel (long value);
      // VB6: Sub truBassLevel (ByVal value As Long)
      [DispId(5824)]
      set;
    }

    /// <summary><para><c>wowLevel</c> property of <c>IWMPEqualizerSettingsCtrl</c> interface.  </para><para>property wowLevel</para></summary>
    /// <remarks><para>An original IDL definition of <c>wowLevel</c> property was the following:  <c>long wowLevel</c>;</para></remarks>
    // property wowLevel
    // IDL: long wowLevel;
    // VB6: wowLevel As Long
    int wowLevel
    {
      // IDL: HRESULT wowLevel ([out, retval] long* ReturnValue);
      // VB6: Function wowLevel As Long
      [DispId(5825)]
      get;
      // IDL: HRESULT wowLevel (long value);
      // VB6: Sub wowLevel (ByVal value As Long)
      [DispId(5825)]
      set;
    }
  }

  /// <summary><para><c>IWMPError</c> interface.  </para><para>IWMPError: Public interface.</para></summary>
  // IWMPError: Public interface.
  [Guid("A12DCF7D-14AB-4C1B-A8CD-63909F06025B")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPError
  {
    /// <summary><para><c>clearErrorQueue</c> method of <c>IWMPError</c> interface.  </para><para>Clears the error queue</para></summary>
    /// <remarks><para>An original IDL definition of <c>clearErrorQueue</c> method was the following:  <c>HRESULT clearErrorQueue (void)</c>;</para></remarks>
    // Clears the error queue
    // IDL: HRESULT clearErrorQueue (void);
    // VB6: Sub clearErrorQueue
    [DispId(851)]
    void clearErrorQueue ();

    /// <summary><para><c>Item</c> property get of <c>IWMPError</c> interface.  </para><para>Returns an error item object</para></summary>
    /// <remarks><para>An original IDL definition of <c>Item</c> property get was the following:  <c>HRESULT Item (long dwIndex, [out, retval] IWMPErrorItem** ReturnValue)</c>;</para></remarks>
    // Returns an error item object
    // IDL: HRESULT Item (long dwIndex, [out, retval] IWMPErrorItem** ReturnValue);
    // VB6: Function Item (ByVal dwIndex As Long) As IWMPErrorItem
    [DispId(853)]
    IWMPErrorItem Item (int dwIndex) /* property get method */;

    /// <summary><para><c>webHelp</c> method of <c>IWMPError</c> interface.  </para><para>Launches WebHelp</para></summary>
    /// <remarks><para>An original IDL definition of <c>webHelp</c> method was the following:  <c>HRESULT webHelp (void)</c>;</para></remarks>
    // Launches WebHelp
    // IDL: HRESULT webHelp (void);
    // VB6: Sub webHelp
    [DispId(854)]
    void webHelp ();

    /// <summary><para><c>errorCount</c> property of <c>IWMPError</c> interface.  </para><para>Returns the number of error items</para></summary>
    /// <remarks><para>An original IDL definition of <c>errorCount</c> property was the following:  <c>long errorCount</c>;</para></remarks>
    // Returns the number of error items
    // IDL: long errorCount;
    // VB6: errorCount As Long
    int errorCount
    {
      // IDL: HRESULT errorCount ([out, retval] long* ReturnValue);
      // VB6: Function errorCount As Long
      [DispId(852)]
      get;
    }
  }

  /// <summary><para><c>IWMPErrorItem</c> interface.  </para><para>IWMPErrorItem: Public interface.</para></summary>
  // IWMPErrorItem: Public interface.
  [Guid("3614C646-3B3B-4DE7-A81E-930E3F2127B3")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPErrorItem
  {
    /// <summary><para><c>customUrl</c> property of <c>IWMPErrorItem</c> interface.  </para><para>Returns a custom url for this error (if avail)</para></summary>
    /// <remarks><para>An original IDL definition of <c>customUrl</c> property was the following:  <c>BSTR customUrl</c>;</para></remarks>
    // Returns a custom url for this error (if avail)
    // IDL: BSTR customUrl;
    // VB6: customUrl As String
    string customUrl
    {
      // IDL: HRESULT customUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function customUrl As String
      [DispId(905)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>errorCode</c> property of <c>IWMPErrorItem</c> interface.  </para><para>Returns the error code</para></summary>
    /// <remarks><para>An original IDL definition of <c>errorCode</c> property was the following:  <c>long errorCode</c>;</para></remarks>
    // Returns the error code
    // IDL: long errorCode;
    // VB6: errorCode As Long
    int errorCode
    {
      // IDL: HRESULT errorCode ([out, retval] long* ReturnValue);
      // VB6: Function errorCode As Long
      [DispId(901)]
      get;
    }

    /// <summary><para><c>errorContext</c> property of <c>IWMPErrorItem</c> interface.  </para><para>Returns context information for the error</para></summary>
    /// <remarks><para>An original IDL definition of <c>errorContext</c> property was the following:  <c>VARIANT errorContext</c>;</para></remarks>
    // Returns context information for the error
    // IDL: VARIANT errorContext;
    // VB6: errorContext As Any
    object errorContext
    {
      // IDL: HRESULT errorContext ([out, retval] VARIANT* ReturnValue);
      // VB6: Function errorContext As Any
      [DispId(903)]
      get;
    }

    /// <summary><para><c>errorDescription</c> property of <c>IWMPErrorItem</c> interface.  </para><para>Returns a description of the error</para></summary>
    /// <remarks><para>An original IDL definition of <c>errorDescription</c> property was the following:  <c>BSTR errorDescription</c>;</para></remarks>
    // Returns a description of the error
    // IDL: BSTR errorDescription;
    // VB6: errorDescription As String
    string errorDescription
    {
      // IDL: HRESULT errorDescription ([out, retval] BSTR* ReturnValue);
      // VB6: Function errorDescription As String
      [DispId(902)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>remedy</c> property of <c>IWMPErrorItem</c> interface.  </para><para>Returns remedy code for the error</para></summary>
    /// <remarks><para>An original IDL definition of <c>remedy</c> property was the following:  <c>long remedy</c>;</para></remarks>
    // Returns remedy code for the error
    // IDL: long remedy;
    // VB6: remedy As Long
    int remedy
    {
      // IDL: HRESULT remedy ([out, retval] long* ReturnValue);
      // VB6: Function remedy As Long
      [DispId(904)]
      get;
    }
  }

  /// <summary><para><c>IWMPErrorItem2</c> interface.  </para><para>IWMPErrorItem2: Public interface.</para></summary>
  // IWMPErrorItem2: Public interface.
  [Guid("F75CCEC0-C67C-475C-931E-8719870BEE7D")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPErrorItem2
  {
    /// <summary><para><c>condition</c> property of <c>IWMPErrorItem2</c> interface.  </para><para>Returns condition for the error</para></summary>
    /// <remarks><para>An original IDL definition of <c>condition</c> property was the following:  <c>long condition</c>;</para></remarks>
    // Returns condition for the error
    // IDL: long condition;
    // VB6: condition As Long
    int condition
    {
      // IDL: HRESULT condition ([out, retval] long* ReturnValue);
      // VB6: Function condition As Long
      [DispId(906)]
      get;
    }

    /// <summary><para><c>customUrl</c> property of <c>IWMPErrorItem2</c> interface.  </para><para>Returns a custom url for this error (if avail)</para></summary>
    /// <remarks><para>An original IDL definition of <c>customUrl</c> property was the following:  <c>BSTR customUrl</c>;</para></remarks>
    // Returns a custom url for this error (if avail)
    // IDL: BSTR customUrl;
    // VB6: customUrl As String
    string customUrl
    {
      // IDL: HRESULT customUrl ([out, retval] BSTR* ReturnValue);
      // VB6: Function customUrl As String
      [DispId(905)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>errorCode</c> property of <c>IWMPErrorItem2</c> interface.  </para><para>Returns the error code</para></summary>
    /// <remarks><para>An original IDL definition of <c>errorCode</c> property was the following:  <c>long errorCode</c>;</para></remarks>
    // Returns the error code
    // IDL: long errorCode;
    // VB6: errorCode As Long
    int errorCode
    {
      // IDL: HRESULT errorCode ([out, retval] long* ReturnValue);
      // VB6: Function errorCode As Long
      [DispId(901)]
      get;
    }

    /// <summary><para><c>errorContext</c> property of <c>IWMPErrorItem2</c> interface.  </para><para>Returns context information for the error</para></summary>
    /// <remarks><para>An original IDL definition of <c>errorContext</c> property was the following:  <c>VARIANT errorContext</c>;</para></remarks>
    // Returns context information for the error
    // IDL: VARIANT errorContext;
    // VB6: errorContext As Any
    object errorContext
    {
      // IDL: HRESULT errorContext ([out, retval] VARIANT* ReturnValue);
      // VB6: Function errorContext As Any
      [DispId(903)]
      get;
    }

    /// <summary><para><c>errorDescription</c> property of <c>IWMPErrorItem2</c> interface.  </para><para>Returns a description of the error</para></summary>
    /// <remarks><para>An original IDL definition of <c>errorDescription</c> property was the following:  <c>BSTR errorDescription</c>;</para></remarks>
    // Returns a description of the error
    // IDL: BSTR errorDescription;
    // VB6: errorDescription As String
    string errorDescription
    {
      // IDL: HRESULT errorDescription ([out, retval] BSTR* ReturnValue);
      // VB6: Function errorDescription As String
      [DispId(902)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>remedy</c> property of <c>IWMPErrorItem2</c> interface.  </para><para>Returns remedy code for the error</para></summary>
    /// <remarks><para>An original IDL definition of <c>remedy</c> property was the following:  <c>long remedy</c>;</para></remarks>
    // Returns remedy code for the error
    // IDL: long remedy;
    // VB6: remedy As Long
    int remedy
    {
      // IDL: HRESULT remedy ([out, retval] long* ReturnValue);
      // VB6: Function remedy As Long
      [DispId(904)]
      get;
    }
  }

  /// <summary><para><c>IWMPEventObject</c> interface.  </para><para>IWMPEventObject: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPEventObject: Not Public.  Internal interface used by Windows Media Player.
  [Guid("5AF0BEC1-46AA-11D3-BD45-00C04F6EA5AE")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPEventObject
  {
    /// <summary><para><c>altKey</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>altKey</c> property was the following:  <c>VARIANT_BOOL altKey</c>;</para></remarks>
    // IDL: VARIANT_BOOL altKey;
    // VB6: altKey As Boolean
    bool altKey
    {
      // IDL: HRESULT altKey ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function altKey As Boolean
      [DispId(2201)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>button</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>button</c> property was the following:  <c>long button</c>;</para></remarks>
    // IDL: long button;
    // VB6: button As Long
    int button
    {
      // IDL: HRESULT button ([out, retval] long* ReturnValue);
      // VB6: Function button As Long
      [DispId(2207)]
      get;
    }

    /// <summary><para><c>clientX</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>clientX</c> property was the following:  <c>long clientX</c>;</para></remarks>
    // IDL: long clientX;
    // VB6: clientX As Long
    int clientX
    {
      // IDL: HRESULT clientX ([out, retval] long* ReturnValue);
      // VB6: Function clientX As Long
      [DispId(2210)]
      get;
    }

    /// <summary><para><c>clientY</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>clientY</c> property was the following:  <c>long clientY</c>;</para></remarks>
    // IDL: long clientY;
    // VB6: clientY As Long
    int clientY
    {
      // IDL: HRESULT clientY ([out, retval] long* ReturnValue);
      // VB6: Function clientY As Long
      [DispId(2211)]
      get;
    }

    /// <summary><para><c>ctrlKey</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>ctrlKey</c> property was the following:  <c>VARIANT_BOOL ctrlKey</c>;</para></remarks>
    // IDL: VARIANT_BOOL ctrlKey;
    // VB6: ctrlKey As Boolean
    bool ctrlKey
    {
      // IDL: HRESULT ctrlKey ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function ctrlKey As Boolean
      [DispId(2202)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>fromElement</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>fromElement</c> property was the following:  <c>IDispatch* fromElement</c>;</para></remarks>
    // IDL: IDispatch* fromElement;
    // VB6: fromElement As IDispatch
    object fromElement
    {
      // IDL: HRESULT fromElement ([out, retval] IDispatch** ReturnValue);
      // VB6: Function fromElement As IDispatch
      [DispId(2204)]
      [return: MarshalAs(UnmanagedType.IDispatch)]
      get;
    }

    /// <summary><para><c>keyCode</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>keyCode</c> property was the following:  <c>long keyCode</c>;</para></remarks>
    // IDL: long keyCode;
    // VB6: keyCode As Long
    int keyCode
    {
      // IDL: HRESULT keyCode ([out, retval] long* ReturnValue);
      // VB6: Function keyCode As Long
      [DispId(2206)]
      get;
      // IDL: HRESULT keyCode (long value);
      // VB6: Sub keyCode (ByVal value As Long)
      [DispId(2206)]
      set;
    }

    /// <summary><para><c>offsetX</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>offsetX</c> property was the following:  <c>long offsetX</c>;</para></remarks>
    // IDL: long offsetX;
    // VB6: offsetX As Long
    int offsetX
    {
      // IDL: HRESULT offsetX ([out, retval] long* ReturnValue);
      // VB6: Function offsetX As Long
      [DispId(2212)]
      get;
    }

    /// <summary><para><c>offsetY</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>offsetY</c> property was the following:  <c>long offsetY</c>;</para></remarks>
    // IDL: long offsetY;
    // VB6: offsetY As Long
    int offsetY
    {
      // IDL: HRESULT offsetY ([out, retval] long* ReturnValue);
      // VB6: Function offsetY As Long
      [DispId(2213)]
      get;
    }

    /// <summary><para><c>penOrTouch</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>penOrTouch</c> property was the following:  <c>VARIANT_BOOL penOrTouch</c>;</para></remarks>
    // IDL: VARIANT_BOOL penOrTouch;
    // VB6: penOrTouch As Boolean
    bool penOrTouch
    {
      // IDL: HRESULT penOrTouch ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function penOrTouch As Boolean
      [DispId(2218)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>screenHeight</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>screenHeight</c> property was the following:  <c>long screenHeight</c>;</para></remarks>
    // IDL: long screenHeight;
    // VB6: screenHeight As Long
    int screenHeight
    {
      // IDL: HRESULT screenHeight ([out, retval] long* ReturnValue);
      // VB6: Function screenHeight As Long
      [DispId(2217)]
      get;
    }

    /// <summary><para><c>screenWidth</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>screenWidth</c> property was the following:  <c>long screenWidth</c>;</para></remarks>
    // IDL: long screenWidth;
    // VB6: screenWidth As Long
    int screenWidth
    {
      // IDL: HRESULT screenWidth ([out, retval] long* ReturnValue);
      // VB6: Function screenWidth As Long
      [DispId(2216)]
      get;
    }

    /// <summary><para><c>screenX</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>screenX</c> property was the following:  <c>long screenX</c>;</para></remarks>
    // IDL: long screenX;
    // VB6: screenX As Long
    int screenX
    {
      // IDL: HRESULT screenX ([out, retval] long* ReturnValue);
      // VB6: Function screenX As Long
      [DispId(2214)]
      get;
    }

    /// <summary><para><c>screenY</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>screenY</c> property was the following:  <c>long screenY</c>;</para></remarks>
    // IDL: long screenY;
    // VB6: screenY As Long
    int screenY
    {
      // IDL: HRESULT screenY ([out, retval] long* ReturnValue);
      // VB6: Function screenY As Long
      [DispId(2215)]
      get;
    }

    /// <summary><para><c>shiftKey</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>shiftKey</c> property was the following:  <c>VARIANT_BOOL shiftKey</c>;</para></remarks>
    // IDL: VARIANT_BOOL shiftKey;
    // VB6: shiftKey As Boolean
    bool shiftKey
    {
      // IDL: HRESULT shiftKey ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function shiftKey As Boolean
      [DispId(2203)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>srcElement</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>srcElement</c> property was the following:  <c>IDispatch* srcElement</c>;</para></remarks>
    // IDL: IDispatch* srcElement;
    // VB6: srcElement As IDispatch
    object srcElement
    {
      // IDL: HRESULT srcElement ([out, retval] IDispatch** ReturnValue);
      // VB6: Function srcElement As IDispatch
      [DispId(2200)]
      [return: MarshalAs(UnmanagedType.IDispatch)]
      get;
    }

    /// <summary><para><c>toElement</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>toElement</c> property was the following:  <c>IDispatch* toElement</c>;</para></remarks>
    // IDL: IDispatch* toElement;
    // VB6: toElement As IDispatch
    object toElement
    {
      // IDL: HRESULT toElement ([out, retval] IDispatch** ReturnValue);
      // VB6: Function toElement As IDispatch
      [DispId(2205)]
      [return: MarshalAs(UnmanagedType.IDispatch)]
      get;
    }

    /// <summary><para><c>x</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>x</c> property was the following:  <c>long x</c>;</para></remarks>
    // IDL: long x;
    // VB6: x As Long
    int x
    {
      // IDL: HRESULT x ([out, retval] long* ReturnValue);
      // VB6: Function x As Long
      [DispId(2208)]
      get;
    }

    /// <summary><para><c>y</c> property of <c>IWMPEventObject</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>y</c> property was the following:  <c>long y</c>;</para></remarks>
    // IDL: long y;
    // VB6: y As Long
    int y
    {
      // IDL: HRESULT y ([out, retval] long* ReturnValue);
      // VB6: Function y As Long
      [DispId(2209)]
      get;
    }
  }

  /// <summary><para><c>IWMPExternal</c> interface.  </para><para>IWMPExternal: Public interface for scripting object model.</para></summary>
  // IWMPExternal: Public interface for scripting object model.
  [Guid("E2CC638C-FD2C-409B-A1EA-5DDB72DC8E84")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPExternal
  {
    /// <summary><para><c>appColorLight</c> property of <c>IWMPExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorLight</c> property was the following:  <c>BSTR appColorLight</c>;</para></remarks>
    // IDL: BSTR appColorLight;
    // VB6: appColorLight As String
    string appColorLight
    {
      // IDL: HRESULT appColorLight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorLight As String
      [DispId(10012)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>OnColorChange</c> property of <c>IWMPExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnColorChange</c> property was the following:  <c>IDispatch OnColorChange</c>;</para></remarks>
    // IDL: IDispatch OnColorChange;
    // VB6: OnColorChange As IDispatch
    object OnColorChange
    {
      // IDL: HRESULT OnColorChange (IDispatch* value);
      // VB6: Sub OnColorChange (ByVal value As IDispatch)
      [DispId(10018)]
      set;
    }

    /// <summary><para><c>version</c> property of <c>IWMPExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>version</c> property was the following:  <c>BSTR version</c>;</para></remarks>
    // IDL: BSTR version;
    // VB6: version As String
    string version
    {
      // IDL: HRESULT version ([out, retval] BSTR* ReturnValue);
      // VB6: Function version As String
      [DispId(10005)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPExternalColors</c> interface.  </para><para>IWMPExternalColors: Public interface for scripting object model.</para></summary>
  // IWMPExternalColors: Public interface for scripting object model.
  [Guid("D10CCDFF-472D-498C-B5FE-3630E5405E0A")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPExternalColors
  {
    /// <summary><para><c>appColorButtonHighlight</c> property of <c>IWMPExternalColors</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHighlight</c> property was the following:  <c>BSTR appColorButtonHighlight</c>;</para></remarks>
    // IDL: BSTR appColorButtonHighlight;
    // VB6: appColorButtonHighlight As String
    string appColorButtonHighlight
    {
      // IDL: HRESULT appColorButtonHighlight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHighlight As String
      [DispId(10015)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonHoverFace</c> property of <c>IWMPExternalColors</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHoverFace</c> property was the following:  <c>BSTR appColorButtonHoverFace</c>;</para></remarks>
    // IDL: BSTR appColorButtonHoverFace;
    // VB6: appColorButtonHoverFace As String
    string appColorButtonHoverFace
    {
      // IDL: HRESULT appColorButtonHoverFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHoverFace As String
      [DispId(10017)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonShadow</c> property of <c>IWMPExternalColors</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonShadow</c> property was the following:  <c>BSTR appColorButtonShadow</c>;</para></remarks>
    // IDL: BSTR appColorButtonShadow;
    // VB6: appColorButtonShadow As String
    string appColorButtonShadow
    {
      // IDL: HRESULT appColorButtonShadow ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonShadow As String
      [DispId(10016)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorDark</c> property of <c>IWMPExternalColors</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorDark</c> property was the following:  <c>BSTR appColorDark</c>;</para></remarks>
    // IDL: BSTR appColorDark;
    // VB6: appColorDark As String
    string appColorDark
    {
      // IDL: HRESULT appColorDark ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorDark As String
      [DispId(10014)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorLight</c> property of <c>IWMPExternalColors</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorLight</c> property was the following:  <c>BSTR appColorLight</c>;</para></remarks>
    // IDL: BSTR appColorLight;
    // VB6: appColorLight As String
    string appColorLight
    {
      // IDL: HRESULT appColorLight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorLight As String
      [DispId(10012)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorMedium</c> property of <c>IWMPExternalColors</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorMedium</c> property was the following:  <c>BSTR appColorMedium</c>;</para></remarks>
    // IDL: BSTR appColorMedium;
    // VB6: appColorMedium As String
    string appColorMedium
    {
      // IDL: HRESULT appColorMedium ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorMedium As String
      [DispId(10013)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>OnColorChange</c> property of <c>IWMPExternalColors</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnColorChange</c> property was the following:  <c>IDispatch OnColorChange</c>;</para></remarks>
    // IDL: IDispatch OnColorChange;
    // VB6: OnColorChange As IDispatch
    object OnColorChange
    {
      // IDL: HRESULT OnColorChange (IDispatch* value);
      // VB6: Sub OnColorChange (ByVal value As IDispatch)
      [DispId(10018)]
      set;
    }

    /// <summary><para><c>version</c> property of <c>IWMPExternalColors</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>version</c> property was the following:  <c>BSTR version</c>;</para></remarks>
    // IDL: BSTR version;
    // VB6: version As String
    string version
    {
      // IDL: HRESULT version ([out, retval] BSTR* ReturnValue);
      // VB6: Function version As String
      [DispId(10005)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPGraphEventHandler</c> interface.  </para><para>IWMPGraphEventHandler: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPGraphEventHandler: Not Public.  Internal interface used by Windows Media Player.
  [Guid("6B550945-018F-11D3-B14A-00C04F79FAA6")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPGraphEventHandler
  {
    /// <summary><para><c>NotifyGraphStateChange</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies graph state changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyGraphStateChange</c> method was the following:  <c>HRESULT NotifyGraphStateChange (unsigned long punkGraph, long lGraphState)</c>;</para></remarks>
    // Notifies graph state changes
    // IDL: HRESULT NotifyGraphStateChange (unsigned long punkGraph, long lGraphState);
    // VB6: Sub NotifyGraphStateChange (ByVal punkGraph As Long, ByVal lGraphState As Long)
    [DispId(8151)]
    void NotifyGraphStateChange (uint punkGraph, int lGraphState);

    /// <summary><para><c>AsyncNotifyGraphStateChange</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies graph state changes asynchronously</para></summary>
    /// <remarks><para>An original IDL definition of <c>AsyncNotifyGraphStateChange</c> method was the following:  <c>HRESULT AsyncNotifyGraphStateChange (unsigned long punkGraph, long lGraphState)</c>;</para></remarks>
    // Notifies graph state changes asynchronously
    // IDL: HRESULT AsyncNotifyGraphStateChange (unsigned long punkGraph, long lGraphState);
    // VB6: Sub AsyncNotifyGraphStateChange (ByVal punkGraph As Long, ByVal lGraphState As Long)
    [DispId(8173)]
    void AsyncNotifyGraphStateChange (uint punkGraph, int lGraphState);

    /// <summary><para><c>NotifyRateChange</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies changes in playback rate</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyRateChange</c> method was the following:  <c>HRESULT NotifyRateChange (unsigned long punkGraph, double dRate)</c>;</para></remarks>
    // Notifies changes in playback rate
    // IDL: HRESULT NotifyRateChange (unsigned long punkGraph, double dRate);
    // VB6: Sub NotifyRateChange (ByVal punkGraph As Long, ByVal dRate As Double)
    [DispId(8153)]
    void NotifyRateChange (uint punkGraph, double dRate);

    /// <summary><para><c>NotifyPlaybackEnd</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies the end of playback</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyPlaybackEnd</c> method was the following:  <c>HRESULT NotifyPlaybackEnd (unsigned long punkGraph, BSTR bstrQueuedUrl, unsigned long dwCurrentContext)</c>;</para></remarks>
    // Notifies the end of playback
    // IDL: HRESULT NotifyPlaybackEnd (unsigned long punkGraph, BSTR bstrQueuedUrl, unsigned long dwCurrentContext);
    // VB6: Sub NotifyPlaybackEnd (ByVal punkGraph As Long, ByVal bstrQueuedUrl As String, ByVal dwCurrentContext As Long)
    [DispId(8157)]
    void NotifyPlaybackEnd (uint punkGraph, [MarshalAs(UnmanagedType.BStr)] string bstrQueuedUrl, uint dwCurrentContext);

    /// <summary><para><c>NotifyStreamEnd</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies the end of a stream</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyStreamEnd</c> method was the following:  <c>HRESULT NotifyStreamEnd (unsigned long punkGraph)</c>;</para></remarks>
    // Notifies the end of a stream
    // IDL: HRESULT NotifyStreamEnd (unsigned long punkGraph);
    // VB6: Sub NotifyStreamEnd (ByVal punkGraph As Long)
    [DispId(8156)]
    void NotifyStreamEnd (uint punkGraph);

    /// <summary><para><c>NotifyScriptCommand</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies that a script command was encountered</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyScriptCommand</c> method was the following:  <c>HRESULT NotifyScriptCommand (unsigned long punkGraph, BSTR bstrCommand, BSTR bstrParam)</c>;</para></remarks>
    // Notifies that a script command was encountered
    // IDL: HRESULT NotifyScriptCommand (unsigned long punkGraph, BSTR bstrCommand, BSTR bstrParam);
    // VB6: Sub NotifyScriptCommand (ByVal punkGraph As Long, ByVal bstrCommand As String, ByVal bstrParam As String)
    [DispId(8158)]
    void NotifyScriptCommand (uint punkGraph, [MarshalAs(UnmanagedType.BStr)] string bstrCommand, [MarshalAs(UnmanagedType.BStr)] string bstrParam);

    /// <summary><para><c>NotifyEarlyScriptCommand</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies that a script command was encountered</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyEarlyScriptCommand</c> method was the following:  <c>HRESULT NotifyEarlyScriptCommand (unsigned long punkGraph, BSTR bstrCommand, BSTR bstrParam, double dTime)</c>;</para></remarks>
    // Notifies that a script command was encountered
    // IDL: HRESULT NotifyEarlyScriptCommand (unsigned long punkGraph, BSTR bstrCommand, BSTR bstrParam, double dTime);
    // VB6: Sub NotifyEarlyScriptCommand (ByVal punkGraph As Long, ByVal bstrCommand As String, ByVal bstrParam As String, ByVal dTime As Double)
    [DispId(8172)]
    void NotifyEarlyScriptCommand (uint punkGraph, [MarshalAs(UnmanagedType.BStr)] string bstrCommand, [MarshalAs(UnmanagedType.BStr)] string bstrParam, double dTime);

    /// <summary><para><c>NotifyMarkerHit</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies that a marker was encountered</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyMarkerHit</c> method was the following:  <c>HRESULT NotifyMarkerHit (unsigned long punkGraph, long lMarker)</c>;</para></remarks>
    // Notifies that a marker was encountered
    // IDL: HRESULT NotifyMarkerHit (unsigned long punkGraph, long lMarker);
    // VB6: Sub NotifyMarkerHit (ByVal punkGraph As Long, ByVal lMarker As Long)
    [DispId(8159)]
    void NotifyMarkerHit (uint punkGraph, int lMarker);

    /// <summary><para><c>NotifyGraphError</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies that an error has occurred</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyGraphError</c> method was the following:  <c>HRESULT NotifyGraphError (unsigned long punkGraph, long lErrMajor, long lErrMinor, long lCondition, BSTR bstrInfo, IUnknown* punkGraphData)</c>;</para></remarks>
    // Notifies that an error has occurred
    // IDL: HRESULT NotifyGraphError (unsigned long punkGraph, long lErrMajor, long lErrMinor, long lCondition, BSTR bstrInfo, IUnknown* punkGraphData);
    // VB6: Sub NotifyGraphError (ByVal punkGraph As Long, ByVal lErrMajor As Long, ByVal lErrMinor As Long, ByVal lCondition As Long, ByVal bstrInfo As String, ByVal punkGraphData As IUnknown)
    [DispId(8160)]
    void NotifyGraphError (uint punkGraph, int lErrMajor, int lErrMinor, int lCondition, [MarshalAs(UnmanagedType.BStr)] string bstrInfo, [MarshalAs(UnmanagedType.IUnknown)] object punkGraphData);

    /// <summary><para><c>NotifyAcquireCredentials</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Spawns the Acquire Credentials dialog</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyAcquireCredentials</c> method was the following:  <c>HRESULT NotifyAcquireCredentials (unsigned long punkGraph, BSTR bstrRealm, BSTR bstrSite, BSTR bstrUser, BSTR bstrPassword, [in, out] unsigned long* pdwFlags, [out] VARIANT_BOOL* pfCancel)</c>;</para></remarks>
    // Spawns the Acquire Credentials dialog
    // IDL: HRESULT NotifyAcquireCredentials (unsigned long punkGraph, BSTR bstrRealm, BSTR bstrSite, BSTR bstrUser, BSTR bstrPassword, [in, out] unsigned long* pdwFlags, [out] VARIANT_BOOL* pfCancel);
    // VB6: Sub NotifyAcquireCredentials (ByVal punkGraph As Long, ByVal bstrRealm As String, ByVal bstrSite As String, ByVal bstrUser As String, ByVal bstrPassword As String, pdwFlags As Long, pfCancel As Boolean)
    [DispId(8161)]
    void NotifyAcquireCredentials (uint punkGraph, [MarshalAs(UnmanagedType.BStr)] string bstrRealm, [MarshalAs(UnmanagedType.BStr)] string bstrSite, [MarshalAs(UnmanagedType.BStr)] string bstrUser, [MarshalAs(UnmanagedType.BStr)] string bstrPassword, [In, Out] ref uint pdwFlags, [Out, MarshalAs(UnmanagedType.VariantBool)] out bool pfCancel);

    /// <summary><para><c>NotifyUntrustedLicense</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Spawns the untrusted license dialog</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyUntrustedLicense</c> method was the following:  <c>HRESULT NotifyUntrustedLicense (unsigned long punkGraph, BSTR bstrURL, [out] VARIANT_BOOL* pfCancel)</c>;</para></remarks>
    // Spawns the untrusted license dialog
    // IDL: HRESULT NotifyUntrustedLicense (unsigned long punkGraph, BSTR bstrURL, [out] VARIANT_BOOL* pfCancel);
    // VB6: Sub NotifyUntrustedLicense (ByVal punkGraph As Long, ByVal bstrURL As String, pfCancel As Boolean)
    [DispId(8178)]
    void NotifyUntrustedLicense (uint punkGraph, [MarshalAs(UnmanagedType.BStr)] string bstrURL, [Out, MarshalAs(UnmanagedType.VariantBool)] out bool pfCancel);

    /// <summary><para><c>NotifyLicenseDialog</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies a communication with the license dialog</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyLicenseDialog</c> method was the following:  <c>HRESULT NotifyLicenseDialog (unsigned long punkGraph, BSTR bstrURL, BSTR bstrContent, [in] unsigned byte* pPostData, unsigned long dwPostDataSize, long lResult)</c>;</para></remarks>
    // Notifies a communication with the license dialog
    // IDL: HRESULT NotifyLicenseDialog (unsigned long punkGraph, BSTR bstrURL, BSTR bstrContent, [in] unsigned byte* pPostData, unsigned long dwPostDataSize, long lResult);
    // VB6: Sub NotifyLicenseDialog (ByVal punkGraph As Long, ByVal bstrURL As String, ByVal bstrContent As String, pPostData As Byte, ByVal dwPostDataSize As Long, ByVal lResult As Long)
    [DispId(8162)]
    void NotifyLicenseDialog (uint punkGraph, [MarshalAs(UnmanagedType.BStr)] string bstrURL, [MarshalAs(UnmanagedType.BStr)] string bstrContent, [In] ref byte pPostData, uint dwPostDataSize, int lResult);

    /// <summary><para><c>NotifyNeedsIndividualization</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies a communication with the Individualization dialog</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyNeedsIndividualization</c> method was the following:  <c>HRESULT NotifyNeedsIndividualization (unsigned long punkGraph, [out] VARIANT_BOOL* pfResult)</c>;</para></remarks>
    // Notifies a communication with the Individualization dialog
    // IDL: HRESULT NotifyNeedsIndividualization (unsigned long punkGraph, [out] VARIANT_BOOL* pfResult);
    // VB6: Sub NotifyNeedsIndividualization (ByVal punkGraph As Long, pfResult As Boolean)
    [DispId(8163)]
    void NotifyNeedsIndividualization (uint punkGraph, [Out, MarshalAs(UnmanagedType.VariantBool)] out bool pfResult);

    /// <summary><para><c>NotifyNewMetadata</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies that new metadata is avail</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyNewMetadata</c> method was the following:  <c>HRESULT NotifyNewMetadata (unsigned long punkGraph)</c>;</para></remarks>
    // Notifies that new metadata is avail
    // IDL: HRESULT NotifyNewMetadata (unsigned long punkGraph);
    // VB6: Sub NotifyNewMetadata (ByVal punkGraph As Long)
    [DispId(8165)]
    void NotifyNewMetadata (uint punkGraph);

    /// <summary><para><c>NotifyNewMediaCaps</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies that new capabilities are avail</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyNewMediaCaps</c> method was the following:  <c>HRESULT NotifyNewMediaCaps (unsigned long punkGraph)</c>;</para></remarks>
    // Notifies that new capabilities are avail
    // IDL: HRESULT NotifyNewMediaCaps (unsigned long punkGraph);
    // VB6: Sub NotifyNewMediaCaps (ByVal punkGraph As Long)
    [DispId(8166)]
    void NotifyNewMediaCaps (uint punkGraph);

    /// <summary><para><c>NotifyDisconnect</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies that the graph's connection to the media has been lost.</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyDisconnect</c> method was the following:  <c>HRESULT NotifyDisconnect (unsigned long punkGraph, long lResult)</c>;</para></remarks>
    // Notifies that the graph's connection to the media has been lost.
    // IDL: HRESULT NotifyDisconnect (unsigned long punkGraph, long lResult);
    // VB6: Sub NotifyDisconnect (ByVal punkGraph As Long, ByVal lResult As Long)
    [DispId(8167)]
    void NotifyDisconnect (uint punkGraph, int lResult);

    /// <summary><para><c>NotifySave</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies that the graph save operation started/stopped.</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifySave</c> method was the following:  <c>HRESULT NotifySave (unsigned long punkGraph, long fStarted, long lResult)</c>;</para></remarks>
    // Notifies that the graph save operation started/stopped.
    // IDL: HRESULT NotifySave (unsigned long punkGraph, long fStarted, long lResult);
    // VB6: Sub NotifySave (ByVal punkGraph As Long, ByVal fStarted As Long, ByVal lResult As Long)
    [DispId(8168)]
    void NotifySave (uint punkGraph, int fStarted, int lResult);

    /// <summary><para><c>NotifyDelayClose</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies if the close call needs to be delayed.</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyDelayClose</c> method was the following:  <c>HRESULT NotifyDelayClose (unsigned long punkGraph, VARIANT_BOOL fDelay)</c>;</para></remarks>
    // Notifies if the close call needs to be delayed.
    // IDL: HRESULT NotifyDelayClose (unsigned long punkGraph, VARIANT_BOOL fDelay);
    // VB6: Sub NotifyDelayClose (ByVal punkGraph As Long, ByVal fDelay As Boolean)
    [DispId(8169)]
    void NotifyDelayClose (uint punkGraph, [MarshalAs(UnmanagedType.VariantBool)] bool fDelay);

    /// <summary><para><c>NotifyDVD</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies when domain changes, parental control and region needs to be handled.</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyDVD</c> method was the following:  <c>HRESULT NotifyDVD (unsigned long punkGraph, long lEventCode, long lParam1, long lParam2)</c>;</para></remarks>
    // Notifies when domain changes, parental control and region needs to be handled.
    // IDL: HRESULT NotifyDVD (unsigned long punkGraph, long lEventCode, long lParam1, long lParam2);
    // VB6: Sub NotifyDVD (ByVal punkGraph As Long, ByVal lEventCode As Long, ByVal lParam1 As Long, ByVal lParam2 As Long)
    [DispId(8170)]
    void NotifyDVD (uint punkGraph, int lEventCode, int lParam1, int lParam2);

    /// <summary><para><c>NotifyRequestAppThreadAction</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Requests a callback into the graph on the apps thread</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyRequestAppThreadAction</c> method was the following:  <c>HRESULT NotifyRequestAppThreadAction (unsigned long punkGraph, unsigned long dwAction)</c>;</para></remarks>
    // Requests a callback into the graph on the apps thread
    // IDL: HRESULT NotifyRequestAppThreadAction (unsigned long punkGraph, unsigned long dwAction);
    // VB6: Sub NotifyRequestAppThreadAction (ByVal punkGraph As Long, ByVal dwAction As Long)
    [DispId(8171)]
    void NotifyRequestAppThreadAction (uint punkGraph, uint dwAction);

    /// <summary><para><c>NotifyPrerollReady</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies that a prerolled graph is ready to play with no more buffering</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyPrerollReady</c> method was the following:  <c>HRESULT NotifyPrerollReady (unsigned long punkGraph)</c>;</para></remarks>
    // Notifies that a prerolled graph is ready to play with no more buffering
    // IDL: HRESULT NotifyPrerollReady (unsigned long punkGraph);
    // VB6: Sub NotifyPrerollReady (ByVal punkGraph As Long)
    [DispId(8174)]
    void NotifyPrerollReady (uint punkGraph);

    /// <summary><para><c>NotifyNewIcons</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies core that our DirectShow filters have new icons to display</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyNewIcons</c> method was the following:  <c>HRESULT NotifyNewIcons (unsigned long punkGraph)</c>;</para></remarks>
    // Notifies core that our DirectShow filters have new icons to display
    // IDL: HRESULT NotifyNewIcons (unsigned long punkGraph);
    // VB6: Sub NotifyNewIcons (ByVal punkGraph As Long)
    [DispId(8177)]
    void NotifyNewIcons (uint punkGraph);

    /// <summary><para><c>NotifyStepComplete</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies core that our step operation has completed</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyStepComplete</c> method was the following:  <c>HRESULT NotifyStepComplete (unsigned long punkGraph)</c>;</para></remarks>
    // Notifies core that our step operation has completed
    // IDL: HRESULT NotifyStepComplete (unsigned long punkGraph);
    // VB6: Sub NotifyStepComplete (ByVal punkGraph As Long)
    [DispId(8179)]
    void NotifyStepComplete (uint punkGraph);

    /// <summary><para><c>NotifyNewBitrate</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies core that our bitrate has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyNewBitrate</c> method was the following:  <c>HRESULT NotifyNewBitrate (unsigned long punkGraph, unsigned long dwBitrate)</c>;</para></remarks>
    // Notifies core that our bitrate has changed
    // IDL: HRESULT NotifyNewBitrate (unsigned long punkGraph, unsigned long dwBitrate);
    // VB6: Sub NotifyNewBitrate (ByVal punkGraph As Long, ByVal dwBitrate As Long)
    [DispId(8180)]
    void NotifyNewBitrate (uint punkGraph, uint dwBitrate);

    /// <summary><para><c>NotifyGraphCreationPreRender</c> method of <c>IWMPGraphEventHandler</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyGraphCreationPreRender</c> method was the following:  <c>HRESULT NotifyGraphCreationPreRender (unsigned long punkGraph, unsigned long punkFilterGraph, unsigned long punkCardeaEncConfig, unsigned long phrContinue, unsigned long hEventToSet)</c>;</para></remarks>
    // IDL: HRESULT NotifyGraphCreationPreRender (unsigned long punkGraph, unsigned long punkFilterGraph, unsigned long punkCardeaEncConfig, unsigned long phrContinue, unsigned long hEventToSet);
    // VB6: Sub NotifyGraphCreationPreRender (ByVal punkGraph As Long, ByVal punkFilterGraph As Long, ByVal punkCardeaEncConfig As Long, ByVal phrContinue As Long, ByVal hEventToSet As Long)
    [DispId(8181)]
    void NotifyGraphCreationPreRender (uint punkGraph, uint punkFilterGraph, uint punkCardeaEncConfig, uint phrContinue, uint hEventToSet);

    /// <summary><para><c>NotifyGraphCreationPostRender</c> method of <c>IWMPGraphEventHandler</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyGraphCreationPostRender</c> method was the following:  <c>HRESULT NotifyGraphCreationPostRender (unsigned long punkGraph, unsigned long punkFilterGraph, unsigned long phrContinue, unsigned long hEventToSet)</c>;</para></remarks>
    // IDL: HRESULT NotifyGraphCreationPostRender (unsigned long punkGraph, unsigned long punkFilterGraph, unsigned long phrContinue, unsigned long hEventToSet);
    // VB6: Sub NotifyGraphCreationPostRender (ByVal punkGraph As Long, ByVal punkFilterGraph As Long, ByVal phrContinue As Long, ByVal hEventToSet As Long)
    [DispId(8182)]
    void NotifyGraphCreationPostRender (uint punkGraph, uint punkFilterGraph, uint phrContinue, uint hEventToSet);

    /// <summary><para><c>NotifyGraphUserEvent</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Signals a user event from the renderer</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyGraphUserEvent</c> method was the following:  <c>HRESULT NotifyGraphUserEvent (unsigned long punkGraph, long EventCode)</c>;</para></remarks>
    // Signals a user event from the renderer
    // IDL: HRESULT NotifyGraphUserEvent (unsigned long punkGraph, long EventCode);
    // VB6: Sub NotifyGraphUserEvent (ByVal punkGraph As Long, ByVal EventCode As Long)
    [DispId(8186)]
    void NotifyGraphUserEvent (uint punkGraph, int EventCode);

    /// <summary><para><c>NotifyRevocation</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies a communication with the Revocation dialog</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyRevocation</c> method was the following:  <c>HRESULT NotifyRevocation (unsigned long punkGraph, [out] VARIANT_BOOL* pfResult)</c>;</para></remarks>
    // Notifies a communication with the Revocation dialog
    // IDL: HRESULT NotifyRevocation (unsigned long punkGraph, [out] VARIANT_BOOL* pfResult);
    // VB6: Sub NotifyRevocation (ByVal punkGraph As Long, pfResult As Boolean)
    [DispId(8183)]
    void NotifyRevocation (uint punkGraph, [Out, MarshalAs(UnmanagedType.VariantBool)] out bool pfResult);

    /// <summary><para><c>NotifyNeedsWMGraphIndividualization</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies a communication with the Individualization dialog</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyNeedsWMGraphIndividualization</c> method was the following:  <c>HRESULT NotifyNeedsWMGraphIndividualization (unsigned long punkGraph, unsigned long phWnd, unsigned long hIndivEvent, [out] VARIANT_BOOL* pfCancel, [out] VARIANT_BOOL* pfResult)</c>;</para></remarks>
    // Notifies a communication with the Individualization dialog
    // IDL: HRESULT NotifyNeedsWMGraphIndividualization (unsigned long punkGraph, unsigned long phWnd, unsigned long hIndivEvent, [out] VARIANT_BOOL* pfCancel, [out] VARIANT_BOOL* pfResult);
    // VB6: Sub NotifyNeedsWMGraphIndividualization (ByVal punkGraph As Long, ByVal phWnd As Long, ByVal hIndivEvent As Long, pfCancel As Boolean, pfResult As Boolean)
    [DispId(8184)]
    void NotifyNeedsWMGraphIndividualization (uint punkGraph, uint phWnd, uint hIndivEvent, [Out, MarshalAs(UnmanagedType.VariantBool)] out bool pfCancel, [Out, MarshalAs(UnmanagedType.VariantBool)] out bool pfResult);

    /// <summary><para><c>NotifyNeedsFullscreen</c> method of <c>IWMPGraphEventHandler</c> interface.  </para><para>Notifies core that the content requires fullscreen mode</para></summary>
    /// <remarks><para>An original IDL definition of <c>NotifyNeedsFullscreen</c> method was the following:  <c>HRESULT NotifyNeedsFullscreen (unsigned long punkGraph)</c>;</para></remarks>
    // Notifies core that the content requires fullscreen mode
    // IDL: HRESULT NotifyNeedsFullscreen (unsigned long punkGraph);
    // VB6: Sub NotifyNeedsFullscreen (ByVal punkGraph As Long)
    [DispId(8185)]
    void NotifyNeedsFullscreen (uint punkGraph);
  }

  /// <summary><para><c>IWMPHoverPreviewDispatch</c> interface.  </para><para>IWMPHoverPreviewDispatch: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPHoverPreviewDispatch: Not Public.  Internal interface used by Windows Media Player.
  [Guid("946B023E-044C-4473-8018-74954F09DC7E")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPHoverPreviewDispatch
  {
    /// <summary><para><c>dismiss</c> method of <c>IWMPHoverPreviewDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>dismiss</c> method was the following:  <c>HRESULT dismiss (void)</c>;</para></remarks>
    // IDL: HRESULT dismiss (void);
    // VB6: Sub dismiss
    [DispId(3156)]
    void dismiss ();

    /// <summary><para><c>album</c> property of <c>IWMPHoverPreviewDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>album</c> property was the following:  <c>BSTR album</c>;</para></remarks>
    // IDL: BSTR album;
    // VB6: album As String
    string album
    {
      // IDL: HRESULT album ([out, retval] BSTR* ReturnValue);
      // VB6: Function album As String
      [DispId(3151)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>autoClick</c> property of <c>IWMPHoverPreviewDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>autoClick</c> property was the following:  <c>VARIANT_BOOL autoClick</c>;</para></remarks>
    // IDL: VARIANT_BOOL autoClick;
    // VB6: autoClick As Boolean
    bool autoClick
    {
      // IDL: HRESULT autoClick (VARIANT_BOOL value);
      // VB6: Sub autoClick (ByVal value As Boolean)
      [DispId(3155)]
      set;
    }

    /// <summary><para><c>image</c> property of <c>IWMPHoverPreviewDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>image</c> property was the following:  <c>IDispatch image</c>;</para></remarks>
    // IDL: IDispatch image;
    // VB6: image As IDispatch
    object image
    {
      // IDL: HRESULT image (IDispatch* value);
      // VB6: Sub image (ByVal value As IDispatch)
      [DispId(3152)]
      set;
    }

    /// <summary><para><c>previewClick</c> property of <c>IWMPHoverPreviewDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>previewClick</c> property was the following:  <c>VARIANT_BOOL previewClick</c>;</para></remarks>
    // IDL: VARIANT_BOOL previewClick;
    // VB6: previewClick As Boolean
    bool previewClick
    {
      // IDL: HRESULT previewClick (VARIANT_BOOL value);
      // VB6: Sub previewClick (ByVal value As Boolean)
      [DispId(3154)]
      set;
    }

    /// <summary><para><c>title</c> property of <c>IWMPHoverPreviewDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>title</c> property was the following:  <c>BSTR title</c>;</para></remarks>
    // IDL: BSTR title;
    // VB6: title As String
    string title
    {
      // IDL: HRESULT title ([out, retval] BSTR* ReturnValue);
      // VB6: Function title As String
      [DispId(3150)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>URL</c> property of <c>IWMPHoverPreviewDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>URL</c> property was the following:  <c>BSTR URL</c>;</para></remarks>
    // IDL: BSTR URL;
    // VB6: URL As String
    string URL
    {
      // IDL: HRESULT URL ([out, retval] BSTR* ReturnValue);
      // VB6: Function URL As String
      [DispId(3153)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>IWMPLayoutSettingsDispatch: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPLayoutSettingsDispatch: Not Public.  Internal interface used by Windows Media Player.
  [Guid("B2C2D18E-97AF-4B6A-A56B-2FFFF470FB81")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPLayoutSettingsDispatch
  {
    /// <summary><para><c>getNamedString</c> method of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>method getNamedString</para></summary>
    /// <remarks><para>An original IDL definition of <c>getNamedString</c> method was the following:  <c>HRESULT getNamedString (BSTR bstrName, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getNamedString
    // IDL: HRESULT getNamedString (BSTR bstrName, [out, retval] BSTR* ReturnValue);
    // VB6: Function getNamedString (ByVal bstrName As String) As String
    [DispId(2810)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getNamedString ([MarshalAs(UnmanagedType.BStr)] string bstrName);

    /// <summary><para><c>getDurationStringFromSeconds</c> method of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>method getDurationStringFromSeconds</para></summary>
    /// <remarks><para>An original IDL definition of <c>getDurationStringFromSeconds</c> method was the following:  <c>HRESULT getDurationStringFromSeconds (long lDurationVal, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getDurationStringFromSeconds
    // IDL: HRESULT getDurationStringFromSeconds (long lDurationVal, [out, retval] BSTR* ReturnValue);
    // VB6: Function getDurationStringFromSeconds (ByVal lDurationVal As Long) As String
    [DispId(2815)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getDurationStringFromSeconds (int lDurationVal);

    /// <summary><para><c>appColorAux1</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux1</c> property was the following:  <c>BSTR appColorAux1</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux1;
    // VB6: appColorAux1 As String
    string appColorAux1
    {
      // IDL: HRESULT appColorAux1 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux1 As String
      [DispId(2869)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux10</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux10</c> property was the following:  <c>BSTR appColorAux10</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux10;
    // VB6: appColorAux10 As String
    string appColorAux10
    {
      // IDL: HRESULT appColorAux10 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux10 As String
      [DispId(2878)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux11</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux11</c> property was the following:  <c>BSTR appColorAux11</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux11;
    // VB6: appColorAux11 As String
    string appColorAux11
    {
      // IDL: HRESULT appColorAux11 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux11 As String
      [DispId(2879)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux12</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux12</c> property was the following:  <c>BSTR appColorAux12</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux12;
    // VB6: appColorAux12 As String
    string appColorAux12
    {
      // IDL: HRESULT appColorAux12 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux12 As String
      [DispId(2880)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux13</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux13</c> property was the following:  <c>BSTR appColorAux13</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux13;
    // VB6: appColorAux13 As String
    string appColorAux13
    {
      // IDL: HRESULT appColorAux13 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux13 As String
      [DispId(2881)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux14</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux14</c> property was the following:  <c>BSTR appColorAux14</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux14;
    // VB6: appColorAux14 As String
    string appColorAux14
    {
      // IDL: HRESULT appColorAux14 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux14 As String
      [DispId(2882)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux15</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux15</c> property was the following:  <c>BSTR appColorAux15</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux15;
    // VB6: appColorAux15 As String
    string appColorAux15
    {
      // IDL: HRESULT appColorAux15 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux15 As String
      [DispId(2883)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux2</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux2</c> property was the following:  <c>BSTR appColorAux2</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux2;
    // VB6: appColorAux2 As String
    string appColorAux2
    {
      // IDL: HRESULT appColorAux2 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux2 As String
      [DispId(2870)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux3</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux3</c> property was the following:  <c>BSTR appColorAux3</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux3;
    // VB6: appColorAux3 As String
    string appColorAux3
    {
      // IDL: HRESULT appColorAux3 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux3 As String
      [DispId(2871)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux4</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux4</c> property was the following:  <c>BSTR appColorAux4</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux4;
    // VB6: appColorAux4 As String
    string appColorAux4
    {
      // IDL: HRESULT appColorAux4 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux4 As String
      [DispId(2872)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux5</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux5</c> property was the following:  <c>BSTR appColorAux5</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux5;
    // VB6: appColorAux5 As String
    string appColorAux5
    {
      // IDL: HRESULT appColorAux5 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux5 As String
      [DispId(2873)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux6</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux6</c> property was the following:  <c>BSTR appColorAux6</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux6;
    // VB6: appColorAux6 As String
    string appColorAux6
    {
      // IDL: HRESULT appColorAux6 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux6 As String
      [DispId(2874)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux7</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux7</c> property was the following:  <c>BSTR appColorAux7</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux7;
    // VB6: appColorAux7 As String
    string appColorAux7
    {
      // IDL: HRESULT appColorAux7 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux7 As String
      [DispId(2875)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux8</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux8</c> property was the following:  <c>BSTR appColorAux8</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux8;
    // VB6: appColorAux8 As String
    string appColorAux8
    {
      // IDL: HRESULT appColorAux8 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux8 As String
      [DispId(2876)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorAux9</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>auxiliary color</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorAux9</c> property was the following:  <c>BSTR appColorAux9</c>;</para></remarks>
    // auxiliary color
    // IDL: BSTR appColorAux9;
    // VB6: appColorAux9 As String
    string appColorAux9
    {
      // IDL: HRESULT appColorAux9 ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorAux9 As String
      [DispId(2877)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorBlackBackground</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property AppColorBlackBackground</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorBlackBackground</c> property was the following:  <c>VARIANT_BOOL appColorBlackBackground</c>;</para></remarks>
    // property AppColorBlackBackground
    // IDL: VARIANT_BOOL appColorBlackBackground;
    // VB6: appColorBlackBackground As Boolean
    bool appColorBlackBackground
    {
      // IDL: HRESULT appColorBlackBackground ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function appColorBlackBackground As Boolean
      [DispId(2854)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT appColorBlackBackground (VARIANT_BOOL value);
      // VB6: Sub appColorBlackBackground (ByVal value As Boolean)
      [DispId(2854)]
      set;
    }

    /// <summary><para><c>appColorDark</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property appColorDark</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorDark</c> property was the following:  <c>BSTR appColorDark</c>;</para></remarks>
    // property appColorDark
    // IDL: BSTR appColorDark;
    // VB6: appColorDark As String
    string appColorDark
    {
      // IDL: HRESULT appColorDark ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorDark As String
      [DispId(2849)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorLight</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property appColorLight</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorLight</c> property was the following:  <c>BSTR appColorLight</c>;</para></remarks>
    // property appColorLight
    // IDL: BSTR appColorLight;
    // VB6: appColorLight As String
    string appColorLight
    {
      // IDL: HRESULT appColorLight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorLight As String
      [DispId(2847)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorLimited</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property AppColorLimited</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorLimited</c> property was the following:  <c>VARIANT_BOOL appColorLimited</c>;</para></remarks>
    // property AppColorLimited
    // IDL: VARIANT_BOOL appColorLimited;
    // VB6: appColorLimited As Boolean
    bool appColorLimited
    {
      // IDL: HRESULT appColorLimited ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function appColorLimited As Boolean
      [DispId(2853)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>appColorMedium</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property appColorMedium</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorMedium</c> property was the following:  <c>BSTR appColorMedium</c>;</para></remarks>
    // property appColorMedium
    // IDL: BSTR appColorMedium;
    // VB6: appColorMedium As String
    string appColorMedium
    {
      // IDL: HRESULT appColorMedium ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorMedium As String
      [DispId(2848)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorVideoBorder</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property appColorVideoBorder</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorVideoBorder</c> property was the following:  <c>BSTR appColorVideoBorder</c>;</para></remarks>
    // property appColorVideoBorder
    // IDL: BSTR appColorVideoBorder;
    // VB6: appColorVideoBorder As String
    string appColorVideoBorder
    {
      // IDL: HRESULT appColorVideoBorder ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorVideoBorder As String
      [DispId(2855)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT appColorVideoBorder (BSTR value);
      // VB6: Sub appColorVideoBorder (ByVal value As String)
      [DispId(2855)]
      set;
    }

    /// <summary><para><c>backHueShift</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property backHueShift</para></summary>
    /// <remarks><para>An original IDL definition of <c>backHueShift</c> property was the following:  <c>float backHueShift</c>;</para></remarks>
    // property backHueShift
    // IDL: float backHueShift;
    // VB6: backHueShift As Single
    float backHueShift
    {
      // IDL: HRESULT backHueShift ([out, retval] float* ReturnValue);
      // VB6: Function backHueShift As Single
      [DispId(2843)]
      get;
      // IDL: HRESULT backHueShift (float value);
      // VB6: Sub backHueShift (ByVal value As Single)
      [DispId(2843)]
      set;
    }

    /// <summary><para><c>backSaturation</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property backSaturation</para></summary>
    /// <remarks><para>An original IDL definition of <c>backSaturation</c> property was the following:  <c>float backSaturation</c>;</para></remarks>
    // property backSaturation
    // IDL: float backSaturation;
    // VB6: backSaturation As Single
    float backSaturation
    {
      // IDL: HRESULT backSaturation ([out, retval] float* ReturnValue);
      // VB6: Function backSaturation As Single
      [DispId(2844)]
      get;
      // IDL: HRESULT backSaturation (float value);
      // VB6: Sub backSaturation (ByVal value As Single)
      [DispId(2844)]
      set;
    }

    /// <summary><para><c>buttonHueShift</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property buttonHueShift</para></summary>
    /// <remarks><para>An original IDL definition of <c>buttonHueShift</c> property was the following:  <c>float buttonHueShift</c>;</para></remarks>
    // property buttonHueShift
    // IDL: float buttonHueShift;
    // VB6: buttonHueShift As Single
    float buttonHueShift
    {
      // IDL: HRESULT buttonHueShift ([out, retval] float* ReturnValue);
      // VB6: Function buttonHueShift As Single
      [DispId(2841)]
      get;
      // IDL: HRESULT buttonHueShift (float value);
      // VB6: Sub buttonHueShift (ByVal value As Single)
      [DispId(2841)]
      set;
    }

    /// <summary><para><c>buttonSaturation</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property buttonSaturation</para></summary>
    /// <remarks><para>An original IDL definition of <c>buttonSaturation</c> property was the following:  <c>float buttonSaturation</c>;</para></remarks>
    // property buttonSaturation
    // IDL: float buttonSaturation;
    // VB6: buttonSaturation As Single
    float buttonSaturation
    {
      // IDL: HRESULT buttonSaturation ([out, retval] float* ReturnValue);
      // VB6: Function buttonSaturation As Single
      [DispId(2842)]
      get;
      // IDL: HRESULT buttonSaturation (float value);
      // VB6: Sub buttonSaturation (ByVal value As Single)
      [DispId(2842)]
      set;
    }

    /// <summary><para><c>captionsHeight</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property captionsHeight</para></summary>
    /// <remarks><para>An original IDL definition of <c>captionsHeight</c> property was the following:  <c>long captionsHeight</c>;</para></remarks>
    // property captionsHeight
    // IDL: long captionsHeight;
    // VB6: captionsHeight As Long
    int captionsHeight
    {
      // IDL: HRESULT captionsHeight ([out, retval] long* ReturnValue);
      // VB6: Function captionsHeight As Long
      [DispId(2865)]
      get;
      // IDL: HRESULT captionsHeight (long value);
      // VB6: Sub captionsHeight (ByVal value As Long)
      [DispId(2865)]
      set;
    }

    /// <summary><para><c>contrastMode</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property contrastMode</para></summary>
    /// <remarks><para>An original IDL definition of <c>contrastMode</c> property was the following:  <c>BSTR contrastMode</c>;</para></remarks>
    // property contrastMode
    // IDL: BSTR contrastMode;
    // VB6: contrastMode As String
    string contrastMode
    {
      // IDL: HRESULT contrastMode ([out, retval] BSTR* ReturnValue);
      // VB6: Function contrastMode As String
      [DispId(2813)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>displayPreset</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property displayPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>displayPreset</c> property was the following:  <c>long displayPreset</c>;</para></remarks>
    // property displayPreset
    // IDL: long displayPreset;
    // VB6: displayPreset As Long
    int displayPreset
    {
      // IDL: HRESULT displayPreset ([out, retval] long* ReturnValue);
      // VB6: Function displayPreset As Long
      [DispId(2831)]
      get;
      // IDL: HRESULT displayPreset (long value);
      // VB6: Sub displayPreset (ByVal value As Long)
      [DispId(2831)]
      set;
    }

    /// <summary><para><c>displayView</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property displayView</para></summary>
    /// <remarks><para>An original IDL definition of <c>displayView</c> property was the following:  <c>BSTR displayView</c>;</para></remarks>
    // property displayView
    // IDL: BSTR displayView;
    // VB6: displayView As String
    string displayView
    {
      // IDL: HRESULT displayView ([out, retval] BSTR* ReturnValue);
      // VB6: Function displayView As String
      [DispId(2816)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT displayView (BSTR value);
      // VB6: Sub displayView (ByVal value As String)
      [DispId(2816)]
      set;
    }

    /// <summary><para><c>dynamicRangeControl</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property dynamicRangeControl</para></summary>
    /// <remarks><para>An original IDL definition of <c>dynamicRangeControl</c> property was the following:  <c>long dynamicRangeControl</c>;</para></remarks>
    // property dynamicRangeControl
    // IDL: long dynamicRangeControl;
    // VB6: dynamicRangeControl As Long
    int dynamicRangeControl
    {
      // IDL: HRESULT dynamicRangeControl ([out, retval] long* ReturnValue);
      // VB6: Function dynamicRangeControl As Long
      [DispId(2838)]
      get;
      // IDL: HRESULT dynamicRangeControl (long value);
      // VB6: Sub dynamicRangeControl (ByVal value As Long)
      [DispId(2838)]
      set;
    }

    /// <summary><para><c>effectPreset</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property effectPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>effectPreset</c> property was the following:  <c>long effectPreset</c>;</para></remarks>
    // property effectPreset
    // IDL: long effectPreset;
    // VB6: effectPreset As Long
    int effectPreset
    {
      // IDL: HRESULT effectPreset ([out, retval] long* ReturnValue);
      // VB6: Function effectPreset As Long
      [DispId(2801)]
      get;
      // IDL: HRESULT effectPreset (long value);
      // VB6: Sub effectPreset (ByVal value As Long)
      [DispId(2801)]
      set;
    }

    /// <summary><para><c>effectType</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property effectType</para></summary>
    /// <remarks><para>An original IDL definition of <c>effectType</c> property was the following:  <c>BSTR effectType</c>;</para></remarks>
    // property effectType
    // IDL: BSTR effectType;
    // VB6: effectType As String
    string effectType
    {
      // IDL: HRESULT effectType ([out, retval] BSTR* ReturnValue);
      // VB6: Function effectType As String
      [DispId(2800)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT effectType (BSTR value);
      // VB6: Sub effectType (ByVal value As String)
      [DispId(2800)]
      set;
    }

    /// <summary><para><c>exclusiveHueShift</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property exclusiveHueShift</para></summary>
    /// <remarks><para>An original IDL definition of <c>exclusiveHueShift</c> property was the following:  <c>float exclusiveHueShift</c>;</para></remarks>
    // property exclusiveHueShift
    // IDL: float exclusiveHueShift;
    // VB6: exclusiveHueShift As Single
    float exclusiveHueShift
    {
      // IDL: HRESULT exclusiveHueShift ([out, retval] float* ReturnValue);
      // VB6: Function exclusiveHueShift As Single
      [DispId(2888)]
      get;
      // IDL: HRESULT exclusiveHueShift (float value);
      // VB6: Sub exclusiveHueShift (ByVal value As Single)
      [DispId(2888)]
      set;
    }

    /// <summary><para><c>exclusiveSaturation</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property exclusiveSaturation</para></summary>
    /// <remarks><para>An original IDL definition of <c>exclusiveSaturation</c> property was the following:  <c>float exclusiveSaturation</c>;</para></remarks>
    // property exclusiveSaturation
    // IDL: float exclusiveSaturation;
    // VB6: exclusiveSaturation As Single
    float exclusiveSaturation
    {
      // IDL: HRESULT exclusiveSaturation ([out, retval] float* ReturnValue);
      // VB6: Function exclusiveSaturation As Single
      [DispId(2889)]
      get;
      // IDL: HRESULT exclusiveSaturation (float value);
      // VB6: Sub exclusiveSaturation (ByVal value As Single)
      [DispId(2889)]
      set;
    }

    /// <summary><para><c>fastRate</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property fastRate</para></summary>
    /// <remarks><para>An original IDL definition of <c>fastRate</c> property was the following:  <c>float fastRate</c>;</para></remarks>
    // property fastRate
    // IDL: float fastRate;
    // VB6: fastRate As Single
    float fastRate
    {
      // IDL: HRESULT fastRate ([out, retval] float* ReturnValue);
      // VB6: Function fastRate As Single
      [DispId(2840)]
      get;
      // IDL: HRESULT fastRate (float value);
      // VB6: Sub fastRate (ByVal value As Single)
      [DispId(2840)]
      set;
    }

    /// <summary><para><c>fullScreenAvailable</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property fullScreenAvailable</para></summary>
    /// <remarks><para>An original IDL definition of <c>fullScreenAvailable</c> property was the following:  <c>VARIANT_BOOL fullScreenAvailable</c>;</para></remarks>
    // property fullScreenAvailable
    // IDL: VARIANT_BOOL fullScreenAvailable;
    // VB6: fullScreenAvailable As Boolean
    bool fullScreenAvailable
    {
      // IDL: HRESULT fullScreenAvailable ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function fullScreenAvailable As Boolean
      [DispId(2828)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT fullScreenAvailable (VARIANT_BOOL value);
      // VB6: Sub fullScreenAvailable (ByVal value As Boolean)
      [DispId(2828)]
      set;
    }

    /// <summary><para><c>fullScreenRequest</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property fullScreenRequest</para></summary>
    /// <remarks><para>An original IDL definition of <c>fullScreenRequest</c> property was the following:  <c>VARIANT_BOOL fullScreenRequest</c>;</para></remarks>
    // property fullScreenRequest
    // IDL: VARIANT_BOOL fullScreenRequest;
    // VB6: fullScreenRequest As Boolean
    bool fullScreenRequest
    {
      // IDL: HRESULT fullScreenRequest ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function fullScreenRequest As Boolean
      [DispId(2829)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT fullScreenRequest (VARIANT_BOOL value);
      // VB6: Sub fullScreenRequest (ByVal value As Boolean)
      [DispId(2829)]
      set;
    }

    /// <summary><para><c>isMultiMon</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property isMultiMon</para></summary>
    /// <remarks><para>An original IDL definition of <c>isMultiMon</c> property was the following:  <c>VARIANT_BOOL isMultiMon</c>;</para></remarks>
    // property isMultiMon
    // IDL: VARIANT_BOOL isMultiMon;
    // VB6: isMultiMon As Boolean
    bool isMultiMon
    {
      // IDL: HRESULT isMultiMon ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isMultiMon As Boolean
      [DispId(2887)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>itemErrorColor</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property itemErrorColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemErrorColor</c> property was the following:  <c>BSTR itemErrorColor</c>;</para></remarks>
    // property itemErrorColor
    // IDL: BSTR itemErrorColor;
    // VB6: itemErrorColor As String
    string itemErrorColor
    {
      // IDL: HRESULT itemErrorColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function itemErrorColor As String
      [DispId(2852)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>itemPlayingBackgroundColor</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property itemPlayingBackgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemPlayingBackgroundColor</c> property was the following:  <c>BSTR itemPlayingBackgroundColor</c>;</para></remarks>
    // property itemPlayingBackgroundColor
    // IDL: BSTR itemPlayingBackgroundColor;
    // VB6: itemPlayingBackgroundColor As String
    string itemPlayingBackgroundColor
    {
      // IDL: HRESULT itemPlayingBackgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function itemPlayingBackgroundColor As String
      [DispId(2851)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>itemPlayingColor</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property itemPlayingColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemPlayingColor</c> property was the following:  <c>BSTR itemPlayingColor</c>;</para></remarks>
    // property itemPlayingColor
    // IDL: BSTR itemPlayingColor;
    // VB6: itemPlayingColor As String
    string itemPlayingColor
    {
      // IDL: HRESULT itemPlayingColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function itemPlayingColor As String
      [DispId(2850)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>metadataHeight</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property metadataHeight</para></summary>
    /// <remarks><para>An original IDL definition of <c>metadataHeight</c> property was the following:  <c>long metadataHeight</c>;</para></remarks>
    // property metadataHeight
    // IDL: long metadataHeight;
    // VB6: metadataHeight As Long
    int metadataHeight
    {
      // IDL: HRESULT metadataHeight ([out, retval] long* ReturnValue);
      // VB6: Function metadataHeight As Long
      [DispId(2827)]
      get;
      // IDL: HRESULT metadataHeight (long value);
      // VB6: Sub metadataHeight (ByVal value As Long)
      [DispId(2827)]
      set;
    }

    /// <summary><para><c>metadataPreset</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property metadataPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>metadataPreset</c> property was the following:  <c>long metadataPreset</c>;</para></remarks>
    // property metadataPreset
    // IDL: long metadataPreset;
    // VB6: metadataPreset As Long
    int metadataPreset
    {
      // IDL: HRESULT metadataPreset ([out, retval] long* ReturnValue);
      // VB6: Function metadataPreset As Long
      [DispId(2833)]
      get;
      // IDL: HRESULT metadataPreset (long value);
      // VB6: Sub metadataPreset (ByVal value As Long)
      [DispId(2833)]
      set;
    }

    /// <summary><para><c>metadataView</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property metadataView</para></summary>
    /// <remarks><para>An original IDL definition of <c>metadataView</c> property was the following:  <c>BSTR metadataView</c>;</para></remarks>
    // property metadataView
    // IDL: BSTR metadataView;
    // VB6: metadataView As String
    string metadataView
    {
      // IDL: HRESULT metadataView ([out, retval] BSTR* ReturnValue);
      // VB6: Function metadataView As String
      [DispId(2817)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT metadataView (BSTR value);
      // VB6: Sub metadataView (ByVal value As String)
      [DispId(2817)]
      set;
    }

    /// <summary><para><c>metadataWidth</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property metadataWidth</para></summary>
    /// <remarks><para>An original IDL definition of <c>metadataWidth</c> property was the following:  <c>long metadataWidth</c>;</para></remarks>
    // property metadataWidth
    // IDL: long metadataWidth;
    // VB6: metadataWidth As Long
    int metadataWidth
    {
      // IDL: HRESULT metadataWidth ([out, retval] long* ReturnValue);
      // VB6: Function metadataWidth As Long
      [DispId(2826)]
      get;
      // IDL: HRESULT metadataWidth (long value);
      // VB6: Sub metadataWidth (ByVal value As Long)
      [DispId(2826)]
      set;
    }

    /// <summary><para><c>pinFullScreenControls</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property pinFullScreenControls</para></summary>
    /// <remarks><para>An original IDL definition of <c>pinFullScreenControls</c> property was the following:  <c>VARIANT_BOOL pinFullScreenControls</c>;</para></remarks>
    // property pinFullScreenControls
    // IDL: VARIANT_BOOL pinFullScreenControls;
    // VB6: pinFullScreenControls As Boolean
    bool pinFullScreenControls
    {
      // IDL: HRESULT pinFullScreenControls ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function pinFullScreenControls As Boolean
      [DispId(2867)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT pinFullScreenControls (VARIANT_BOOL value);
      // VB6: Sub pinFullScreenControls (ByVal value As Boolean)
      [DispId(2867)]
      set;
    }

    /// <summary><para><c>playlistHeight</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property playlistHeight</para></summary>
    /// <remarks><para>An original IDL definition of <c>playlistHeight</c> property was the following:  <c>long playlistHeight</c>;</para></remarks>
    // property playlistHeight
    // IDL: long playlistHeight;
    // VB6: playlistHeight As Long
    int playlistHeight
    {
      // IDL: HRESULT playlistHeight ([out, retval] long* ReturnValue);
      // VB6: Function playlistHeight As Long
      [DispId(2825)]
      get;
      // IDL: HRESULT playlistHeight (long value);
      // VB6: Sub playlistHeight (ByVal value As Long)
      [DispId(2825)]
      set;
    }

    /// <summary><para><c>playlistWidth</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property playlistWidth</para></summary>
    /// <remarks><para>An original IDL definition of <c>playlistWidth</c> property was the following:  <c>long playlistWidth</c>;</para></remarks>
    // property playlistWidth
    // IDL: long playlistWidth;
    // VB6: playlistWidth As Long
    int playlistWidth
    {
      // IDL: HRESULT playlistWidth ([out, retval] long* ReturnValue);
      // VB6: Function playlistWidth As Long
      [DispId(2824)]
      get;
      // IDL: HRESULT playlistWidth (long value);
      // VB6: Sub playlistWidth (ByVal value As Long)
      [DispId(2824)]
      set;
    }

    /// <summary><para><c>quickHide</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property quickHide</para></summary>
    /// <remarks><para>An original IDL definition of <c>quickHide</c> property was the following:  <c>VARIANT_BOOL quickHide</c>;</para></remarks>
    // property quickHide
    // IDL: VARIANT_BOOL quickHide;
    // VB6: quickHide As Boolean
    bool quickHide
    {
      // IDL: HRESULT quickHide ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function quickHide As Boolean
      [DispId(2830)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT quickHide (VARIANT_BOOL value);
      // VB6: Sub quickHide (ByVal value As Boolean)
      [DispId(2830)]
      set;
    }

    /// <summary><para><c>settingsHeight</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property settingsHeight</para></summary>
    /// <remarks><para>An original IDL definition of <c>settingsHeight</c> property was the following:  <c>long settingsHeight</c>;</para></remarks>
    // property settingsHeight
    // IDL: long settingsHeight;
    // VB6: settingsHeight As Long
    int settingsHeight
    {
      // IDL: HRESULT settingsHeight ([out, retval] long* ReturnValue);
      // VB6: Function settingsHeight As Long
      [DispId(2823)]
      get;
      // IDL: HRESULT settingsHeight (long value);
      // VB6: Sub settingsHeight (ByVal value As Long)
      [DispId(2823)]
      set;
    }

    /// <summary><para><c>settingsPreset</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property settingsPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>settingsPreset</c> property was the following:  <c>long settingsPreset</c>;</para></remarks>
    // property settingsPreset
    // IDL: long settingsPreset;
    // VB6: settingsPreset As Long
    int settingsPreset
    {
      // IDL: HRESULT settingsPreset ([out, retval] long* ReturnValue);
      // VB6: Function settingsPreset As Long
      [DispId(2832)]
      get;
      // IDL: HRESULT settingsPreset (long value);
      // VB6: Sub settingsPreset (ByVal value As Long)
      [DispId(2832)]
      set;
    }

    /// <summary><para><c>settingsView</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property settingsView</para></summary>
    /// <remarks><para>An original IDL definition of <c>settingsView</c> property was the following:  <c>BSTR settingsView</c>;</para></remarks>
    // property settingsView
    // IDL: BSTR settingsView;
    // VB6: settingsView As String
    string settingsView
    {
      // IDL: HRESULT settingsView ([out, retval] BSTR* ReturnValue);
      // VB6: Function settingsView As String
      [DispId(2802)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT settingsView (BSTR value);
      // VB6: Sub settingsView (ByVal value As String)
      [DispId(2802)]
      set;
    }

    /// <summary><para><c>settingsWidth</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property settingsWidth</para></summary>
    /// <remarks><para>An original IDL definition of <c>settingsWidth</c> property was the following:  <c>long settingsWidth</c>;</para></remarks>
    // property settingsWidth
    // IDL: long settingsWidth;
    // VB6: settingsWidth As Long
    int settingsWidth
    {
      // IDL: HRESULT settingsWidth ([out, retval] long* ReturnValue);
      // VB6: Function settingsWidth As Long
      [DispId(2822)]
      get;
      // IDL: HRESULT settingsWidth (long value);
      // VB6: Sub settingsWidth (ByVal value As Long)
      [DispId(2822)]
      set;
    }

    /// <summary><para><c>showCaptions</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property showCaptions</para></summary>
    /// <remarks><para>An original IDL definition of <c>showCaptions</c> property was the following:  <c>VARIANT_BOOL showCaptions</c>;</para></remarks>
    // property showCaptions
    // IDL: VARIANT_BOOL showCaptions;
    // VB6: showCaptions As Boolean
    bool showCaptions
    {
      // IDL: HRESULT showCaptions ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function showCaptions As Boolean
      [DispId(2807)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT showCaptions (VARIANT_BOOL value);
      // VB6: Sub showCaptions (ByVal value As Boolean)
      [DispId(2807)]
      set;
    }

    /// <summary><para><c>showEffects</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property showEffects</para></summary>
    /// <remarks><para>An original IDL definition of <c>showEffects</c> property was the following:  <c>VARIANT_BOOL showEffects</c>;</para></remarks>
    // property showEffects
    // IDL: VARIANT_BOOL showEffects;
    // VB6: showEffects As Boolean
    bool showEffects
    {
      // IDL: HRESULT showEffects ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function showEffects As Boolean
      [DispId(2809)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT showEffects (VARIANT_BOOL value);
      // VB6: Sub showEffects (ByVal value As Boolean)
      [DispId(2809)]
      set;
    }

    /// <summary><para><c>showFullScreenPlaylist</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property showFullScreenPlaylist</para></summary>
    /// <remarks><para>An original IDL definition of <c>showFullScreenPlaylist</c> property was the following:  <c>VARIANT_BOOL showFullScreenPlaylist</c>;</para></remarks>
    // property showFullScreenPlaylist
    // IDL: VARIANT_BOOL showFullScreenPlaylist;
    // VB6: showFullScreenPlaylist As Boolean
    bool showFullScreenPlaylist
    {
      // IDL: HRESULT showFullScreenPlaylist ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function showFullScreenPlaylist As Boolean
      [DispId(2811)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT showFullScreenPlaylist (VARIANT_BOOL value);
      // VB6: Sub showFullScreenPlaylist (ByVal value As Boolean)
      [DispId(2811)]
      set;
    }

    /// <summary><para><c>showMetadata</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property showMetadata</para></summary>
    /// <remarks><para>An original IDL definition of <c>showMetadata</c> property was the following:  <c>VARIANT_BOOL showMetadata</c>;</para></remarks>
    // property showMetadata
    // IDL: VARIANT_BOOL showMetadata;
    // VB6: showMetadata As Boolean
    bool showMetadata
    {
      // IDL: HRESULT showMetadata ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function showMetadata As Boolean
      [DispId(2821)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT showMetadata (VARIANT_BOOL value);
      // VB6: Sub showMetadata (ByVal value As Boolean)
      [DispId(2821)]
      set;
    }

    /// <summary><para><c>showPlaylist</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property showPlaylist</para></summary>
    /// <remarks><para>An original IDL definition of <c>showPlaylist</c> property was the following:  <c>VARIANT_BOOL showPlaylist</c>;</para></remarks>
    // property showPlaylist
    // IDL: VARIANT_BOOL showPlaylist;
    // VB6: showPlaylist As Boolean
    bool showPlaylist
    {
      // IDL: HRESULT showPlaylist ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function showPlaylist As Boolean
      [DispId(2820)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT showPlaylist (VARIANT_BOOL value);
      // VB6: Sub showPlaylist (ByVal value As Boolean)
      [DispId(2820)]
      set;
    }

    /// <summary><para><c>showResizeBars</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property showResizeBars</para></summary>
    /// <remarks><para>An original IDL definition of <c>showResizeBars</c> property was the following:  <c>VARIANT_BOOL showResizeBars</c>;</para></remarks>
    // property showResizeBars
    // IDL: VARIANT_BOOL showResizeBars;
    // VB6: showResizeBars As Boolean
    bool showResizeBars
    {
      // IDL: HRESULT showResizeBars ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function showResizeBars As Boolean
      [DispId(2819)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT showResizeBars (VARIANT_BOOL value);
      // VB6: Sub showResizeBars (ByVal value As Boolean)
      [DispId(2819)]
      set;
    }

    /// <summary><para><c>showSettings</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property showSettings</para></summary>
    /// <remarks><para>An original IDL definition of <c>showSettings</c> property was the following:  <c>VARIANT_BOOL showSettings</c>;</para></remarks>
    // property showSettings
    // IDL: VARIANT_BOOL showSettings;
    // VB6: showSettings As Boolean
    bool showSettings
    {
      // IDL: HRESULT showSettings ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function showSettings As Boolean
      [DispId(2818)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT showSettings (VARIANT_BOOL value);
      // VB6: Sub showSettings (ByVal value As Boolean)
      [DispId(2818)]
      set;
    }

    /// <summary><para><c>showTitles</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property showTitles</para></summary>
    /// <remarks><para>An original IDL definition of <c>showTitles</c> property was the following:  <c>VARIANT_BOOL showTitles</c>;</para></remarks>
    // property showTitles
    // IDL: VARIANT_BOOL showTitles;
    // VB6: showTitles As Boolean
    bool showTitles
    {
      // IDL: HRESULT showTitles ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function showTitles As Boolean
      [DispId(2808)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT showTitles (VARIANT_BOOL value);
      // VB6: Sub showTitles (ByVal value As Boolean)
      [DispId(2808)]
      set;
    }

    /// <summary><para><c>slowRate</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property slowRate</para></summary>
    /// <remarks><para>An original IDL definition of <c>slowRate</c> property was the following:  <c>float slowRate</c>;</para></remarks>
    // property slowRate
    // IDL: float slowRate;
    // VB6: slowRate As Single
    float slowRate
    {
      // IDL: HRESULT slowRate ([out, retval] float* ReturnValue);
      // VB6: Function slowRate As Single
      [DispId(2839)]
      get;
      // IDL: HRESULT slowRate (float value);
      // VB6: Sub slowRate (ByVal value As Single)
      [DispId(2839)]
      set;
    }

    /// <summary><para><c>snapToVideo</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property snapToVideo</para></summary>
    /// <remarks><para>An original IDL definition of <c>snapToVideo</c> property was the following:  <c>VARIANT_BOOL snapToVideo</c>;</para></remarks>
    // property snapToVideo
    // IDL: VARIANT_BOOL snapToVideo;
    // VB6: snapToVideo As Boolean
    bool snapToVideo
    {
      // IDL: HRESULT snapToVideo ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function snapToVideo As Boolean
      [DispId(2866)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT snapToVideo (VARIANT_BOOL value);
      // VB6: Sub snapToVideo (ByVal value As Boolean)
      [DispId(2866)]
      set;
    }

    /// <summary><para><c>status</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>status string for remote player (taskbar player)</para></summary>
    /// <remarks><para>An original IDL definition of <c>status</c> property was the following:  <c>BSTR status</c>;</para></remarks>
    // status string for remote player (taskbar player)
    // IDL: BSTR status;
    // VB6: status As String
    string status
    {
      // IDL: HRESULT status ([out, retval] BSTR* ReturnValue);
      // VB6: Function status As String
      [DispId(2884)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT status (BSTR value);
      // VB6: Sub status (ByVal value As String)
      [DispId(2884)]
      set;
    }

    /// <summary><para><c>themeBkgColorActive</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>themeBkgColorActive</para></summary>
    /// <remarks><para>An original IDL definition of <c>themeBkgColorActive</c> property was the following:  <c>BSTR themeBkgColorActive</c>;</para></remarks>
    // themeBkgColorActive
    // IDL: BSTR themeBkgColorActive;
    // VB6: themeBkgColorActive As String
    string themeBkgColorActive
    {
      // IDL: HRESULT themeBkgColorActive ([out, retval] BSTR* ReturnValue);
      // VB6: Function themeBkgColorActive As String
      [DispId(2890)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>themeBkgColorInactive</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>themeBkgColorInactive</para></summary>
    /// <remarks><para>An original IDL definition of <c>themeBkgColorInactive</c> property was the following:  <c>BSTR themeBkgColorInactive</c>;</para></remarks>
    // themeBkgColorInactive
    // IDL: BSTR themeBkgColorInactive;
    // VB6: themeBkgColorInactive As String
    string themeBkgColorInactive
    {
      // IDL: HRESULT themeBkgColorInactive ([out, retval] BSTR* ReturnValue);
      // VB6: Function themeBkgColorInactive As String
      [DispId(2891)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>themeBkgColorIsActive</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>themeBkgColorIsActive</para></summary>
    /// <remarks><para>An original IDL definition of <c>themeBkgColorIsActive</c> property was the following:  <c>VARIANT_BOOL themeBkgColorIsActive</c>;</para></remarks>
    // themeBkgColorIsActive
    // IDL: VARIANT_BOOL themeBkgColorIsActive;
    // VB6: themeBkgColorIsActive As Boolean
    bool themeBkgColorIsActive
    {
      // IDL: HRESULT themeBkgColorIsActive ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function themeBkgColorIsActive As Boolean
      [DispId(2892)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT themeBkgColorIsActive (VARIANT_BOOL value);
      // VB6: Sub themeBkgColorIsActive (ByVal value As Boolean)
      [DispId(2892)]
      set;
    }

    /// <summary><para><c>toolbarButtonFace</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property toolbarButtonFace</para></summary>
    /// <remarks><para>An original IDL definition of <c>toolbarButtonFace</c> property was the following:  <c>BSTR toolbarButtonFace</c>;</para></remarks>
    // property toolbarButtonFace
    // IDL: BSTR toolbarButtonFace;
    // VB6: toolbarButtonFace As String
    string toolbarButtonFace
    {
      // IDL: HRESULT toolbarButtonFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function toolbarButtonFace As String
      [DispId(2858)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>toolbarButtonHighlight</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property toolbarButtonHighlight</para></summary>
    /// <remarks><para>An original IDL definition of <c>toolbarButtonHighlight</c> property was the following:  <c>BSTR toolbarButtonHighlight</c>;</para></remarks>
    // property toolbarButtonHighlight
    // IDL: BSTR toolbarButtonHighlight;
    // VB6: toolbarButtonHighlight As String
    string toolbarButtonHighlight
    {
      // IDL: HRESULT toolbarButtonHighlight ([out, retval] BSTR* ReturnValue);
      // VB6: Function toolbarButtonHighlight As String
      [DispId(2856)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>toolbarButtonShadow</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property toolbarButtonShadow</para></summary>
    /// <remarks><para>An original IDL definition of <c>toolbarButtonShadow</c> property was the following:  <c>BSTR toolbarButtonShadow</c>;</para></remarks>
    // property toolbarButtonShadow
    // IDL: BSTR toolbarButtonShadow;
    // VB6: toolbarButtonShadow As String
    string toolbarButtonShadow
    {
      // IDL: HRESULT toolbarButtonShadow ([out, retval] BSTR* ReturnValue);
      // VB6: Function toolbarButtonShadow As String
      [DispId(2857)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>userDisplayPreset</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property userDisplayPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>userDisplayPreset</c> property was the following:  <c>long userDisplayPreset</c>;</para></remarks>
    // property userDisplayPreset
    // IDL: long userDisplayPreset;
    // VB6: userDisplayPreset As Long
    int userDisplayPreset
    {
      // IDL: HRESULT userDisplayPreset ([out, retval] long* ReturnValue);
      // VB6: Function userDisplayPreset As Long
      [DispId(2836)]
      get;
    }

    /// <summary><para><c>userDisplayView</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property userDisplayView</para></summary>
    /// <remarks><para>An original IDL definition of <c>userDisplayView</c> property was the following:  <c>BSTR userDisplayView</c>;</para></remarks>
    // property userDisplayView
    // IDL: BSTR userDisplayView;
    // VB6: userDisplayView As String
    string userDisplayView
    {
      // IDL: HRESULT userDisplayView ([out, retval] BSTR* ReturnValue);
      // VB6: Function userDisplayView As String
      [DispId(2834)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>userVideoStretchToFit</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property userVideoStretchToFit</para></summary>
    /// <remarks><para>An original IDL definition of <c>userVideoStretchToFit</c> property was the following:  <c>VARIANT_BOOL userVideoStretchToFit</c>;</para></remarks>
    // property userVideoStretchToFit
    // IDL: VARIANT_BOOL userVideoStretchToFit;
    // VB6: userVideoStretchToFit As Boolean
    bool userVideoStretchToFit
    {
      // IDL: HRESULT userVideoStretchToFit ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function userVideoStretchToFit As Boolean
      [DispId(2868)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT userVideoStretchToFit (VARIANT_BOOL value);
      // VB6: Sub userVideoStretchToFit (ByVal value As Boolean)
      [DispId(2868)]
      set;
    }

    /// <summary><para><c>userWMPDisplayPreset</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property userWMPDisplayPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>userWMPDisplayPreset</c> property was the following:  <c>long userWMPDisplayPreset</c>;</para></remarks>
    // property userWMPDisplayPreset
    // IDL: long userWMPDisplayPreset;
    // VB6: userWMPDisplayPreset As Long
    int userWMPDisplayPreset
    {
      // IDL: HRESULT userWMPDisplayPreset ([out, retval] long* ReturnValue);
      // VB6: Function userWMPDisplayPreset As Long
      [DispId(2837)]
      get;
    }

    /// <summary><para><c>userWMPDisplayView</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property userWMPDisplayView</para></summary>
    /// <remarks><para>An original IDL definition of <c>userWMPDisplayView</c> property was the following:  <c>BSTR userWMPDisplayView</c>;</para></remarks>
    // property userWMPDisplayView
    // IDL: BSTR userWMPDisplayView;
    // VB6: userWMPDisplayView As String
    string userWMPDisplayView
    {
      // IDL: HRESULT userWMPDisplayView ([out, retval] BSTR* ReturnValue);
      // VB6: Function userWMPDisplayView As String
      [DispId(2835)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>userWMPMetadataPreset</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property userWMPMetadataPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>userWMPMetadataPreset</c> property was the following:  <c>long userWMPMetadataPreset</c>;</para></remarks>
    // property userWMPMetadataPreset
    // IDL: long userWMPMetadataPreset;
    // VB6: userWMPMetadataPreset As Long
    int userWMPMetadataPreset
    {
      // IDL: HRESULT userWMPMetadataPreset ([out, retval] long* ReturnValue);
      // VB6: Function userWMPMetadataPreset As Long
      [DispId(2863)]
      get;
    }

    /// <summary><para><c>userWMPMetadataView</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property userWMPMetadataView</para></summary>
    /// <remarks><para>An original IDL definition of <c>userWMPMetadataView</c> property was the following:  <c>BSTR userWMPMetadataView</c>;</para></remarks>
    // property userWMPMetadataView
    // IDL: BSTR userWMPMetadataView;
    // VB6: userWMPMetadataView As String
    string userWMPMetadataView
    {
      // IDL: HRESULT userWMPMetadataView ([out, retval] BSTR* ReturnValue);
      // VB6: Function userWMPMetadataView As String
      [DispId(2862)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>userWMPSettingsPreset</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property userWMPSettingsPreset</para></summary>
    /// <remarks><para>An original IDL definition of <c>userWMPSettingsPreset</c> property was the following:  <c>long userWMPSettingsPreset</c>;</para></remarks>
    // property userWMPSettingsPreset
    // IDL: long userWMPSettingsPreset;
    // VB6: userWMPSettingsPreset As Long
    int userWMPSettingsPreset
    {
      // IDL: HRESULT userWMPSettingsPreset ([out, retval] long* ReturnValue);
      // VB6: Function userWMPSettingsPreset As Long
      [DispId(2860)]
      get;
    }

    /// <summary><para><c>userWMPSettingsView</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property userWMPSettingsView</para></summary>
    /// <remarks><para>An original IDL definition of <c>userWMPSettingsView</c> property was the following:  <c>BSTR userWMPSettingsView</c>;</para></remarks>
    // property userWMPSettingsView
    // IDL: BSTR userWMPSettingsView;
    // VB6: userWMPSettingsView As String
    string userWMPSettingsView
    {
      // IDL: HRESULT userWMPSettingsView ([out, retval] BSTR* ReturnValue);
      // VB6: Function userWMPSettingsView As String
      [DispId(2859)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>userWMPShowMetadata</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property userWMPShowMetadata</para></summary>
    /// <remarks><para>An original IDL definition of <c>userWMPShowMetadata</c> property was the following:  <c>VARIANT_BOOL userWMPShowMetadata</c>;</para></remarks>
    // property userWMPShowMetadata
    // IDL: VARIANT_BOOL userWMPShowMetadata;
    // VB6: userWMPShowMetadata As Boolean
    bool userWMPShowMetadata
    {
      // IDL: HRESULT userWMPShowMetadata ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function userWMPShowMetadata As Boolean
      [DispId(2864)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>userWMPShowSettings</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property userWMPShowSettings</para></summary>
    /// <remarks><para>An original IDL definition of <c>userWMPShowSettings</c> property was the following:  <c>VARIANT_BOOL userWMPShowSettings</c>;</para></remarks>
    // property userWMPShowSettings
    // IDL: VARIANT_BOOL userWMPShowSettings;
    // VB6: userWMPShowSettings As Boolean
    bool userWMPShowSettings
    {
      // IDL: HRESULT userWMPShowSettings ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function userWMPShowSettings As Boolean
      [DispId(2861)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>videoShrinkToFit</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property videoShrinkToFit</para></summary>
    /// <remarks><para>An original IDL definition of <c>videoShrinkToFit</c> property was the following:  <c>VARIANT_BOOL videoShrinkToFit</c>;</para></remarks>
    // property videoShrinkToFit
    // IDL: VARIANT_BOOL videoShrinkToFit;
    // VB6: videoShrinkToFit As Boolean
    bool videoShrinkToFit
    {
      // IDL: HRESULT videoShrinkToFit ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function videoShrinkToFit As Boolean
      [DispId(2804)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT videoShrinkToFit (VARIANT_BOOL value);
      // VB6: Sub videoShrinkToFit (ByVal value As Boolean)
      [DispId(2804)]
      set;
    }

    /// <summary><para><c>videoStretchToFit</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property videoStretchToFit</para></summary>
    /// <remarks><para>An original IDL definition of <c>videoStretchToFit</c> property was the following:  <c>VARIANT_BOOL videoStretchToFit</c>;</para></remarks>
    // property videoStretchToFit
    // IDL: VARIANT_BOOL videoStretchToFit;
    // VB6: videoStretchToFit As Boolean
    bool videoStretchToFit
    {
      // IDL: HRESULT videoStretchToFit ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function videoStretchToFit As Boolean
      [DispId(2805)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT videoStretchToFit (VARIANT_BOOL value);
      // VB6: Sub videoStretchToFit (ByVal value As Boolean)
      [DispId(2805)]
      set;
    }

    /// <summary><para><c>videoZoom</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property videoZoom</para></summary>
    /// <remarks><para>An original IDL definition of <c>videoZoom</c> property was the following:  <c>long videoZoom</c>;</para></remarks>
    // property videoZoom
    // IDL: long videoZoom;
    // VB6: videoZoom As Long
    int videoZoom
    {
      // IDL: HRESULT videoZoom ([out, retval] long* ReturnValue);
      // VB6: Function videoZoom As Long
      [DispId(2803)]
      get;
      // IDL: HRESULT videoZoom (long value);
      // VB6: Sub videoZoom (ByVal value As Long)
      [DispId(2803)]
      set;
    }

    /// <summary><para><c>vizRequest</c> property of <c>IWMPLayoutSettingsDispatch</c> interface.  </para><para>property vizRequest</para></summary>
    /// <remarks><para>An original IDL definition of <c>vizRequest</c> property was the following:  <c>long vizRequest</c>;</para></remarks>
    // property vizRequest
    // IDL: long vizRequest;
    // VB6: vizRequest As Long
    int vizRequest
    {
      // IDL: HRESULT vizRequest ([out, retval] long* ReturnValue);
      // VB6: Function vizRequest As Long
      [DispId(2845)]
      get;
      // IDL: HRESULT vizRequest (long value);
      // VB6: Sub vizRequest (ByVal value As Long)
      [DispId(2845)]
      set;
    }
  }

  /// <summary><para><c>IWMPLayoutSubView</c> interface.  </para><para>IWMPLayoutSubView: Public interface for skin object model.</para></summary>
  // IWMPLayoutSubView: Public interface for skin object model.
  [Guid("72F486B1-0D43-11D3-BD3F-00C04F6EA5AE")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPLayoutSubView
  {
    /// <summary><para><c>moveTo</c> method of <c>IWMPLayoutSubView</c> interface.  </para><para>method moveTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>moveTo</c> method was the following:  <c>HRESULT moveTo (long newX, long newY, long moveTime)</c>;</para></remarks>
    // method moveTo
    // IDL: HRESULT moveTo (long newX, long newY, long moveTime);
    // VB6: Sub moveTo (ByVal newX As Long, ByVal newY As Long, ByVal moveTime As Long)
    [DispId(2015)]
    void moveTo (int newX, int newY, int moveTime);

    /// <summary><para><c>slideTo</c> method of <c>IWMPLayoutSubView</c> interface.  </para><para>method slideTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>slideTo</c> method was the following:  <c>HRESULT slideTo (long newX, long newY, long moveTime)</c>;</para></remarks>
    // method slideTo
    // IDL: HRESULT slideTo (long newX, long newY, long moveTime);
    // VB6: Sub slideTo (ByVal newX As Long, ByVal newY As Long, ByVal moveTime As Long)
    [DispId(2021)]
    void slideTo (int newX, int newY, int moveTime);

    /// <summary><para><c>moveSizeTo</c> method of <c>IWMPLayoutSubView</c> interface.  </para><para>method moveSizeTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>moveSizeTo</c> method was the following:  <c>HRESULT moveSizeTo (long newX, long newY, long newWidth, long newHeight, long moveTime, VARIANT_BOOL fSlide)</c>;</para></remarks>
    // method moveSizeTo
    // IDL: HRESULT moveSizeTo (long newX, long newY, long newWidth, long newHeight, long moveTime, VARIANT_BOOL fSlide);
    // VB6: Sub moveSizeTo (ByVal newX As Long, ByVal newY As Long, ByVal newWidth As Long, ByVal newHeight As Long, ByVal moveTime As Long, ByVal fSlide As Boolean)
    [DispId(2026)]
    void moveSizeTo (int newX, int newY, int newWidth, int newHeight, int moveTime, [MarshalAs(UnmanagedType.VariantBool)] bool fSlide);

    /// <summary><para><c>alphaBlendTo</c> method of <c>IWMPLayoutSubView</c> interface.  </para><para>method alphaBlendTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>alphaBlendTo</c> method was the following:  <c>HRESULT alphaBlendTo (long newVal, long alphaTime)</c>;</para></remarks>
    // method alphaBlendTo
    // IDL: HRESULT alphaBlendTo (long newVal, long alphaTime);
    // VB6: Sub alphaBlendTo (ByVal newVal As Long, ByVal alphaTime As Long)
    [DispId(2017)]
    void alphaBlendTo (int newVal, int alphaTime);

    /// <summary><para><c>accDescription</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property accDescription</para></summary>
    /// <remarks><para>An original IDL definition of <c>accDescription</c> property was the following:  <c>BSTR accDescription</c>;</para></remarks>
    // property accDescription
    // IDL: BSTR accDescription;
    // VB6: accDescription As String
    string accDescription
    {
      // IDL: HRESULT accDescription ([out, retval] BSTR* ReturnValue);
      // VB6: Function accDescription As String
      [DispId(2019)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accDescription (BSTR value);
      // VB6: Sub accDescription (ByVal value As String)
      [DispId(2019)]
      set;
    }

    /// <summary><para><c>accKeyboardShortcut</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property accKeyboardShortcut	</para></summary>
    /// <remarks><para>An original IDL definition of <c>accKeyboardShortcut</c> property was the following:  <c>BSTR accKeyboardShortcut</c>;</para></remarks>
    // property accKeyboardShortcut	
    // IDL: BSTR accKeyboardShortcut;
    // VB6: accKeyboardShortcut As String
    string accKeyboardShortcut
    {
      // IDL: HRESULT accKeyboardShortcut ([out, retval] BSTR* ReturnValue);
      // VB6: Function accKeyboardShortcut As String
      [DispId(2020)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accKeyboardShortcut (BSTR value);
      // VB6: Sub accKeyboardShortcut (ByVal value As String)
      [DispId(2020)]
      set;
    }

    /// <summary><para><c>accName</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property accName</para></summary>
    /// <remarks><para>An original IDL definition of <c>accName</c> property was the following:  <c>BSTR accName</c>;</para></remarks>
    // property accName
    // IDL: BSTR accName;
    // VB6: accName As String
    string accName
    {
      // IDL: HRESULT accName ([out, retval] BSTR* ReturnValue);
      // VB6: Function accName As String
      [DispId(2018)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accName (BSTR value);
      // VB6: Sub accName (ByVal value As String)
      [DispId(2018)]
      set;
    }

    /// <summary><para><c>alphaBlend</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property alphaBlend</para></summary>
    /// <remarks><para>An original IDL definition of <c>alphaBlend</c> property was the following:  <c>long alphaBlend</c>;</para></remarks>
    // property alphaBlend
    // IDL: long alphaBlend;
    // VB6: alphaBlend As Long
    int alphaBlend
    {
      // IDL: HRESULT alphaBlend ([out, retval] long* ReturnValue);
      // VB6: Function alphaBlend As Long
      [DispId(2016)]
      get;
      // IDL: HRESULT alphaBlend (long value);
      // VB6: Sub alphaBlend (ByVal value As Long)
      [DispId(2016)]
      set;
    }

    /// <summary><para><c>backgroundColor</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property backgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // property backgroundColor
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(2301)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundColor (BSTR value);
      // VB6: Sub backgroundColor (ByVal value As String)
      [DispId(2301)]
      set;
    }

    /// <summary><para><c>backgroundImage</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property backgroundImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundImage</c> property was the following:  <c>BSTR backgroundImage</c>;</para></remarks>
    // property backgroundImage
    // IDL: BSTR backgroundImage;
    // VB6: backgroundImage As String
    string backgroundImage
    {
      // IDL: HRESULT backgroundImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundImage As String
      [DispId(2302)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundImage (BSTR value);
      // VB6: Sub backgroundImage (ByVal value As String)
      [DispId(2302)]
      set;
    }

    /// <summary><para><c>backgroundImageHueShift</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property hueShift</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundImageHueShift</c> property was the following:  <c>float backgroundImageHueShift</c>;</para></remarks>
    // property hueShift
    // IDL: float backgroundImageHueShift;
    // VB6: backgroundImageHueShift As Single
    float backgroundImageHueShift
    {
      // IDL: HRESULT backgroundImageHueShift ([out, retval] float* ReturnValue);
      // VB6: Function backgroundImageHueShift As Single
      [DispId(2304)]
      get;
      // IDL: HRESULT backgroundImageHueShift (float value);
      // VB6: Sub backgroundImageHueShift (ByVal value As Single)
      [DispId(2304)]
      set;
    }

    /// <summary><para><c>backgroundImageSaturation</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property saturation</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundImageSaturation</c> property was the following:  <c>float backgroundImageSaturation</c>;</para></remarks>
    // property saturation
    // IDL: float backgroundImageSaturation;
    // VB6: backgroundImageSaturation As Single
    float backgroundImageSaturation
    {
      // IDL: HRESULT backgroundImageSaturation ([out, retval] float* ReturnValue);
      // VB6: Function backgroundImageSaturation As Single
      [DispId(2305)]
      get;
      // IDL: HRESULT backgroundImageSaturation (float value);
      // VB6: Sub backgroundImageSaturation (ByVal value As Single)
      [DispId(2305)]
      set;
    }

    /// <summary><para><c>backgroundTiled</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property backgroundTiled</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundTiled</c> property was the following:  <c>VARIANT_BOOL backgroundTiled</c>;</para></remarks>
    // property backgroundTiled
    // IDL: VARIANT_BOOL backgroundTiled;
    // VB6: backgroundTiled As Boolean
    bool backgroundTiled
    {
      // IDL: HRESULT backgroundTiled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function backgroundTiled As Boolean
      [DispId(2303)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT backgroundTiled (VARIANT_BOOL value);
      // VB6: Sub backgroundTiled (ByVal value As Boolean)
      [DispId(2303)]
      set;
    }

    /// <summary><para><c>bottom</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property bottom</para></summary>
    /// <remarks><para>An original IDL definition of <c>bottom</c> property was the following:  <c>long bottom</c>;</para></remarks>
    // property bottom
    // IDL: long bottom;
    // VB6: bottom As Long
    int bottom
    {
      // IDL: HRESULT bottom ([out, retval] long* ReturnValue);
      // VB6: Function bottom As Long
      [DispId(2023)]
      get;
      // IDL: HRESULT bottom (long value);
      // VB6: Sub bottom (ByVal value As Long)
      [DispId(2023)]
      set;
    }

    /// <summary><para><c>clippingColor</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property clippingColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>clippingColor</c> property was the following:  <c>BSTR clippingColor</c>;</para></remarks>
    // property clippingColor
    // IDL: BSTR clippingColor;
    // VB6: clippingColor As String
    string clippingColor
    {
      // IDL: HRESULT clippingColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function clippingColor As String
      [DispId(2008)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT clippingColor (BSTR value);
      // VB6: Sub clippingColor (ByVal value As String)
      [DispId(2008)]
      set;
    }

    /// <summary><para><c>clippingImage</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property clippingImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>clippingImage</c> property was the following:  <c>BSTR clippingImage</c>;</para></remarks>
    // property clippingImage
    // IDL: BSTR clippingImage;
    // VB6: clippingImage As String
    string clippingImage
    {
      // IDL: HRESULT clippingImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function clippingImage As String
      [DispId(2007)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT clippingImage (BSTR value);
      // VB6: Sub clippingImage (ByVal value As String)
      [DispId(2007)]
      set;
    }

    /// <summary><para><c>elementType</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property elementType</para></summary>
    /// <remarks><para>An original IDL definition of <c>elementType</c> property was the following:  <c>BSTR elementType</c>;</para></remarks>
    // property elementType
    // IDL: BSTR elementType;
    // VB6: elementType As String
    string elementType
    {
      // IDL: HRESULT elementType ([out, retval] BSTR* ReturnValue);
      // VB6: Function elementType As String
      [DispId(2001)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>enabled</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property enabled</para></summary>
    /// <remarks><para>An original IDL definition of <c>enabled</c> property was the following:  <c>VARIANT_BOOL enabled</c>;</para></remarks>
    // property enabled
    // IDL: VARIANT_BOOL enabled;
    // VB6: enabled As Boolean
    bool enabled
    {
      // IDL: HRESULT enabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enabled As Boolean
      [DispId(2010)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enabled (VARIANT_BOOL value);
      // VB6: Sub enabled (ByVal value As Boolean)
      [DispId(2010)]
      set;
    }

    /// <summary><para><c>height</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property height</para></summary>
    /// <remarks><para>An original IDL definition of <c>height</c> property was the following:  <c>long height</c>;</para></remarks>
    // property height
    // IDL: long height;
    // VB6: height As Long
    int height
    {
      // IDL: HRESULT height ([out, retval] long* ReturnValue);
      // VB6: Function height As Long
      [DispId(2005)]
      get;
      // IDL: HRESULT height (long value);
      // VB6: Sub height (ByVal value As Long)
      [DispId(2005)]
      set;
    }

    /// <summary><para><c>horizontalAlignment</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property horizontalAlignment</para></summary>
    /// <remarks><para>An original IDL definition of <c>horizontalAlignment</c> property was the following:  <c>BSTR horizontalAlignment</c>;</para></remarks>
    // property horizontalAlignment
    // IDL: BSTR horizontalAlignment;
    // VB6: horizontalAlignment As String
    string horizontalAlignment
    {
      // IDL: HRESULT horizontalAlignment ([out, retval] BSTR* ReturnValue);
      // VB6: Function horizontalAlignment As String
      [DispId(2013)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT horizontalAlignment (BSTR value);
      // VB6: Sub horizontalAlignment (ByVal value As String)
      [DispId(2013)]
      set;
    }

    /// <summary><para><c>ID</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property id</para></summary>
    /// <remarks><para>An original IDL definition of <c>ID</c> property was the following:  <c>BSTR ID</c>;</para></remarks>
    // property id
    // IDL: BSTR ID;
    // VB6: ID As String
    string ID
    {
      // IDL: HRESULT ID ([out, retval] BSTR* ReturnValue);
      // VB6: Function ID As String
      [DispId(2000)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>left</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property left</para></summary>
    /// <remarks><para>An original IDL definition of <c>left</c> property was the following:  <c>long left</c>;</para></remarks>
    // property left
    // IDL: long left;
    // VB6: left As Long
    int left
    {
      // IDL: HRESULT left ([out, retval] long* ReturnValue);
      // VB6: Function left As Long
      [DispId(2002)]
      get;
      // IDL: HRESULT left (long value);
      // VB6: Sub left (ByVal value As Long)
      [DispId(2002)]
      set;
    }

    /// <summary><para><c>nineGridMargins</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property nineGridMargins</para></summary>
    /// <remarks><para>An original IDL definition of <c>nineGridMargins</c> property was the following:  <c>BSTR nineGridMargins</c>;</para></remarks>
    // property nineGridMargins
    // IDL: BSTR nineGridMargins;
    // VB6: nineGridMargins As String
    string nineGridMargins
    {
      // IDL: HRESULT nineGridMargins ([out, retval] BSTR* ReturnValue);
      // VB6: Function nineGridMargins As String
      [DispId(2025)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT nineGridMargins (BSTR value);
      // VB6: Sub nineGridMargins (ByVal value As String)
      [DispId(2025)]
      set;
    }

    /// <summary><para><c>passThrough</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property passThrough</para></summary>
    /// <remarks><para>An original IDL definition of <c>passThrough</c> property was the following:  <c>VARIANT_BOOL passThrough</c>;</para></remarks>
    // property passThrough
    // IDL: VARIANT_BOOL passThrough;
    // VB6: passThrough As Boolean
    bool passThrough
    {
      // IDL: HRESULT passThrough ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function passThrough As Boolean
      [DispId(2012)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT passThrough (VARIANT_BOOL value);
      // VB6: Sub passThrough (ByVal value As Boolean)
      [DispId(2012)]
      set;
    }

    /// <summary><para><c>resizeBackgroundImage</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property resizeBackgroundImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>resizeBackgroundImage</c> property was the following:  <c>VARIANT_BOOL resizeBackgroundImage</c>;</para></remarks>
    // property resizeBackgroundImage
    // IDL: VARIANT_BOOL resizeBackgroundImage;
    // VB6: resizeBackgroundImage As Boolean
    bool resizeBackgroundImage
    {
      // IDL: HRESULT resizeBackgroundImage ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function resizeBackgroundImage As Boolean
      [DispId(2306)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT resizeBackgroundImage (VARIANT_BOOL value);
      // VB6: Sub resizeBackgroundImage (ByVal value As Boolean)
      [DispId(2306)]
      set;
    }

    /// <summary><para><c>resizeImages</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property resizeImages</para></summary>
    /// <remarks><para>An original IDL definition of <c>resizeImages</c> property was the following:  <c>VARIANT_BOOL resizeImages</c>;</para></remarks>
    // property resizeImages
    // IDL: VARIANT_BOOL resizeImages;
    // VB6: resizeImages As Boolean
    bool resizeImages
    {
      // IDL: HRESULT resizeImages ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function resizeImages As Boolean
      [DispId(2024)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT resizeImages (VARIANT_BOOL value);
      // VB6: Sub resizeImages (ByVal value As Boolean)
      [DispId(2024)]
      set;
    }

    /// <summary><para><c>resizeOptimize</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property resizeOptimize</para></summary>
    /// <remarks><para>An original IDL definition of <c>resizeOptimize</c> property was the following:  <c>BSTR resizeOptimize</c>;</para></remarks>
    // property resizeOptimize
    // IDL: BSTR resizeOptimize;
    // VB6: resizeOptimize As String
    string resizeOptimize
    {
      // IDL: HRESULT resizeOptimize ([out, retval] BSTR* ReturnValue);
      // VB6: Function resizeOptimize As String
      [DispId(2027)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT resizeOptimize (BSTR value);
      // VB6: Sub resizeOptimize (ByVal value As String)
      [DispId(2027)]
      set;
    }

    /// <summary><para><c>right</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property right</para></summary>
    /// <remarks><para>An original IDL definition of <c>right</c> property was the following:  <c>long right</c>;</para></remarks>
    // property right
    // IDL: long right;
    // VB6: right As Long
    int right
    {
      // IDL: HRESULT right ([out, retval] long* ReturnValue);
      // VB6: Function right As Long
      [DispId(2022)]
      get;
      // IDL: HRESULT right (long value);
      // VB6: Sub right (ByVal value As Long)
      [DispId(2022)]
      set;
    }

    /// <summary><para><c>rotation</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property rotation</para></summary>
    /// <remarks><para>An original IDL definition of <c>rotation</c> property was the following:  <c>float rotation</c>;</para></remarks>
    // property rotation
    // IDL: float rotation;
    // VB6: rotation As Single
    float rotation
    {
      // IDL: HRESULT rotation ([out, retval] float* ReturnValue);
      // VB6: Function rotation As Single
      [DispId(2028)]
      get;
      // IDL: HRESULT rotation (float value);
      // VB6: Sub rotation (ByVal value As Single)
      [DispId(2028)]
      set;
    }

    /// <summary><para><c>tabStop</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property tabStop</para></summary>
    /// <remarks><para>An original IDL definition of <c>tabStop</c> property was the following:  <c>VARIANT_BOOL tabStop</c>;</para></remarks>
    // property tabStop
    // IDL: VARIANT_BOOL tabStop;
    // VB6: tabStop As Boolean
    bool tabStop
    {
      // IDL: HRESULT tabStop ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function tabStop As Boolean
      [DispId(2011)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT tabStop (VARIANT_BOOL value);
      // VB6: Sub tabStop (ByVal value As Boolean)
      [DispId(2011)]
      set;
    }

    /// <summary><para><c>top</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property top</para></summary>
    /// <remarks><para>An original IDL definition of <c>top</c> property was the following:  <c>long top</c>;</para></remarks>
    // property top
    // IDL: long top;
    // VB6: top As Long
    int top
    {
      // IDL: HRESULT top ([out, retval] long* ReturnValue);
      // VB6: Function top As Long
      [DispId(2003)]
      get;
      // IDL: HRESULT top (long value);
      // VB6: Sub top (ByVal value As Long)
      [DispId(2003)]
      set;
    }

    /// <summary><para><c>transparencyColor</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property transparencyColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>transparencyColor</c> property was the following:  <c>BSTR transparencyColor</c>;</para></remarks>
    // property transparencyColor
    // IDL: BSTR transparencyColor;
    // VB6: transparencyColor As String
    string transparencyColor
    {
      // IDL: HRESULT transparencyColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function transparencyColor As String
      [DispId(2300)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT transparencyColor (BSTR value);
      // VB6: Sub transparencyColor (ByVal value As String)
      [DispId(2300)]
      set;
    }

    /// <summary><para><c>verticalAlignment</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property verticalAlignment</para></summary>
    /// <remarks><para>An original IDL definition of <c>verticalAlignment</c> property was the following:  <c>BSTR verticalAlignment</c>;</para></remarks>
    // property verticalAlignment
    // IDL: BSTR verticalAlignment;
    // VB6: verticalAlignment As String
    string verticalAlignment
    {
      // IDL: HRESULT verticalAlignment ([out, retval] BSTR* ReturnValue);
      // VB6: Function verticalAlignment As String
      [DispId(2014)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT verticalAlignment (BSTR value);
      // VB6: Sub verticalAlignment (ByVal value As String)
      [DispId(2014)]
      set;
    }

    /// <summary><para><c>visible</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property visible</para></summary>
    /// <remarks><para>An original IDL definition of <c>visible</c> property was the following:  <c>VARIANT_BOOL visible</c>;</para></remarks>
    // property visible
    // IDL: VARIANT_BOOL visible;
    // VB6: visible As Boolean
    bool visible
    {
      // IDL: HRESULT visible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function visible As Boolean
      [DispId(2009)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT visible (VARIANT_BOOL value);
      // VB6: Sub visible (ByVal value As Boolean)
      [DispId(2009)]
      set;
    }

    /// <summary><para><c>width</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property width</para></summary>
    /// <remarks><para>An original IDL definition of <c>width</c> property was the following:  <c>long width</c>;</para></remarks>
    // property width
    // IDL: long width;
    // VB6: width As Long
    int width
    {
      // IDL: HRESULT width ([out, retval] long* ReturnValue);
      // VB6: Function width As Long
      [DispId(2004)]
      get;
      // IDL: HRESULT width (long value);
      // VB6: Sub width (ByVal value As Long)
      [DispId(2004)]
      set;
    }

    /// <summary><para><c>zIndex</c> property of <c>IWMPLayoutSubView</c> interface.  </para><para>property zIndex</para></summary>
    /// <remarks><para>An original IDL definition of <c>zIndex</c> property was the following:  <c>long zIndex</c>;</para></remarks>
    // property zIndex
    // IDL: long zIndex;
    // VB6: zIndex As Long
    int zIndex
    {
      // IDL: HRESULT zIndex ([out, retval] long* ReturnValue);
      // VB6: Function zIndex As Long
      [DispId(2006)]
      get;
      // IDL: HRESULT zIndex (long value);
      // VB6: Sub zIndex (ByVal value As Long)
      [DispId(2006)]
      set;
    }
  }

  /// <summary><para><c>IWMPLayoutView</c> interface.  </para><para>IWMPLayoutView: Public interface for skin object model.</para></summary>
  // IWMPLayoutView: Public interface for skin object model.
  [Guid("172E905D-80D9-4C2F-B7CE-2CCB771787A2")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPLayoutView
  {
    /// <summary><para><c>moveTo</c> method of <c>IWMPLayoutView</c> interface.  </para><para>method moveTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>moveTo</c> method was the following:  <c>HRESULT moveTo (long newX, long newY, long moveTime)</c>;</para></remarks>
    // method moveTo
    // IDL: HRESULT moveTo (long newX, long newY, long moveTime);
    // VB6: Sub moveTo (ByVal newX As Long, ByVal newY As Long, ByVal moveTime As Long)
    [DispId(2015)]
    void moveTo (int newX, int newY, int moveTime);

    /// <summary><para><c>slideTo</c> method of <c>IWMPLayoutView</c> interface.  </para><para>method slideTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>slideTo</c> method was the following:  <c>HRESULT slideTo (long newX, long newY, long moveTime)</c>;</para></remarks>
    // method slideTo
    // IDL: HRESULT slideTo (long newX, long newY, long moveTime);
    // VB6: Sub slideTo (ByVal newX As Long, ByVal newY As Long, ByVal moveTime As Long)
    [DispId(2021)]
    void slideTo (int newX, int newY, int moveTime);

    /// <summary><para><c>moveSizeTo</c> method of <c>IWMPLayoutView</c> interface.  </para><para>method moveSizeTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>moveSizeTo</c> method was the following:  <c>HRESULT moveSizeTo (long newX, long newY, long newWidth, long newHeight, long moveTime, VARIANT_BOOL fSlide)</c>;</para></remarks>
    // method moveSizeTo
    // IDL: HRESULT moveSizeTo (long newX, long newY, long newWidth, long newHeight, long moveTime, VARIANT_BOOL fSlide);
    // VB6: Sub moveSizeTo (ByVal newX As Long, ByVal newY As Long, ByVal newWidth As Long, ByVal newHeight As Long, ByVal moveTime As Long, ByVal fSlide As Boolean)
    [DispId(2026)]
    void moveSizeTo (int newX, int newY, int newWidth, int newHeight, int moveTime, [MarshalAs(UnmanagedType.VariantBool)] bool fSlide);

    /// <summary><para><c>alphaBlendTo</c> method of <c>IWMPLayoutView</c> interface.  </para><para>method alphaBlendTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>alphaBlendTo</c> method was the following:  <c>HRESULT alphaBlendTo (long newVal, long alphaTime)</c>;</para></remarks>
    // method alphaBlendTo
    // IDL: HRESULT alphaBlendTo (long newVal, long alphaTime);
    // VB6: Sub alphaBlendTo (ByVal newVal As Long, ByVal alphaTime As Long)
    [DispId(2017)]
    void alphaBlendTo (int newVal, int alphaTime);

    /// <summary><para><c>close</c> method of <c>IWMPLayoutView</c> interface.  </para><para>method close</para></summary>
    /// <remarks><para>An original IDL definition of <c>close</c> method was the following:  <c>HRESULT close (void)</c>;</para></remarks>
    // method close
    // IDL: HRESULT close (void);
    // VB6: Sub close
    [DispId(2318)]
    void close ();

    /// <summary><para><c>minimize</c> method of <c>IWMPLayoutView</c> interface.  </para><para>method minimize</para></summary>
    /// <remarks><para>An original IDL definition of <c>minimize</c> method was the following:  <c>HRESULT minimize (void)</c>;</para></remarks>
    // method minimize
    // IDL: HRESULT minimize (void);
    // VB6: Sub minimize
    [DispId(2319)]
    void minimize ();

    /// <summary><para><c>maximize</c> method of <c>IWMPLayoutView</c> interface.  </para><para>method maximize</para></summary>
    /// <remarks><para>An original IDL definition of <c>maximize</c> method was the following:  <c>HRESULT maximize (void)</c>;</para></remarks>
    // method maximize
    // IDL: HRESULT maximize (void);
    // VB6: Sub maximize
    [DispId(2320)]
    void maximize ();

    /// <summary><para><c>restore</c> method of <c>IWMPLayoutView</c> interface.  </para><para>method restore</para></summary>
    /// <remarks><para>An original IDL definition of <c>restore</c> method was the following:  <c>HRESULT restore (void)</c>;</para></remarks>
    // method restore
    // IDL: HRESULT restore (void);
    // VB6: Sub restore
    [DispId(2321)]
    void restore ();

    /// <summary><para><c>size</c> method of <c>IWMPLayoutView</c> interface.  </para><para>method size</para></summary>
    /// <remarks><para>An original IDL definition of <c>size</c> method was the following:  <c>HRESULT size (BSTR bstrDirection)</c>;</para></remarks>
    // method size
    // IDL: HRESULT size (BSTR bstrDirection);
    // VB6: Sub size (ByVal bstrDirection As String)
    [DispId(2322)]
    void size ([MarshalAs(UnmanagedType.BStr)] string bstrDirection);

    /// <summary><para><c>returnToMediaCenter</c> method of <c>IWMPLayoutView</c> interface.  </para><para>method returnToMediaCenter</para></summary>
    /// <remarks><para>An original IDL definition of <c>returnToMediaCenter</c> method was the following:  <c>HRESULT returnToMediaCenter (void)</c>;</para></remarks>
    // method returnToMediaCenter
    // IDL: HRESULT returnToMediaCenter (void);
    // VB6: Sub returnToMediaCenter
    [DispId(2323)]
    void returnToMediaCenter ();

    /// <summary><para><c>updateWindow</c> method of <c>IWMPLayoutView</c> interface.  </para><para>method updateWindow</para></summary>
    /// <remarks><para>An original IDL definition of <c>updateWindow</c> method was the following:  <c>HRESULT updateWindow (void)</c>;</para></remarks>
    // method updateWindow
    // IDL: HRESULT updateWindow (void);
    // VB6: Sub updateWindow
    [DispId(2324)]
    void updateWindow ();

    /// <summary><para><c>accDescription</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property accDescription</para></summary>
    /// <remarks><para>An original IDL definition of <c>accDescription</c> property was the following:  <c>BSTR accDescription</c>;</para></remarks>
    // property accDescription
    // IDL: BSTR accDescription;
    // VB6: accDescription As String
    string accDescription
    {
      // IDL: HRESULT accDescription ([out, retval] BSTR* ReturnValue);
      // VB6: Function accDescription As String
      [DispId(2019)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accDescription (BSTR value);
      // VB6: Sub accDescription (ByVal value As String)
      [DispId(2019)]
      set;
    }

    /// <summary><para><c>accKeyboardShortcut</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property accKeyboardShortcut	</para></summary>
    /// <remarks><para>An original IDL definition of <c>accKeyboardShortcut</c> property was the following:  <c>BSTR accKeyboardShortcut</c>;</para></remarks>
    // property accKeyboardShortcut	
    // IDL: BSTR accKeyboardShortcut;
    // VB6: accKeyboardShortcut As String
    string accKeyboardShortcut
    {
      // IDL: HRESULT accKeyboardShortcut ([out, retval] BSTR* ReturnValue);
      // VB6: Function accKeyboardShortcut As String
      [DispId(2020)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accKeyboardShortcut (BSTR value);
      // VB6: Sub accKeyboardShortcut (ByVal value As String)
      [DispId(2020)]
      set;
    }

    /// <summary><para><c>accName</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property accName</para></summary>
    /// <remarks><para>An original IDL definition of <c>accName</c> property was the following:  <c>BSTR accName</c>;</para></remarks>
    // property accName
    // IDL: BSTR accName;
    // VB6: accName As String
    string accName
    {
      // IDL: HRESULT accName ([out, retval] BSTR* ReturnValue);
      // VB6: Function accName As String
      [DispId(2018)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accName (BSTR value);
      // VB6: Sub accName (ByVal value As String)
      [DispId(2018)]
      set;
    }

    /// <summary><para><c>alphaBlend</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property alphaBlend</para></summary>
    /// <remarks><para>An original IDL definition of <c>alphaBlend</c> property was the following:  <c>long alphaBlend</c>;</para></remarks>
    // property alphaBlend
    // IDL: long alphaBlend;
    // VB6: alphaBlend As Long
    int alphaBlend
    {
      // IDL: HRESULT alphaBlend ([out, retval] long* ReturnValue);
      // VB6: Function alphaBlend As Long
      [DispId(2016)]
      get;
      // IDL: HRESULT alphaBlend (long value);
      // VB6: Sub alphaBlend (ByVal value As Long)
      [DispId(2016)]
      set;
    }

    /// <summary><para><c>backgroundColor</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property backgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // property backgroundColor
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(2301)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundColor (BSTR value);
      // VB6: Sub backgroundColor (ByVal value As String)
      [DispId(2301)]
      set;
    }

    /// <summary><para><c>backgroundImage</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property backgroundImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundImage</c> property was the following:  <c>BSTR backgroundImage</c>;</para></remarks>
    // property backgroundImage
    // IDL: BSTR backgroundImage;
    // VB6: backgroundImage As String
    string backgroundImage
    {
      // IDL: HRESULT backgroundImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundImage As String
      [DispId(2302)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundImage (BSTR value);
      // VB6: Sub backgroundImage (ByVal value As String)
      [DispId(2302)]
      set;
    }

    /// <summary><para><c>backgroundImageHueShift</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property hueShift</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundImageHueShift</c> property was the following:  <c>float backgroundImageHueShift</c>;</para></remarks>
    // property hueShift
    // IDL: float backgroundImageHueShift;
    // VB6: backgroundImageHueShift As Single
    float backgroundImageHueShift
    {
      // IDL: HRESULT backgroundImageHueShift ([out, retval] float* ReturnValue);
      // VB6: Function backgroundImageHueShift As Single
      [DispId(2304)]
      get;
      // IDL: HRESULT backgroundImageHueShift (float value);
      // VB6: Sub backgroundImageHueShift (ByVal value As Single)
      [DispId(2304)]
      set;
    }

    /// <summary><para><c>backgroundImageSaturation</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property saturation</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundImageSaturation</c> property was the following:  <c>float backgroundImageSaturation</c>;</para></remarks>
    // property saturation
    // IDL: float backgroundImageSaturation;
    // VB6: backgroundImageSaturation As Single
    float backgroundImageSaturation
    {
      // IDL: HRESULT backgroundImageSaturation ([out, retval] float* ReturnValue);
      // VB6: Function backgroundImageSaturation As Single
      [DispId(2305)]
      get;
      // IDL: HRESULT backgroundImageSaturation (float value);
      // VB6: Sub backgroundImageSaturation (ByVal value As Single)
      [DispId(2305)]
      set;
    }

    /// <summary><para><c>backgroundTiled</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property backgroundTiled</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundTiled</c> property was the following:  <c>VARIANT_BOOL backgroundTiled</c>;</para></remarks>
    // property backgroundTiled
    // IDL: VARIANT_BOOL backgroundTiled;
    // VB6: backgroundTiled As Boolean
    bool backgroundTiled
    {
      // IDL: HRESULT backgroundTiled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function backgroundTiled As Boolean
      [DispId(2303)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT backgroundTiled (VARIANT_BOOL value);
      // VB6: Sub backgroundTiled (ByVal value As Boolean)
      [DispId(2303)]
      set;
    }

    /// <summary><para><c>bottom</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property bottom</para></summary>
    /// <remarks><para>An original IDL definition of <c>bottom</c> property was the following:  <c>long bottom</c>;</para></remarks>
    // property bottom
    // IDL: long bottom;
    // VB6: bottom As Long
    int bottom
    {
      // IDL: HRESULT bottom ([out, retval] long* ReturnValue);
      // VB6: Function bottom As Long
      [DispId(2023)]
      get;
      // IDL: HRESULT bottom (long value);
      // VB6: Sub bottom (ByVal value As Long)
      [DispId(2023)]
      set;
    }

    /// <summary><para><c>category</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property category</para></summary>
    /// <remarks><para>An original IDL definition of <c>category</c> property was the following:  <c>BSTR category</c>;</para></remarks>
    // property category
    // IDL: BSTR category;
    // VB6: category As String
    string category
    {
      // IDL: HRESULT category ([out, retval] BSTR* ReturnValue);
      // VB6: Function category As String
      [DispId(2308)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT category (BSTR value);
      // VB6: Sub category (ByVal value As String)
      [DispId(2308)]
      set;
    }

    /// <summary><para><c>clippingColor</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property clippingColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>clippingColor</c> property was the following:  <c>BSTR clippingColor</c>;</para></remarks>
    // property clippingColor
    // IDL: BSTR clippingColor;
    // VB6: clippingColor As String
    string clippingColor
    {
      // IDL: HRESULT clippingColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function clippingColor As String
      [DispId(2008)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT clippingColor (BSTR value);
      // VB6: Sub clippingColor (ByVal value As String)
      [DispId(2008)]
      set;
    }

    /// <summary><para><c>clippingImage</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property clippingImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>clippingImage</c> property was the following:  <c>BSTR clippingImage</c>;</para></remarks>
    // property clippingImage
    // IDL: BSTR clippingImage;
    // VB6: clippingImage As String
    string clippingImage
    {
      // IDL: HRESULT clippingImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function clippingImage As String
      [DispId(2007)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT clippingImage (BSTR value);
      // VB6: Sub clippingImage (ByVal value As String)
      [DispId(2007)]
      set;
    }

    /// <summary><para><c>elementType</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property elementType</para></summary>
    /// <remarks><para>An original IDL definition of <c>elementType</c> property was the following:  <c>BSTR elementType</c>;</para></remarks>
    // property elementType
    // IDL: BSTR elementType;
    // VB6: elementType As String
    string elementType
    {
      // IDL: HRESULT elementType ([out, retval] BSTR* ReturnValue);
      // VB6: Function elementType As String
      [DispId(2001)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>enabled</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property enabled</para></summary>
    /// <remarks><para>An original IDL definition of <c>enabled</c> property was the following:  <c>VARIANT_BOOL enabled</c>;</para></remarks>
    // property enabled
    // IDL: VARIANT_BOOL enabled;
    // VB6: enabled As Boolean
    bool enabled
    {
      // IDL: HRESULT enabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enabled As Boolean
      [DispId(2010)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enabled (VARIANT_BOOL value);
      // VB6: Sub enabled (ByVal value As Boolean)
      [DispId(2010)]
      set;
    }

    /// <summary><para><c>focusObjectID</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property focusObjectID</para></summary>
    /// <remarks><para>An original IDL definition of <c>focusObjectID</c> property was the following:  <c>BSTR focusObjectID</c>;</para></remarks>
    // property focusObjectID
    // IDL: BSTR focusObjectID;
    // VB6: focusObjectID As String
    string focusObjectID
    {
      // IDL: HRESULT focusObjectID ([out, retval] BSTR* ReturnValue);
      // VB6: Function focusObjectID As String
      [DispId(2309)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT focusObjectID (BSTR value);
      // VB6: Sub focusObjectID (ByVal value As String)
      [DispId(2309)]
      set;
    }

    /// <summary><para><c>height</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property height</para></summary>
    /// <remarks><para>An original IDL definition of <c>height</c> property was the following:  <c>long height</c>;</para></remarks>
    // property height
    // IDL: long height;
    // VB6: height As Long
    int height
    {
      // IDL: HRESULT height ([out, retval] long* ReturnValue);
      // VB6: Function height As Long
      [DispId(2005)]
      get;
      // IDL: HRESULT height (long value);
      // VB6: Sub height (ByVal value As Long)
      [DispId(2005)]
      set;
    }

    /// <summary><para><c>horizontalAlignment</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property horizontalAlignment</para></summary>
    /// <remarks><para>An original IDL definition of <c>horizontalAlignment</c> property was the following:  <c>BSTR horizontalAlignment</c>;</para></remarks>
    // property horizontalAlignment
    // IDL: BSTR horizontalAlignment;
    // VB6: horizontalAlignment As String
    string horizontalAlignment
    {
      // IDL: HRESULT horizontalAlignment ([out, retval] BSTR* ReturnValue);
      // VB6: Function horizontalAlignment As String
      [DispId(2013)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT horizontalAlignment (BSTR value);
      // VB6: Sub horizontalAlignment (ByVal value As String)
      [DispId(2013)]
      set;
    }

    /// <summary><para><c>ID</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property id</para></summary>
    /// <remarks><para>An original IDL definition of <c>ID</c> property was the following:  <c>BSTR ID</c>;</para></remarks>
    // property id
    // IDL: BSTR ID;
    // VB6: ID As String
    string ID
    {
      // IDL: HRESULT ID ([out, retval] BSTR* ReturnValue);
      // VB6: Function ID As String
      [DispId(2000)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>left</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property left</para></summary>
    /// <remarks><para>An original IDL definition of <c>left</c> property was the following:  <c>long left</c>;</para></remarks>
    // property left
    // IDL: long left;
    // VB6: left As Long
    int left
    {
      // IDL: HRESULT left ([out, retval] long* ReturnValue);
      // VB6: Function left As Long
      [DispId(2002)]
      get;
      // IDL: HRESULT left (long value);
      // VB6: Sub left (ByVal value As Long)
      [DispId(2002)]
      set;
    }

    /// <summary><para><c>maxHeight</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property maxHeight</para></summary>
    /// <remarks><para>An original IDL definition of <c>maxHeight</c> property was the following:  <c>long maxHeight</c>;</para></remarks>
    // property maxHeight
    // IDL: long maxHeight;
    // VB6: maxHeight As Long
    int maxHeight
    {
      // IDL: HRESULT maxHeight ([out, retval] long* ReturnValue);
      // VB6: Function maxHeight As Long
      [DispId(2317)]
      get;
      // IDL: HRESULT maxHeight (long value);
      // VB6: Sub maxHeight (ByVal value As Long)
      [DispId(2317)]
      set;
    }

    /// <summary><para><c>maximized</c> property of <c>IWMPLayoutView</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>maximized</c> property was the following:  <c>VARIANT_BOOL maximized</c>;</para></remarks>
    // IDL: VARIANT_BOOL maximized;
    // VB6: maximized As Boolean
    bool maximized
    {
      // IDL: HRESULT maximized ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function maximized As Boolean
      [DispId(2326)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>maxWidth</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property maxWidth</para></summary>
    /// <remarks><para>An original IDL definition of <c>maxWidth</c> property was the following:  <c>long maxWidth</c>;</para></remarks>
    // property maxWidth
    // IDL: long maxWidth;
    // VB6: maxWidth As Long
    int maxWidth
    {
      // IDL: HRESULT maxWidth ([out, retval] long* ReturnValue);
      // VB6: Function maxWidth As Long
      [DispId(2315)]
      get;
      // IDL: HRESULT maxWidth (long value);
      // VB6: Sub maxWidth (ByVal value As Long)
      [DispId(2315)]
      set;
    }

    /// <summary><para><c>minHeight</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property minHeight</para></summary>
    /// <remarks><para>An original IDL definition of <c>minHeight</c> property was the following:  <c>long minHeight</c>;</para></remarks>
    // property minHeight
    // IDL: long minHeight;
    // VB6: minHeight As Long
    int minHeight
    {
      // IDL: HRESULT minHeight ([out, retval] long* ReturnValue);
      // VB6: Function minHeight As Long
      [DispId(2316)]
      get;
      // IDL: HRESULT minHeight (long value);
      // VB6: Sub minHeight (ByVal value As Long)
      [DispId(2316)]
      set;
    }

    /// <summary><para><c>minimized</c> property of <c>IWMPLayoutView</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>minimized</c> property was the following:  <c>VARIANT_BOOL minimized</c>;</para></remarks>
    // IDL: VARIANT_BOOL minimized;
    // VB6: minimized As Boolean
    bool minimized
    {
      // IDL: HRESULT minimized ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function minimized As Boolean
      [DispId(2327)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>minWidth</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property minWidth</para></summary>
    /// <remarks><para>An original IDL definition of <c>minWidth</c> property was the following:  <c>long minWidth</c>;</para></remarks>
    // property minWidth
    // IDL: long minWidth;
    // VB6: minWidth As Long
    int minWidth
    {
      // IDL: HRESULT minWidth ([out, retval] long* ReturnValue);
      // VB6: Function minWidth As Long
      [DispId(2314)]
      get;
      // IDL: HRESULT minWidth (long value);
      // VB6: Sub minWidth (ByVal value As Long)
      [DispId(2314)]
      set;
    }

    /// <summary><para><c>nineGridMargins</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property nineGridMargins</para></summary>
    /// <remarks><para>An original IDL definition of <c>nineGridMargins</c> property was the following:  <c>BSTR nineGridMargins</c>;</para></remarks>
    // property nineGridMargins
    // IDL: BSTR nineGridMargins;
    // VB6: nineGridMargins As String
    string nineGridMargins
    {
      // IDL: HRESULT nineGridMargins ([out, retval] BSTR* ReturnValue);
      // VB6: Function nineGridMargins As String
      [DispId(2025)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT nineGridMargins (BSTR value);
      // VB6: Sub nineGridMargins (ByVal value As String)
      [DispId(2025)]
      set;
    }

    /// <summary><para><c>passThrough</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property passThrough</para></summary>
    /// <remarks><para>An original IDL definition of <c>passThrough</c> property was the following:  <c>VARIANT_BOOL passThrough</c>;</para></remarks>
    // property passThrough
    // IDL: VARIANT_BOOL passThrough;
    // VB6: passThrough As Boolean
    bool passThrough
    {
      // IDL: HRESULT passThrough ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function passThrough As Boolean
      [DispId(2012)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT passThrough (VARIANT_BOOL value);
      // VB6: Sub passThrough (ByVal value As Boolean)
      [DispId(2012)]
      set;
    }

    /// <summary><para><c>resizable</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property resizable</para></summary>
    /// <remarks><para>An original IDL definition of <c>resizable</c> property was the following:  <c>VARIANT_BOOL resizable</c>;</para></remarks>
    // property resizable
    // IDL: VARIANT_BOOL resizable;
    // VB6: resizable As Boolean
    bool resizable
    {
      // IDL: HRESULT resizable ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function resizable As Boolean
      [DispId(2312)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>resizeBackgroundImage</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property resizeBackgroundImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>resizeBackgroundImage</c> property was the following:  <c>VARIANT_BOOL resizeBackgroundImage</c>;</para></remarks>
    // property resizeBackgroundImage
    // IDL: VARIANT_BOOL resizeBackgroundImage;
    // VB6: resizeBackgroundImage As Boolean
    bool resizeBackgroundImage
    {
      // IDL: HRESULT resizeBackgroundImage ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function resizeBackgroundImage As Boolean
      [DispId(2306)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT resizeBackgroundImage (VARIANT_BOOL value);
      // VB6: Sub resizeBackgroundImage (ByVal value As Boolean)
      [DispId(2306)]
      set;
    }

    /// <summary><para><c>resizeImages</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property resizeImages</para></summary>
    /// <remarks><para>An original IDL definition of <c>resizeImages</c> property was the following:  <c>VARIANT_BOOL resizeImages</c>;</para></remarks>
    // property resizeImages
    // IDL: VARIANT_BOOL resizeImages;
    // VB6: resizeImages As Boolean
    bool resizeImages
    {
      // IDL: HRESULT resizeImages ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function resizeImages As Boolean
      [DispId(2024)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT resizeImages (VARIANT_BOOL value);
      // VB6: Sub resizeImages (ByVal value As Boolean)
      [DispId(2024)]
      set;
    }

    /// <summary><para><c>resizeOptimize</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property resizeOptimize</para></summary>
    /// <remarks><para>An original IDL definition of <c>resizeOptimize</c> property was the following:  <c>BSTR resizeOptimize</c>;</para></remarks>
    // property resizeOptimize
    // IDL: BSTR resizeOptimize;
    // VB6: resizeOptimize As String
    string resizeOptimize
    {
      // IDL: HRESULT resizeOptimize ([out, retval] BSTR* ReturnValue);
      // VB6: Function resizeOptimize As String
      [DispId(2027)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT resizeOptimize (BSTR value);
      // VB6: Sub resizeOptimize (ByVal value As String)
      [DispId(2027)]
      set;
    }

    /// <summary><para><c>right</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property right</para></summary>
    /// <remarks><para>An original IDL definition of <c>right</c> property was the following:  <c>long right</c>;</para></remarks>
    // property right
    // IDL: long right;
    // VB6: right As Long
    int right
    {
      // IDL: HRESULT right ([out, retval] long* ReturnValue);
      // VB6: Function right As Long
      [DispId(2022)]
      get;
      // IDL: HRESULT right (long value);
      // VB6: Sub right (ByVal value As Long)
      [DispId(2022)]
      set;
    }

    /// <summary><para><c>rotation</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property rotation</para></summary>
    /// <remarks><para>An original IDL definition of <c>rotation</c> property was the following:  <c>float rotation</c>;</para></remarks>
    // property rotation
    // IDL: float rotation;
    // VB6: rotation As Single
    float rotation
    {
      // IDL: HRESULT rotation ([out, retval] float* ReturnValue);
      // VB6: Function rotation As Single
      [DispId(2028)]
      get;
      // IDL: HRESULT rotation (float value);
      // VB6: Sub rotation (ByVal value As Single)
      [DispId(2028)]
      set;
    }

    /// <summary><para><c>tabStop</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property tabStop</para></summary>
    /// <remarks><para>An original IDL definition of <c>tabStop</c> property was the following:  <c>VARIANT_BOOL tabStop</c>;</para></remarks>
    // property tabStop
    // IDL: VARIANT_BOOL tabStop;
    // VB6: tabStop As Boolean
    bool tabStop
    {
      // IDL: HRESULT tabStop ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function tabStop As Boolean
      [DispId(2011)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT tabStop (VARIANT_BOOL value);
      // VB6: Sub tabStop (ByVal value As Boolean)
      [DispId(2011)]
      set;
    }

    /// <summary><para><c>timerInterval</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property timerInterval</para></summary>
    /// <remarks><para>An original IDL definition of <c>timerInterval</c> property was the following:  <c>long timerInterval</c>;</para></remarks>
    // property timerInterval
    // IDL: long timerInterval;
    // VB6: timerInterval As Long
    int timerInterval
    {
      // IDL: HRESULT timerInterval ([out, retval] long* ReturnValue);
      // VB6: Function timerInterval As Long
      [DispId(2313)]
      get;
      // IDL: HRESULT timerInterval (long value);
      // VB6: Sub timerInterval (ByVal value As Long)
      [DispId(2313)]
      set;
    }

    /// <summary><para><c>title</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property title</para></summary>
    /// <remarks><para>An original IDL definition of <c>title</c> property was the following:  <c>BSTR title</c>;</para></remarks>
    // property title
    // IDL: BSTR title;
    // VB6: title As String
    string title
    {
      // IDL: HRESULT title ([out, retval] BSTR* ReturnValue);
      // VB6: Function title As String
      [DispId(2307)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT title (BSTR value);
      // VB6: Sub title (ByVal value As String)
      [DispId(2307)]
      set;
    }

    /// <summary><para><c>titleBar</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property titleBar</para></summary>
    /// <remarks><para>An original IDL definition of <c>titleBar</c> property was the following:  <c>VARIANT_BOOL titleBar</c>;</para></remarks>
    // property titleBar
    // IDL: VARIANT_BOOL titleBar;
    // VB6: titleBar As Boolean
    bool titleBar
    {
      // IDL: HRESULT titleBar ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function titleBar As Boolean
      [DispId(2311)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>top</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property top</para></summary>
    /// <remarks><para>An original IDL definition of <c>top</c> property was the following:  <c>long top</c>;</para></remarks>
    // property top
    // IDL: long top;
    // VB6: top As Long
    int top
    {
      // IDL: HRESULT top ([out, retval] long* ReturnValue);
      // VB6: Function top As Long
      [DispId(2003)]
      get;
      // IDL: HRESULT top (long value);
      // VB6: Sub top (ByVal value As Long)
      [DispId(2003)]
      set;
    }

    /// <summary><para><c>transparencyColor</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property transparencyColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>transparencyColor</c> property was the following:  <c>BSTR transparencyColor</c>;</para></remarks>
    // property transparencyColor
    // IDL: BSTR transparencyColor;
    // VB6: transparencyColor As String
    string transparencyColor
    {
      // IDL: HRESULT transparencyColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function transparencyColor As String
      [DispId(2300)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT transparencyColor (BSTR value);
      // VB6: Sub transparencyColor (ByVal value As String)
      [DispId(2300)]
      set;
    }

    /// <summary><para><c>verticalAlignment</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property verticalAlignment</para></summary>
    /// <remarks><para>An original IDL definition of <c>verticalAlignment</c> property was the following:  <c>BSTR verticalAlignment</c>;</para></remarks>
    // property verticalAlignment
    // IDL: BSTR verticalAlignment;
    // VB6: verticalAlignment As String
    string verticalAlignment
    {
      // IDL: HRESULT verticalAlignment ([out, retval] BSTR* ReturnValue);
      // VB6: Function verticalAlignment As String
      [DispId(2014)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT verticalAlignment (BSTR value);
      // VB6: Sub verticalAlignment (ByVal value As String)
      [DispId(2014)]
      set;
    }

    /// <summary><para><c>visible</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property visible</para></summary>
    /// <remarks><para>An original IDL definition of <c>visible</c> property was the following:  <c>VARIANT_BOOL visible</c>;</para></remarks>
    // property visible
    // IDL: VARIANT_BOOL visible;
    // VB6: visible As Boolean
    bool visible
    {
      // IDL: HRESULT visible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function visible As Boolean
      [DispId(2009)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT visible (VARIANT_BOOL value);
      // VB6: Sub visible (ByVal value As Boolean)
      [DispId(2009)]
      set;
    }

    /// <summary><para><c>width</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property width</para></summary>
    /// <remarks><para>An original IDL definition of <c>width</c> property was the following:  <c>long width</c>;</para></remarks>
    // property width
    // IDL: long width;
    // VB6: width As Long
    int width
    {
      // IDL: HRESULT width ([out, retval] long* ReturnValue);
      // VB6: Function width As Long
      [DispId(2004)]
      get;
      // IDL: HRESULT width (long value);
      // VB6: Sub width (ByVal value As Long)
      [DispId(2004)]
      set;
    }

    /// <summary><para><c>zIndex</c> property of <c>IWMPLayoutView</c> interface.  </para><para>property zIndex</para></summary>
    /// <remarks><para>An original IDL definition of <c>zIndex</c> property was the following:  <c>long zIndex</c>;</para></remarks>
    // property zIndex
    // IDL: long zIndex;
    // VB6: zIndex As Long
    int zIndex
    {
      // IDL: HRESULT zIndex ([out, retval] long* ReturnValue);
      // VB6: Function zIndex As Long
      [DispId(2006)]
      get;
      // IDL: HRESULT zIndex (long value);
      // VB6: Sub zIndex (ByVal value As Long)
      [DispId(2006)]
      set;
    }
  }

  /// <summary><para><c>IWMPLibraryTreeCtrl</c> interface.  </para><para>IWMPLibraryTreeCtrl: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPLibraryTreeCtrl: Not Public.  Internal interface used by Windows Media Player.
  [Guid("B738FCAE-F089-45DF-AED6-034B9E7DB632")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPLibraryTreeCtrl
  {
    /// <summary><para><c>backgroundColor</c> property of <c>IWMPLibraryTreeCtrl</c> interface.  </para><para>property backgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // property backgroundColor
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(6403)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundColor (BSTR value);
      // VB6: Sub backgroundColor (ByVal value As String)
      [DispId(6403)]
      set;
    }

    /// <summary><para><c>dropDownVisible</c> property of <c>IWMPLibraryTreeCtrl</c> interface.  </para><para>property dropDownVisible</para></summary>
    /// <remarks><para>An original IDL definition of <c>dropDownVisible</c> property was the following:  <c>VARIANT_BOOL dropDownVisible</c>;</para></remarks>
    // property dropDownVisible
    // IDL: VARIANT_BOOL dropDownVisible;
    // VB6: dropDownVisible As Boolean
    bool dropDownVisible
    {
      // IDL: HRESULT dropDownVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function dropDownVisible As Boolean
      [DispId(6401)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT dropDownVisible (VARIANT_BOOL value);
      // VB6: Sub dropDownVisible (ByVal value As Boolean)
      [DispId(6401)]
      set;
    }

    /// <summary><para><c>expandState</c> property of <c>IWMPLibraryTreeCtrl</c> interface.  </para><para>property expandState</para></summary>
    /// <remarks><para>An original IDL definition of <c>expandState</c> property was the following:  <c>BSTR expandState</c>;</para></remarks>
    // property expandState
    // IDL: BSTR expandState;
    // VB6: expandState As String
    string expandState
    {
      // IDL: HRESULT expandState ([out, retval] BSTR* ReturnValue);
      // VB6: Function expandState As String
      [DispId(6408)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT expandState (BSTR value);
      // VB6: Sub expandState (ByVal value As String)
      [DispId(6408)]
      set;
    }

    /// <summary><para><c>filter</c> property of <c>IWMPLibraryTreeCtrl</c> interface.  </para><para>property filter</para></summary>
    /// <remarks><para>An original IDL definition of <c>filter</c> property was the following:  <c>BSTR filter</c>;</para></remarks>
    // property filter
    // IDL: BSTR filter;
    // VB6: filter As String
    string filter
    {
      // IDL: HRESULT filter ([out, retval] BSTR* ReturnValue);
      // VB6: Function filter As String
      [DispId(6407)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT filter (BSTR value);
      // VB6: Sub filter (ByVal value As String)
      [DispId(6407)]
      set;
    }

    /// <summary><para><c>fontFace</c> property of <c>IWMPLibraryTreeCtrl</c> interface.  </para><para>property fontFace</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontFace</c> property was the following:  <c>BSTR fontFace</c>;</para></remarks>
    // property fontFace
    // IDL: BSTR fontFace;
    // VB6: fontFace As String
    string fontFace
    {
      // IDL: HRESULT fontFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function fontFace As String
      [DispId(6406)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT fontFace (BSTR value);
      // VB6: Sub fontFace (ByVal value As String)
      [DispId(6406)]
      set;
    }

    /// <summary><para><c>fontSize</c> property of <c>IWMPLibraryTreeCtrl</c> interface.  </para><para>property fontSize</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontSize</c> property was the following:  <c>long fontSize</c>;</para></remarks>
    // property fontSize
    // IDL: long fontSize;
    // VB6: fontSize As Long
    int fontSize
    {
      // IDL: HRESULT fontSize ([out, retval] long* ReturnValue);
      // VB6: Function fontSize As Long
      [DispId(6404)]
      get;
      // IDL: HRESULT fontSize (long value);
      // VB6: Sub fontSize (ByVal value As Long)
      [DispId(6404)]
      set;
    }

    /// <summary><para><c>fontStyle</c> property of <c>IWMPLibraryTreeCtrl</c> interface.  </para><para>property fontStyle</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontStyle</c> property was the following:  <c>BSTR fontStyle</c>;</para></remarks>
    // property fontStyle
    // IDL: BSTR fontStyle;
    // VB6: fontStyle As String
    string fontStyle
    {
      // IDL: HRESULT fontStyle ([out, retval] BSTR* ReturnValue);
      // VB6: Function fontStyle As String
      [DispId(6405)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT fontStyle (BSTR value);
      // VB6: Sub fontStyle (ByVal value As String)
      [DispId(6405)]
      set;
    }

    /// <summary><para><c>foregroundColor</c> property of <c>IWMPLibraryTreeCtrl</c> interface.  </para><para>property foregroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>foregroundColor</c> property was the following:  <c>BSTR foregroundColor</c>;</para></remarks>
    // property foregroundColor
    // IDL: BSTR foregroundColor;
    // VB6: foregroundColor As String
    string foregroundColor
    {
      // IDL: HRESULT foregroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function foregroundColor As String
      [DispId(6402)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT foregroundColor (BSTR value);
      // VB6: Sub foregroundColor (ByVal value As String)
      [DispId(6402)]
      set;
    }

    /// <summary><para><c>Playlist</c> property of <c>IWMPLibraryTreeCtrl</c> interface.  </para><para>property playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>Playlist</c> property was the following:  <c>IWMPPlaylist* Playlist</c>;</para></remarks>
    // property playlist
    // IDL: IWMPPlaylist* Playlist;
    // VB6: Playlist As IWMPPlaylist
    IWMPPlaylist Playlist
    {
      // IDL: HRESULT Playlist ([out, retval] IWMPPlaylist** ReturnValue);
      // VB6: Function Playlist As IWMPPlaylist
      [DispId(6409)]
      get;
      // IDL: HRESULT Playlist (IWMPPlaylist* value);
      // VB6: Sub Playlist (ByVal value As IWMPPlaylist)
      [DispId(6409)]
      set;
    }

    /// <summary><para><c>selectedMedia</c> property of <c>IWMPLibraryTreeCtrl</c> interface.  </para><para>property selectedMedia</para></summary>
    /// <remarks><para>An original IDL definition of <c>selectedMedia</c> property was the following:  <c>IWMPMedia* selectedMedia</c>;</para></remarks>
    // property selectedMedia
    // IDL: IWMPMedia* selectedMedia;
    // VB6: selectedMedia As IWMPMedia
    IWMPMedia selectedMedia
    {
      // IDL: HRESULT selectedMedia ([out, retval] IWMPMedia** ReturnValue);
      // VB6: Function selectedMedia As IWMPMedia
      [DispId(6411)]
      get;
    }

    /// <summary><para><c>selectedPlaylist</c> property of <c>IWMPLibraryTreeCtrl</c> interface.  </para><para>property selectedPlaylist</para></summary>
    /// <remarks><para>An original IDL definition of <c>selectedPlaylist</c> property was the following:  <c>IWMPPlaylist* selectedPlaylist</c>;</para></remarks>
    // property selectedPlaylist
    // IDL: IWMPPlaylist* selectedPlaylist;
    // VB6: selectedPlaylist As IWMPPlaylist
    IWMPPlaylist selectedPlaylist
    {
      // IDL: HRESULT selectedPlaylist ([out, retval] IWMPPlaylist** ReturnValue);
      // VB6: Function selectedPlaylist As IWMPPlaylist
      [DispId(6410)]
      get;
    }
  }

  /// <summary><para><c>IWMPListBoxCtrl</c> interface.  </para><para>IWMPListBoxCtrl: Public interface for skin object model.</para></summary>
  // IWMPListBoxCtrl: Public interface for skin object model.
  [Guid("FC1880CE-83B9-43A7-A066-C44CE8C82583")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPListBoxCtrl
  {
    /// <summary><para><c>getItem</c> method of <c>IWMPListBoxCtrl</c> interface.  </para><para>method getItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItem</c> method was the following:  <c>HRESULT getItem (long nPos, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getItem
    // IDL: HRESULT getItem (long nPos, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItem (ByVal nPos As Long) As String
    [DispId(6111)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItem (int nPos);

    /// <summary><para><c>insertItem</c> method of <c>IWMPListBoxCtrl</c> interface.  </para><para>method insertItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>insertItem</c> method was the following:  <c>HRESULT insertItem (long nPos, BSTR newVal)</c>;</para></remarks>
    // method insertItem
    // IDL: HRESULT insertItem (long nPos, BSTR newVal);
    // VB6: Sub insertItem (ByVal nPos As Long, ByVal newVal As String)
    [DispId(6112)]
    void insertItem (int nPos, [MarshalAs(UnmanagedType.BStr)] string newVal);

    /// <summary><para><c>appendItem</c> method of <c>IWMPListBoxCtrl</c> interface.  </para><para>method appendItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>appendItem</c> method was the following:  <c>HRESULT appendItem (BSTR newVal)</c>;</para></remarks>
    // method appendItem
    // IDL: HRESULT appendItem (BSTR newVal);
    // VB6: Sub appendItem (ByVal newVal As String)
    [DispId(6113)]
    void appendItem ([MarshalAs(UnmanagedType.BStr)] string newVal);

    /// <summary><para><c>replaceItem</c> method of <c>IWMPListBoxCtrl</c> interface.  </para><para>method replaceItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>replaceItem</c> method was the following:  <c>HRESULT replaceItem (long nPos, BSTR newVal)</c>;</para></remarks>
    // method replaceItem
    // IDL: HRESULT replaceItem (long nPos, BSTR newVal);
    // VB6: Sub replaceItem (ByVal nPos As Long, ByVal newVal As String)
    [DispId(6114)]
    void replaceItem (int nPos, [MarshalAs(UnmanagedType.BStr)] string newVal);

    /// <summary><para><c>deleteItem</c> method of <c>IWMPListBoxCtrl</c> interface.  </para><para>method deleteItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>deleteItem</c> method was the following:  <c>HRESULT deleteItem (long nPos)</c>;</para></remarks>
    // method deleteItem
    // IDL: HRESULT deleteItem (long nPos);
    // VB6: Sub deleteItem (ByVal nPos As Long)
    [DispId(6115)]
    void deleteItem (int nPos);

    /// <summary><para><c>deleteAll</c> method of <c>IWMPListBoxCtrl</c> interface.  </para><para>method deleteAll</para></summary>
    /// <remarks><para>An original IDL definition of <c>deleteAll</c> method was the following:  <c>HRESULT deleteAll (void)</c>;</para></remarks>
    // method deleteAll
    // IDL: HRESULT deleteAll (void);
    // VB6: Sub deleteAll
    [DispId(6116)]
    void deleteAll ();

    /// <summary><para><c>findItem</c> method of <c>IWMPListBoxCtrl</c> interface.  </para><para>method findItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>findItem</c> method was the following:  <c>HRESULT findItem (long nStartIndex, BSTR newVal, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method findItem
    // IDL: HRESULT findItem (long nStartIndex, BSTR newVal, [out, retval] long* ReturnValue);
    // VB6: Function findItem (ByVal nStartIndex As Long, ByVal newVal As String) As Long
    [DispId(6117)]
    int findItem (int nStartIndex, [MarshalAs(UnmanagedType.BStr)] string newVal);

    /// <summary><para><c>getNextSelectedItem</c> method of <c>IWMPListBoxCtrl</c> interface.  </para><para>method getNextSelectedItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>getNextSelectedItem</c> method was the following:  <c>HRESULT getNextSelectedItem (long nStartIndex, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getNextSelectedItem
    // IDL: HRESULT getNextSelectedItem (long nStartIndex, [out, retval] long* ReturnValue);
    // VB6: Function getNextSelectedItem (ByVal nStartIndex As Long) As Long
    [DispId(6118)]
    int getNextSelectedItem (int nStartIndex);

    /// <summary><para><c>setSelectedState</c> method of <c>IWMPListBoxCtrl</c> interface.  </para><para>method setSelectedState</para></summary>
    /// <remarks><para>An original IDL definition of <c>setSelectedState</c> method was the following:  <c>HRESULT setSelectedState (long nPos, VARIANT_BOOL vbSelected)</c>;</para></remarks>
    // method setSelectedState
    // IDL: HRESULT setSelectedState (long nPos, VARIANT_BOOL vbSelected);
    // VB6: Sub setSelectedState (ByVal nPos As Long, ByVal vbSelected As Boolean)
    [DispId(6122)]
    void setSelectedState (int nPos, [MarshalAs(UnmanagedType.VariantBool)] bool vbSelected);

    /// <summary><para><c>show</c> method of <c>IWMPListBoxCtrl</c> interface.  </para><para>method show</para></summary>
    /// <remarks><para>An original IDL definition of <c>show</c> method was the following:  <c>HRESULT show (void)</c>;</para></remarks>
    // method show
    // IDL: HRESULT show (void);
    // VB6: Sub show
    [DispId(6123)]
    void show ();

    /// <summary><para><c>dismiss</c> method of <c>IWMPListBoxCtrl</c> interface.  </para><para>method dismiss</para></summary>
    /// <remarks><para>An original IDL definition of <c>dismiss</c> method was the following:  <c>HRESULT dismiss (void)</c>;</para></remarks>
    // method dismiss
    // IDL: HRESULT dismiss (void);
    // VB6: Sub dismiss
    [DispId(6124)]
    void dismiss ();

    /// <summary><para><c>backgroundColor</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(6104)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundColor (BSTR value);
      // VB6: Sub backgroundColor (ByVal value As String)
      [DispId(6104)]
      set;
    }

    /// <summary><para><c>border</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>border</c> property was the following:  <c>VARIANT_BOOL border</c>;</para></remarks>
    // IDL: VARIANT_BOOL border;
    // VB6: border As Boolean
    bool border
    {
      // IDL: HRESULT border ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function border As Boolean
      [DispId(6125)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT border (VARIANT_BOOL value);
      // VB6: Sub border (ByVal value As Boolean)
      [DispId(6125)]
      set;
    }

    /// <summary><para><c>firstVisibleItem</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>firstVisibleItem</c> property was the following:  <c>long firstVisibleItem</c>;</para></remarks>
    // IDL: long firstVisibleItem;
    // VB6: firstVisibleItem As Long
    int firstVisibleItem
    {
      // IDL: HRESULT firstVisibleItem ([out, retval] long* ReturnValue);
      // VB6: Function firstVisibleItem As Long
      [DispId(6110)]
      get;
      // IDL: HRESULT firstVisibleItem (long value);
      // VB6: Sub firstVisibleItem (ByVal value As Long)
      [DispId(6110)]
      set;
    }

    /// <summary><para><c>focusItem</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>focusItem</c> property was the following:  <c>long focusItem</c>;</para></remarks>
    // IDL: long focusItem;
    // VB6: focusItem As Long
    int focusItem
    {
      // IDL: HRESULT focusItem ([out, retval] long* ReturnValue);
      // VB6: Function focusItem As Long
      [DispId(6121)]
      get;
      // IDL: HRESULT focusItem (long value);
      // VB6: Sub focusItem (ByVal value As Long)
      [DispId(6121)]
      set;
    }

    /// <summary><para><c>fontFace</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontFace</c> property was the following:  <c>BSTR fontFace</c>;</para></remarks>
    // IDL: BSTR fontFace;
    // VB6: fontFace As String
    string fontFace
    {
      // IDL: HRESULT fontFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function fontFace As String
      [DispId(6107)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT fontFace (BSTR value);
      // VB6: Sub fontFace (ByVal value As String)
      [DispId(6107)]
      set;
    }

    /// <summary><para><c>fontSize</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontSize</c> property was the following:  <c>long fontSize</c>;</para></remarks>
    // IDL: long fontSize;
    // VB6: fontSize As Long
    int fontSize
    {
      // IDL: HRESULT fontSize ([out, retval] long* ReturnValue);
      // VB6: Function fontSize As Long
      [DispId(6105)]
      get;
      // IDL: HRESULT fontSize (long value);
      // VB6: Sub fontSize (ByVal value As Long)
      [DispId(6105)]
      set;
    }

    /// <summary><para><c>fontStyle</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontStyle</c> property was the following:  <c>BSTR fontStyle</c>;</para></remarks>
    // IDL: BSTR fontStyle;
    // VB6: fontStyle As String
    string fontStyle
    {
      // IDL: HRESULT fontStyle ([out, retval] BSTR* ReturnValue);
      // VB6: Function fontStyle As String
      [DispId(6106)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT fontStyle (BSTR value);
      // VB6: Sub fontStyle (ByVal value As String)
      [DispId(6106)]
      set;
    }

    /// <summary><para><c>foregroundColor</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>foregroundColor</c> property was the following:  <c>BSTR foregroundColor</c>;</para></remarks>
    // IDL: BSTR foregroundColor;
    // VB6: foregroundColor As String
    string foregroundColor
    {
      // IDL: HRESULT foregroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function foregroundColor As String
      [DispId(6103)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT foregroundColor (BSTR value);
      // VB6: Sub foregroundColor (ByVal value As String)
      [DispId(6103)]
      set;
    }

    /// <summary><para><c>itemCount</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemCount</c> property was the following:  <c>long itemCount</c>;</para></remarks>
    // IDL: long itemCount;
    // VB6: itemCount As Long
    int itemCount
    {
      // IDL: HRESULT itemCount ([out, retval] long* ReturnValue);
      // VB6: Function itemCount As Long
      [DispId(6109)]
      get;
    }

    /// <summary><para><c>multiselect</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>multiselect</c> property was the following:  <c>VARIANT_BOOL multiselect</c>;</para></remarks>
    // IDL: VARIANT_BOOL multiselect;
    // VB6: multiselect As Boolean
    bool multiselect
    {
      // IDL: HRESULT multiselect ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function multiselect As Boolean
      [DispId(6101)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT multiselect (VARIANT_BOOL value);
      // VB6: Sub multiselect (ByVal value As Boolean)
      [DispId(6101)]
      set;
    }

    /// <summary><para><c>popUp</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>popUp</c> property was the following:  <c>VARIANT_BOOL popUp</c>;</para></remarks>
    // IDL: VARIANT_BOOL popUp;
    // VB6: popUp As Boolean
    bool popUp
    {
      // IDL: HRESULT popUp (VARIANT_BOOL value);
      // VB6: Sub popUp (ByVal value As Boolean)
      [DispId(6120)]
      set;
    }

    /// <summary><para><c>readOnly</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>readOnly</c> property was the following:  <c>VARIANT_BOOL readOnly</c>;</para></remarks>
    // IDL: VARIANT_BOOL readOnly;
    // VB6: readOnly As Boolean
    bool readOnly
    {
      // IDL: HRESULT readOnly ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function readOnly As Boolean
      [DispId(6102)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT readOnly (VARIANT_BOOL value);
      // VB6: Sub readOnly (ByVal value As Boolean)
      [DispId(6102)]
      set;
    }

    /// <summary><para><c>selectedItem</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>selectedItem</c> property was the following:  <c>long selectedItem</c>;</para></remarks>
    // IDL: long selectedItem;
    // VB6: selectedItem As Long
    int selectedItem
    {
      // IDL: HRESULT selectedItem ([out, retval] long* ReturnValue);
      // VB6: Function selectedItem As Long
      [DispId(6108)]
      get;
      // IDL: HRESULT selectedItem (long value);
      // VB6: Sub selectedItem (ByVal value As Long)
      [DispId(6108)]
      set;
    }

    /// <summary><para><c>sorted</c> property of <c>IWMPListBoxCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>sorted</c> property was the following:  <c>VARIANT_BOOL sorted</c>;</para></remarks>
    // IDL: VARIANT_BOOL sorted;
    // VB6: sorted As Boolean
    bool sorted
    {
      // IDL: HRESULT sorted ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function sorted As Boolean
      [DispId(6100)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT sorted (VARIANT_BOOL value);
      // VB6: Sub sorted (ByVal value As Boolean)
      [DispId(6100)]
      set;
    }
  }

  /// <summary><para><c>IWMPListBoxItem</c> interface.  </para><para>IWMPListBoxItem: Public interface for skin object model.</para></summary>
  // IWMPListBoxItem: Public interface for skin object model.
  [Guid("D255DFB8-C22A-42CF-B8B7-F15D7BCF65D6")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPListBoxItem
  {
    /// <summary><para><c>value</c> property of <c>IWMPListBoxItem</c> interface.  </para><para>property value</para></summary>
    /// <remarks><para>An original IDL definition of <c>value</c> property was the following:  <c>BSTR value</c>;</para></remarks>
    // property value
    // IDL: BSTR value;
    // VB6: value As String
    string value
    {
      // IDL: HRESULT value (BSTR value);
      // VB6: Sub value (ByVal value As String)
      [DispId(6119)]
      set;
    }
  }

  /// <summary><para><c>IWMPMedia</c> interface.  </para><para>IWMPMedia: Public interface.</para></summary>
  // IWMPMedia: Public interface.
  [Guid("94D55E95-3FAC-11D3-B155-00C04F79FAA6")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPMedia
  {
    /// <summary><para><c>isIdentical</c> property get of <c>IWMPMedia</c> interface.  </para><para>Determines if the supplied object is the same as the this one</para></summary>
    /// <remarks><para>An original IDL definition of <c>isIdentical</c> property get was the following:  <c>HRESULT isIdentical (IWMPMedia* pIWMPMedia, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Determines if the supplied object is the same as the this one
    // IDL: HRESULT isIdentical (IWMPMedia* pIWMPMedia, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isIdentical (ByVal pIWMPMedia As IWMPMedia) As Boolean
    [DispId(763)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isIdentical (IWMPMedia pIWMPMedia) /* property get method */;

    /// <summary><para><c>getMarkerTime</c> method of <c>IWMPMedia</c> interface.  </para><para>Returns the time of a marker</para></summary>
    /// <remarks><para>An original IDL definition of <c>getMarkerTime</c> method was the following:  <c>HRESULT getMarkerTime (long MarkerNum, [out, retval] double* ReturnValue)</c>;</para></remarks>
    // Returns the time of a marker
    // IDL: HRESULT getMarkerTime (long MarkerNum, [out, retval] double* ReturnValue);
    // VB6: Function getMarkerTime (ByVal MarkerNum As Long) As Double
    [DispId(755)]
    double getMarkerTime (int MarkerNum);

    /// <summary><para><c>getMarkerName</c> method of <c>IWMPMedia</c> interface.  </para><para>Returns the name of a marker</para></summary>
    /// <remarks><para>An original IDL definition of <c>getMarkerName</c> method was the following:  <c>HRESULT getMarkerName (long MarkerNum, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the name of a marker
    // IDL: HRESULT getMarkerName (long MarkerNum, [out, retval] BSTR* ReturnValue);
    // VB6: Function getMarkerName (ByVal MarkerNum As Long) As String
    [DispId(756)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getMarkerName (int MarkerNum);

    /// <summary><para><c>getAttributeName</c> method of <c>IWMPMedia</c> interface.  </para><para>Returns the name of the attribute whose index has been specified</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAttributeName</c> method was the following:  <c>HRESULT getAttributeName (long lIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the name of the attribute whose index has been specified
    // IDL: HRESULT getAttributeName (long lIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function getAttributeName (ByVal lIndex As Long) As String
    [DispId(760)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getAttributeName (int lIndex);

    /// <summary><para><c>getItemInfo</c> method of <c>IWMPMedia</c> interface.  </para><para>Returns the value of specified attribute for this media</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfo</c> method was the following:  <c>HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the value of specified attribute for this media
    // IDL: HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfo (ByVal bstrItemName As String) As String
    [DispId(761)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>setItemInfo</c> method of <c>IWMPMedia</c> interface.  </para><para>Sets the value of specified attribute for this media</para></summary>
    /// <remarks><para>An original IDL definition of <c>setItemInfo</c> method was the following:  <c>HRESULT setItemInfo (BSTR bstrItemName, BSTR bstrVal)</c>;</para></remarks>
    // Sets the value of specified attribute for this media
    // IDL: HRESULT setItemInfo (BSTR bstrItemName, BSTR bstrVal);
    // VB6: Sub setItemInfo (ByVal bstrItemName As String, ByVal bstrVal As String)
    [DispId(762)]
    void setItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItemName, [MarshalAs(UnmanagedType.BStr)] string bstrVal);

    /// <summary><para><c>getItemInfoByAtom</c> method of <c>IWMPMedia</c> interface.  </para><para>Gets an item info by atom</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfoByAtom</c> method was the following:  <c>HRESULT getItemInfoByAtom (long lAtom, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Gets an item info by atom
    // IDL: HRESULT getItemInfoByAtom (long lAtom, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfoByAtom (ByVal lAtom As Long) As String
    [DispId(765)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfoByAtom (int lAtom);

    /// <summary><para><c>isMemberOf</c> method of <c>IWMPMedia</c> interface.  </para><para>Is the media a member of the given playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>isMemberOf</c> method was the following:  <c>HRESULT isMemberOf (IWMPPlaylist* pPlaylist, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Is the media a member of the given playlist
    // IDL: HRESULT isMemberOf (IWMPPlaylist* pPlaylist, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isMemberOf (ByVal pPlaylist As IWMPPlaylist) As Boolean
    [DispId(766)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isMemberOf (IWMPPlaylist pPlaylist);

    /// <summary><para><c>isReadOnlyItem</c> method of <c>IWMPMedia</c> interface.  </para><para>Is the attribute read only</para></summary>
    /// <remarks><para>An original IDL definition of <c>isReadOnlyItem</c> method was the following:  <c>HRESULT isReadOnlyItem (BSTR bstrItemName, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Is the attribute read only
    // IDL: HRESULT isReadOnlyItem (BSTR bstrItemName, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isReadOnlyItem (ByVal bstrItemName As String) As Boolean
    [DispId(767)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isReadOnlyItem ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>attributeCount</c> property of <c>IWMPMedia</c> interface.  </para><para>Returns the count of the attributes associated with this media</para></summary>
    /// <remarks><para>An original IDL definition of <c>attributeCount</c> property was the following:  <c>long attributeCount</c>;</para></remarks>
    // Returns the count of the attributes associated with this media
    // IDL: long attributeCount;
    // VB6: attributeCount As Long
    int attributeCount
    {
      // IDL: HRESULT attributeCount ([out, retval] long* ReturnValue);
      // VB6: Function attributeCount As Long
      [DispId(759)]
      get;
    }

    /// <summary><para><c>duration</c> property of <c>IWMPMedia</c> interface.  </para><para>Returns duration of current media</para></summary>
    /// <remarks><para>An original IDL definition of <c>duration</c> property was the following:  <c>double duration</c>;</para></remarks>
    // Returns duration of current media
    // IDL: double duration;
    // VB6: duration As Double
    double duration
    {
      // IDL: HRESULT duration ([out, retval] double* ReturnValue);
      // VB6: Function duration As Double
      [DispId(757)]
      get;
    }

    /// <summary><para><c>durationString</c> property of <c>IWMPMedia</c> interface.  </para><para>Returns duration of current media as a string</para></summary>
    /// <remarks><para>An original IDL definition of <c>durationString</c> property was the following:  <c>BSTR durationString</c>;</para></remarks>
    // Returns duration of current media as a string
    // IDL: BSTR durationString;
    // VB6: durationString As String
    string durationString
    {
      // IDL: HRESULT durationString ([out, retval] BSTR* ReturnValue);
      // VB6: Function durationString As String
      [DispId(758)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>imageSourceHeight</c> property of <c>IWMPMedia</c> interface.  </para><para>Returns the original height of the source images</para></summary>
    /// <remarks><para>An original IDL definition of <c>imageSourceHeight</c> property was the following:  <c>long imageSourceHeight</c>;</para></remarks>
    // Returns the original height of the source images
    // IDL: long imageSourceHeight;
    // VB6: imageSourceHeight As Long
    int imageSourceHeight
    {
      // IDL: HRESULT imageSourceHeight ([out, retval] long* ReturnValue);
      // VB6: Function imageSourceHeight As Long
      [DispId(753)]
      get;
    }

    /// <summary><para><c>imageSourceWidth</c> property of <c>IWMPMedia</c> interface.  </para><para>Returns the original width of the source images</para></summary>
    /// <remarks><para>An original IDL definition of <c>imageSourceWidth</c> property was the following:  <c>long imageSourceWidth</c>;</para></remarks>
    // Returns the original width of the source images
    // IDL: long imageSourceWidth;
    // VB6: imageSourceWidth As Long
    int imageSourceWidth
    {
      // IDL: HRESULT imageSourceWidth ([out, retval] long* ReturnValue);
      // VB6: Function imageSourceWidth As Long
      [DispId(752)]
      get;
    }

    /// <summary><para><c>markerCount</c> property of <c>IWMPMedia</c> interface.  </para><para>Returns the number of markers in the file</para></summary>
    /// <remarks><para>An original IDL definition of <c>markerCount</c> property was the following:  <c>long markerCount</c>;</para></remarks>
    // Returns the number of markers in the file
    // IDL: long markerCount;
    // VB6: markerCount As Long
    int markerCount
    {
      // IDL: HRESULT markerCount ([out, retval] long* ReturnValue);
      // VB6: Function markerCount As Long
      [DispId(754)]
      get;
    }

    /// <summary><para><c>name</c> property of <c>IWMPMedia</c> interface.  </para><para>Returns the name of the media</para></summary>
    /// <remarks><para>An original IDL definition of <c>name</c> property was the following:  <c>BSTR name</c>;</para></remarks>
    // Returns the name of the media
    // IDL: BSTR name;
    // VB6: name As String
    string name
    {
      // IDL: HRESULT name ([out, retval] BSTR* ReturnValue);
      // VB6: Function name As String
      [DispId(764)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT name (BSTR value);
      // VB6: Sub name (ByVal value As String)
      [DispId(764)]
      set;
    }

    /// <summary><para><c>sourceURL</c> property of <c>IWMPMedia</c> interface.  </para><para>Returns the media URL</para></summary>
    /// <remarks><para>An original IDL definition of <c>sourceURL</c> property was the following:  <c>BSTR sourceURL</c>;</para></remarks>
    // Returns the media URL
    // IDL: BSTR sourceURL;
    // VB6: sourceURL As String
    string sourceURL
    {
      // IDL: HRESULT sourceURL ([out, retval] BSTR* ReturnValue);
      // VB6: Function sourceURL As String
      [DispId(751)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPMedia2</c> interface.  </para><para>IWMPMedia2: Public interface.</para></summary>
  // IWMPMedia2: Public interface.
  [Guid("AB7C88BB-143E-4EA4-ACC3-E4350B2106C3")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPMedia2
  {
    /// <summary><para><c>isIdentical</c> property get of <c>IWMPMedia2</c> interface.  </para><para>Determines if the supplied object is the same as the this one</para></summary>
    /// <remarks><para>An original IDL definition of <c>isIdentical</c> property get was the following:  <c>HRESULT isIdentical (IWMPMedia* pIWMPMedia, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Determines if the supplied object is the same as the this one
    // IDL: HRESULT isIdentical (IWMPMedia* pIWMPMedia, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isIdentical (ByVal pIWMPMedia As IWMPMedia) As Boolean
    [DispId(763)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isIdentical (IWMPMedia pIWMPMedia) /* property get method */;

    /// <summary><para><c>getMarkerTime</c> method of <c>IWMPMedia2</c> interface.  </para><para>Returns the time of a marker</para></summary>
    /// <remarks><para>An original IDL definition of <c>getMarkerTime</c> method was the following:  <c>HRESULT getMarkerTime (long MarkerNum, [out, retval] double* ReturnValue)</c>;</para></remarks>
    // Returns the time of a marker
    // IDL: HRESULT getMarkerTime (long MarkerNum, [out, retval] double* ReturnValue);
    // VB6: Function getMarkerTime (ByVal MarkerNum As Long) As Double
    [DispId(755)]
    double getMarkerTime (int MarkerNum);

    /// <summary><para><c>getMarkerName</c> method of <c>IWMPMedia2</c> interface.  </para><para>Returns the name of a marker</para></summary>
    /// <remarks><para>An original IDL definition of <c>getMarkerName</c> method was the following:  <c>HRESULT getMarkerName (long MarkerNum, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the name of a marker
    // IDL: HRESULT getMarkerName (long MarkerNum, [out, retval] BSTR* ReturnValue);
    // VB6: Function getMarkerName (ByVal MarkerNum As Long) As String
    [DispId(756)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getMarkerName (int MarkerNum);

    /// <summary><para><c>getAttributeName</c> method of <c>IWMPMedia2</c> interface.  </para><para>Returns the name of the attribute whose index has been specified</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAttributeName</c> method was the following:  <c>HRESULT getAttributeName (long lIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the name of the attribute whose index has been specified
    // IDL: HRESULT getAttributeName (long lIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function getAttributeName (ByVal lIndex As Long) As String
    [DispId(760)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getAttributeName (int lIndex);

    /// <summary><para><c>getItemInfo</c> method of <c>IWMPMedia2</c> interface.  </para><para>Returns the value of specified attribute for this media</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfo</c> method was the following:  <c>HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the value of specified attribute for this media
    // IDL: HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfo (ByVal bstrItemName As String) As String
    [DispId(761)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>setItemInfo</c> method of <c>IWMPMedia2</c> interface.  </para><para>Sets the value of specified attribute for this media</para></summary>
    /// <remarks><para>An original IDL definition of <c>setItemInfo</c> method was the following:  <c>HRESULT setItemInfo (BSTR bstrItemName, BSTR bstrVal)</c>;</para></remarks>
    // Sets the value of specified attribute for this media
    // IDL: HRESULT setItemInfo (BSTR bstrItemName, BSTR bstrVal);
    // VB6: Sub setItemInfo (ByVal bstrItemName As String, ByVal bstrVal As String)
    [DispId(762)]
    void setItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItemName, [MarshalAs(UnmanagedType.BStr)] string bstrVal);

    /// <summary><para><c>getItemInfoByAtom</c> method of <c>IWMPMedia2</c> interface.  </para><para>Gets an item info by atom</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfoByAtom</c> method was the following:  <c>HRESULT getItemInfoByAtom (long lAtom, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Gets an item info by atom
    // IDL: HRESULT getItemInfoByAtom (long lAtom, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfoByAtom (ByVal lAtom As Long) As String
    [DispId(765)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfoByAtom (int lAtom);

    /// <summary><para><c>isMemberOf</c> method of <c>IWMPMedia2</c> interface.  </para><para>Is the media a member of the given playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>isMemberOf</c> method was the following:  <c>HRESULT isMemberOf (IWMPPlaylist* pPlaylist, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Is the media a member of the given playlist
    // IDL: HRESULT isMemberOf (IWMPPlaylist* pPlaylist, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isMemberOf (ByVal pPlaylist As IWMPPlaylist) As Boolean
    [DispId(766)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isMemberOf (IWMPPlaylist pPlaylist);

    /// <summary><para><c>isReadOnlyItem</c> method of <c>IWMPMedia2</c> interface.  </para><para>Is the attribute read only</para></summary>
    /// <remarks><para>An original IDL definition of <c>isReadOnlyItem</c> method was the following:  <c>HRESULT isReadOnlyItem (BSTR bstrItemName, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Is the attribute read only
    // IDL: HRESULT isReadOnlyItem (BSTR bstrItemName, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isReadOnlyItem (ByVal bstrItemName As String) As Boolean
    [DispId(767)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isReadOnlyItem ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>attributeCount</c> property of <c>IWMPMedia2</c> interface.  </para><para>Returns the count of the attributes associated with this media</para></summary>
    /// <remarks><para>An original IDL definition of <c>attributeCount</c> property was the following:  <c>long attributeCount</c>;</para></remarks>
    // Returns the count of the attributes associated with this media
    // IDL: long attributeCount;
    // VB6: attributeCount As Long
    int attributeCount
    {
      // IDL: HRESULT attributeCount ([out, retval] long* ReturnValue);
      // VB6: Function attributeCount As Long
      [DispId(759)]
      get;
    }

    /// <summary><para><c>duration</c> property of <c>IWMPMedia2</c> interface.  </para><para>Returns duration of current media</para></summary>
    /// <remarks><para>An original IDL definition of <c>duration</c> property was the following:  <c>double duration</c>;</para></remarks>
    // Returns duration of current media
    // IDL: double duration;
    // VB6: duration As Double
    double duration
    {
      // IDL: HRESULT duration ([out, retval] double* ReturnValue);
      // VB6: Function duration As Double
      [DispId(757)]
      get;
    }

    /// <summary><para><c>durationString</c> property of <c>IWMPMedia2</c> interface.  </para><para>Returns duration of current media as a string</para></summary>
    /// <remarks><para>An original IDL definition of <c>durationString</c> property was the following:  <c>BSTR durationString</c>;</para></remarks>
    // Returns duration of current media as a string
    // IDL: BSTR durationString;
    // VB6: durationString As String
    string durationString
    {
      // IDL: HRESULT durationString ([out, retval] BSTR* ReturnValue);
      // VB6: Function durationString As String
      [DispId(758)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>Error</c> property of <c>IWMPMedia2</c> interface.  </para><para>Returns an error item pointer for a media specific error</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> property was the following:  <c>IWMPErrorItem* Error</c>;</para></remarks>
    // Returns an error item pointer for a media specific error
    // IDL: IWMPErrorItem* Error;
    // VB6: Error As IWMPErrorItem
    IWMPErrorItem Error
    {
      // IDL: HRESULT Error ([out, retval] IWMPErrorItem** ReturnValue);
      // VB6: Function Error As IWMPErrorItem
      [DispId(768)]
      get;
    }

    /// <summary><para><c>imageSourceHeight</c> property of <c>IWMPMedia2</c> interface.  </para><para>Returns the original height of the source images</para></summary>
    /// <remarks><para>An original IDL definition of <c>imageSourceHeight</c> property was the following:  <c>long imageSourceHeight</c>;</para></remarks>
    // Returns the original height of the source images
    // IDL: long imageSourceHeight;
    // VB6: imageSourceHeight As Long
    int imageSourceHeight
    {
      // IDL: HRESULT imageSourceHeight ([out, retval] long* ReturnValue);
      // VB6: Function imageSourceHeight As Long
      [DispId(753)]
      get;
    }

    /// <summary><para><c>imageSourceWidth</c> property of <c>IWMPMedia2</c> interface.  </para><para>Returns the original width of the source images</para></summary>
    /// <remarks><para>An original IDL definition of <c>imageSourceWidth</c> property was the following:  <c>long imageSourceWidth</c>;</para></remarks>
    // Returns the original width of the source images
    // IDL: long imageSourceWidth;
    // VB6: imageSourceWidth As Long
    int imageSourceWidth
    {
      // IDL: HRESULT imageSourceWidth ([out, retval] long* ReturnValue);
      // VB6: Function imageSourceWidth As Long
      [DispId(752)]
      get;
    }

    /// <summary><para><c>markerCount</c> property of <c>IWMPMedia2</c> interface.  </para><para>Returns the number of markers in the file</para></summary>
    /// <remarks><para>An original IDL definition of <c>markerCount</c> property was the following:  <c>long markerCount</c>;</para></remarks>
    // Returns the number of markers in the file
    // IDL: long markerCount;
    // VB6: markerCount As Long
    int markerCount
    {
      // IDL: HRESULT markerCount ([out, retval] long* ReturnValue);
      // VB6: Function markerCount As Long
      [DispId(754)]
      get;
    }

    /// <summary><para><c>name</c> property of <c>IWMPMedia2</c> interface.  </para><para>Returns the name of the media</para></summary>
    /// <remarks><para>An original IDL definition of <c>name</c> property was the following:  <c>BSTR name</c>;</para></remarks>
    // Returns the name of the media
    // IDL: BSTR name;
    // VB6: name As String
    string name
    {
      // IDL: HRESULT name ([out, retval] BSTR* ReturnValue);
      // VB6: Function name As String
      [DispId(764)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT name (BSTR value);
      // VB6: Sub name (ByVal value As String)
      [DispId(764)]
      set;
    }

    /// <summary><para><c>sourceURL</c> property of <c>IWMPMedia2</c> interface.  </para><para>Returns the media URL</para></summary>
    /// <remarks><para>An original IDL definition of <c>sourceURL</c> property was the following:  <c>BSTR sourceURL</c>;</para></remarks>
    // Returns the media URL
    // IDL: BSTR sourceURL;
    // VB6: sourceURL As String
    string sourceURL
    {
      // IDL: HRESULT sourceURL ([out, retval] BSTR* ReturnValue);
      // VB6: Function sourceURL As String
      [DispId(751)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPMedia3</c> interface.  </para><para>IWMPMedia3: Public interface.</para></summary>
  // IWMPMedia3: Public interface.
  [Guid("F118EFC7-F03A-4FB4-99C9-1C02A5C1065B")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPMedia3
  {
    /// <summary><para><c>isIdentical</c> property get of <c>IWMPMedia3</c> interface.  </para><para>Determines if the supplied object is the same as the this one</para></summary>
    /// <remarks><para>An original IDL definition of <c>isIdentical</c> property get was the following:  <c>HRESULT isIdentical (IWMPMedia* pIWMPMedia, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Determines if the supplied object is the same as the this one
    // IDL: HRESULT isIdentical (IWMPMedia* pIWMPMedia, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isIdentical (ByVal pIWMPMedia As IWMPMedia) As Boolean
    [DispId(763)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isIdentical (IWMPMedia pIWMPMedia) /* property get method */;

    /// <summary><para><c>getMarkerTime</c> method of <c>IWMPMedia3</c> interface.  </para><para>Returns the time of a marker</para></summary>
    /// <remarks><para>An original IDL definition of <c>getMarkerTime</c> method was the following:  <c>HRESULT getMarkerTime (long MarkerNum, [out, retval] double* ReturnValue)</c>;</para></remarks>
    // Returns the time of a marker
    // IDL: HRESULT getMarkerTime (long MarkerNum, [out, retval] double* ReturnValue);
    // VB6: Function getMarkerTime (ByVal MarkerNum As Long) As Double
    [DispId(755)]
    double getMarkerTime (int MarkerNum);

    /// <summary><para><c>getMarkerName</c> method of <c>IWMPMedia3</c> interface.  </para><para>Returns the name of a marker</para></summary>
    /// <remarks><para>An original IDL definition of <c>getMarkerName</c> method was the following:  <c>HRESULT getMarkerName (long MarkerNum, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the name of a marker
    // IDL: HRESULT getMarkerName (long MarkerNum, [out, retval] BSTR* ReturnValue);
    // VB6: Function getMarkerName (ByVal MarkerNum As Long) As String
    [DispId(756)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getMarkerName (int MarkerNum);

    /// <summary><para><c>getAttributeName</c> method of <c>IWMPMedia3</c> interface.  </para><para>Returns the name of the attribute whose index has been specified</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAttributeName</c> method was the following:  <c>HRESULT getAttributeName (long lIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the name of the attribute whose index has been specified
    // IDL: HRESULT getAttributeName (long lIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function getAttributeName (ByVal lIndex As Long) As String
    [DispId(760)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getAttributeName (int lIndex);

    /// <summary><para><c>getItemInfo</c> method of <c>IWMPMedia3</c> interface.  </para><para>Returns the value of specified attribute for this media</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfo</c> method was the following:  <c>HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the value of specified attribute for this media
    // IDL: HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfo (ByVal bstrItemName As String) As String
    [DispId(761)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>setItemInfo</c> method of <c>IWMPMedia3</c> interface.  </para><para>Sets the value of specified attribute for this media</para></summary>
    /// <remarks><para>An original IDL definition of <c>setItemInfo</c> method was the following:  <c>HRESULT setItemInfo (BSTR bstrItemName, BSTR bstrVal)</c>;</para></remarks>
    // Sets the value of specified attribute for this media
    // IDL: HRESULT setItemInfo (BSTR bstrItemName, BSTR bstrVal);
    // VB6: Sub setItemInfo (ByVal bstrItemName As String, ByVal bstrVal As String)
    [DispId(762)]
    void setItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItemName, [MarshalAs(UnmanagedType.BStr)] string bstrVal);

    /// <summary><para><c>getItemInfoByAtom</c> method of <c>IWMPMedia3</c> interface.  </para><para>Gets an item info by atom</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfoByAtom</c> method was the following:  <c>HRESULT getItemInfoByAtom (long lAtom, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Gets an item info by atom
    // IDL: HRESULT getItemInfoByAtom (long lAtom, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfoByAtom (ByVal lAtom As Long) As String
    [DispId(765)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfoByAtom (int lAtom);

    /// <summary><para><c>isMemberOf</c> method of <c>IWMPMedia3</c> interface.  </para><para>Is the media a member of the given playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>isMemberOf</c> method was the following:  <c>HRESULT isMemberOf (IWMPPlaylist* pPlaylist, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Is the media a member of the given playlist
    // IDL: HRESULT isMemberOf (IWMPPlaylist* pPlaylist, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isMemberOf (ByVal pPlaylist As IWMPPlaylist) As Boolean
    [DispId(766)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isMemberOf (IWMPPlaylist pPlaylist);

    /// <summary><para><c>isReadOnlyItem</c> method of <c>IWMPMedia3</c> interface.  </para><para>Is the attribute read only</para></summary>
    /// <remarks><para>An original IDL definition of <c>isReadOnlyItem</c> method was the following:  <c>HRESULT isReadOnlyItem (BSTR bstrItemName, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Is the attribute read only
    // IDL: HRESULT isReadOnlyItem (BSTR bstrItemName, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isReadOnlyItem (ByVal bstrItemName As String) As Boolean
    [DispId(767)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isReadOnlyItem ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>getAttributeCountByType</c> method of <c>IWMPMedia3</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAttributeCountByType</c> method was the following:  <c>HRESULT getAttributeCountByType (BSTR bstrType, BSTR bstrLanguage, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT getAttributeCountByType (BSTR bstrType, BSTR bstrLanguage, [out, retval] long* ReturnValue);
    // VB6: Function getAttributeCountByType (ByVal bstrType As String, ByVal bstrLanguage As String) As Long
    [DispId(769)]
    int getAttributeCountByType ([MarshalAs(UnmanagedType.BStr)] string bstrType, [MarshalAs(UnmanagedType.BStr)] string bstrLanguage);

    /// <summary><para><c>getItemInfoByType</c> method of <c>IWMPMedia3</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfoByType</c> method was the following:  <c>HRESULT getItemInfoByType (BSTR bstrType, BSTR bstrLanguage, long lIndex, [out, retval] VARIANT* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT getItemInfoByType (BSTR bstrType, BSTR bstrLanguage, long lIndex, [out, retval] VARIANT* ReturnValue);
    // VB6: Function getItemInfoByType (ByVal bstrType As String, ByVal bstrLanguage As String, ByVal lIndex As Long) As Any
    [DispId(770)]
    object getItemInfoByType ([MarshalAs(UnmanagedType.BStr)] string bstrType, [MarshalAs(UnmanagedType.BStr)] string bstrLanguage, int lIndex);

    /// <summary><para><c>attributeCount</c> property of <c>IWMPMedia3</c> interface.  </para><para>Returns the count of the attributes associated with this media</para></summary>
    /// <remarks><para>An original IDL definition of <c>attributeCount</c> property was the following:  <c>long attributeCount</c>;</para></remarks>
    // Returns the count of the attributes associated with this media
    // IDL: long attributeCount;
    // VB6: attributeCount As Long
    int attributeCount
    {
      // IDL: HRESULT attributeCount ([out, retval] long* ReturnValue);
      // VB6: Function attributeCount As Long
      [DispId(759)]
      get;
    }

    /// <summary><para><c>duration</c> property of <c>IWMPMedia3</c> interface.  </para><para>Returns duration of current media</para></summary>
    /// <remarks><para>An original IDL definition of <c>duration</c> property was the following:  <c>double duration</c>;</para></remarks>
    // Returns duration of current media
    // IDL: double duration;
    // VB6: duration As Double
    double duration
    {
      // IDL: HRESULT duration ([out, retval] double* ReturnValue);
      // VB6: Function duration As Double
      [DispId(757)]
      get;
    }

    /// <summary><para><c>durationString</c> property of <c>IWMPMedia3</c> interface.  </para><para>Returns duration of current media as a string</para></summary>
    /// <remarks><para>An original IDL definition of <c>durationString</c> property was the following:  <c>BSTR durationString</c>;</para></remarks>
    // Returns duration of current media as a string
    // IDL: BSTR durationString;
    // VB6: durationString As String
    string durationString
    {
      // IDL: HRESULT durationString ([out, retval] BSTR* ReturnValue);
      // VB6: Function durationString As String
      [DispId(758)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>Error</c> property of <c>IWMPMedia3</c> interface.  </para><para>Returns an error item pointer for a media specific error</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> property was the following:  <c>IWMPErrorItem* Error</c>;</para></remarks>
    // Returns an error item pointer for a media specific error
    // IDL: IWMPErrorItem* Error;
    // VB6: Error As IWMPErrorItem
    IWMPErrorItem Error
    {
      // IDL: HRESULT Error ([out, retval] IWMPErrorItem** ReturnValue);
      // VB6: Function Error As IWMPErrorItem
      [DispId(768)]
      get;
    }

    /// <summary><para><c>imageSourceHeight</c> property of <c>IWMPMedia3</c> interface.  </para><para>Returns the original height of the source images</para></summary>
    /// <remarks><para>An original IDL definition of <c>imageSourceHeight</c> property was the following:  <c>long imageSourceHeight</c>;</para></remarks>
    // Returns the original height of the source images
    // IDL: long imageSourceHeight;
    // VB6: imageSourceHeight As Long
    int imageSourceHeight
    {
      // IDL: HRESULT imageSourceHeight ([out, retval] long* ReturnValue);
      // VB6: Function imageSourceHeight As Long
      [DispId(753)]
      get;
    }

    /// <summary><para><c>imageSourceWidth</c> property of <c>IWMPMedia3</c> interface.  </para><para>Returns the original width of the source images</para></summary>
    /// <remarks><para>An original IDL definition of <c>imageSourceWidth</c> property was the following:  <c>long imageSourceWidth</c>;</para></remarks>
    // Returns the original width of the source images
    // IDL: long imageSourceWidth;
    // VB6: imageSourceWidth As Long
    int imageSourceWidth
    {
      // IDL: HRESULT imageSourceWidth ([out, retval] long* ReturnValue);
      // VB6: Function imageSourceWidth As Long
      [DispId(752)]
      get;
    }

    /// <summary><para><c>markerCount</c> property of <c>IWMPMedia3</c> interface.  </para><para>Returns the number of markers in the file</para></summary>
    /// <remarks><para>An original IDL definition of <c>markerCount</c> property was the following:  <c>long markerCount</c>;</para></remarks>
    // Returns the number of markers in the file
    // IDL: long markerCount;
    // VB6: markerCount As Long
    int markerCount
    {
      // IDL: HRESULT markerCount ([out, retval] long* ReturnValue);
      // VB6: Function markerCount As Long
      [DispId(754)]
      get;
    }

    /// <summary><para><c>name</c> property of <c>IWMPMedia3</c> interface.  </para><para>Returns the name of the media</para></summary>
    /// <remarks><para>An original IDL definition of <c>name</c> property was the following:  <c>BSTR name</c>;</para></remarks>
    // Returns the name of the media
    // IDL: BSTR name;
    // VB6: name As String
    string name
    {
      // IDL: HRESULT name ([out, retval] BSTR* ReturnValue);
      // VB6: Function name As String
      [DispId(764)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT name (BSTR value);
      // VB6: Sub name (ByVal value As String)
      [DispId(764)]
      set;
    }

    /// <summary><para><c>sourceURL</c> property of <c>IWMPMedia3</c> interface.  </para><para>Returns the media URL</para></summary>
    /// <remarks><para>An original IDL definition of <c>sourceURL</c> property was the following:  <c>BSTR sourceURL</c>;</para></remarks>
    // Returns the media URL
    // IDL: BSTR sourceURL;
    // VB6: sourceURL As String
    string sourceURL
    {
      // IDL: HRESULT sourceURL ([out, retval] BSTR* ReturnValue);
      // VB6: Function sourceURL As String
      [DispId(751)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPMediaCollection</c> interface.  </para><para>IWMPMediaCollection: Public interface.</para></summary>
  // IWMPMediaCollection: Public interface.
  [Guid("8363BC22-B4B4-4B19-989D-1CD765749DD1")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPMediaCollection
  {
    /// <summary><para><c>add</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Creates a new media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>add</c> method was the following:  <c>HRESULT add (BSTR bstrURL, [out, retval] IWMPMedia** ReturnValue)</c>;</para></remarks>
    // Creates a new media object
    // IDL: HRESULT add (BSTR bstrURL, [out, retval] IWMPMedia** ReturnValue);
    // VB6: Function add (ByVal bstrURL As String) As IWMPMedia
    [DispId(452)]
    IWMPMedia add ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>getAll</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Returns a collection of all the items</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAll</c> method was the following:  <c>HRESULT getAll ([out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of all the items
    // IDL: HRESULT getAll ([out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getAll As IWMPPlaylist
    [DispId(453)]
    IWMPPlaylist getAll ();

    /// <summary><para><c>getByName</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Returns a collection of items with the given name</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByName</c> method was the following:  <c>HRESULT getByName (BSTR bstrName, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of items with the given name
    // IDL: HRESULT getByName (BSTR bstrName, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getByName (ByVal bstrName As String) As IWMPPlaylist
    [DispId(454)]
    IWMPPlaylist getByName ([MarshalAs(UnmanagedType.BStr)] string bstrName);

    /// <summary><para><c>getByGenre</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Returns a collection of items with the given genre</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByGenre</c> method was the following:  <c>HRESULT getByGenre (BSTR bstrGenre, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of items with the given genre
    // IDL: HRESULT getByGenre (BSTR bstrGenre, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getByGenre (ByVal bstrGenre As String) As IWMPPlaylist
    [DispId(455)]
    IWMPPlaylist getByGenre ([MarshalAs(UnmanagedType.BStr)] string bstrGenre);

    /// <summary><para><c>getByAuthor</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Returns a collection of items by a given author</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByAuthor</c> method was the following:  <c>HRESULT getByAuthor (BSTR bstrAuthor, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of items by a given author
    // IDL: HRESULT getByAuthor (BSTR bstrAuthor, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getByAuthor (ByVal bstrAuthor As String) As IWMPPlaylist
    [DispId(456)]
    IWMPPlaylist getByAuthor ([MarshalAs(UnmanagedType.BStr)] string bstrAuthor);

    /// <summary><para><c>getByAlbum</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Returns a collection of items from the given album</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByAlbum</c> method was the following:  <c>HRESULT getByAlbum (BSTR bstrAlbum, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of items from the given album
    // IDL: HRESULT getByAlbum (BSTR bstrAlbum, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getByAlbum (ByVal bstrAlbum As String) As IWMPPlaylist
    [DispId(457)]
    IWMPPlaylist getByAlbum ([MarshalAs(UnmanagedType.BStr)] string bstrAlbum);

    /// <summary><para><c>getByAttribute</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Returns a collection of items with the given attribute</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByAttribute</c> method was the following:  <c>HRESULT getByAttribute (BSTR bstrAttribute, BSTR bstrValue, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of items with the given attribute
    // IDL: HRESULT getByAttribute (BSTR bstrAttribute, BSTR bstrValue, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getByAttribute (ByVal bstrAttribute As String, ByVal bstrValue As String) As IWMPPlaylist
    [DispId(458)]
    IWMPPlaylist getByAttribute ([MarshalAs(UnmanagedType.BStr)] string bstrAttribute, [MarshalAs(UnmanagedType.BStr)] string bstrValue);

    /// <summary><para><c>remove</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Removes an item from the media collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>remove</c> method was the following:  <c>HRESULT remove (IWMPMedia* pItem, VARIANT_BOOL varfDeleteFile)</c>;</para></remarks>
    // Removes an item from the media collection
    // IDL: HRESULT remove (IWMPMedia* pItem, VARIANT_BOOL varfDeleteFile);
    // VB6: Sub remove (ByVal pItem As IWMPMedia, ByVal varfDeleteFile As Boolean)
    [DispId(459)]
    void remove (IWMPMedia pItem, [MarshalAs(UnmanagedType.VariantBool)] bool varfDeleteFile);

    /// <summary><para><c>getAttributeStringCollection</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Returns the string collection associated with an attribute</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAttributeStringCollection</c> method was the following:  <c>HRESULT getAttributeStringCollection (BSTR bstrAttribute, BSTR bstrMediaType, [out, retval] IWMPStringCollection** ReturnValue)</c>;</para></remarks>
    // Returns the string collection associated with an attribute
    // IDL: HRESULT getAttributeStringCollection (BSTR bstrAttribute, BSTR bstrMediaType, [out, retval] IWMPStringCollection** ReturnValue);
    // VB6: Function getAttributeStringCollection (ByVal bstrAttribute As String, ByVal bstrMediaType As String) As IWMPStringCollection
    [DispId(461)]
    IWMPStringCollection getAttributeStringCollection ([MarshalAs(UnmanagedType.BStr)] string bstrAttribute, [MarshalAs(UnmanagedType.BStr)] string bstrMediaType);

    /// <summary><para><c>getMediaAtom</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Gets an atom associated with an item name which can be requested from an IWMPMedia out of this collection via getItemInfoByAtom</para></summary>
    /// <remarks><para>An original IDL definition of <c>getMediaAtom</c> method was the following:  <c>HRESULT getMediaAtom (BSTR bstrItemName, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // Gets an atom associated with an item name which can be requested from an IWMPMedia out of this collection via getItemInfoByAtom
    // IDL: HRESULT getMediaAtom (BSTR bstrItemName, [out, retval] long* ReturnValue);
    // VB6: Function getMediaAtom (ByVal bstrItemName As String) As Long
    [DispId(470)]
    int getMediaAtom ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>setDeleted</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Sets the deleted flag on a media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>setDeleted</c> method was the following:  <c>HRESULT setDeleted (IWMPMedia* pItem, VARIANT_BOOL varfIsDeleted)</c>;</para></remarks>
    // Sets the deleted flag on a media object
    // IDL: HRESULT setDeleted (IWMPMedia* pItem, VARIANT_BOOL varfIsDeleted);
    // VB6: Sub setDeleted (ByVal pItem As IWMPMedia, ByVal varfIsDeleted As Boolean)
    [DispId(471)]
    void setDeleted (IWMPMedia pItem, [MarshalAs(UnmanagedType.VariantBool)] bool varfIsDeleted);

    /// <summary><para><c>isDeleted</c> method of <c>IWMPMediaCollection</c> interface.  </para><para>Gets the deleted flag on a media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>isDeleted</c> method was the following:  <c>HRESULT isDeleted (IWMPMedia* pItem, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Gets the deleted flag on a media object
    // IDL: HRESULT isDeleted (IWMPMedia* pItem, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isDeleted (ByVal pItem As IWMPMedia) As Boolean
    [DispId(472)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isDeleted (IWMPMedia pItem);
  }

  /// <summary><para><c>IWMPMediaCollection2</c> interface.  </para><para>IWMPMediaCollection2: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPMediaCollection2: Public interface for Windows Media Player SDK.
  [Guid("8BA957F5-FD8C-4791-B82D-F840401EE474")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPMediaCollection2
  {
    /// <summary><para><c>add</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Creates a new media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>add</c> method was the following:  <c>HRESULT add (BSTR bstrURL, [out, retval] IWMPMedia** ReturnValue)</c>;</para></remarks>
    // Creates a new media object
    // IDL: HRESULT add (BSTR bstrURL, [out, retval] IWMPMedia** ReturnValue);
    // VB6: Function add (ByVal bstrURL As String) As IWMPMedia
    [DispId(452)]
    IWMPMedia add ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>getAll</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Returns a collection of all the items</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAll</c> method was the following:  <c>HRESULT getAll ([out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of all the items
    // IDL: HRESULT getAll ([out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getAll As IWMPPlaylist
    [DispId(453)]
    IWMPPlaylist getAll ();

    /// <summary><para><c>getByName</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Returns a collection of items with the given name</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByName</c> method was the following:  <c>HRESULT getByName (BSTR bstrName, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of items with the given name
    // IDL: HRESULT getByName (BSTR bstrName, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getByName (ByVal bstrName As String) As IWMPPlaylist
    [DispId(454)]
    IWMPPlaylist getByName ([MarshalAs(UnmanagedType.BStr)] string bstrName);

    /// <summary><para><c>getByGenre</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Returns a collection of items with the given genre</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByGenre</c> method was the following:  <c>HRESULT getByGenre (BSTR bstrGenre, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of items with the given genre
    // IDL: HRESULT getByGenre (BSTR bstrGenre, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getByGenre (ByVal bstrGenre As String) As IWMPPlaylist
    [DispId(455)]
    IWMPPlaylist getByGenre ([MarshalAs(UnmanagedType.BStr)] string bstrGenre);

    /// <summary><para><c>getByAuthor</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Returns a collection of items by a given author</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByAuthor</c> method was the following:  <c>HRESULT getByAuthor (BSTR bstrAuthor, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of items by a given author
    // IDL: HRESULT getByAuthor (BSTR bstrAuthor, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getByAuthor (ByVal bstrAuthor As String) As IWMPPlaylist
    [DispId(456)]
    IWMPPlaylist getByAuthor ([MarshalAs(UnmanagedType.BStr)] string bstrAuthor);

    /// <summary><para><c>getByAlbum</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Returns a collection of items from the given album</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByAlbum</c> method was the following:  <c>HRESULT getByAlbum (BSTR bstrAlbum, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of items from the given album
    // IDL: HRESULT getByAlbum (BSTR bstrAlbum, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getByAlbum (ByVal bstrAlbum As String) As IWMPPlaylist
    [DispId(457)]
    IWMPPlaylist getByAlbum ([MarshalAs(UnmanagedType.BStr)] string bstrAlbum);

    /// <summary><para><c>getByAttribute</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Returns a collection of items with the given attribute</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByAttribute</c> method was the following:  <c>HRESULT getByAttribute (BSTR bstrAttribute, BSTR bstrValue, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of items with the given attribute
    // IDL: HRESULT getByAttribute (BSTR bstrAttribute, BSTR bstrValue, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getByAttribute (ByVal bstrAttribute As String, ByVal bstrValue As String) As IWMPPlaylist
    [DispId(458)]
    IWMPPlaylist getByAttribute ([MarshalAs(UnmanagedType.BStr)] string bstrAttribute, [MarshalAs(UnmanagedType.BStr)] string bstrValue);

    /// <summary><para><c>remove</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Removes an item from the media collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>remove</c> method was the following:  <c>HRESULT remove (IWMPMedia* pItem, VARIANT_BOOL varfDeleteFile)</c>;</para></remarks>
    // Removes an item from the media collection
    // IDL: HRESULT remove (IWMPMedia* pItem, VARIANT_BOOL varfDeleteFile);
    // VB6: Sub remove (ByVal pItem As IWMPMedia, ByVal varfDeleteFile As Boolean)
    [DispId(459)]
    void remove (IWMPMedia pItem, [MarshalAs(UnmanagedType.VariantBool)] bool varfDeleteFile);

    /// <summary><para><c>getAttributeStringCollection</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Returns the string collection associated with an attribute</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAttributeStringCollection</c> method was the following:  <c>HRESULT getAttributeStringCollection (BSTR bstrAttribute, BSTR bstrMediaType, [out, retval] IWMPStringCollection** ReturnValue)</c>;</para></remarks>
    // Returns the string collection associated with an attribute
    // IDL: HRESULT getAttributeStringCollection (BSTR bstrAttribute, BSTR bstrMediaType, [out, retval] IWMPStringCollection** ReturnValue);
    // VB6: Function getAttributeStringCollection (ByVal bstrAttribute As String, ByVal bstrMediaType As String) As IWMPStringCollection
    [DispId(461)]
    IWMPStringCollection getAttributeStringCollection ([MarshalAs(UnmanagedType.BStr)] string bstrAttribute, [MarshalAs(UnmanagedType.BStr)] string bstrMediaType);

    /// <summary><para><c>getMediaAtom</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Gets an atom associated with an item name which can be requested from an IWMPMedia out of this collection via getItemInfoByAtom</para></summary>
    /// <remarks><para>An original IDL definition of <c>getMediaAtom</c> method was the following:  <c>HRESULT getMediaAtom (BSTR bstrItemName, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // Gets an atom associated with an item name which can be requested from an IWMPMedia out of this collection via getItemInfoByAtom
    // IDL: HRESULT getMediaAtom (BSTR bstrItemName, [out, retval] long* ReturnValue);
    // VB6: Function getMediaAtom (ByVal bstrItemName As String) As Long
    [DispId(470)]
    int getMediaAtom ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>setDeleted</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Sets the deleted flag on a media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>setDeleted</c> method was the following:  <c>HRESULT setDeleted (IWMPMedia* pItem, VARIANT_BOOL varfIsDeleted)</c>;</para></remarks>
    // Sets the deleted flag on a media object
    // IDL: HRESULT setDeleted (IWMPMedia* pItem, VARIANT_BOOL varfIsDeleted);
    // VB6: Sub setDeleted (ByVal pItem As IWMPMedia, ByVal varfIsDeleted As Boolean)
    [DispId(471)]
    void setDeleted (IWMPMedia pItem, [MarshalAs(UnmanagedType.VariantBool)] bool varfIsDeleted);

    /// <summary><para><c>isDeleted</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Gets the deleted flag on a media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>isDeleted</c> method was the following:  <c>HRESULT isDeleted (IWMPMedia* pItem, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Gets the deleted flag on a media object
    // IDL: HRESULT isDeleted (IWMPMedia* pItem, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isDeleted (ByVal pItem As IWMPMedia) As Boolean
    [DispId(472)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isDeleted (IWMPMedia pItem);

    /// <summary><para><c>createQuery</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Creates an empty query object</para></summary>
    /// <remarks><para>An original IDL definition of <c>createQuery</c> method was the following:  <c>HRESULT createQuery ([out, retval] IWMPQuery** ReturnValue)</c>;</para></remarks>
    // Creates an empty query object
    // IDL: HRESULT createQuery ([out, retval] IWMPQuery** ReturnValue);
    // VB6: Function createQuery As IWMPQuery
    [DispId(1401)]
    IWMPQuery createQuery ();

    /// <summary><para><c>getPlaylistByQuery</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Creates a playlist from a query</para></summary>
    /// <remarks><para>An original IDL definition of <c>getPlaylistByQuery</c> method was the following:  <c>HRESULT getPlaylistByQuery (IWMPQuery* pQuery, BSTR bstrMediaType, BSTR bstrSortAttribute, VARIANT_BOOL fSortAscending, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Creates a playlist from a query
    // IDL: HRESULT getPlaylistByQuery (IWMPQuery* pQuery, BSTR bstrMediaType, BSTR bstrSortAttribute, VARIANT_BOOL fSortAscending, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getPlaylistByQuery (ByVal pQuery As IWMPQuery, ByVal bstrMediaType As String, ByVal bstrSortAttribute As String, ByVal fSortAscending As Boolean) As IWMPPlaylist
    [DispId(1402)]
    IWMPPlaylist getPlaylistByQuery (IWMPQuery pQuery, [MarshalAs(UnmanagedType.BStr)] string bstrMediaType, [MarshalAs(UnmanagedType.BStr)] string bstrSortAttribute, [MarshalAs(UnmanagedType.VariantBool)] bool fSortAscending);

    /// <summary><para><c>getStringCollectionByQuery</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Creates a string collection from a query</para></summary>
    /// <remarks><para>An original IDL definition of <c>getStringCollectionByQuery</c> method was the following:  <c>HRESULT getStringCollectionByQuery (BSTR bstrAttribute, IWMPQuery* pQuery, BSTR bstrMediaType, BSTR bstrSortAttribute, VARIANT_BOOL fSortAscending, [out, retval] IWMPStringCollection** ReturnValue)</c>;</para></remarks>
    // Creates a string collection from a query
    // IDL: HRESULT getStringCollectionByQuery (BSTR bstrAttribute, IWMPQuery* pQuery, BSTR bstrMediaType, BSTR bstrSortAttribute, VARIANT_BOOL fSortAscending, [out, retval] IWMPStringCollection** ReturnValue);
    // VB6: Function getStringCollectionByQuery (ByVal bstrAttribute As String, ByVal pQuery As IWMPQuery, ByVal bstrMediaType As String, ByVal bstrSortAttribute As String, ByVal fSortAscending As Boolean) As IWMPStringCollection
    [DispId(1403)]
    IWMPStringCollection getStringCollectionByQuery ([MarshalAs(UnmanagedType.BStr)] string bstrAttribute, IWMPQuery pQuery, [MarshalAs(UnmanagedType.BStr)] string bstrMediaType, [MarshalAs(UnmanagedType.BStr)] string bstrSortAttribute, [MarshalAs(UnmanagedType.VariantBool)] bool fSortAscending);

    /// <summary><para><c>getByAttributeAndMediaType</c> method of <c>IWMPMediaCollection2</c> interface.  </para><para>Returns a collection of items with the given attribute and media type</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByAttributeAndMediaType</c> method was the following:  <c>HRESULT getByAttributeAndMediaType (BSTR bstrAttribute, BSTR bstrValue, BSTR bstrMediaType, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns a collection of items with the given attribute and media type
    // IDL: HRESULT getByAttributeAndMediaType (BSTR bstrAttribute, BSTR bstrValue, BSTR bstrMediaType, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function getByAttributeAndMediaType (ByVal bstrAttribute As String, ByVal bstrValue As String, ByVal bstrMediaType As String) As IWMPPlaylist
    [DispId(1404)]
    IWMPPlaylist getByAttributeAndMediaType ([MarshalAs(UnmanagedType.BStr)] string bstrAttribute, [MarshalAs(UnmanagedType.BStr)] string bstrValue, [MarshalAs(UnmanagedType.BStr)] string bstrMediaType);
  }

  /// <summary><para><c>IWMPMenuCtrl</c> interface.  </para><para>IWMPMenuCtrl: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPMenuCtrl: Not Public.  Internal interface used by Windows Media Player.
  [Guid("158A7ADC-33DA-4039-A553-BDDBBE389F5C")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPMenuCtrl
  {
    /// <summary><para><c>deleteAllItems</c> method of <c>IWMPMenuCtrl</c> interface.  </para><para>method deleteAllItems</para></summary>
    /// <remarks><para>An original IDL definition of <c>deleteAllItems</c> method was the following:  <c>HRESULT deleteAllItems (void)</c>;</para></remarks>
    // method deleteAllItems
    // IDL: HRESULT deleteAllItems (void);
    // VB6: Sub deleteAllItems
    [DispId(6301)]
    void deleteAllItems ();

    /// <summary><para><c>appendItem</c> method of <c>IWMPMenuCtrl</c> interface.  </para><para>method appendItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>appendItem</c> method was the following:  <c>HRESULT appendItem (long nID, BSTR bstrItem)</c>;</para></remarks>
    // method appendItem
    // IDL: HRESULT appendItem (long nID, BSTR bstrItem);
    // VB6: Sub appendItem (ByVal nID As Long, ByVal bstrItem As String)
    [DispId(6302)]
    void appendItem (int nID, [MarshalAs(UnmanagedType.BStr)] string bstrItem);

    /// <summary><para><c>appendSeparator</c> method of <c>IWMPMenuCtrl</c> interface.  </para><para>method appendSeparator</para></summary>
    /// <remarks><para>An original IDL definition of <c>appendSeparator</c> method was the following:  <c>HRESULT appendSeparator (void)</c>;</para></remarks>
    // method appendSeparator
    // IDL: HRESULT appendSeparator (void);
    // VB6: Sub appendSeparator
    [DispId(6303)]
    void appendSeparator ();

    /// <summary><para><c>enableItem</c> method of <c>IWMPMenuCtrl</c> interface.  </para><para>property enableItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>enableItem</c> method was the following:  <c>HRESULT enableItem (long nID, VARIANT_BOOL newVal)</c>;</para></remarks>
    // property enableItem
    // IDL: HRESULT enableItem (long nID, VARIANT_BOOL newVal);
    // VB6: Sub enableItem (ByVal nID As Long, ByVal newVal As Boolean)
    [DispId(6304)]
    void enableItem (int nID, [MarshalAs(UnmanagedType.VariantBool)] bool newVal);

    /// <summary><para><c>checkItem</c> method of <c>IWMPMenuCtrl</c> interface.  </para><para>property checkItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>checkItem</c> method was the following:  <c>HRESULT checkItem (long nID, VARIANT_BOOL newVal)</c>;</para></remarks>
    // property checkItem
    // IDL: HRESULT checkItem (long nID, VARIANT_BOOL newVal);
    // VB6: Sub checkItem (ByVal nID As Long, ByVal newVal As Boolean)
    [DispId(6305)]
    void checkItem (int nID, [MarshalAs(UnmanagedType.VariantBool)] bool newVal);

    /// <summary><para><c>checkRadioItem</c> method of <c>IWMPMenuCtrl</c> interface.  </para><para>property checkRadioItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>checkRadioItem</c> method was the following:  <c>HRESULT checkRadioItem (long nID, VARIANT_BOOL newVal)</c>;</para></remarks>
    // property checkRadioItem
    // IDL: HRESULT checkRadioItem (long nID, VARIANT_BOOL newVal);
    // VB6: Sub checkRadioItem (ByVal nID As Long, ByVal newVal As Boolean)
    [DispId(6306)]
    void checkRadioItem (int nID, [MarshalAs(UnmanagedType.VariantBool)] bool newVal);

    /// <summary><para><c>show</c> method of <c>IWMPMenuCtrl</c> interface.  </para><para>method show</para></summary>
    /// <remarks><para>An original IDL definition of <c>show</c> method was the following:  <c>HRESULT show ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // method show
    // IDL: HRESULT show ([out, retval] long* ReturnValue);
    // VB6: Function show As Long
    [DispId(6308)]
    int show ();

    /// <summary><para><c>showEx</c> method of <c>IWMPMenuCtrl</c> interface.  </para><para>method showEx</para></summary>
    /// <remarks><para>An original IDL definition of <c>showEx</c> method was the following:  <c>HRESULT showEx (long nID)</c>;</para></remarks>
    // method showEx
    // IDL: HRESULT showEx (long nID);
    // VB6: Sub showEx (ByVal nID As Long)
    [DispId(6309)]
    void showEx (int nID);

    /// <summary><para><c>showFlags</c> property of <c>IWMPMenuCtrl</c> interface.  </para><para>property showFlags</para></summary>
    /// <remarks><para>An original IDL definition of <c>showFlags</c> property was the following:  <c>long showFlags</c>;</para></remarks>
    // property showFlags
    // IDL: long showFlags;
    // VB6: showFlags As Long
    int showFlags
    {
      // IDL: HRESULT showFlags ([out, retval] long* ReturnValue);
      // VB6: Function showFlags As Long
      [DispId(6307)]
      get;
      // IDL: HRESULT showFlags (long value);
      // VB6: Sub showFlags (ByVal value As Long)
      [DispId(6307)]
      set;
    }
  }

  /// <summary><para><c>IWMPMetadataPicture</c> interface.  </para><para>IWMPMetadataPicture: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPMetadataPicture: Not Public.  Internal interface used by Windows Media Player.
  [Guid("5C29BBE0-F87D-4C45-AA28-A70F0230FFA9")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPMetadataPicture
  {
    /// <summary><para><c>Description</c> property of <c>IWMPMetadataPicture</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>Description</c> property was the following:  <c>BSTR Description</c>;</para></remarks>
    // IDL: BSTR Description;
    // VB6: Description As String
    string Description
    {
      // IDL: HRESULT Description ([out, retval] BSTR* ReturnValue);
      // VB6: Function Description As String
      [DispId(1053)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>mimeType</c> property of <c>IWMPMetadataPicture</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>mimeType</c> property was the following:  <c>BSTR mimeType</c>;</para></remarks>
    // IDL: BSTR mimeType;
    // VB6: mimeType As String
    string mimeType
    {
      // IDL: HRESULT mimeType ([out, retval] BSTR* ReturnValue);
      // VB6: Function mimeType As String
      [DispId(1051)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>pictureType</c> property of <c>IWMPMetadataPicture</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>pictureType</c> property was the following:  <c>BSTR pictureType</c>;</para></remarks>
    // IDL: BSTR pictureType;
    // VB6: pictureType As String
    string pictureType
    {
      // IDL: HRESULT pictureType ([out, retval] BSTR* ReturnValue);
      // VB6: Function pictureType As String
      [DispId(1052)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>URL</c> property of <c>IWMPMetadataPicture</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>URL</c> property was the following:  <c>BSTR URL</c>;</para></remarks>
    // IDL: BSTR URL;
    // VB6: URL As String
    string URL
    {
      // IDL: HRESULT URL ([out, retval] BSTR* ReturnValue);
      // VB6: Function URL As String
      [DispId(1054)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPMetadataText</c> interface.  </para><para>IWMPMetadataText: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPMetadataText: Not Public.  Internal interface used by Windows Media Player.
  [Guid("769A72DB-13D2-45E2-9C48-53CA9D5B7450")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPMetadataText
  {
    /// <summary><para><c>Description</c> property of <c>IWMPMetadataText</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>Description</c> property was the following:  <c>BSTR Description</c>;</para></remarks>
    // IDL: BSTR Description;
    // VB6: Description As String
    string Description
    {
      // IDL: HRESULT Description ([out, retval] BSTR* ReturnValue);
      // VB6: Function Description As String
      [DispId(1056)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>text</c> property of <c>IWMPMetadataText</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>text</c> property was the following:  <c>BSTR text</c>;</para></remarks>
    // IDL: BSTR text;
    // VB6: text As String
    string text
    {
      // IDL: HRESULT text ([out, retval] BSTR* ReturnValue);
      // VB6: Function text As String
      [DispId(1055)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPNetwork</c> interface.  </para><para>IWMPNetwork: Public interface.</para></summary>
  // IWMPNetwork: Public interface.
  [Guid("EC21B779-EDEF-462D-BBA4-AD9DDE2B29A7")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPNetwork
  {
    /// <summary><para><c>getProxySettings</c> method of <c>IWMPNetwork</c> interface.  </para><para>Returns the proxy settings for the specified protocol</para></summary>
    /// <remarks><para>An original IDL definition of <c>getProxySettings</c> method was the following:  <c>HRESULT getProxySettings (BSTR bstrProtocol, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // Returns the proxy settings for the specified protocol
    // IDL: HRESULT getProxySettings (BSTR bstrProtocol, [out, retval] long* ReturnValue);
    // VB6: Function getProxySettings (ByVal bstrProtocol As String) As Long
    [DispId(813)]
    int getProxySettings ([MarshalAs(UnmanagedType.BStr)] string bstrProtocol);

    /// <summary><para><c>setProxySettings</c> method of <c>IWMPNetwork</c> interface.  </para><para>Sets the proxy settings for the specified protocol</para></summary>
    /// <remarks><para>An original IDL definition of <c>setProxySettings</c> method was the following:  <c>HRESULT setProxySettings (BSTR bstrProtocol, long lProxySetting)</c>;</para></remarks>
    // Sets the proxy settings for the specified protocol
    // IDL: HRESULT setProxySettings (BSTR bstrProtocol, long lProxySetting);
    // VB6: Sub setProxySettings (ByVal bstrProtocol As String, ByVal lProxySetting As Long)
    [DispId(814)]
    void setProxySettings ([MarshalAs(UnmanagedType.BStr)] string bstrProtocol, int lProxySetting);

    /// <summary><para><c>getProxyName</c> method of <c>IWMPNetwork</c> interface.  </para><para>Returns the proxy name for the specified protocol</para></summary>
    /// <remarks><para>An original IDL definition of <c>getProxyName</c> method was the following:  <c>HRESULT getProxyName (BSTR bstrProtocol, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the proxy name for the specified protocol
    // IDL: HRESULT getProxyName (BSTR bstrProtocol, [out, retval] BSTR* ReturnValue);
    // VB6: Function getProxyName (ByVal bstrProtocol As String) As String
    [DispId(815)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getProxyName ([MarshalAs(UnmanagedType.BStr)] string bstrProtocol);

    /// <summary><para><c>setProxyName</c> method of <c>IWMPNetwork</c> interface.  </para><para>Sets the proxy name for the specified protocol</para></summary>
    /// <remarks><para>An original IDL definition of <c>setProxyName</c> method was the following:  <c>HRESULT setProxyName (BSTR bstrProtocol, BSTR bstrProxyName)</c>;</para></remarks>
    // Sets the proxy name for the specified protocol
    // IDL: HRESULT setProxyName (BSTR bstrProtocol, BSTR bstrProxyName);
    // VB6: Sub setProxyName (ByVal bstrProtocol As String, ByVal bstrProxyName As String)
    [DispId(816)]
    void setProxyName ([MarshalAs(UnmanagedType.BStr)] string bstrProtocol, [MarshalAs(UnmanagedType.BStr)] string bstrProxyName);

    /// <summary><para><c>getProxyPort</c> method of <c>IWMPNetwork</c> interface.  </para><para>Returns the proxy port for the specified protocol</para></summary>
    /// <remarks><para>An original IDL definition of <c>getProxyPort</c> method was the following:  <c>HRESULT getProxyPort (BSTR bstrProtocol, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // Returns the proxy port for the specified protocol
    // IDL: HRESULT getProxyPort (BSTR bstrProtocol, [out, retval] long* ReturnValue);
    // VB6: Function getProxyPort (ByVal bstrProtocol As String) As Long
    [DispId(817)]
    int getProxyPort ([MarshalAs(UnmanagedType.BStr)] string bstrProtocol);

    /// <summary><para><c>setProxyPort</c> method of <c>IWMPNetwork</c> interface.  </para><para>Sets the proxy port for the specified protocol</para></summary>
    /// <remarks><para>An original IDL definition of <c>setProxyPort</c> method was the following:  <c>HRESULT setProxyPort (BSTR bstrProtocol, long lProxyPort)</c>;</para></remarks>
    // Sets the proxy port for the specified protocol
    // IDL: HRESULT setProxyPort (BSTR bstrProtocol, long lProxyPort);
    // VB6: Sub setProxyPort (ByVal bstrProtocol As String, ByVal lProxyPort As Long)
    [DispId(818)]
    void setProxyPort ([MarshalAs(UnmanagedType.BStr)] string bstrProtocol, int lProxyPort);

    /// <summary><para><c>getProxyExceptionList</c> method of <c>IWMPNetwork</c> interface.  </para><para>Returns the proxy exception list for the specified protocol</para></summary>
    /// <remarks><para>An original IDL definition of <c>getProxyExceptionList</c> method was the following:  <c>HRESULT getProxyExceptionList (BSTR bstrProtocol, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the proxy exception list for the specified protocol
    // IDL: HRESULT getProxyExceptionList (BSTR bstrProtocol, [out, retval] BSTR* ReturnValue);
    // VB6: Function getProxyExceptionList (ByVal bstrProtocol As String) As String
    [DispId(819)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getProxyExceptionList ([MarshalAs(UnmanagedType.BStr)] string bstrProtocol);

    /// <summary><para><c>setProxyExceptionList</c> method of <c>IWMPNetwork</c> interface.  </para><para>Sets the proxy exception list for the specified protocol</para></summary>
    /// <remarks><para>An original IDL definition of <c>setProxyExceptionList</c> method was the following:  <c>HRESULT setProxyExceptionList (BSTR bstrProtocol, BSTR pbstrExceptionList)</c>;</para></remarks>
    // Sets the proxy exception list for the specified protocol
    // IDL: HRESULT setProxyExceptionList (BSTR bstrProtocol, BSTR pbstrExceptionList);
    // VB6: Sub setProxyExceptionList (ByVal bstrProtocol As String, ByVal pbstrExceptionList As String)
    [DispId(820)]
    void setProxyExceptionList ([MarshalAs(UnmanagedType.BStr)] string bstrProtocol, [MarshalAs(UnmanagedType.BStr)] string pbstrExceptionList);

    /// <summary><para><c>getProxyBypassForLocal</c> method of <c>IWMPNetwork</c> interface.  </para><para>Returns whether or not to bypass the proxy for local addresses</para></summary>
    /// <remarks><para>An original IDL definition of <c>getProxyBypassForLocal</c> method was the following:  <c>HRESULT getProxyBypassForLocal (BSTR bstrProtocol, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Returns whether or not to bypass the proxy for local addresses
    // IDL: HRESULT getProxyBypassForLocal (BSTR bstrProtocol, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function getProxyBypassForLocal (ByVal bstrProtocol As String) As Boolean
    [DispId(821)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool getProxyBypassForLocal ([MarshalAs(UnmanagedType.BStr)] string bstrProtocol);

    /// <summary><para><c>setProxyBypassForLocal</c> method of <c>IWMPNetwork</c> interface.  </para><para>Sets whether or not to by pass the proxy for local addresses</para></summary>
    /// <remarks><para>An original IDL definition of <c>setProxyBypassForLocal</c> method was the following:  <c>HRESULT setProxyBypassForLocal (BSTR bstrProtocol, VARIANT_BOOL fBypassForLocal)</c>;</para></remarks>
    // Sets whether or not to by pass the proxy for local addresses
    // IDL: HRESULT setProxyBypassForLocal (BSTR bstrProtocol, VARIANT_BOOL fBypassForLocal);
    // VB6: Sub setProxyBypassForLocal (ByVal bstrProtocol As String, ByVal fBypassForLocal As Boolean)
    [DispId(822)]
    void setProxyBypassForLocal ([MarshalAs(UnmanagedType.BStr)] string bstrProtocol, [MarshalAs(UnmanagedType.VariantBool)] bool fBypassForLocal);

    /// <summary><para><c>bandWidth</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the current bandwidth of the clip.</para></summary>
    /// <remarks><para>An original IDL definition of <c>bandWidth</c> property was the following:  <c>long bandWidth</c>;</para></remarks>
    // Returns the current bandwidth of the clip.
    // IDL: long bandWidth;
    // VB6: bandWidth As Long
    int bandWidth
    {
      // IDL: HRESULT bandWidth ([out, retval] long* ReturnValue);
      // VB6: Function bandWidth As Long
      [DispId(801)]
      get;
    }

    /// <summary><para><c>bitRate</c> property of <c>IWMPNetwork</c> interface.  </para><para>Current video bit rate</para></summary>
    /// <remarks><para>An original IDL definition of <c>bitRate</c> property was the following:  <c>long bitRate</c>;</para></remarks>
    // Current video bit rate
    // IDL: long bitRate;
    // VB6: bitRate As Long
    int bitRate
    {
      // IDL: HRESULT bitRate ([out, retval] long* ReturnValue);
      // VB6: Function bitRate As Long
      [DispId(812)]
      get;
    }

    /// <summary><para><c>bufferingCount</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the number of times buffering occurred during clip playback.</para></summary>
    /// <remarks><para>An original IDL definition of <c>bufferingCount</c> property was the following:  <c>long bufferingCount</c>;</para></remarks>
    // Returns the number of times buffering occurred during clip playback.
    // IDL: long bufferingCount;
    // VB6: bufferingCount As Long
    int bufferingCount
    {
      // IDL: HRESULT bufferingCount ([out, retval] long* ReturnValue);
      // VB6: Function bufferingCount As Long
      [DispId(807)]
      get;
    }

    /// <summary><para><c>bufferingProgress</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the percentage of buffering completed.</para></summary>
    /// <remarks><para>An original IDL definition of <c>bufferingProgress</c> property was the following:  <c>long bufferingProgress</c>;</para></remarks>
    // Returns the percentage of buffering completed.
    // IDL: long bufferingProgress;
    // VB6: bufferingProgress As Long
    int bufferingProgress
    {
      // IDL: HRESULT bufferingProgress ([out, retval] long* ReturnValue);
      // VB6: Function bufferingProgress As Long
      [DispId(808)]
      get;
    }

    /// <summary><para><c>bufferingTime</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the number of seconds allocated for buffering for this media type.</para></summary>
    /// <remarks><para>An original IDL definition of <c>bufferingTime</c> property was the following:  <c>long bufferingTime</c>;</para></remarks>
    // Returns the number of seconds allocated for buffering for this media type.
    // IDL: long bufferingTime;
    // VB6: bufferingTime As Long
    int bufferingTime
    {
      // IDL: HRESULT bufferingTime ([out, retval] long* ReturnValue);
      // VB6: Function bufferingTime As Long
      [DispId(809)]
      get;
      // IDL: HRESULT bufferingTime (long value);
      // VB6: Sub bufferingTime (ByVal value As Long)
      [DispId(809)]
      set;
    }

    /// <summary><para><c>downloadProgress</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the percentage of download completed.</para></summary>
    /// <remarks><para>An original IDL definition of <c>downloadProgress</c> property was the following:  <c>long downloadProgress</c>;</para></remarks>
    // Returns the percentage of download completed.
    // IDL: long downloadProgress;
    // VB6: downloadProgress As Long
    int downloadProgress
    {
      // IDL: HRESULT downloadProgress ([out, retval] long* ReturnValue);
      // VB6: Function downloadProgress As Long
      [DispId(824)]
      get;
    }

    /// <summary><para><c>encodedFrameRate</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the video frame rate, in frames/second, that the file was encoded in</para></summary>
    /// <remarks><para>An original IDL definition of <c>encodedFrameRate</c> property was the following:  <c>long encodedFrameRate</c>;</para></remarks>
    // Returns the video frame rate, in frames/second, that the file was encoded in
    // IDL: long encodedFrameRate;
    // VB6: encodedFrameRate As Long
    int encodedFrameRate
    {
      // IDL: HRESULT encodedFrameRate ([out, retval] long* ReturnValue);
      // VB6: Function encodedFrameRate As Long
      [DispId(825)]
      get;
    }

    /// <summary><para><c>frameRate</c> property of <c>IWMPNetwork</c> interface.  </para><para>Current video frame rate in frames/second</para></summary>
    /// <remarks><para>An original IDL definition of <c>frameRate</c> property was the following:  <c>long frameRate</c>;</para></remarks>
    // Current video frame rate in frames/second
    // IDL: long frameRate;
    // VB6: frameRate As Long
    int frameRate
    {
      // IDL: HRESULT frameRate ([out, retval] long* ReturnValue);
      // VB6: Function frameRate As Long
      [DispId(810)]
      get;
    }

    /// <summary><para><c>framesSkipped</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the number of skipped frames</para></summary>
    /// <remarks><para>An original IDL definition of <c>framesSkipped</c> property was the following:  <c>long framesSkipped</c>;</para></remarks>
    // Returns the number of skipped frames
    // IDL: long framesSkipped;
    // VB6: framesSkipped As Long
    int framesSkipped
    {
      // IDL: HRESULT framesSkipped ([out, retval] long* ReturnValue);
      // VB6: Function framesSkipped As Long
      [DispId(826)]
      get;
    }

    /// <summary><para><c>lostPackets</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the number of packets lost.</para></summary>
    /// <remarks><para>An original IDL definition of <c>lostPackets</c> property was the following:  <c>long lostPackets</c>;</para></remarks>
    // Returns the number of packets lost.
    // IDL: long lostPackets;
    // VB6: lostPackets As Long
    int lostPackets
    {
      // IDL: HRESULT lostPackets ([out, retval] long* ReturnValue);
      // VB6: Function lostPackets As Long
      [DispId(805)]
      get;
    }

    /// <summary><para><c>maxBandwidth</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns or sets maximum allowed bandwidth</para></summary>
    /// <remarks><para>An original IDL definition of <c>maxBandwidth</c> property was the following:  <c>long maxBandwidth</c>;</para></remarks>
    // Returns or sets maximum allowed bandwidth
    // IDL: long maxBandwidth;
    // VB6: maxBandwidth As Long
    int maxBandwidth
    {
      // IDL: HRESULT maxBandwidth ([out, retval] long* ReturnValue);
      // VB6: Function maxBandwidth As Long
      [DispId(823)]
      get;
      // IDL: HRESULT maxBandwidth (long value);
      // VB6: Sub maxBandwidth (ByVal value As Long)
      [DispId(823)]
      set;
    }

    /// <summary><para><c>maxBitRate</c> property of <c>IWMPNetwork</c> interface.  </para><para>Maximum possible video bit rate</para></summary>
    /// <remarks><para>An original IDL definition of <c>maxBitRate</c> property was the following:  <c>long maxBitRate</c>;</para></remarks>
    // Maximum possible video bit rate
    // IDL: long maxBitRate;
    // VB6: maxBitRate As Long
    int maxBitRate
    {
      // IDL: HRESULT maxBitRate ([out, retval] long* ReturnValue);
      // VB6: Function maxBitRate As Long
      [DispId(811)]
      get;
    }

    /// <summary><para><c>receivedPackets</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the number of packets received.</para></summary>
    /// <remarks><para>An original IDL definition of <c>receivedPackets</c> property was the following:  <c>long receivedPackets</c>;</para></remarks>
    // Returns the number of packets received.
    // IDL: long receivedPackets;
    // VB6: receivedPackets As Long
    int receivedPackets
    {
      // IDL: HRESULT receivedPackets ([out, retval] long* ReturnValue);
      // VB6: Function receivedPackets As Long
      [DispId(804)]
      get;
    }

    /// <summary><para><c>receptionQuality</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the percentage of packets received in the last 15 seconds.</para></summary>
    /// <remarks><para>An original IDL definition of <c>receptionQuality</c> property was the following:  <c>long receptionQuality</c>;</para></remarks>
    // Returns the percentage of packets received in the last 15 seconds.
    // IDL: long receptionQuality;
    // VB6: receptionQuality As Long
    int receptionQuality
    {
      // IDL: HRESULT receptionQuality ([out, retval] long* ReturnValue);
      // VB6: Function receptionQuality As Long
      [DispId(806)]
      get;
    }

    /// <summary><para><c>recoveredPackets</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the number of recovered packets</para></summary>
    /// <remarks><para>An original IDL definition of <c>recoveredPackets</c> property was the following:  <c>long recoveredPackets</c>;</para></remarks>
    // Returns the number of recovered packets
    // IDL: long recoveredPackets;
    // VB6: recoveredPackets As Long
    int recoveredPackets
    {
      // IDL: HRESULT recoveredPackets ([out, retval] long* ReturnValue);
      // VB6: Function recoveredPackets As Long
      [DispId(802)]
      get;
    }

    /// <summary><para><c>sourceProtocol</c> property of <c>IWMPNetwork</c> interface.  </para><para>Returns the source protocol used to receive data.</para></summary>
    /// <remarks><para>An original IDL definition of <c>sourceProtocol</c> property was the following:  <c>BSTR sourceProtocol</c>;</para></remarks>
    // Returns the source protocol used to receive data.
    // IDL: BSTR sourceProtocol;
    // VB6: sourceProtocol As String
    string sourceProtocol
    {
      // IDL: HRESULT sourceProtocol ([out, retval] BSTR* ReturnValue);
      // VB6: Function sourceProtocol As String
      [DispId(803)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPNowDoingDispatch</c> interface.  </para><para>IWMPNowDoingDispatch: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPNowDoingDispatch: Not Public.  Internal interface used by Windows Media Player.
  [Guid("2A2E0DA3-19FA-4F82-BE18-CD7D7A3B977F")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPNowDoingDispatch
  {
    /// <summary><para><c>buyContent</c> method of <c>IWMPNowDoingDispatch</c> interface.  </para><para>method buyContent</para></summary>
    /// <remarks><para>An original IDL definition of <c>buyContent</c> method was the following:  <c>HRESULT buyContent (void)</c>;</para></remarks>
    // method buyContent
    // IDL: HRESULT buyContent (void);
    // VB6: Sub buyContent
    [DispId(3221)]
    void buyContent ();

    /// <summary><para><c>hideBasket</c> method of <c>IWMPNowDoingDispatch</c> interface.  </para><para>method hideBasket</para></summary>
    /// <remarks><para>An original IDL definition of <c>hideBasket</c> method was the following:  <c>HRESULT hideBasket (void)</c>;</para></remarks>
    // method hideBasket
    // IDL: HRESULT hideBasket (void);
    // VB6: Sub hideBasket
    [DispId(3222)]
    void hideBasket ();

    /// <summary><para><c>burnNavigateToStatus</c> method of <c>IWMPNowDoingDispatch</c> interface.  </para><para>method burnNavigateToStatus</para></summary>
    /// <remarks><para>An original IDL definition of <c>burnNavigateToStatus</c> method was the following:  <c>HRESULT burnNavigateToStatus (void)</c>;</para></remarks>
    // method burnNavigateToStatus
    // IDL: HRESULT burnNavigateToStatus (void);
    // VB6: Sub burnNavigateToStatus
    [DispId(3211)]
    void burnNavigateToStatus ();

    /// <summary><para><c>syncNavigateToStatus</c> method of <c>IWMPNowDoingDispatch</c> interface.  </para><para>method syncNavigateToStatus</para></summary>
    /// <remarks><para>An original IDL definition of <c>syncNavigateToStatus</c> method was the following:  <c>HRESULT syncNavigateToStatus (void)</c>;</para></remarks>
    // method syncNavigateToStatus
    // IDL: HRESULT syncNavigateToStatus (void);
    // VB6: Sub syncNavigateToStatus
    [DispId(3220)]
    void syncNavigateToStatus ();

    /// <summary><para><c>logData</c> method of <c>IWMPNowDoingDispatch</c> interface.  </para><para>method logData</para></summary>
    /// <remarks><para>An original IDL definition of <c>logData</c> method was the following:  <c>HRESULT logData (BSTR ID, BSTR data)</c>;</para></remarks>
    // method logData
    // IDL: HRESULT logData (BSTR ID, BSTR data);
    // VB6: Sub logData (ByVal ID As String, ByVal data As String)
    [DispId(3224)]
    void logData ([MarshalAs(UnmanagedType.BStr)] string ID, [MarshalAs(UnmanagedType.BStr)] string data);

    /// <summary><para><c>formatTime</c> method of <c>IWMPNowDoingDispatch</c> interface.  </para><para>method formatTime</para></summary>
    /// <remarks><para>An original IDL definition of <c>formatTime</c> method was the following:  <c>HRESULT formatTime (long value, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method formatTime
    // IDL: HRESULT formatTime (long value, [out, retval] BSTR* ReturnValue);
    // VB6: Function formatTime (ByVal value As Long) As String
    [DispId(3226)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string formatTime (int value);

    /// <summary><para><c>allowRating</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property allowRating</para></summary>
    /// <remarks><para>An original IDL definition of <c>allowRating</c> property was the following:  <c>VARIANT_BOOL allowRating</c>;</para></remarks>
    // property allowRating
    // IDL: VARIANT_BOOL allowRating;
    // VB6: allowRating As Boolean
    bool allowRating
    {
      // IDL: HRESULT allowRating ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function allowRating As Boolean
      [DispId(3229)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>allowShop</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property allowShop</para></summary>
    /// <remarks><para>An original IDL definition of <c>allowShop</c> property was the following:  <c>VARIANT_BOOL allowShop</c>;</para></remarks>
    // property allowShop
    // IDL: VARIANT_BOOL allowShop;
    // VB6: allowShop As Boolean
    bool allowShop
    {
      // IDL: HRESULT allowShop ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function allowShop As Boolean
      [DispId(3230)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>basketPlaylistName</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property basketPlaylistName</para></summary>
    /// <remarks><para>An original IDL definition of <c>basketPlaylistName</c> property was the following:  <c>BSTR basketPlaylistName</c>;</para></remarks>
    // property basketPlaylistName
    // IDL: BSTR basketPlaylistName;
    // VB6: basketPlaylistName As String
    string basketPlaylistName
    {
      // IDL: HRESULT basketPlaylistName ([out, retval] BSTR* ReturnValue);
      // VB6: Function basketPlaylistName As String
      [DispId(3227)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>burn_contentType</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property burn_contentType</para></summary>
    /// <remarks><para>An original IDL definition of <c>burn_contentType</c> property was the following:  <c>BSTR burn_contentType</c>;</para></remarks>
    // property burn_contentType
    // IDL: BSTR burn_contentType;
    // VB6: burn_contentType As String
    string burn_contentType
    {
      // IDL: HRESULT burn_contentType ([out, retval] BSTR* ReturnValue);
      // VB6: Function burn_contentType As String
      [DispId(3202)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>burn_driveName</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property burn_driveName</para></summary>
    /// <remarks><para>An original IDL definition of <c>burn_driveName</c> property was the following:  <c>BSTR burn_driveName</c>;</para></remarks>
    // property burn_driveName
    // IDL: BSTR burn_driveName;
    // VB6: burn_driveName As String
    string burn_driveName
    {
      // IDL: HRESULT burn_driveName ([out, retval] BSTR* ReturnValue);
      // VB6: Function burn_driveName As String
      [DispId(3205)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>burn_freeSpace</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property burn_freeSpace</para></summary>
    /// <remarks><para>An original IDL definition of <c>burn_freeSpace</c> property was the following:  <c>long burn_freeSpace</c>;</para></remarks>
    // property burn_freeSpace
    // IDL: long burn_freeSpace;
    // VB6: burn_freeSpace As Long
    int burn_freeSpace
    {
      // IDL: HRESULT burn_freeSpace ([out, retval] long* ReturnValue);
      // VB6: Function burn_freeSpace As Long
      [DispId(3203)]
      get;
    }

    /// <summary><para><c>burn_mediaType</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property burn_mediaType</para></summary>
    /// <remarks><para>An original IDL definition of <c>burn_mediaType</c> property was the following:  <c>BSTR burn_mediaType</c>;</para></remarks>
    // property burn_mediaType
    // IDL: BSTR burn_mediaType;
    // VB6: burn_mediaType As String
    string burn_mediaType
    {
      // IDL: HRESULT burn_mediaType ([out, retval] BSTR* ReturnValue);
      // VB6: Function burn_mediaType As String
      [DispId(3201)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>burn_numDevices</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property burn_numDevices</para></summary>
    /// <remarks><para>An original IDL definition of <c>burn_numDevices</c> property was the following:  <c>long burn_numDevices</c>;</para></remarks>
    // property burn_numDevices
    // IDL: long burn_numDevices;
    // VB6: burn_numDevices As Long
    int burn_numDevices
    {
      // IDL: HRESULT burn_numDevices ([out, retval] long* ReturnValue);
      // VB6: Function burn_numDevices As Long
      [DispId(3207)]
      get;
    }

    /// <summary><para><c>burn_numDiscsSpanned</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property burn_numDiscsSpanned</para></summary>
    /// <remarks><para>An original IDL definition of <c>burn_numDiscsSpanned</c> property was the following:  <c>long burn_numDiscsSpanned</c>;</para></remarks>
    // property burn_numDiscsSpanned
    // IDL: long burn_numDiscsSpanned;
    // VB6: burn_numDiscsSpanned As Long
    int burn_numDiscsSpanned
    {
      // IDL: HRESULT burn_numDiscsSpanned ([out, retval] long* ReturnValue);
      // VB6: Function burn_numDiscsSpanned As Long
      [DispId(3208)]
      get;
    }

    /// <summary><para><c>burn_percentComplete</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property burn_percentComplete</para></summary>
    /// <remarks><para>An original IDL definition of <c>burn_percentComplete</c> property was the following:  <c>long burn_percentComplete</c>;</para></remarks>
    // property burn_percentComplete
    // IDL: long burn_percentComplete;
    // VB6: burn_percentComplete As Long
    int burn_percentComplete
    {
      // IDL: HRESULT burn_percentComplete ([out, retval] long* ReturnValue);
      // VB6: Function burn_percentComplete As Long
      [DispId(3210)]
      get;
    }

    /// <summary><para><c>burn_selectedDrive</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property burn_selectedDrive</para></summary>
    /// <remarks><para>An original IDL definition of <c>burn_selectedDrive</c> property was the following:  <c>long burn_selectedDrive</c>;</para></remarks>
    // property burn_selectedDrive
    // IDL: long burn_selectedDrive;
    // VB6: burn_selectedDrive As Long
    int burn_selectedDrive
    {
      // IDL: HRESULT burn_selectedDrive ([out, retval] long* ReturnValue);
      // VB6: Function burn_selectedDrive As Long
      [DispId(3206)]
      get;
      // IDL: HRESULT burn_selectedDrive (long value);
      // VB6: Sub burn_selectedDrive (ByVal value As Long)
      [DispId(3206)]
      set;
    }

    /// <summary><para><c>burn_spaceToUse</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property burn_spaceToUse</para></summary>
    /// <remarks><para>An original IDL definition of <c>burn_spaceToUse</c> property was the following:  <c>long burn_spaceToUse</c>;</para></remarks>
    // property burn_spaceToUse
    // IDL: long burn_spaceToUse;
    // VB6: burn_spaceToUse As Long
    int burn_spaceToUse
    {
      // IDL: HRESULT burn_spaceToUse ([out, retval] long* ReturnValue);
      // VB6: Function burn_spaceToUse As Long
      [DispId(3209)]
      get;
    }

    /// <summary><para><c>burn_totalSpace</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property burn_totalSpace</para></summary>
    /// <remarks><para>An original IDL definition of <c>burn_totalSpace</c> property was the following:  <c>long burn_totalSpace</c>;</para></remarks>
    // property burn_totalSpace
    // IDL: long burn_totalSpace;
    // VB6: burn_totalSpace As Long
    int burn_totalSpace
    {
      // IDL: HRESULT burn_totalSpace ([out, retval] long* ReturnValue);
      // VB6: Function burn_totalSpace As Long
      [DispId(3204)]
      get;
    }

    /// <summary><para><c>DPI</c> property of <c>IWMPNowDoingDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>DPI</c> property was the following:  <c>long DPI</c>;</para></remarks>
    // IDL: long DPI;
    // VB6: DPI As Long
    int DPI
    {
      // IDL: HRESULT DPI ([out, retval] long* ReturnValue);
      // VB6: Function DPI As Long
      [DispId(3223)]
      get;
    }

    /// <summary><para><c>editPlaylist</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>method editPlaylist</para></summary>
    /// <remarks><para>An original IDL definition of <c>editPlaylist</c> property was the following:  <c>IDispatch* editPlaylist</c>;</para></remarks>
    // method editPlaylist
    // IDL: IDispatch* editPlaylist;
    // VB6: editPlaylist As IDispatch
    object editPlaylist
    {
      // IDL: HRESULT editPlaylist ([out, retval] IDispatch** ReturnValue);
      // VB6: Function editPlaylist As IDispatch
      [DispId(3225)]
      [return: MarshalAs(UnmanagedType.IDispatch)]
      get;
    }

    /// <summary><para><c>isHighContrastMode</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property isHighContrastMode</para></summary>
    /// <remarks><para>An original IDL definition of <c>isHighContrastMode</c> property was the following:  <c>VARIANT_BOOL isHighContrastMode</c>;</para></remarks>
    // property isHighContrastMode
    // IDL: VARIANT_BOOL isHighContrastMode;
    // VB6: isHighContrastMode As Boolean
    bool isHighContrastMode
    {
      // IDL: HRESULT isHighContrastMode ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isHighContrastMode As Boolean
      [DispId(3228)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>mode</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property mode</para></summary>
    /// <remarks><para>An original IDL definition of <c>mode</c> property was the following:  <c>BSTR mode</c>;</para></remarks>
    // property mode
    // IDL: BSTR mode;
    // VB6: mode As String
    string mode
    {
      // IDL: HRESULT mode ([out, retval] BSTR* ReturnValue);
      // VB6: Function mode As String
      [DispId(3200)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>sync_deviceName</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property sync_deviceName</para></summary>
    /// <remarks><para>An original IDL definition of <c>sync_deviceName</c> property was the following:  <c>BSTR sync_deviceName</c>;</para></remarks>
    // property sync_deviceName
    // IDL: BSTR sync_deviceName;
    // VB6: sync_deviceName As String
    string sync_deviceName
    {
      // IDL: HRESULT sync_deviceName ([out, retval] BSTR* ReturnValue);
      // VB6: Function sync_deviceName As String
      [DispId(3215)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>sync_numDevices</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property sync_numDevices</para></summary>
    /// <remarks><para>An original IDL definition of <c>sync_numDevices</c> property was the following:  <c>long sync_numDevices</c>;</para></remarks>
    // property sync_numDevices
    // IDL: long sync_numDevices;
    // VB6: sync_numDevices As Long
    int sync_numDevices
    {
      // IDL: HRESULT sync_numDevices ([out, retval] long* ReturnValue);
      // VB6: Function sync_numDevices As Long
      [DispId(3217)]
      get;
    }

    /// <summary><para><c>sync_oemName</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property sync_oemName</para></summary>
    /// <remarks><para>An original IDL definition of <c>sync_oemName</c> property was the following:  <c>BSTR sync_oemName</c>;</para></remarks>
    // property sync_oemName
    // IDL: BSTR sync_oemName;
    // VB6: sync_oemName As String
    string sync_oemName
    {
      // IDL: HRESULT sync_oemName ([out, retval] BSTR* ReturnValue);
      // VB6: Function sync_oemName As String
      [DispId(3218)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>sync_percentComplete</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property sync_percentComplete</para></summary>
    /// <remarks><para>An original IDL definition of <c>sync_percentComplete</c> property was the following:  <c>long sync_percentComplete</c>;</para></remarks>
    // property sync_percentComplete
    // IDL: long sync_percentComplete;
    // VB6: sync_percentComplete As Long
    int sync_percentComplete
    {
      // IDL: HRESULT sync_percentComplete ([out, retval] long* ReturnValue);
      // VB6: Function sync_percentComplete As Long
      [DispId(3219)]
      get;
    }

    /// <summary><para><c>sync_selectedDevice</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property sync_selectedDevice</para></summary>
    /// <remarks><para>An original IDL definition of <c>sync_selectedDevice</c> property was the following:  <c>long sync_selectedDevice</c>;</para></remarks>
    // property sync_selectedDevice
    // IDL: long sync_selectedDevice;
    // VB6: sync_selectedDevice As Long
    int sync_selectedDevice
    {
      // IDL: HRESULT sync_selectedDevice ([out, retval] long* ReturnValue);
      // VB6: Function sync_selectedDevice As Long
      [DispId(3216)]
      get;
      // IDL: HRESULT sync_selectedDevice (long value);
      // VB6: Sub sync_selectedDevice (ByVal value As Long)
      [DispId(3216)]
      set;
    }

    /// <summary><para><c>sync_spaceToUse</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property sync_spaceToUse</para></summary>
    /// <remarks><para>An original IDL definition of <c>sync_spaceToUse</c> property was the following:  <c>long sync_spaceToUse</c>;</para></remarks>
    // property sync_spaceToUse
    // IDL: long sync_spaceToUse;
    // VB6: sync_spaceToUse As Long
    int sync_spaceToUse
    {
      // IDL: HRESULT sync_spaceToUse ([out, retval] long* ReturnValue);
      // VB6: Function sync_spaceToUse As Long
      [DispId(3212)]
      get;
    }

    /// <summary><para><c>sync_spaceUsed</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property sync_spaceUsed</para></summary>
    /// <remarks><para>An original IDL definition of <c>sync_spaceUsed</c> property was the following:  <c>long sync_spaceUsed</c>;</para></remarks>
    // property sync_spaceUsed
    // IDL: long sync_spaceUsed;
    // VB6: sync_spaceUsed As Long
    int sync_spaceUsed
    {
      // IDL: HRESULT sync_spaceUsed ([out, retval] long* ReturnValue);
      // VB6: Function sync_spaceUsed As Long
      [DispId(3213)]
      get;
    }

    /// <summary><para><c>sync_totalSpace</c> property of <c>IWMPNowDoingDispatch</c> interface.  </para><para>property sync_totalSpace</para></summary>
    /// <remarks><para>An original IDL definition of <c>sync_totalSpace</c> property was the following:  <c>long sync_totalSpace</c>;</para></remarks>
    // property sync_totalSpace
    // IDL: long sync_totalSpace;
    // VB6: sync_totalSpace As Long
    int sync_totalSpace
    {
      // IDL: HRESULT sync_totalSpace ([out, retval] long* ReturnValue);
      // VB6: Function sync_totalSpace As Long
      [DispId(3214)]
      get;
    }
  }

  /// <summary><para><c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>IWMPNowPlayingHelperDispatch: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPNowPlayingHelperDispatch: Not Public.  Internal interface used by Windows Media Player.
  [Guid("504F112E-77CC-4E3C-A073-5371B31D9B36")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPNowPlayingHelperDispatch
  {
    /// <summary><para><c>viewFriendlyName</c> property get of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>property viewFriendlyName</para></summary>
    /// <remarks><para>An original IDL definition of <c>viewFriendlyName</c> property get was the following:  <c>HRESULT viewFriendlyName (BSTR bstrView, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // property viewFriendlyName
    // IDL: HRESULT viewFriendlyName (BSTR bstrView, [out, retval] BSTR* ReturnValue);
    // VB6: Function viewFriendlyName (ByVal bstrView As String) As String
    [DispId(2901)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string viewFriendlyName ([MarshalAs(UnmanagedType.BStr)] string bstrView) /* property get method */;

    /// <summary><para><c>viewPresetCount</c> property get of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>property viewPresetCount</para></summary>
    /// <remarks><para>An original IDL definition of <c>viewPresetCount</c> property get was the following:  <c>HRESULT viewPresetCount (BSTR bstrView, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // property viewPresetCount
    // IDL: HRESULT viewPresetCount (BSTR bstrView, [out, retval] long* ReturnValue);
    // VB6: Function viewPresetCount (ByVal bstrView As String) As Long
    [DispId(2902)]
    int viewPresetCount ([MarshalAs(UnmanagedType.BStr)] string bstrView) /* property get method */;

    /// <summary><para><c>viewPresetName</c> property get of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method viewPresetName</para></summary>
    /// <remarks><para>An original IDL definition of <c>viewPresetName</c> property get was the following:  <c>HRESULT viewPresetName (BSTR bstrView, long nPresetIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method viewPresetName
    // IDL: HRESULT viewPresetName (BSTR bstrView, long nPresetIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function viewPresetName (ByVal bstrView As String, ByVal nPresetIndex As Long) As String
    [DispId(2903)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string viewPresetName ([MarshalAs(UnmanagedType.BStr)] string bstrView, int nPresetIndex) /* property get method */;

    /// <summary><para><c>effectFriendlyName</c> property get of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>property effectFriendlyName</para></summary>
    /// <remarks><para>An original IDL definition of <c>effectFriendlyName</c> property get was the following:  <c>HRESULT effectFriendlyName (BSTR bstrEffect, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // property effectFriendlyName
    // IDL: HRESULT effectFriendlyName (BSTR bstrEffect, [out, retval] BSTR* ReturnValue);
    // VB6: Function effectFriendlyName (ByVal bstrEffect As String) As String
    [DispId(2904)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string effectFriendlyName ([MarshalAs(UnmanagedType.BStr)] string bstrEffect) /* property get method */;

    /// <summary><para><c>effectPresetName</c> property get of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method effectPresetName</para></summary>
    /// <remarks><para>An original IDL definition of <c>effectPresetName</c> property get was the following:  <c>HRESULT effectPresetName (BSTR bstrEffect, long nPresetIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method effectPresetName
    // IDL: HRESULT effectPresetName (BSTR bstrEffect, long nPresetIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function effectPresetName (ByVal bstrEffect As String, ByVal nPresetIndex As Long) As String
    [DispId(2905)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string effectPresetName ([MarshalAs(UnmanagedType.BStr)] string bstrEffect, int nPresetIndex) /* property get method */;

    /// <summary><para><c>resolveDisplayView</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method resolveDisplayView</para></summary>
    /// <remarks><para>An original IDL definition of <c>resolveDisplayView</c> method was the following:  <c>HRESULT resolveDisplayView (VARIANT_BOOL fSafe, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method resolveDisplayView
    // IDL: HRESULT resolveDisplayView (VARIANT_BOOL fSafe, [out, retval] BSTR* ReturnValue);
    // VB6: Function resolveDisplayView (ByVal fSafe As Boolean) As String
    [DispId(2909)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string resolveDisplayView ([MarshalAs(UnmanagedType.VariantBool)] bool fSafe);

    /// <summary><para><c>isValidDisplayView</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method isValidDisplayView</para></summary>
    /// <remarks><para>An original IDL definition of <c>isValidDisplayView</c> method was the following:  <c>HRESULT isValidDisplayView (BSTR bstrView, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // method isValidDisplayView
    // IDL: HRESULT isValidDisplayView (BSTR bstrView, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isValidDisplayView (ByVal bstrView As String) As Boolean
    [DispId(2910)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isValidDisplayView ([MarshalAs(UnmanagedType.BStr)] string bstrView);

    /// <summary><para><c>getSkinFile</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getSkinFile</para></summary>
    /// <remarks><para>An original IDL definition of <c>getSkinFile</c> method was the following:  <c>HRESULT getSkinFile ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getSkinFile
    // IDL: HRESULT getSkinFile ([out, retval] BSTR* ReturnValue);
    // VB6: Function getSkinFile As String
    [DispId(2911)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getSkinFile ();

    /// <summary><para><c>getCurrentArtID</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getCurrentArtID</para></summary>
    /// <remarks><para>An original IDL definition of <c>getCurrentArtID</c> method was the following:  <c>HRESULT getCurrentArtID (VARIANT_BOOL fLargeArt, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getCurrentArtID
    // IDL: HRESULT getCurrentArtID (VARIANT_BOOL fLargeArt, [out, retval] long* ReturnValue);
    // VB6: Function getCurrentArtID (ByVal fLargeArt As Boolean) As Long
    [DispId(2917)]
    int getCurrentArtID ([MarshalAs(UnmanagedType.VariantBool)] bool fLargeArt);

    /// <summary><para><c>getTimeString</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getTimeString</para></summary>
    /// <remarks><para>An original IDL definition of <c>getTimeString</c> method was the following:  <c>HRESULT getTimeString (double dTime, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getTimeString
    // IDL: HRESULT getTimeString (double dTime, [out, retval] BSTR* ReturnValue);
    // VB6: Function getTimeString (ByVal dTime As Double) As String
    [DispId(2918)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getTimeString (double dTime);

    /// <summary><para><c>getCurrentScriptCommand</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getCurrentScriptCommand</para></summary>
    /// <remarks><para>An original IDL definition of <c>getCurrentScriptCommand</c> method was the following:  <c>HRESULT getCurrentScriptCommand (BSTR bstrType, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getCurrentScriptCommand
    // IDL: HRESULT getCurrentScriptCommand (BSTR bstrType, [out, retval] BSTR* ReturnValue);
    // VB6: Function getCurrentScriptCommand (ByVal bstrType As String) As String
    [DispId(2919)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getCurrentScriptCommand ([MarshalAs(UnmanagedType.BStr)] string bstrType);

    /// <summary><para><c>calcLayout</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method calcLayout</para></summary>
    /// <remarks><para>An original IDL definition of <c>calcLayout</c> method was the following:  <c>HRESULT calcLayout (long lWidth, long lHeight, VARIANT_BOOL vbCaptions, VARIANT_BOOL vbBanner)</c>;</para></remarks>
    // method calcLayout
    // IDL: HRESULT calcLayout (long lWidth, long lHeight, VARIANT_BOOL vbCaptions, VARIANT_BOOL vbBanner);
    // VB6: Sub calcLayout (ByVal lWidth As Long, ByVal lHeight As Long, ByVal vbCaptions As Boolean, ByVal vbBanner As Boolean)
    [DispId(2920)]
    void calcLayout (int lWidth, int lHeight, [MarshalAs(UnmanagedType.VariantBool)] bool vbCaptions, [MarshalAs(UnmanagedType.VariantBool)] bool vbBanner);

    /// <summary><para><c>getLayoutSize</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getLayoutSize</para></summary>
    /// <remarks><para>An original IDL definition of <c>getLayoutSize</c> method was the following:  <c>HRESULT getLayoutSize (long nProp, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getLayoutSize
    // IDL: HRESULT getLayoutSize (long nProp, [out, retval] long* ReturnValue);
    // VB6: Function getLayoutSize (ByVal nProp As Long) As Long
    [DispId(2921)]
    int getLayoutSize (int nProp);

    /// <summary><para><c>getRootPlaylist</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getRootPlaylist</para></summary>
    /// <remarks><para>An original IDL definition of <c>getRootPlaylist</c> method was the following:  <c>HRESULT getRootPlaylist (IDispatch* pPlaylist, [out, retval] IDispatch** ReturnValue)</c>;</para></remarks>
    // method getRootPlaylist
    // IDL: HRESULT getRootPlaylist (IDispatch* pPlaylist, [out, retval] IDispatch** ReturnValue);
    // VB6: Function getRootPlaylist (ByVal pPlaylist As IDispatch) As IDispatch
    [DispId(2922)]
    [return: MarshalAs(UnmanagedType.IDispatch)]
    object getRootPlaylist ([MarshalAs(UnmanagedType.IDispatch)] object pPlaylist);

    /// <summary><para><c>getHTMLViewURL</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getHTMLViewURL</para></summary>
    /// <remarks><para>An original IDL definition of <c>getHTMLViewURL</c> method was the following:  <c>HRESULT getHTMLViewURL ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getHTMLViewURL
    // IDL: HRESULT getHTMLViewURL ([out, retval] BSTR* ReturnValue);
    // VB6: Function getHTMLViewURL As String
    [DispId(2923)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getHTMLViewURL ();

    /// <summary><para><c>getStatusString</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getStatusString</para></summary>
    /// <remarks><para>An original IDL definition of <c>getStatusString</c> method was the following:  <c>HRESULT getStatusString (BSTR bstrStatusId, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getStatusString
    // IDL: HRESULT getStatusString (BSTR bstrStatusId, [out, retval] BSTR* ReturnValue);
    // VB6: Function getStatusString (ByVal bstrStatusId As String) As String
    [DispId(2927)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getStatusString ([MarshalAs(UnmanagedType.BStr)] string bstrStatusId);

    /// <summary><para><c>getStatusPct</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getStatusPct</para></summary>
    /// <remarks><para>An original IDL definition of <c>getStatusPct</c> method was the following:  <c>HRESULT getStatusPct (BSTR bstrStatusId, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getStatusPct
    // IDL: HRESULT getStatusPct (BSTR bstrStatusId, [out, retval] long* ReturnValue);
    // VB6: Function getStatusPct (ByVal bstrStatusId As String) As Long
    [DispId(2939)]
    int getStatusPct ([MarshalAs(UnmanagedType.BStr)] string bstrStatusId);

    /// <summary><para><c>getStatusResult</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getStatusResult</para></summary>
    /// <remarks><para>An original IDL definition of <c>getStatusResult</c> method was the following:  <c>HRESULT getStatusResult (BSTR bstrStatusId, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getStatusResult
    // IDL: HRESULT getStatusResult (BSTR bstrStatusId, [out, retval] long* ReturnValue);
    // VB6: Function getStatusResult (ByVal bstrStatusId As String) As Long
    [DispId(2940)]
    int getStatusResult ([MarshalAs(UnmanagedType.BStr)] string bstrStatusId);

    /// <summary><para><c>getStatusIcon</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getStatusIcon</para></summary>
    /// <remarks><para>An original IDL definition of <c>getStatusIcon</c> method was the following:  <c>HRESULT getStatusIcon (BSTR bstrStatusId, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getStatusIcon
    // IDL: HRESULT getStatusIcon (BSTR bstrStatusId, [out, retval] long* ReturnValue);
    // VB6: Function getStatusIcon (ByVal bstrStatusId As String) As Long
    [DispId(2941)]
    int getStatusIcon ([MarshalAs(UnmanagedType.BStr)] string bstrStatusId);

    /// <summary><para><c>getStatusIdList</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method getStatusIdList</para></summary>
    /// <remarks><para>An original IDL definition of <c>getStatusIdList</c> method was the following:  <c>HRESULT getStatusIdList ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method getStatusIdList
    // IDL: HRESULT getStatusIdList ([out, retval] BSTR* ReturnValue);
    // VB6: Function getStatusIdList As String
    [DispId(2942)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getStatusIdList ();

    /// <summary><para><c>clearColors</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>clear all user color info</para></summary>
    /// <remarks><para>An original IDL definition of <c>clearColors</c> method was the following:  <c>HRESULT clearColors (void)</c>;</para></remarks>
    // clear all user color info
    // IDL: HRESULT clearColors (void);
    // VB6: Sub clearColors
    [DispId(2937)]
    void clearColors ();

    /// <summary><para><c>initRipHelper</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>initRipHelper</c> method was the following:  <c>HRESULT initRipHelper (void)</c>;</para></remarks>
    // IDL: HRESULT initRipHelper (void);
    // VB6: Sub initRipHelper
    [DispId(2947)]
    void initRipHelper ();

    /// <summary><para><c>startRip</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>startRip</c> method was the following:  <c>HRESULT startRip (void)</c>;</para></remarks>
    // IDL: HRESULT startRip (void);
    // VB6: Sub startRip
    [DispId(2952)]
    void startRip ();

    /// <summary><para><c>stopRip</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>stopRip</c> method was the following:  <c>HRESULT stopRip (void)</c>;</para></remarks>
    // IDL: HRESULT stopRip (void);
    // VB6: Sub stopRip
    [DispId(2953)]
    void stopRip ();

    /// <summary><para><c>nextPlaylist</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>nextPlaylist</c> method was the following:  <c>HRESULT nextPlaylist (void)</c>;</para></remarks>
    // IDL: HRESULT nextPlaylist (void);
    // VB6: Sub nextPlaylist
    [DispId(2961)]
    void nextPlaylist ();

    /// <summary><para><c>previousPlaylist</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>previousPlaylist</c> method was the following:  <c>HRESULT previousPlaylist (void)</c>;</para></remarks>
    // IDL: HRESULT previousPlaylist (void);
    // VB6: Sub previousPlaylist
    [DispId(2962)]
    void previousPlaylist ();

    /// <summary><para><c>playOffsetMedia</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>playOffsetMedia</c> method was the following:  <c>HRESULT playOffsetMedia (long iOffset)</c>;</para></remarks>
    // IDL: HRESULT playOffsetMedia (long iOffset);
    // VB6: Sub playOffsetMedia (ByVal iOffset As Long)
    [DispId(2972)]
    void playOffsetMedia (int iOffset);

    /// <summary><para><c>sessionPlaylistCount</c> property get of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>sessionPlaylistCount</c> property get was the following:  <c>HRESULT sessionPlaylistCount ([out] long* pVal)</c>;</para></remarks>
    // IDL: HRESULT sessionPlaylistCount ([out] long* pVal);
    // VB6: Sub sessionPlaylistCount (pVal As Long)
    [DispId(2979)]
    void sessionPlaylistCount ([Out] out int pVal) /* property get method */;

    /// <summary><para><c>setGestureStatus</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>setGestureStatus</c> method was the following:  <c>HRESULT setGestureStatus (IDispatch* pObject, long newVal)</c>;</para></remarks>
    // IDL: HRESULT setGestureStatus (IDispatch* pObject, long newVal);
    // VB6: Sub setGestureStatus (ByVal pObject As IDispatch, ByVal newVal As Long)
    [DispId(2980)]
    void setGestureStatus ([MarshalAs(UnmanagedType.IDispatch)] object pObject, int newVal);

    /// <summary><para><c>syncToAlbumArt</c> method of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>syncToAlbumArt</c> method was the following:  <c>HRESULT syncToAlbumArt (IDispatch* pObject, long iOffsetFromCurrentMedia, BSTR bstrFallbackImage)</c>;</para></remarks>
    // IDL: HRESULT syncToAlbumArt (IDispatch* pObject, long iOffsetFromCurrentMedia, BSTR bstrFallbackImage);
    // VB6: Sub syncToAlbumArt (ByVal pObject As IDispatch, ByVal iOffsetFromCurrentMedia As Long, ByVal bstrFallbackImage As String)
    [DispId(2985)]
    void syncToAlbumArt ([MarshalAs(UnmanagedType.IDispatch)] object pObject, int iOffsetFromCurrentMedia, [MarshalAs(UnmanagedType.BStr)] string bstrFallbackImage);

    /// <summary><para><c>albumArtAlpha</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>albumArtAlpha</c> property was the following:  <c>long albumArtAlpha</c>;</para></remarks>
    // IDL: long albumArtAlpha;
    // VB6: albumArtAlpha As Long
    int albumArtAlpha
    {
      // IDL: HRESULT albumArtAlpha ([out, retval] long* ReturnValue);
      // VB6: Function albumArtAlpha As Long
      [DispId(2982)]
      get;
    }

    /// <summary><para><c>backgroundColor</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(2966)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>backgroundEnabled</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundEnabled</c> property was the following:  <c>VARIANT_BOOL backgroundEnabled</c>;</para></remarks>
    // IDL: VARIANT_BOOL backgroundEnabled;
    // VB6: backgroundEnabled As Boolean
    bool backgroundEnabled
    {
      // IDL: HRESULT backgroundEnabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function backgroundEnabled As Boolean
      [DispId(2969)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT backgroundEnabled (VARIANT_BOOL value);
      // VB6: Sub backgroundEnabled (ByVal value As Boolean)
      [DispId(2969)]
      set;
    }

    /// <summary><para><c>backgroundIndex</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundIndex</c> property was the following:  <c>long backgroundIndex</c>;</para></remarks>
    // IDL: long backgroundIndex;
    // VB6: backgroundIndex As Long
    int backgroundIndex
    {
      // IDL: HRESULT backgroundIndex ([out, retval] long* ReturnValue);
      // VB6: Function backgroundIndex As Long
      [DispId(2970)]
      get;
      // IDL: HRESULT backgroundIndex (long value);
      // VB6: Sub backgroundIndex (ByVal value As Long)
      [DispId(2970)]
      set;
    }

    /// <summary><para><c>backgroundVisible</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundVisible</c> property was the following:  <c>VARIANT_BOOL backgroundVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL backgroundVisible;
    // VB6: backgroundVisible As Boolean
    bool backgroundVisible
    {
      // IDL: HRESULT backgroundVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function backgroundVisible As Boolean
      [DispId(2968)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>basketVisible</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>basketVisible</c> property was the following:  <c>VARIANT_BOOL basketVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL basketVisible;
    // VB6: basketVisible As Boolean
    bool basketVisible
    {
      // IDL: HRESULT basketVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function basketVisible As Boolean
      [DispId(2963)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT basketVisible (VARIANT_BOOL value);
      // VB6: Sub basketVisible (ByVal value As Boolean)
      [DispId(2963)]
      set;
    }

    /// <summary><para><c>canRip</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>canRip</c> property was the following:  <c>VARIANT_BOOL canRip</c>;</para></remarks>
    // IDL: VARIANT_BOOL canRip;
    // VB6: canRip As Boolean
    bool canRip
    {
      // IDL: HRESULT canRip ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function canRip As Boolean
      [DispId(2949)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT canRip (VARIANT_BOOL value);
      // VB6: Sub canRip (ByVal value As Boolean)
      [DispId(2949)]
      set;
    }

    /// <summary><para><c>captionsAvailable</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>method captionsAvailable</para></summary>
    /// <remarks><para>An original IDL definition of <c>captionsAvailable</c> property was the following:  <c>VARIANT_BOOL captionsAvailable</c>;</para></remarks>
    // method captionsAvailable
    // IDL: VARIANT_BOOL captionsAvailable;
    // VB6: captionsAvailable As Boolean
    bool captionsAvailable
    {
      // IDL: HRESULT captionsAvailable ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function captionsAvailable As Boolean
      [DispId(2912)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>currentDrive</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentDrive</c> property was the following:  <c>BSTR currentDrive</c>;</para></remarks>
    // IDL: BSTR currentDrive;
    // VB6: currentDrive As String
    string currentDrive
    {
      // IDL: HRESULT currentDrive ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentDrive As String
      [DispId(2951)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT currentDrive (BSTR value);
      // VB6: Sub currentDrive (ByVal value As String)
      [DispId(2951)]
      set;
    }

    /// <summary><para><c>doPreviousNow</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>doPreviousNow</c> property was the following:  <c>VARIANT_BOOL doPreviousNow</c>;</para></remarks>
    // IDL: VARIANT_BOOL doPreviousNow;
    // VB6: doPreviousNow As Boolean
    bool doPreviousNow
    {
      // IDL: HRESULT doPreviousNow ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function doPreviousNow As Boolean
      [DispId(2935)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT doPreviousNow (VARIANT_BOOL value);
      // VB6: Sub doPreviousNow (ByVal value As Boolean)
      [DispId(2935)]
      set;
    }

    /// <summary><para><c>doubleClickTime</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>doubleClickTime</c> property was the following:  <c>long doubleClickTime</c>;</para></remarks>
    // IDL: long doubleClickTime;
    // VB6: doubleClickTime As Long
    int doubleClickTime
    {
      // IDL: HRESULT doubleClickTime ([out, retval] long* ReturnValue);
      // VB6: Function doubleClickTime As Long
      [DispId(2957)]
      get;
    }

    /// <summary><para><c>DPI</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>DPI</c> property was the following:  <c>long DPI</c>;</para></remarks>
    // IDL: long DPI;
    // VB6: DPI As Long
    int DPI
    {
      // IDL: HRESULT DPI ([out, retval] long* ReturnValue);
      // VB6: Function DPI As Long
      [DispId(2936)]
      get;
    }

    /// <summary><para><c>editObj</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>editObj</c> property was the following:  <c>IUnknown* editObj</c>;</para></remarks>
    // IDL: IUnknown* editObj;
    // VB6: editObj As IUnknown
    object editObj
    {
      // IDL: HRESULT editObj ([out, retval] IUnknown** ReturnValue);
      // VB6: Function editObj As IUnknown
      [DispId(2926)]
      [return: MarshalAs(UnmanagedType.IUnknown)]
      get;
      // IDL: HRESULT editObj (IUnknown* value);
      // VB6: Sub editObj (ByVal value As IUnknown)
      [DispId(2926)]
      set;
    }

    /// <summary><para><c>fontFace</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontFace</c> property was the following:  <c>BSTR fontFace</c>;</para></remarks>
    // IDL: BSTR fontFace;
    // VB6: fontFace As String
    string fontFace
    {
      // IDL: HRESULT fontFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function fontFace As String
      [DispId(2964)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>fontSize</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontSize</c> property was the following:  <c>long fontSize</c>;</para></remarks>
    // IDL: long fontSize;
    // VB6: fontSize As Long
    int fontSize
    {
      // IDL: HRESULT fontSize ([out, retval] long* ReturnValue);
      // VB6: Function fontSize As Long
      [DispId(2965)]
      get;
    }

    /// <summary><para><c>glassEnabled</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>glassEnabled</c> property was the following:  <c>VARIANT_BOOL glassEnabled</c>;</para></remarks>
    // IDL: VARIANT_BOOL glassEnabled;
    // VB6: glassEnabled As Boolean
    bool glassEnabled
    {
      // IDL: HRESULT glassEnabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function glassEnabled As Boolean
      [DispId(2976)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>highContrast</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>highContrast</c> property was the following:  <c>VARIANT_BOOL highContrast</c>;</para></remarks>
    // IDL: VARIANT_BOOL highContrast;
    // VB6: highContrast As Boolean
    bool highContrast
    {
      // IDL: HRESULT highContrast ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function highContrast As Boolean
      [DispId(2977)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>hoverTransportsEnabled</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>hoverTransportsEnabled</c> property was the following:  <c>VARIANT_BOOL hoverTransportsEnabled</c>;</para></remarks>
    // IDL: VARIANT_BOOL hoverTransportsEnabled;
    // VB6: hoverTransportsEnabled As Boolean
    bool hoverTransportsEnabled
    {
      // IDL: HRESULT hoverTransportsEnabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function hoverTransportsEnabled As Boolean
      [DispId(2946)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>htmlViewBaseURL</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>htmlViewBaseURL</c> property was the following:  <c>BSTR htmlViewBaseURL</c>;</para></remarks>
    // IDL: BSTR htmlViewBaseURL;
    // VB6: htmlViewBaseURL As String
    string htmlViewBaseURL
    {
      // IDL: HRESULT htmlViewBaseURL ([out, retval] BSTR* ReturnValue);
      // VB6: Function htmlViewBaseURL As String
      [DispId(2930)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT htmlViewBaseURL (BSTR value);
      // VB6: Sub htmlViewBaseURL (ByVal value As String)
      [DispId(2930)]
      set;
    }

    /// <summary><para><c>htmlViewBusy</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>htmlViewBusy</c> property was the following:  <c>VARIANT_BOOL htmlViewBusy</c>;</para></remarks>
    // IDL: VARIANT_BOOL htmlViewBusy;
    // VB6: htmlViewBusy As Boolean
    bool htmlViewBusy
    {
      // IDL: HRESULT htmlViewBusy ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function htmlViewBusy As Boolean
      [DispId(2931)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT htmlViewBusy (VARIANT_BOOL value);
      // VB6: Sub htmlViewBusy (ByVal value As Boolean)
      [DispId(2931)]
      set;
    }

    /// <summary><para><c>htmlViewFullURL</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>htmlViewFullURL</c> property was the following:  <c>BSTR htmlViewFullURL</c>;</para></remarks>
    // IDL: BSTR htmlViewFullURL;
    // VB6: htmlViewFullURL As String
    string htmlViewFullURL
    {
      // IDL: HRESULT htmlViewFullURL ([out, retval] BSTR* ReturnValue);
      // VB6: Function htmlViewFullURL As String
      [DispId(2933)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT htmlViewFullURL (BSTR value);
      // VB6: Sub htmlViewFullURL (ByVal value As String)
      [DispId(2933)]
      set;
    }

    /// <summary><para><c>htmlViewSecureLock</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>htmlViewSecureLock</c> property was the following:  <c>long htmlViewSecureLock</c>;</para></remarks>
    // IDL: long htmlViewSecureLock;
    // VB6: htmlViewSecureLock As Long
    int htmlViewSecureLock
    {
      // IDL: HRESULT htmlViewSecureLock ([out, retval] long* ReturnValue);
      // VB6: Function htmlViewSecureLock As Long
      [DispId(2929)]
      get;
      // IDL: HRESULT htmlViewSecureLock (long value);
      // VB6: Sub htmlViewSecureLock (ByVal value As Long)
      [DispId(2929)]
      set;
    }

    /// <summary><para><c>htmlViewShowCert</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>htmlViewShowCert</c> property was the following:  <c>VARIANT_BOOL htmlViewShowCert</c>;</para></remarks>
    // IDL: VARIANT_BOOL htmlViewShowCert;
    // VB6: htmlViewShowCert As Boolean
    bool htmlViewShowCert
    {
      // IDL: HRESULT htmlViewShowCert ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function htmlViewShowCert As Boolean
      [DispId(2932)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT htmlViewShowCert (VARIANT_BOOL value);
      // VB6: Sub htmlViewShowCert (ByVal value As Boolean)
      [DispId(2932)]
      set;
    }

    /// <summary><para><c>inFullScreen</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>inFullScreen</c> property was the following:  <c>VARIANT_BOOL inFullScreen</c>;</para></remarks>
    // IDL: VARIANT_BOOL inFullScreen;
    // VB6: inFullScreen As Boolean
    bool inFullScreen
    {
      // IDL: HRESULT inFullScreen ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function inFullScreen As Boolean
      [DispId(2984)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>inVistaPlus</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>inVistaPlus</c> property was the following:  <c>VARIANT_BOOL inVistaPlus</c>;</para></remarks>
    // IDL: VARIANT_BOOL inVistaPlus;
    // VB6: inVistaPlus As Boolean
    bool inVistaPlus
    {
      // IDL: HRESULT inVistaPlus ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function inVistaPlus As Boolean
      [DispId(2943)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>isAudioCD</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isAudioCD</c> property was the following:  <c>VARIANT_BOOL isAudioCD</c>;</para></remarks>
    // IDL: VARIANT_BOOL isAudioCD;
    // VB6: isAudioCD As Boolean
    bool isAudioCD
    {
      // IDL: HRESULT isAudioCD ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isAudioCD As Boolean
      [DispId(2948)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT isAudioCD (VARIANT_BOOL value);
      // VB6: Sub isAudioCD (ByVal value As Boolean)
      [DispId(2948)]
      set;
    }

    /// <summary><para><c>isBidi</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isBidi</c> property was the following:  <c>VARIANT_BOOL isBidi</c>;</para></remarks>
    // IDL: VARIANT_BOOL isBidi;
    // VB6: isBidi As Boolean
    bool isBidi
    {
      // IDL: HRESULT isBidi ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isBidi As Boolean
      [DispId(2944)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>isOCX</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isOCX</c> property was the following:  <c>VARIANT_BOOL isOCX</c>;</para></remarks>
    // IDL: VARIANT_BOOL isOCX;
    // VB6: isOCX As Boolean
    bool isOCX
    {
      // IDL: HRESULT isOCX ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isOCX As Boolean
      [DispId(2945)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>isRipping</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isRipping</c> property was the following:  <c>VARIANT_BOOL isRipping</c>;</para></remarks>
    // IDL: VARIANT_BOOL isRipping;
    // VB6: isRipping As Boolean
    bool isRipping
    {
      // IDL: HRESULT isRipping ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isRipping As Boolean
      [DispId(2950)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT isRipping (VARIANT_BOOL value);
      // VB6: Sub isRipping (ByVal value As Boolean)
      [DispId(2950)]
      set;
    }

    /// <summary><para><c>lastMessage</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>lastMessage</c> property was the following:  <c>BSTR lastMessage</c>;</para></remarks>
    // IDL: BSTR lastMessage;
    // VB6: lastMessage As String
    string lastMessage
    {
      // IDL: HRESULT lastMessage ([out, retval] BSTR* ReturnValue);
      // VB6: Function lastMessage As String
      [DispId(2938)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT lastMessage (BSTR value);
      // VB6: Sub lastMessage (ByVal value As String)
      [DispId(2938)]
      set;
    }

    /// <summary><para><c>linkAvailable</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>property linkAvailable</para></summary>
    /// <remarks><para>An original IDL definition of <c>linkAvailable</c> property was the following:  <c>long linkAvailable</c>;</para></remarks>
    // property linkAvailable
    // IDL: long linkAvailable;
    // VB6: linkAvailable As Long
    int linkAvailable
    {
      // IDL: HRESULT linkAvailable ([out, retval] long* ReturnValue);
      // VB6: Function linkAvailable As Long
      [DispId(2913)]
      get;
    }

    /// <summary><para><c>linkRequest</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>property linkRequest</para></summary>
    /// <remarks><para>An original IDL definition of <c>linkRequest</c> property was the following:  <c>long linkRequest</c>;</para></remarks>
    // property linkRequest
    // IDL: long linkRequest;
    // VB6: linkRequest As Long
    int linkRequest
    {
      // IDL: HRESULT linkRequest ([out, retval] long* ReturnValue);
      // VB6: Function linkRequest As Long
      [DispId(2914)]
      get;
      // IDL: HRESULT linkRequest (long value);
      // VB6: Sub linkRequest (ByVal value As Long)
      [DispId(2914)]
      set;
    }

    /// <summary><para><c>linkRequestParams</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.  </para><para>property linkRequestParams</para></summary>
    /// <remarks><para>An original IDL definition of <c>linkRequestParams</c> property was the following:  <c>BSTR linkRequestParams</c>;</para></remarks>
    // property linkRequestParams
    // IDL: BSTR linkRequestParams;
    // VB6: linkRequestParams As String
    string linkRequestParams
    {
      // IDL: HRESULT linkRequestParams ([out, retval] BSTR* ReturnValue);
      // VB6: Function linkRequestParams As String
      [DispId(2915)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT linkRequestParams (BSTR value);
      // VB6: Sub linkRequestParams (ByVal value As String)
      [DispId(2915)]
      set;
    }

    /// <summary><para><c>metadataString</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>metadataString</c> property was the following:  <c>BSTR metadataString</c>;</para></remarks>
    // IDL: BSTR metadataString;
    // VB6: metadataString As String
    string metadataString
    {
      // IDL: HRESULT metadataString ([out, retval] BSTR* ReturnValue);
      // VB6: Function metadataString As String
      [DispId(2981)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT metadataString (BSTR value);
      // VB6: Sub metadataString (ByVal value As String)
      [DispId(2981)]
      set;
    }

    /// <summary><para><c>mmoTextColor</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>mmoTextColor</c> property was the following:  <c>BSTR mmoTextColor</c>;</para></remarks>
    // IDL: BSTR mmoTextColor;
    // VB6: mmoTextColor As String
    string mmoTextColor
    {
      // IDL: HRESULT mmoTextColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function mmoTextColor As String
      [DispId(2967)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>MMOVisible</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>MMOVisible</c> property was the following:  <c>VARIANT_BOOL MMOVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL MMOVisible;
    // VB6: MMOVisible As Boolean
    bool MMOVisible
    {
      // IDL: HRESULT MMOVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function MMOVisible As Boolean
      [DispId(2971)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>nextPlaylistAvailable</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>nextPlaylistAvailable</c> property was the following:  <c>VARIANT_BOOL nextPlaylistAvailable</c>;</para></remarks>
    // IDL: VARIANT_BOOL nextPlaylistAvailable;
    // VB6: nextPlaylistAvailable As Boolean
    bool nextPlaylistAvailable
    {
      // IDL: HRESULT nextPlaylistAvailable ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function nextPlaylistAvailable As Boolean
      [DispId(2960)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>notificationString</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>notificationString</c> property was the following:  <c>BSTR notificationString</c>;</para></remarks>
    // IDL: BSTR notificationString;
    // VB6: notificationString As String
    string notificationString
    {
      // IDL: HRESULT notificationString ([out, retval] BSTR* ReturnValue);
      // VB6: Function notificationString As String
      [DispId(2928)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>playAgain</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>playAgain</c> property was the following:  <c>VARIANT_BOOL playAgain</c>;</para></remarks>
    // IDL: VARIANT_BOOL playAgain;
    // VB6: playAgain As Boolean
    bool playAgain
    {
      // IDL: HRESULT playAgain ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function playAgain As Boolean
      [DispId(2958)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>playbackOverlayVisible</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>playbackOverlayVisible</c> property was the following:  <c>VARIANT_BOOL playbackOverlayVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL playbackOverlayVisible;
    // VB6: playbackOverlayVisible As Boolean
    bool playbackOverlayVisible
    {
      // IDL: HRESULT playbackOverlayVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function playbackOverlayVisible As Boolean
      [DispId(2974)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>playerModeAlbumArtSelected</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>playerModeAlbumArtSelected</c> property was the following:  <c>VARIANT_BOOL playerModeAlbumArtSelected</c>;</para></remarks>
    // IDL: VARIANT_BOOL playerModeAlbumArtSelected;
    // VB6: playerModeAlbumArtSelected As Boolean
    bool playerModeAlbumArtSelected
    {
      // IDL: HRESULT playerModeAlbumArtSelected ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function playerModeAlbumArtSelected As Boolean
      [DispId(2983)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>previousEnabled</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>previousEnabled</c> property was the following:  <c>VARIANT_BOOL previousEnabled</c>;</para></remarks>
    // IDL: VARIANT_BOOL previousEnabled;
    // VB6: previousEnabled As Boolean
    bool previousEnabled
    {
      // IDL: HRESULT previousEnabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function previousEnabled As Boolean
      [DispId(2934)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT previousEnabled (VARIANT_BOOL value);
      // VB6: Sub previousEnabled (ByVal value As Boolean)
      [DispId(2934)]
      set;
    }

    /// <summary><para><c>previousPlaylistAvailable</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>previousPlaylistAvailable</c> property was the following:  <c>VARIANT_BOOL previousPlaylistAvailable</c>;</para></remarks>
    // IDL: VARIANT_BOOL previousPlaylistAvailable;
    // VB6: previousPlaylistAvailable As Boolean
    bool previousPlaylistAvailable
    {
      // IDL: HRESULT previousPlaylistAvailable ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function previousPlaylistAvailable As Boolean
      [DispId(2959)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>remoted</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>remoted</c> property was the following:  <c>VARIANT_BOOL remoted</c>;</para></remarks>
    // IDL: VARIANT_BOOL remoted;
    // VB6: remoted As Boolean
    bool remoted
    {
      // IDL: HRESULT remoted ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function remoted As Boolean
      [DispId(2975)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>showMMO</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>showMMO</c> property was the following:  <c>VARIANT_BOOL showMMO</c>;</para></remarks>
    // IDL: VARIANT_BOOL showMMO;
    // VB6: showMMO As Boolean
    bool showMMO
    {
      // IDL: HRESULT showMMO ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function showMMO As Boolean
      [DispId(2954)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT showMMO (VARIANT_BOOL value);
      // VB6: Sub showMMO (ByVal value As Boolean)
      [DispId(2954)]
      set;
    }

    /// <summary><para><c>suggestionsTextColor</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>suggestionsTextColor</c> property was the following:  <c>BSTR suggestionsTextColor</c>;</para></remarks>
    // IDL: BSTR suggestionsTextColor;
    // VB6: suggestionsTextColor As String
    string suggestionsTextColor
    {
      // IDL: HRESULT suggestionsTextColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function suggestionsTextColor As String
      [DispId(2956)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>suggestionsVisible</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>suggestionsVisible</c> property was the following:  <c>VARIANT_BOOL suggestionsVisible</c>;</para></remarks>
    // IDL: VARIANT_BOOL suggestionsVisible;
    // VB6: suggestionsVisible As Boolean
    bool suggestionsVisible
    {
      // IDL: HRESULT suggestionsVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function suggestionsVisible As Boolean
      [DispId(2955)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>testHighContrast</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>testHighContrast</c> property was the following:  <c>BSTR testHighContrast</c>;</para></remarks>
    // IDL: BSTR testHighContrast;
    // VB6: testHighContrast As String
    string testHighContrast
    {
      // IDL: HRESULT testHighContrast (BSTR value);
      // VB6: Sub testHighContrast (ByVal value As String)
      [DispId(2978)]
      set;
    }

    /// <summary><para><c>upNext</c> property of <c>IWMPNowPlayingHelperDispatch</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>upNext</c> property was the following:  <c>BSTR upNext</c>;</para></remarks>
    // IDL: BSTR upNext;
    // VB6: upNext As String
    string upNext
    {
      // IDL: HRESULT upNext ([out, retval] BSTR* ReturnValue);
      // VB6: Function upNext As String
      [DispId(2973)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPObjectExtendedProps</c> interface.  </para><para>IWMPObjectExtendedProps: Public interface for skin object model.</para></summary>
  // IWMPObjectExtendedProps: Public interface for skin object model.
  [Guid("21D077C1-4BAA-11D3-BD45-00C04F6EA5AE")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPObjectExtendedProps
  {
    /// <summary><para><c>moveTo</c> method of <c>IWMPObjectExtendedProps</c> interface.  </para><para>method moveTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>moveTo</c> method was the following:  <c>HRESULT moveTo (long newX, long newY, long moveTime)</c>;</para></remarks>
    // method moveTo
    // IDL: HRESULT moveTo (long newX, long newY, long moveTime);
    // VB6: Sub moveTo (ByVal newX As Long, ByVal newY As Long, ByVal moveTime As Long)
    [DispId(2015)]
    void moveTo (int newX, int newY, int moveTime);

    /// <summary><para><c>slideTo</c> method of <c>IWMPObjectExtendedProps</c> interface.  </para><para>method slideTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>slideTo</c> method was the following:  <c>HRESULT slideTo (long newX, long newY, long moveTime)</c>;</para></remarks>
    // method slideTo
    // IDL: HRESULT slideTo (long newX, long newY, long moveTime);
    // VB6: Sub slideTo (ByVal newX As Long, ByVal newY As Long, ByVal moveTime As Long)
    [DispId(2021)]
    void slideTo (int newX, int newY, int moveTime);

    /// <summary><para><c>moveSizeTo</c> method of <c>IWMPObjectExtendedProps</c> interface.  </para><para>method moveSizeTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>moveSizeTo</c> method was the following:  <c>HRESULT moveSizeTo (long newX, long newY, long newWidth, long newHeight, long moveTime, VARIANT_BOOL fSlide)</c>;</para></remarks>
    // method moveSizeTo
    // IDL: HRESULT moveSizeTo (long newX, long newY, long newWidth, long newHeight, long moveTime, VARIANT_BOOL fSlide);
    // VB6: Sub moveSizeTo (ByVal newX As Long, ByVal newY As Long, ByVal newWidth As Long, ByVal newHeight As Long, ByVal moveTime As Long, ByVal fSlide As Boolean)
    [DispId(2026)]
    void moveSizeTo (int newX, int newY, int newWidth, int newHeight, int moveTime, [MarshalAs(UnmanagedType.VariantBool)] bool fSlide);

    /// <summary><para><c>alphaBlendTo</c> method of <c>IWMPObjectExtendedProps</c> interface.  </para><para>method alphaBlendTo</para></summary>
    /// <remarks><para>An original IDL definition of <c>alphaBlendTo</c> method was the following:  <c>HRESULT alphaBlendTo (long newVal, long alphaTime)</c>;</para></remarks>
    // method alphaBlendTo
    // IDL: HRESULT alphaBlendTo (long newVal, long alphaTime);
    // VB6: Sub alphaBlendTo (ByVal newVal As Long, ByVal alphaTime As Long)
    [DispId(2017)]
    void alphaBlendTo (int newVal, int alphaTime);

    /// <summary><para><c>accDescription</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property accDescription</para></summary>
    /// <remarks><para>An original IDL definition of <c>accDescription</c> property was the following:  <c>BSTR accDescription</c>;</para></remarks>
    // property accDescription
    // IDL: BSTR accDescription;
    // VB6: accDescription As String
    string accDescription
    {
      // IDL: HRESULT accDescription ([out, retval] BSTR* ReturnValue);
      // VB6: Function accDescription As String
      [DispId(2019)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accDescription (BSTR value);
      // VB6: Sub accDescription (ByVal value As String)
      [DispId(2019)]
      set;
    }

    /// <summary><para><c>accKeyboardShortcut</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property accKeyboardShortcut	</para></summary>
    /// <remarks><para>An original IDL definition of <c>accKeyboardShortcut</c> property was the following:  <c>BSTR accKeyboardShortcut</c>;</para></remarks>
    // property accKeyboardShortcut	
    // IDL: BSTR accKeyboardShortcut;
    // VB6: accKeyboardShortcut As String
    string accKeyboardShortcut
    {
      // IDL: HRESULT accKeyboardShortcut ([out, retval] BSTR* ReturnValue);
      // VB6: Function accKeyboardShortcut As String
      [DispId(2020)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accKeyboardShortcut (BSTR value);
      // VB6: Sub accKeyboardShortcut (ByVal value As String)
      [DispId(2020)]
      set;
    }

    /// <summary><para><c>accName</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property accName</para></summary>
    /// <remarks><para>An original IDL definition of <c>accName</c> property was the following:  <c>BSTR accName</c>;</para></remarks>
    // property accName
    // IDL: BSTR accName;
    // VB6: accName As String
    string accName
    {
      // IDL: HRESULT accName ([out, retval] BSTR* ReturnValue);
      // VB6: Function accName As String
      [DispId(2018)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accName (BSTR value);
      // VB6: Sub accName (ByVal value As String)
      [DispId(2018)]
      set;
    }

    /// <summary><para><c>alphaBlend</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property alphaBlend</para></summary>
    /// <remarks><para>An original IDL definition of <c>alphaBlend</c> property was the following:  <c>long alphaBlend</c>;</para></remarks>
    // property alphaBlend
    // IDL: long alphaBlend;
    // VB6: alphaBlend As Long
    int alphaBlend
    {
      // IDL: HRESULT alphaBlend ([out, retval] long* ReturnValue);
      // VB6: Function alphaBlend As Long
      [DispId(2016)]
      get;
      // IDL: HRESULT alphaBlend (long value);
      // VB6: Sub alphaBlend (ByVal value As Long)
      [DispId(2016)]
      set;
    }

    /// <summary><para><c>bottom</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property bottom</para></summary>
    /// <remarks><para>An original IDL definition of <c>bottom</c> property was the following:  <c>long bottom</c>;</para></remarks>
    // property bottom
    // IDL: long bottom;
    // VB6: bottom As Long
    int bottom
    {
      // IDL: HRESULT bottom ([out, retval] long* ReturnValue);
      // VB6: Function bottom As Long
      [DispId(2023)]
      get;
      // IDL: HRESULT bottom (long value);
      // VB6: Sub bottom (ByVal value As Long)
      [DispId(2023)]
      set;
    }

    /// <summary><para><c>clippingColor</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property clippingColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>clippingColor</c> property was the following:  <c>BSTR clippingColor</c>;</para></remarks>
    // property clippingColor
    // IDL: BSTR clippingColor;
    // VB6: clippingColor As String
    string clippingColor
    {
      // IDL: HRESULT clippingColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function clippingColor As String
      [DispId(2008)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT clippingColor (BSTR value);
      // VB6: Sub clippingColor (ByVal value As String)
      [DispId(2008)]
      set;
    }

    /// <summary><para><c>clippingImage</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property clippingImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>clippingImage</c> property was the following:  <c>BSTR clippingImage</c>;</para></remarks>
    // property clippingImage
    // IDL: BSTR clippingImage;
    // VB6: clippingImage As String
    string clippingImage
    {
      // IDL: HRESULT clippingImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function clippingImage As String
      [DispId(2007)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT clippingImage (BSTR value);
      // VB6: Sub clippingImage (ByVal value As String)
      [DispId(2007)]
      set;
    }

    /// <summary><para><c>elementType</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property elementType</para></summary>
    /// <remarks><para>An original IDL definition of <c>elementType</c> property was the following:  <c>BSTR elementType</c>;</para></remarks>
    // property elementType
    // IDL: BSTR elementType;
    // VB6: elementType As String
    string elementType
    {
      // IDL: HRESULT elementType ([out, retval] BSTR* ReturnValue);
      // VB6: Function elementType As String
      [DispId(2001)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>enabled</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property enabled</para></summary>
    /// <remarks><para>An original IDL definition of <c>enabled</c> property was the following:  <c>VARIANT_BOOL enabled</c>;</para></remarks>
    // property enabled
    // IDL: VARIANT_BOOL enabled;
    // VB6: enabled As Boolean
    bool enabled
    {
      // IDL: HRESULT enabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enabled As Boolean
      [DispId(2010)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enabled (VARIANT_BOOL value);
      // VB6: Sub enabled (ByVal value As Boolean)
      [DispId(2010)]
      set;
    }

    /// <summary><para><c>height</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property height</para></summary>
    /// <remarks><para>An original IDL definition of <c>height</c> property was the following:  <c>long height</c>;</para></remarks>
    // property height
    // IDL: long height;
    // VB6: height As Long
    int height
    {
      // IDL: HRESULT height ([out, retval] long* ReturnValue);
      // VB6: Function height As Long
      [DispId(2005)]
      get;
      // IDL: HRESULT height (long value);
      // VB6: Sub height (ByVal value As Long)
      [DispId(2005)]
      set;
    }

    /// <summary><para><c>horizontalAlignment</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property horizontalAlignment</para></summary>
    /// <remarks><para>An original IDL definition of <c>horizontalAlignment</c> property was the following:  <c>BSTR horizontalAlignment</c>;</para></remarks>
    // property horizontalAlignment
    // IDL: BSTR horizontalAlignment;
    // VB6: horizontalAlignment As String
    string horizontalAlignment
    {
      // IDL: HRESULT horizontalAlignment ([out, retval] BSTR* ReturnValue);
      // VB6: Function horizontalAlignment As String
      [DispId(2013)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT horizontalAlignment (BSTR value);
      // VB6: Sub horizontalAlignment (ByVal value As String)
      [DispId(2013)]
      set;
    }

    /// <summary><para><c>ID</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property id</para></summary>
    /// <remarks><para>An original IDL definition of <c>ID</c> property was the following:  <c>BSTR ID</c>;</para></remarks>
    // property id
    // IDL: BSTR ID;
    // VB6: ID As String
    string ID
    {
      // IDL: HRESULT ID ([out, retval] BSTR* ReturnValue);
      // VB6: Function ID As String
      [DispId(2000)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>left</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property left</para></summary>
    /// <remarks><para>An original IDL definition of <c>left</c> property was the following:  <c>long left</c>;</para></remarks>
    // property left
    // IDL: long left;
    // VB6: left As Long
    int left
    {
      // IDL: HRESULT left ([out, retval] long* ReturnValue);
      // VB6: Function left As Long
      [DispId(2002)]
      get;
      // IDL: HRESULT left (long value);
      // VB6: Sub left (ByVal value As Long)
      [DispId(2002)]
      set;
    }

    /// <summary><para><c>nineGridMargins</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property nineGridMargins</para></summary>
    /// <remarks><para>An original IDL definition of <c>nineGridMargins</c> property was the following:  <c>BSTR nineGridMargins</c>;</para></remarks>
    // property nineGridMargins
    // IDL: BSTR nineGridMargins;
    // VB6: nineGridMargins As String
    string nineGridMargins
    {
      // IDL: HRESULT nineGridMargins ([out, retval] BSTR* ReturnValue);
      // VB6: Function nineGridMargins As String
      [DispId(2025)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT nineGridMargins (BSTR value);
      // VB6: Sub nineGridMargins (ByVal value As String)
      [DispId(2025)]
      set;
    }

    /// <summary><para><c>passThrough</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property passThrough</para></summary>
    /// <remarks><para>An original IDL definition of <c>passThrough</c> property was the following:  <c>VARIANT_BOOL passThrough</c>;</para></remarks>
    // property passThrough
    // IDL: VARIANT_BOOL passThrough;
    // VB6: passThrough As Boolean
    bool passThrough
    {
      // IDL: HRESULT passThrough ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function passThrough As Boolean
      [DispId(2012)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT passThrough (VARIANT_BOOL value);
      // VB6: Sub passThrough (ByVal value As Boolean)
      [DispId(2012)]
      set;
    }

    /// <summary><para><c>resizeImages</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property resizeImages</para></summary>
    /// <remarks><para>An original IDL definition of <c>resizeImages</c> property was the following:  <c>VARIANT_BOOL resizeImages</c>;</para></remarks>
    // property resizeImages
    // IDL: VARIANT_BOOL resizeImages;
    // VB6: resizeImages As Boolean
    bool resizeImages
    {
      // IDL: HRESULT resizeImages ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function resizeImages As Boolean
      [DispId(2024)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT resizeImages (VARIANT_BOOL value);
      // VB6: Sub resizeImages (ByVal value As Boolean)
      [DispId(2024)]
      set;
    }

    /// <summary><para><c>resizeOptimize</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property resizeOptimize</para></summary>
    /// <remarks><para>An original IDL definition of <c>resizeOptimize</c> property was the following:  <c>BSTR resizeOptimize</c>;</para></remarks>
    // property resizeOptimize
    // IDL: BSTR resizeOptimize;
    // VB6: resizeOptimize As String
    string resizeOptimize
    {
      // IDL: HRESULT resizeOptimize ([out, retval] BSTR* ReturnValue);
      // VB6: Function resizeOptimize As String
      [DispId(2027)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT resizeOptimize (BSTR value);
      // VB6: Sub resizeOptimize (ByVal value As String)
      [DispId(2027)]
      set;
    }

    /// <summary><para><c>right</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property right</para></summary>
    /// <remarks><para>An original IDL definition of <c>right</c> property was the following:  <c>long right</c>;</para></remarks>
    // property right
    // IDL: long right;
    // VB6: right As Long
    int right
    {
      // IDL: HRESULT right ([out, retval] long* ReturnValue);
      // VB6: Function right As Long
      [DispId(2022)]
      get;
      // IDL: HRESULT right (long value);
      // VB6: Sub right (ByVal value As Long)
      [DispId(2022)]
      set;
    }

    /// <summary><para><c>rotation</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property rotation</para></summary>
    /// <remarks><para>An original IDL definition of <c>rotation</c> property was the following:  <c>float rotation</c>;</para></remarks>
    // property rotation
    // IDL: float rotation;
    // VB6: rotation As Single
    float rotation
    {
      // IDL: HRESULT rotation ([out, retval] float* ReturnValue);
      // VB6: Function rotation As Single
      [DispId(2028)]
      get;
      // IDL: HRESULT rotation (float value);
      // VB6: Sub rotation (ByVal value As Single)
      [DispId(2028)]
      set;
    }

    /// <summary><para><c>tabStop</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property tabStop</para></summary>
    /// <remarks><para>An original IDL definition of <c>tabStop</c> property was the following:  <c>VARIANT_BOOL tabStop</c>;</para></remarks>
    // property tabStop
    // IDL: VARIANT_BOOL tabStop;
    // VB6: tabStop As Boolean
    bool tabStop
    {
      // IDL: HRESULT tabStop ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function tabStop As Boolean
      [DispId(2011)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT tabStop (VARIANT_BOOL value);
      // VB6: Sub tabStop (ByVal value As Boolean)
      [DispId(2011)]
      set;
    }

    /// <summary><para><c>top</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property top</para></summary>
    /// <remarks><para>An original IDL definition of <c>top</c> property was the following:  <c>long top</c>;</para></remarks>
    // property top
    // IDL: long top;
    // VB6: top As Long
    int top
    {
      // IDL: HRESULT top ([out, retval] long* ReturnValue);
      // VB6: Function top As Long
      [DispId(2003)]
      get;
      // IDL: HRESULT top (long value);
      // VB6: Sub top (ByVal value As Long)
      [DispId(2003)]
      set;
    }

    /// <summary><para><c>verticalAlignment</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property verticalAlignment</para></summary>
    /// <remarks><para>An original IDL definition of <c>verticalAlignment</c> property was the following:  <c>BSTR verticalAlignment</c>;</para></remarks>
    // property verticalAlignment
    // IDL: BSTR verticalAlignment;
    // VB6: verticalAlignment As String
    string verticalAlignment
    {
      // IDL: HRESULT verticalAlignment ([out, retval] BSTR* ReturnValue);
      // VB6: Function verticalAlignment As String
      [DispId(2014)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT verticalAlignment (BSTR value);
      // VB6: Sub verticalAlignment (ByVal value As String)
      [DispId(2014)]
      set;
    }

    /// <summary><para><c>visible</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property visible</para></summary>
    /// <remarks><para>An original IDL definition of <c>visible</c> property was the following:  <c>VARIANT_BOOL visible</c>;</para></remarks>
    // property visible
    // IDL: VARIANT_BOOL visible;
    // VB6: visible As Boolean
    bool visible
    {
      // IDL: HRESULT visible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function visible As Boolean
      [DispId(2009)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT visible (VARIANT_BOOL value);
      // VB6: Sub visible (ByVal value As Boolean)
      [DispId(2009)]
      set;
    }

    /// <summary><para><c>width</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property width</para></summary>
    /// <remarks><para>An original IDL definition of <c>width</c> property was the following:  <c>long width</c>;</para></remarks>
    // property width
    // IDL: long width;
    // VB6: width As Long
    int width
    {
      // IDL: HRESULT width ([out, retval] long* ReturnValue);
      // VB6: Function width As Long
      [DispId(2004)]
      get;
      // IDL: HRESULT width (long value);
      // VB6: Sub width (ByVal value As Long)
      [DispId(2004)]
      set;
    }

    /// <summary><para><c>zIndex</c> property of <c>IWMPObjectExtendedProps</c> interface.  </para><para>property zIndex</para></summary>
    /// <remarks><para>An original IDL definition of <c>zIndex</c> property was the following:  <c>long zIndex</c>;</para></remarks>
    // property zIndex
    // IDL: long zIndex;
    // VB6: zIndex As Long
    int zIndex
    {
      // IDL: HRESULT zIndex ([out, retval] long* ReturnValue);
      // VB6: Function zIndex As Long
      [DispId(2006)]
      get;
      // IDL: HRESULT zIndex (long value);
      // VB6: Sub zIndex (ByVal value As Long)
      [DispId(2006)]
      set;
    }
  }

  /// <summary><para><c>IWMPOfflineExternal</c> interface.  </para><para>IWMPOfflineExternal: Not Public.  Internal interface used by Windows Media Player..</para></summary>
  // IWMPOfflineExternal: Not Public.  Internal interface used by Windows Media Player..
  [Guid("3148E685-B243-423D-8341-8480D6EFF674")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPOfflineExternal
  {
    /// <summary><para><c>forceOnline</c> method of <c>IWMPOfflineExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>forceOnline</c> method was the following:  <c>HRESULT forceOnline (void)</c>;</para></remarks>
    // IDL: HRESULT forceOnline (void);
    // VB6: Sub forceOnline
    [DispId(10025)]
    void forceOnline ();

    /// <summary><para><c>appColorLight</c> property of <c>IWMPOfflineExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorLight</c> property was the following:  <c>BSTR appColorLight</c>;</para></remarks>
    // IDL: BSTR appColorLight;
    // VB6: appColorLight As String
    string appColorLight
    {
      // IDL: HRESULT appColorLight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorLight As String
      [DispId(10012)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>OnColorChange</c> property of <c>IWMPOfflineExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnColorChange</c> property was the following:  <c>IDispatch OnColorChange</c>;</para></remarks>
    // IDL: IDispatch OnColorChange;
    // VB6: OnColorChange As IDispatch
    object OnColorChange
    {
      // IDL: HRESULT OnColorChange (IDispatch* value);
      // VB6: Sub OnColorChange (ByVal value As IDispatch)
      [DispId(10018)]
      set;
    }

    /// <summary><para><c>version</c> property of <c>IWMPOfflineExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>version</c> property was the following:  <c>BSTR version</c>;</para></remarks>
    // IDL: BSTR version;
    // VB6: version As String
    string version
    {
      // IDL: HRESULT version ([out, retval] BSTR* ReturnValue);
      // VB6: Function version As String
      [DispId(10005)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPPlayer</c> interface.  </para><para>IWMPPlayer: Public interface.</para></summary>
  // IWMPPlayer: Public interface.
  [Guid("6BF52A4F-394A-11D3-B153-00C04F79FAA6")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPPlayer
  {
    /// <summary><para><c>close</c> method of <c>IWMPPlayer</c> interface.  </para><para>Closes the media</para></summary>
    /// <remarks><para>An original IDL definition of <c>close</c> method was the following:  <c>HRESULT close (void)</c>;</para></remarks>
    // Closes the media
    // IDL: HRESULT close (void);
    // VB6: Sub close
    [DispId(3)]
    void close ();

    /// <summary><para><c>launchURL</c> method of <c>IWMPPlayer</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>launchURL</c> method was the following:  <c>HRESULT launchURL (BSTR bstrURL)</c>;</para></remarks>
    // IDL: HRESULT launchURL (BSTR bstrURL);
    // VB6: Sub launchURL (ByVal bstrURL As String)
    [DispId(12)]
    void launchURL ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>cdromCollection</c> property of <c>IWMPPlayer</c> interface.  </para><para>Get the CDROM drive collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>cdromCollection</c> property was the following:  <c>IWMPCdromCollection* cdromCollection</c>;</para></remarks>
    // Get the CDROM drive collection
    // IDL: IWMPCdromCollection* cdromCollection;
    // VB6: cdromCollection As IWMPCdromCollection
    IWMPCdromCollection cdromCollection
    {
      // IDL: HRESULT cdromCollection ([out, retval] IWMPCdromCollection** ReturnValue);
      // VB6: Function cdromCollection As IWMPCdromCollection
      [DispId(14)]
      get;
    }

    /// <summary><para><c>closedCaption</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns the closed caption handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>closedCaption</c> property was the following:  <c>IWMPClosedCaption* closedCaption</c>;</para></remarks>
    // Returns the closed caption handler
    // IDL: IWMPClosedCaption* closedCaption;
    // VB6: closedCaption As IWMPClosedCaption
    IWMPClosedCaption closedCaption
    {
      // IDL: HRESULT closedCaption ([out, retval] IWMPClosedCaption** ReturnValue);
      // VB6: Function closedCaption As IWMPClosedCaption
      [DispId(15)]
      get;
    }

    /// <summary><para><c>controls</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns the control handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>controls</c> property was the following:  <c>IWMPControls* controls</c>;</para></remarks>
    // Returns the control handler
    // IDL: IWMPControls* controls;
    // VB6: controls As IWMPControls
    IWMPControls controls
    {
      // IDL: HRESULT controls ([out, retval] IWMPControls** ReturnValue);
      // VB6: Function controls As IWMPControls
      [DispId(4)]
      get;
    }

    /// <summary><para><c>currentMedia</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns or sets the current media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentMedia</c> property was the following:  <c>IWMPMedia* currentMedia</c>;</para></remarks>
    // Returns or sets the current media object
    // IDL: IWMPMedia* currentMedia;
    // VB6: currentMedia As IWMPMedia
    IWMPMedia currentMedia
    {
      // IDL: HRESULT currentMedia ([out, retval] IWMPMedia** ReturnValue);
      // VB6: Function currentMedia As IWMPMedia
      [DispId(6)]
      get;
      // IDL: HRESULT currentMedia (IWMPMedia* value);
      // VB6: Sub currentMedia (ByVal value As IWMPMedia)
      [DispId(6)]
      set;
    }

    /// <summary><para><c>currentPlaylist</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns/sets the current playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPlaylist</c> property was the following:  <c>IWMPPlaylist* currentPlaylist</c>;</para></remarks>
    // Returns/sets the current playlist
    // IDL: IWMPPlaylist* currentPlaylist;
    // VB6: currentPlaylist As IWMPPlaylist
    IWMPPlaylist currentPlaylist
    {
      // IDL: HRESULT currentPlaylist ([out, retval] IWMPPlaylist** ReturnValue);
      // VB6: Function currentPlaylist As IWMPPlaylist
      [DispId(13)]
      get;
      // IDL: HRESULT currentPlaylist (IWMPPlaylist* value);
      // VB6: Sub currentPlaylist (ByVal value As IWMPPlaylist)
      [DispId(13)]
      set;
    }

    /// <summary><para><c>enableContextMenu</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns a boolean value specifying whether or not the context menu is enabled on the control</para></summary>
    /// <remarks><para>An original IDL definition of <c>enableContextMenu</c> property was the following:  <c>VARIANT_BOOL enableContextMenu</c>;</para></remarks>
    // Returns a boolean value specifying whether or not the context menu is enabled on the control
    // IDL: VARIANT_BOOL enableContextMenu;
    // VB6: enableContextMenu As Boolean
    bool enableContextMenu
    {
      // IDL: HRESULT enableContextMenu ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enableContextMenu As Boolean
      [DispId(22)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enableContextMenu (VARIANT_BOOL value);
      // VB6: Sub enableContextMenu (ByVal value As Boolean)
      [DispId(22)]
      set;
    }

    /// <summary><para><c>enabled</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns a boolen value specifying whether or not the control is enabled</para></summary>
    /// <remarks><para>An original IDL definition of <c>enabled</c> property was the following:  <c>VARIANT_BOOL enabled</c>;</para></remarks>
    // Returns a boolen value specifying whether or not the control is enabled
    // IDL: VARIANT_BOOL enabled;
    // VB6: enabled As Boolean
    bool enabled
    {
      // IDL: HRESULT enabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enabled As Boolean
      [DispId(19)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enabled (VARIANT_BOOL value);
      // VB6: Sub enabled (ByVal value As Boolean)
      [DispId(19)]
      set;
    }

    /// <summary><para><c>Error</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns the error object</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> property was the following:  <c>IWMPError* Error</c>;</para></remarks>
    // Returns the error object
    // IDL: IWMPError* Error;
    // VB6: Error As IWMPError
    IWMPError Error
    {
      // IDL: HRESULT Error ([out, retval] IWMPError** ReturnValue);
      // VB6: Function Error As IWMPError
      [DispId(17)]
      get;
    }

    /// <summary><para><c>fullScreen</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns a boolean value specifying whether or not the control is in full screen mode</para></summary>
    /// <remarks><para>An original IDL definition of <c>fullScreen</c> property was the following:  <c>VARIANT_BOOL fullScreen</c>;</para></remarks>
    // Returns a boolean value specifying whether or not the control is in full screen mode
    // IDL: VARIANT_BOOL fullScreen;
    // VB6: fullScreen As Boolean
    bool fullScreen
    {
      // IDL: HRESULT fullScreen ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function fullScreen As Boolean
      [DispId(21)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT fullScreen (VARIANT_BOOL value);
      // VB6: Sub fullScreen (ByVal value As Boolean)
      [DispId(21)]
      set;
    }

    /// <summary><para><c>isOnline</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns whether the machine is online.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isOnline</c> property was the following:  <c>VARIANT_BOOL isOnline</c>;</para></remarks>
    // Returns whether the machine is online.
    // IDL: VARIANT_BOOL isOnline;
    // VB6: isOnline As Boolean
    bool isOnline
    {
      // IDL: HRESULT isOnline ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isOnline As Boolean
      [DispId(16)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>mediaCollection</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns the media collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>mediaCollection</c> property was the following:  <c>IWMPMediaCollection* mediaCollection</c>;</para></remarks>
    // Returns the media collection handler
    // IDL: IWMPMediaCollection* mediaCollection;
    // VB6: mediaCollection As IWMPMediaCollection
    IWMPMediaCollection mediaCollection
    {
      // IDL: HRESULT mediaCollection ([out, retval] IWMPMediaCollection** ReturnValue);
      // VB6: Function mediaCollection As IWMPMediaCollection
      [DispId(8)]
      get;
    }

    /// <summary><para><c>network</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns the network information handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>network</c> property was the following:  <c>IWMPNetwork* network</c>;</para></remarks>
    // Returns the network information handler
    // IDL: IWMPNetwork* network;
    // VB6: network As IWMPNetwork
    IWMPNetwork network
    {
      // IDL: HRESULT network ([out, retval] IWMPNetwork** ReturnValue);
      // VB6: Function network As IWMPNetwork
      [DispId(7)]
      get;
    }

    /// <summary><para><c>openState</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns the open state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>openState</c> property was the following:  <c>WMPOpenState openState</c>;</para></remarks>
    // Returns the open state of the player
    // IDL: WMPOpenState openState;
    // VB6: openState As WMPOpenState
    WMPOpenState openState
    {
      // IDL: HRESULT openState ([out, retval] WMPOpenState* ReturnValue);
      // VB6: Function openState As WMPOpenState
      [DispId(2)]
      get;
    }

    /// <summary><para><c>playlistCollection</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns the playlist collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>playlistCollection</c> property was the following:  <c>IWMPPlaylistCollection* playlistCollection</c>;</para></remarks>
    // Returns the playlist collection handler
    // IDL: IWMPPlaylistCollection* playlistCollection;
    // VB6: playlistCollection As IWMPPlaylistCollection
    IWMPPlaylistCollection playlistCollection
    {
      // IDL: HRESULT playlistCollection ([out, retval] IWMPPlaylistCollection** ReturnValue);
      // VB6: Function playlistCollection As IWMPPlaylistCollection
      [DispId(9)]
      get;
    }

    /// <summary><para><c>playState</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns the play state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>playState</c> property was the following:  <c>WMPPlayState playState</c>;</para></remarks>
    // Returns the play state of the player
    // IDL: WMPPlayState playState;
    // VB6: playState As WMPPlayState
    WMPPlayState playState
    {
      // IDL: HRESULT playState ([out, retval] WMPPlayState* ReturnValue);
      // VB6: Function playState As WMPPlayState
      [DispId(10)]
      get;
    }

    /// <summary><para><c>settings</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns the settings handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>settings</c> property was the following:  <c>IWMPSettings* settings</c>;</para></remarks>
    // Returns the settings handler
    // IDL: IWMPSettings* settings;
    // VB6: settings As IWMPSettings
    IWMPSettings settings
    {
      // IDL: HRESULT settings ([out, retval] IWMPSettings** ReturnValue);
      // VB6: Function settings As IWMPSettings
      [DispId(5)]
      get;
    }

    /// <summary><para><c>status</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns status string</para></summary>
    /// <remarks><para>An original IDL definition of <c>status</c> property was the following:  <c>BSTR status</c>;</para></remarks>
    // Returns status string
    // IDL: BSTR status;
    // VB6: status As String
    string status
    {
      // IDL: HRESULT status ([out, retval] BSTR* ReturnValue);
      // VB6: Function status As String
      [DispId(18)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>uiMode</c> property of <c>IWMPPlayer</c> interface.  </para><para>Specifies the ui mode to select</para></summary>
    /// <remarks><para>An original IDL definition of <c>uiMode</c> property was the following:  <c>BSTR uiMode</c>;</para></remarks>
    // Specifies the ui mode to select
    // IDL: BSTR uiMode;
    // VB6: uiMode As String
    string uiMode
    {
      // IDL: HRESULT uiMode ([out, retval] BSTR* ReturnValue);
      // VB6: Function uiMode As String
      [DispId(23)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT uiMode (BSTR value);
      // VB6: Sub uiMode (ByVal value As String)
      [DispId(23)]
      set;
    }

    /// <summary><para><c>URL</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns or sets the URL</para></summary>
    /// <remarks><para>An original IDL definition of <c>URL</c> property was the following:  <c>BSTR URL</c>;</para></remarks>
    // Returns or sets the URL
    // IDL: BSTR URL;
    // VB6: URL As String
    string URL
    {
      // IDL: HRESULT URL ([out, retval] BSTR* ReturnValue);
      // VB6: Function URL As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT URL (BSTR value);
      // VB6: Sub URL (ByVal value As String)
      [DispId(1)]
      set;
    }

    /// <summary><para><c>versionInfo</c> property of <c>IWMPPlayer</c> interface.  </para><para>Returns the version information for the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>versionInfo</c> property was the following:  <c>BSTR versionInfo</c>;</para></remarks>
    // Returns the version information for the player
    // IDL: BSTR versionInfo;
    // VB6: versionInfo As String
    string versionInfo
    {
      // IDL: HRESULT versionInfo ([out, retval] BSTR* ReturnValue);
      // VB6: Function versionInfo As String
      [DispId(11)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPPlayer2</c> interface.  </para><para>IWMPPlayer2: Public interface.</para></summary>
  // IWMPPlayer2: Public interface.
  [Guid("0E6B01D1-D407-4C85-BF5F-1C01F6150280")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPPlayer2
  {
    /// <summary><para><c>close</c> method of <c>IWMPPlayer2</c> interface.  </para><para>Closes the media</para></summary>
    /// <remarks><para>An original IDL definition of <c>close</c> method was the following:  <c>HRESULT close (void)</c>;</para></remarks>
    // Closes the media
    // IDL: HRESULT close (void);
    // VB6: Sub close
    [DispId(3)]
    void close ();

    /// <summary><para><c>launchURL</c> method of <c>IWMPPlayer2</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>launchURL</c> method was the following:  <c>HRESULT launchURL (BSTR bstrURL)</c>;</para></remarks>
    // IDL: HRESULT launchURL (BSTR bstrURL);
    // VB6: Sub launchURL (ByVal bstrURL As String)
    [DispId(12)]
    void launchURL ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>cdromCollection</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Get the CDROM drive collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>cdromCollection</c> property was the following:  <c>IWMPCdromCollection* cdromCollection</c>;</para></remarks>
    // Get the CDROM drive collection
    // IDL: IWMPCdromCollection* cdromCollection;
    // VB6: cdromCollection As IWMPCdromCollection
    IWMPCdromCollection cdromCollection
    {
      // IDL: HRESULT cdromCollection ([out, retval] IWMPCdromCollection** ReturnValue);
      // VB6: Function cdromCollection As IWMPCdromCollection
      [DispId(14)]
      get;
    }

    /// <summary><para><c>closedCaption</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns the closed caption handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>closedCaption</c> property was the following:  <c>IWMPClosedCaption* closedCaption</c>;</para></remarks>
    // Returns the closed caption handler
    // IDL: IWMPClosedCaption* closedCaption;
    // VB6: closedCaption As IWMPClosedCaption
    IWMPClosedCaption closedCaption
    {
      // IDL: HRESULT closedCaption ([out, retval] IWMPClosedCaption** ReturnValue);
      // VB6: Function closedCaption As IWMPClosedCaption
      [DispId(15)]
      get;
    }

    /// <summary><para><c>controls</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns the control handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>controls</c> property was the following:  <c>IWMPControls* controls</c>;</para></remarks>
    // Returns the control handler
    // IDL: IWMPControls* controls;
    // VB6: controls As IWMPControls
    IWMPControls controls
    {
      // IDL: HRESULT controls ([out, retval] IWMPControls** ReturnValue);
      // VB6: Function controls As IWMPControls
      [DispId(4)]
      get;
    }

    /// <summary><para><c>currentMedia</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns or sets the current media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentMedia</c> property was the following:  <c>IWMPMedia* currentMedia</c>;</para></remarks>
    // Returns or sets the current media object
    // IDL: IWMPMedia* currentMedia;
    // VB6: currentMedia As IWMPMedia
    IWMPMedia currentMedia
    {
      // IDL: HRESULT currentMedia ([out, retval] IWMPMedia** ReturnValue);
      // VB6: Function currentMedia As IWMPMedia
      [DispId(6)]
      get;
      // IDL: HRESULT currentMedia (IWMPMedia* value);
      // VB6: Sub currentMedia (ByVal value As IWMPMedia)
      [DispId(6)]
      set;
    }

    /// <summary><para><c>currentPlaylist</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns/sets the current playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPlaylist</c> property was the following:  <c>IWMPPlaylist* currentPlaylist</c>;</para></remarks>
    // Returns/sets the current playlist
    // IDL: IWMPPlaylist* currentPlaylist;
    // VB6: currentPlaylist As IWMPPlaylist
    IWMPPlaylist currentPlaylist
    {
      // IDL: HRESULT currentPlaylist ([out, retval] IWMPPlaylist** ReturnValue);
      // VB6: Function currentPlaylist As IWMPPlaylist
      [DispId(13)]
      get;
      // IDL: HRESULT currentPlaylist (IWMPPlaylist* value);
      // VB6: Sub currentPlaylist (ByVal value As IWMPPlaylist)
      [DispId(13)]
      set;
    }

    /// <summary><para><c>enableContextMenu</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns a boolean value specifying whether or not the context menu is enabled on the control</para></summary>
    /// <remarks><para>An original IDL definition of <c>enableContextMenu</c> property was the following:  <c>VARIANT_BOOL enableContextMenu</c>;</para></remarks>
    // Returns a boolean value specifying whether or not the context menu is enabled on the control
    // IDL: VARIANT_BOOL enableContextMenu;
    // VB6: enableContextMenu As Boolean
    bool enableContextMenu
    {
      // IDL: HRESULT enableContextMenu ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enableContextMenu As Boolean
      [DispId(22)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enableContextMenu (VARIANT_BOOL value);
      // VB6: Sub enableContextMenu (ByVal value As Boolean)
      [DispId(22)]
      set;
    }

    /// <summary><para><c>enabled</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns a boolen value specifying whether or not the control is enabled</para></summary>
    /// <remarks><para>An original IDL definition of <c>enabled</c> property was the following:  <c>VARIANT_BOOL enabled</c>;</para></remarks>
    // Returns a boolen value specifying whether or not the control is enabled
    // IDL: VARIANT_BOOL enabled;
    // VB6: enabled As Boolean
    bool enabled
    {
      // IDL: HRESULT enabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enabled As Boolean
      [DispId(19)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enabled (VARIANT_BOOL value);
      // VB6: Sub enabled (ByVal value As Boolean)
      [DispId(19)]
      set;
    }

    /// <summary><para><c>Error</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns the error object</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> property was the following:  <c>IWMPError* Error</c>;</para></remarks>
    // Returns the error object
    // IDL: IWMPError* Error;
    // VB6: Error As IWMPError
    IWMPError Error
    {
      // IDL: HRESULT Error ([out, retval] IWMPError** ReturnValue);
      // VB6: Function Error As IWMPError
      [DispId(17)]
      get;
    }

    /// <summary><para><c>fullScreen</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns a boolean value specifying whether or not the control is in full screen mode</para></summary>
    /// <remarks><para>An original IDL definition of <c>fullScreen</c> property was the following:  <c>VARIANT_BOOL fullScreen</c>;</para></remarks>
    // Returns a boolean value specifying whether or not the control is in full screen mode
    // IDL: VARIANT_BOOL fullScreen;
    // VB6: fullScreen As Boolean
    bool fullScreen
    {
      // IDL: HRESULT fullScreen ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function fullScreen As Boolean
      [DispId(21)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT fullScreen (VARIANT_BOOL value);
      // VB6: Sub fullScreen (ByVal value As Boolean)
      [DispId(21)]
      set;
    }

    /// <summary><para><c>isOnline</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns whether the machine is online.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isOnline</c> property was the following:  <c>VARIANT_BOOL isOnline</c>;</para></remarks>
    // Returns whether the machine is online.
    // IDL: VARIANT_BOOL isOnline;
    // VB6: isOnline As Boolean
    bool isOnline
    {
      // IDL: HRESULT isOnline ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isOnline As Boolean
      [DispId(16)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>mediaCollection</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns the media collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>mediaCollection</c> property was the following:  <c>IWMPMediaCollection* mediaCollection</c>;</para></remarks>
    // Returns the media collection handler
    // IDL: IWMPMediaCollection* mediaCollection;
    // VB6: mediaCollection As IWMPMediaCollection
    IWMPMediaCollection mediaCollection
    {
      // IDL: HRESULT mediaCollection ([out, retval] IWMPMediaCollection** ReturnValue);
      // VB6: Function mediaCollection As IWMPMediaCollection
      [DispId(8)]
      get;
    }

    /// <summary><para><c>network</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns the network information handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>network</c> property was the following:  <c>IWMPNetwork* network</c>;</para></remarks>
    // Returns the network information handler
    // IDL: IWMPNetwork* network;
    // VB6: network As IWMPNetwork
    IWMPNetwork network
    {
      // IDL: HRESULT network ([out, retval] IWMPNetwork** ReturnValue);
      // VB6: Function network As IWMPNetwork
      [DispId(7)]
      get;
    }

    /// <summary><para><c>openState</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns the open state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>openState</c> property was the following:  <c>WMPOpenState openState</c>;</para></remarks>
    // Returns the open state of the player
    // IDL: WMPOpenState openState;
    // VB6: openState As WMPOpenState
    WMPOpenState openState
    {
      // IDL: HRESULT openState ([out, retval] WMPOpenState* ReturnValue);
      // VB6: Function openState As WMPOpenState
      [DispId(2)]
      get;
    }

    /// <summary><para><c>playlistCollection</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns the playlist collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>playlistCollection</c> property was the following:  <c>IWMPPlaylistCollection* playlistCollection</c>;</para></remarks>
    // Returns the playlist collection handler
    // IDL: IWMPPlaylistCollection* playlistCollection;
    // VB6: playlistCollection As IWMPPlaylistCollection
    IWMPPlaylistCollection playlistCollection
    {
      // IDL: HRESULT playlistCollection ([out, retval] IWMPPlaylistCollection** ReturnValue);
      // VB6: Function playlistCollection As IWMPPlaylistCollection
      [DispId(9)]
      get;
    }

    /// <summary><para><c>playState</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns the play state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>playState</c> property was the following:  <c>WMPPlayState playState</c>;</para></remarks>
    // Returns the play state of the player
    // IDL: WMPPlayState playState;
    // VB6: playState As WMPPlayState
    WMPPlayState playState
    {
      // IDL: HRESULT playState ([out, retval] WMPPlayState* ReturnValue);
      // VB6: Function playState As WMPPlayState
      [DispId(10)]
      get;
    }

    /// <summary><para><c>settings</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns the settings handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>settings</c> property was the following:  <c>IWMPSettings* settings</c>;</para></remarks>
    // Returns the settings handler
    // IDL: IWMPSettings* settings;
    // VB6: settings As IWMPSettings
    IWMPSettings settings
    {
      // IDL: HRESULT settings ([out, retval] IWMPSettings** ReturnValue);
      // VB6: Function settings As IWMPSettings
      [DispId(5)]
      get;
    }

    /// <summary><para><c>status</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns status string</para></summary>
    /// <remarks><para>An original IDL definition of <c>status</c> property was the following:  <c>BSTR status</c>;</para></remarks>
    // Returns status string
    // IDL: BSTR status;
    // VB6: status As String
    string status
    {
      // IDL: HRESULT status ([out, retval] BSTR* ReturnValue);
      // VB6: Function status As String
      [DispId(18)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>stretchToFit</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns a boolen value specifying whether or not video is stretched</para></summary>
    /// <remarks><para>An original IDL definition of <c>stretchToFit</c> property was the following:  <c>VARIANT_BOOL stretchToFit</c>;</para></remarks>
    // Returns a boolen value specifying whether or not video is stretched
    // IDL: VARIANT_BOOL stretchToFit;
    // VB6: stretchToFit As Boolean
    bool stretchToFit
    {
      // IDL: HRESULT stretchToFit ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function stretchToFit As Boolean
      [DispId(24)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT stretchToFit (VARIANT_BOOL value);
      // VB6: Sub stretchToFit (ByVal value As Boolean)
      [DispId(24)]
      set;
    }

    /// <summary><para><c>uiMode</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Specifies the ui mode to select</para></summary>
    /// <remarks><para>An original IDL definition of <c>uiMode</c> property was the following:  <c>BSTR uiMode</c>;</para></remarks>
    // Specifies the ui mode to select
    // IDL: BSTR uiMode;
    // VB6: uiMode As String
    string uiMode
    {
      // IDL: HRESULT uiMode ([out, retval] BSTR* ReturnValue);
      // VB6: Function uiMode As String
      [DispId(23)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT uiMode (BSTR value);
      // VB6: Sub uiMode (ByVal value As String)
      [DispId(23)]
      set;
    }

    /// <summary><para><c>URL</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns or sets the URL</para></summary>
    /// <remarks><para>An original IDL definition of <c>URL</c> property was the following:  <c>BSTR URL</c>;</para></remarks>
    // Returns or sets the URL
    // IDL: BSTR URL;
    // VB6: URL As String
    string URL
    {
      // IDL: HRESULT URL ([out, retval] BSTR* ReturnValue);
      // VB6: Function URL As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT URL (BSTR value);
      // VB6: Sub URL (ByVal value As String)
      [DispId(1)]
      set;
    }

    /// <summary><para><c>versionInfo</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns the version information for the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>versionInfo</c> property was the following:  <c>BSTR versionInfo</c>;</para></remarks>
    // Returns the version information for the player
    // IDL: BSTR versionInfo;
    // VB6: versionInfo As String
    string versionInfo
    {
      // IDL: HRESULT versionInfo ([out, retval] BSTR* ReturnValue);
      // VB6: Function versionInfo As String
      [DispId(11)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>windowlessVideo</c> property of <c>IWMPPlayer2</c> interface.  </para><para>Returns a boolen value specifying whether or not video is windowless</para></summary>
    /// <remarks><para>An original IDL definition of <c>windowlessVideo</c> property was the following:  <c>VARIANT_BOOL windowlessVideo</c>;</para></remarks>
    // Returns a boolen value specifying whether or not video is windowless
    // IDL: VARIANT_BOOL windowlessVideo;
    // VB6: windowlessVideo As Boolean
    bool windowlessVideo
    {
      // IDL: HRESULT windowlessVideo ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function windowlessVideo As Boolean
      [DispId(25)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT windowlessVideo (VARIANT_BOOL value);
      // VB6: Sub windowlessVideo (ByVal value As Boolean)
      [DispId(25)]
      set;
    }
  }

  /// <summary><para><c>IWMPPlayer3</c> interface.  </para><para>IWMPPlayer3: Public interface.</para></summary>
  // IWMPPlayer3: Public interface.
  [Guid("54062B68-052A-4C25-A39F-8B63346511D4")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPPlayer3
  {
    /// <summary><para><c>close</c> method of <c>IWMPPlayer3</c> interface.  </para><para>Closes the media</para></summary>
    /// <remarks><para>An original IDL definition of <c>close</c> method was the following:  <c>HRESULT close (void)</c>;</para></remarks>
    // Closes the media
    // IDL: HRESULT close (void);
    // VB6: Sub close
    [DispId(3)]
    void close ();

    /// <summary><para><c>launchURL</c> method of <c>IWMPPlayer3</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>launchURL</c> method was the following:  <c>HRESULT launchURL (BSTR bstrURL)</c>;</para></remarks>
    // IDL: HRESULT launchURL (BSTR bstrURL);
    // VB6: Sub launchURL (ByVal bstrURL As String)
    [DispId(12)]
    void launchURL ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>cdromCollection</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Get the CDROM drive collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>cdromCollection</c> property was the following:  <c>IWMPCdromCollection* cdromCollection</c>;</para></remarks>
    // Get the CDROM drive collection
    // IDL: IWMPCdromCollection* cdromCollection;
    // VB6: cdromCollection As IWMPCdromCollection
    IWMPCdromCollection cdromCollection
    {
      // IDL: HRESULT cdromCollection ([out, retval] IWMPCdromCollection** ReturnValue);
      // VB6: Function cdromCollection As IWMPCdromCollection
      [DispId(14)]
      get;
    }

    /// <summary><para><c>closedCaption</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns the closed caption handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>closedCaption</c> property was the following:  <c>IWMPClosedCaption* closedCaption</c>;</para></remarks>
    // Returns the closed caption handler
    // IDL: IWMPClosedCaption* closedCaption;
    // VB6: closedCaption As IWMPClosedCaption
    IWMPClosedCaption closedCaption
    {
      // IDL: HRESULT closedCaption ([out, retval] IWMPClosedCaption** ReturnValue);
      // VB6: Function closedCaption As IWMPClosedCaption
      [DispId(15)]
      get;
    }

    /// <summary><para><c>controls</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns the control handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>controls</c> property was the following:  <c>IWMPControls* controls</c>;</para></remarks>
    // Returns the control handler
    // IDL: IWMPControls* controls;
    // VB6: controls As IWMPControls
    IWMPControls controls
    {
      // IDL: HRESULT controls ([out, retval] IWMPControls** ReturnValue);
      // VB6: Function controls As IWMPControls
      [DispId(4)]
      get;
    }

    /// <summary><para><c>currentMedia</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns or sets the current media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentMedia</c> property was the following:  <c>IWMPMedia* currentMedia</c>;</para></remarks>
    // Returns or sets the current media object
    // IDL: IWMPMedia* currentMedia;
    // VB6: currentMedia As IWMPMedia
    IWMPMedia currentMedia
    {
      // IDL: HRESULT currentMedia ([out, retval] IWMPMedia** ReturnValue);
      // VB6: Function currentMedia As IWMPMedia
      [DispId(6)]
      get;
      // IDL: HRESULT currentMedia (IWMPMedia* value);
      // VB6: Sub currentMedia (ByVal value As IWMPMedia)
      [DispId(6)]
      set;
    }

    /// <summary><para><c>currentPlaylist</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns/sets the current playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPlaylist</c> property was the following:  <c>IWMPPlaylist* currentPlaylist</c>;</para></remarks>
    // Returns/sets the current playlist
    // IDL: IWMPPlaylist* currentPlaylist;
    // VB6: currentPlaylist As IWMPPlaylist
    IWMPPlaylist currentPlaylist
    {
      // IDL: HRESULT currentPlaylist ([out, retval] IWMPPlaylist** ReturnValue);
      // VB6: Function currentPlaylist As IWMPPlaylist
      [DispId(13)]
      get;
      // IDL: HRESULT currentPlaylist (IWMPPlaylist* value);
      // VB6: Sub currentPlaylist (ByVal value As IWMPPlaylist)
      [DispId(13)]
      set;
    }

    /// <summary><para><c>dvd</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns the DVD handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>dvd</c> property was the following:  <c>IWMPDVD* dvd</c>;</para></remarks>
    // Returns the DVD handler
    // IDL: IWMPDVD* dvd;
    // VB6: dvd As IWMPDVD
    IWMPDVD dvd
    {
      // IDL: HRESULT dvd ([out, retval] IWMPDVD** ReturnValue);
      // VB6: Function dvd As IWMPDVD
      [DispId(40)]
      get;
    }

    /// <summary><para><c>enableContextMenu</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns a boolean value specifying whether or not the context menu is enabled on the control</para></summary>
    /// <remarks><para>An original IDL definition of <c>enableContextMenu</c> property was the following:  <c>VARIANT_BOOL enableContextMenu</c>;</para></remarks>
    // Returns a boolean value specifying whether or not the context menu is enabled on the control
    // IDL: VARIANT_BOOL enableContextMenu;
    // VB6: enableContextMenu As Boolean
    bool enableContextMenu
    {
      // IDL: HRESULT enableContextMenu ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enableContextMenu As Boolean
      [DispId(22)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enableContextMenu (VARIANT_BOOL value);
      // VB6: Sub enableContextMenu (ByVal value As Boolean)
      [DispId(22)]
      set;
    }

    /// <summary><para><c>enabled</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns a boolen value specifying whether or not the control is enabled</para></summary>
    /// <remarks><para>An original IDL definition of <c>enabled</c> property was the following:  <c>VARIANT_BOOL enabled</c>;</para></remarks>
    // Returns a boolen value specifying whether or not the control is enabled
    // IDL: VARIANT_BOOL enabled;
    // VB6: enabled As Boolean
    bool enabled
    {
      // IDL: HRESULT enabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enabled As Boolean
      [DispId(19)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enabled (VARIANT_BOOL value);
      // VB6: Sub enabled (ByVal value As Boolean)
      [DispId(19)]
      set;
    }

    /// <summary><para><c>Error</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns the error object</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> property was the following:  <c>IWMPError* Error</c>;</para></remarks>
    // Returns the error object
    // IDL: IWMPError* Error;
    // VB6: Error As IWMPError
    IWMPError Error
    {
      // IDL: HRESULT Error ([out, retval] IWMPError** ReturnValue);
      // VB6: Function Error As IWMPError
      [DispId(17)]
      get;
    }

    /// <summary><para><c>fullScreen</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns a boolean value specifying whether or not the control is in full screen mode</para></summary>
    /// <remarks><para>An original IDL definition of <c>fullScreen</c> property was the following:  <c>VARIANT_BOOL fullScreen</c>;</para></remarks>
    // Returns a boolean value specifying whether or not the control is in full screen mode
    // IDL: VARIANT_BOOL fullScreen;
    // VB6: fullScreen As Boolean
    bool fullScreen
    {
      // IDL: HRESULT fullScreen ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function fullScreen As Boolean
      [DispId(21)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT fullScreen (VARIANT_BOOL value);
      // VB6: Sub fullScreen (ByVal value As Boolean)
      [DispId(21)]
      set;
    }

    /// <summary><para><c>isOnline</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns whether the machine is online.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isOnline</c> property was the following:  <c>VARIANT_BOOL isOnline</c>;</para></remarks>
    // Returns whether the machine is online.
    // IDL: VARIANT_BOOL isOnline;
    // VB6: isOnline As Boolean
    bool isOnline
    {
      // IDL: HRESULT isOnline ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isOnline As Boolean
      [DispId(16)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>mediaCollection</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns the media collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>mediaCollection</c> property was the following:  <c>IWMPMediaCollection* mediaCollection</c>;</para></remarks>
    // Returns the media collection handler
    // IDL: IWMPMediaCollection* mediaCollection;
    // VB6: mediaCollection As IWMPMediaCollection
    IWMPMediaCollection mediaCollection
    {
      // IDL: HRESULT mediaCollection ([out, retval] IWMPMediaCollection** ReturnValue);
      // VB6: Function mediaCollection As IWMPMediaCollection
      [DispId(8)]
      get;
    }

    /// <summary><para><c>network</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns the network information handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>network</c> property was the following:  <c>IWMPNetwork* network</c>;</para></remarks>
    // Returns the network information handler
    // IDL: IWMPNetwork* network;
    // VB6: network As IWMPNetwork
    IWMPNetwork network
    {
      // IDL: HRESULT network ([out, retval] IWMPNetwork** ReturnValue);
      // VB6: Function network As IWMPNetwork
      [DispId(7)]
      get;
    }

    /// <summary><para><c>openState</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns the open state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>openState</c> property was the following:  <c>WMPOpenState openState</c>;</para></remarks>
    // Returns the open state of the player
    // IDL: WMPOpenState openState;
    // VB6: openState As WMPOpenState
    WMPOpenState openState
    {
      // IDL: HRESULT openState ([out, retval] WMPOpenState* ReturnValue);
      // VB6: Function openState As WMPOpenState
      [DispId(2)]
      get;
    }

    /// <summary><para><c>playlistCollection</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns the playlist collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>playlistCollection</c> property was the following:  <c>IWMPPlaylistCollection* playlistCollection</c>;</para></remarks>
    // Returns the playlist collection handler
    // IDL: IWMPPlaylistCollection* playlistCollection;
    // VB6: playlistCollection As IWMPPlaylistCollection
    IWMPPlaylistCollection playlistCollection
    {
      // IDL: HRESULT playlistCollection ([out, retval] IWMPPlaylistCollection** ReturnValue);
      // VB6: Function playlistCollection As IWMPPlaylistCollection
      [DispId(9)]
      get;
    }

    /// <summary><para><c>playState</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns the play state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>playState</c> property was the following:  <c>WMPPlayState playState</c>;</para></remarks>
    // Returns the play state of the player
    // IDL: WMPPlayState playState;
    // VB6: playState As WMPPlayState
    WMPPlayState playState
    {
      // IDL: HRESULT playState ([out, retval] WMPPlayState* ReturnValue);
      // VB6: Function playState As WMPPlayState
      [DispId(10)]
      get;
    }

    /// <summary><para><c>settings</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns the settings handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>settings</c> property was the following:  <c>IWMPSettings* settings</c>;</para></remarks>
    // Returns the settings handler
    // IDL: IWMPSettings* settings;
    // VB6: settings As IWMPSettings
    IWMPSettings settings
    {
      // IDL: HRESULT settings ([out, retval] IWMPSettings** ReturnValue);
      // VB6: Function settings As IWMPSettings
      [DispId(5)]
      get;
    }

    /// <summary><para><c>status</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns status string</para></summary>
    /// <remarks><para>An original IDL definition of <c>status</c> property was the following:  <c>BSTR status</c>;</para></remarks>
    // Returns status string
    // IDL: BSTR status;
    // VB6: status As String
    string status
    {
      // IDL: HRESULT status ([out, retval] BSTR* ReturnValue);
      // VB6: Function status As String
      [DispId(18)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>stretchToFit</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns a boolen value specifying whether or not video is stretched</para></summary>
    /// <remarks><para>An original IDL definition of <c>stretchToFit</c> property was the following:  <c>VARIANT_BOOL stretchToFit</c>;</para></remarks>
    // Returns a boolen value specifying whether or not video is stretched
    // IDL: VARIANT_BOOL stretchToFit;
    // VB6: stretchToFit As Boolean
    bool stretchToFit
    {
      // IDL: HRESULT stretchToFit ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function stretchToFit As Boolean
      [DispId(24)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT stretchToFit (VARIANT_BOOL value);
      // VB6: Sub stretchToFit (ByVal value As Boolean)
      [DispId(24)]
      set;
    }

    /// <summary><para><c>uiMode</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Specifies the ui mode to select</para></summary>
    /// <remarks><para>An original IDL definition of <c>uiMode</c> property was the following:  <c>BSTR uiMode</c>;</para></remarks>
    // Specifies the ui mode to select
    // IDL: BSTR uiMode;
    // VB6: uiMode As String
    string uiMode
    {
      // IDL: HRESULT uiMode ([out, retval] BSTR* ReturnValue);
      // VB6: Function uiMode As String
      [DispId(23)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT uiMode (BSTR value);
      // VB6: Sub uiMode (ByVal value As String)
      [DispId(23)]
      set;
    }

    /// <summary><para><c>URL</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns or sets the URL</para></summary>
    /// <remarks><para>An original IDL definition of <c>URL</c> property was the following:  <c>BSTR URL</c>;</para></remarks>
    // Returns or sets the URL
    // IDL: BSTR URL;
    // VB6: URL As String
    string URL
    {
      // IDL: HRESULT URL ([out, retval] BSTR* ReturnValue);
      // VB6: Function URL As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT URL (BSTR value);
      // VB6: Sub URL (ByVal value As String)
      [DispId(1)]
      set;
    }

    /// <summary><para><c>versionInfo</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns the version information for the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>versionInfo</c> property was the following:  <c>BSTR versionInfo</c>;</para></remarks>
    // Returns the version information for the player
    // IDL: BSTR versionInfo;
    // VB6: versionInfo As String
    string versionInfo
    {
      // IDL: HRESULT versionInfo ([out, retval] BSTR* ReturnValue);
      // VB6: Function versionInfo As String
      [DispId(11)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>windowlessVideo</c> property of <c>IWMPPlayer3</c> interface.  </para><para>Returns a boolen value specifying whether or not video is windowless</para></summary>
    /// <remarks><para>An original IDL definition of <c>windowlessVideo</c> property was the following:  <c>VARIANT_BOOL windowlessVideo</c>;</para></remarks>
    // Returns a boolen value specifying whether or not video is windowless
    // IDL: VARIANT_BOOL windowlessVideo;
    // VB6: windowlessVideo As Boolean
    bool windowlessVideo
    {
      // IDL: HRESULT windowlessVideo ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function windowlessVideo As Boolean
      [DispId(25)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT windowlessVideo (VARIANT_BOOL value);
      // VB6: Sub windowlessVideo (ByVal value As Boolean)
      [DispId(25)]
      set;
    }
  }

  /// <summary><para><c>IWMPPlayer4</c> interface.  </para><para>IWMPPlayer4: Public interface.</para></summary>
  // IWMPPlayer4: Public interface.
  [Guid("6C497D62-8919-413C-82DB-E935FB3EC584")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPPlayer4
  {
    /// <summary><para><c>close</c> method of <c>IWMPPlayer4</c> interface.  </para><para>Closes the media</para></summary>
    /// <remarks><para>An original IDL definition of <c>close</c> method was the following:  <c>HRESULT close (void)</c>;</para></remarks>
    // Closes the media
    // IDL: HRESULT close (void);
    // VB6: Sub close
    [DispId(3)]
    void close ();

    /// <summary><para><c>launchURL</c> method of <c>IWMPPlayer4</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>launchURL</c> method was the following:  <c>HRESULT launchURL (BSTR bstrURL)</c>;</para></remarks>
    // IDL: HRESULT launchURL (BSTR bstrURL);
    // VB6: Sub launchURL (ByVal bstrURL As String)
    [DispId(12)]
    void launchURL ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>newPlaylist</c> method of <c>IWMPPlayer4</c> interface.  </para><para>Creates a new playlist object</para></summary>
    /// <remarks><para>An original IDL definition of <c>newPlaylist</c> method was the following:  <c>HRESULT newPlaylist (BSTR bstrName, BSTR bstrURL, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Creates a new playlist object
    // IDL: HRESULT newPlaylist (BSTR bstrName, BSTR bstrURL, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function newPlaylist (ByVal bstrName As String, ByVal bstrURL As String) As IWMPPlaylist
    [DispId(41)]
    IWMPPlaylist newPlaylist ([MarshalAs(UnmanagedType.BStr)] string bstrName, [MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>newMedia</c> method of <c>IWMPPlayer4</c> interface.  </para><para>Creates a new media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>newMedia</c> method was the following:  <c>HRESULT newMedia (BSTR bstrURL, [out, retval] IWMPMedia** ReturnValue)</c>;</para></remarks>
    // Creates a new media object
    // IDL: HRESULT newMedia (BSTR bstrURL, [out, retval] IWMPMedia** ReturnValue);
    // VB6: Function newMedia (ByVal bstrURL As String) As IWMPMedia
    [DispId(42)]
    IWMPMedia newMedia ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>openPlayer</c> method of <c>IWMPPlayer4</c> interface.  </para><para>Opens the player with the specified URL</para></summary>
    /// <remarks><para>An original IDL definition of <c>openPlayer</c> method was the following:  <c>HRESULT openPlayer (BSTR bstrURL)</c>;</para></remarks>
    // Opens the player with the specified URL
    // IDL: HRESULT openPlayer (BSTR bstrURL);
    // VB6: Sub openPlayer (ByVal bstrURL As String)
    [DispId(28)]
    void openPlayer ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>cdromCollection</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Get the CDROM drive collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>cdromCollection</c> property was the following:  <c>IWMPCdromCollection* cdromCollection</c>;</para></remarks>
    // Get the CDROM drive collection
    // IDL: IWMPCdromCollection* cdromCollection;
    // VB6: cdromCollection As IWMPCdromCollection
    IWMPCdromCollection cdromCollection
    {
      // IDL: HRESULT cdromCollection ([out, retval] IWMPCdromCollection** ReturnValue);
      // VB6: Function cdromCollection As IWMPCdromCollection
      [DispId(14)]
      get;
    }

    /// <summary><para><c>closedCaption</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the closed caption handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>closedCaption</c> property was the following:  <c>IWMPClosedCaption* closedCaption</c>;</para></remarks>
    // Returns the closed caption handler
    // IDL: IWMPClosedCaption* closedCaption;
    // VB6: closedCaption As IWMPClosedCaption
    IWMPClosedCaption closedCaption
    {
      // IDL: HRESULT closedCaption ([out, retval] IWMPClosedCaption** ReturnValue);
      // VB6: Function closedCaption As IWMPClosedCaption
      [DispId(15)]
      get;
    }

    /// <summary><para><c>controls</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the control handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>controls</c> property was the following:  <c>IWMPControls* controls</c>;</para></remarks>
    // Returns the control handler
    // IDL: IWMPControls* controls;
    // VB6: controls As IWMPControls
    IWMPControls controls
    {
      // IDL: HRESULT controls ([out, retval] IWMPControls** ReturnValue);
      // VB6: Function controls As IWMPControls
      [DispId(4)]
      get;
    }

    /// <summary><para><c>currentMedia</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns or sets the current media object</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentMedia</c> property was the following:  <c>IWMPMedia* currentMedia</c>;</para></remarks>
    // Returns or sets the current media object
    // IDL: IWMPMedia* currentMedia;
    // VB6: currentMedia As IWMPMedia
    IWMPMedia currentMedia
    {
      // IDL: HRESULT currentMedia ([out, retval] IWMPMedia** ReturnValue);
      // VB6: Function currentMedia As IWMPMedia
      [DispId(6)]
      get;
      // IDL: HRESULT currentMedia (IWMPMedia* value);
      // VB6: Sub currentMedia (ByVal value As IWMPMedia)
      [DispId(6)]
      set;
    }

    /// <summary><para><c>currentPlaylist</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns/sets the current playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentPlaylist</c> property was the following:  <c>IWMPPlaylist* currentPlaylist</c>;</para></remarks>
    // Returns/sets the current playlist
    // IDL: IWMPPlaylist* currentPlaylist;
    // VB6: currentPlaylist As IWMPPlaylist
    IWMPPlaylist currentPlaylist
    {
      // IDL: HRESULT currentPlaylist ([out, retval] IWMPPlaylist** ReturnValue);
      // VB6: Function currentPlaylist As IWMPPlaylist
      [DispId(13)]
      get;
      // IDL: HRESULT currentPlaylist (IWMPPlaylist* value);
      // VB6: Sub currentPlaylist (ByVal value As IWMPPlaylist)
      [DispId(13)]
      set;
    }

    /// <summary><para><c>dvd</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the DVD handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>dvd</c> property was the following:  <c>IWMPDVD* dvd</c>;</para></remarks>
    // Returns the DVD handler
    // IDL: IWMPDVD* dvd;
    // VB6: dvd As IWMPDVD
    IWMPDVD dvd
    {
      // IDL: HRESULT dvd ([out, retval] IWMPDVD** ReturnValue);
      // VB6: Function dvd As IWMPDVD
      [DispId(40)]
      get;
    }

    /// <summary><para><c>enableContextMenu</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns a boolean value specifying whether or not the context menu is enabled on the control</para></summary>
    /// <remarks><para>An original IDL definition of <c>enableContextMenu</c> property was the following:  <c>VARIANT_BOOL enableContextMenu</c>;</para></remarks>
    // Returns a boolean value specifying whether or not the context menu is enabled on the control
    // IDL: VARIANT_BOOL enableContextMenu;
    // VB6: enableContextMenu As Boolean
    bool enableContextMenu
    {
      // IDL: HRESULT enableContextMenu ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enableContextMenu As Boolean
      [DispId(22)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enableContextMenu (VARIANT_BOOL value);
      // VB6: Sub enableContextMenu (ByVal value As Boolean)
      [DispId(22)]
      set;
    }

    /// <summary><para><c>enabled</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns a boolean value specifying whether or not the control is enabled</para></summary>
    /// <remarks><para>An original IDL definition of <c>enabled</c> property was the following:  <c>VARIANT_BOOL enabled</c>;</para></remarks>
    // Returns a boolean value specifying whether or not the control is enabled
    // IDL: VARIANT_BOOL enabled;
    // VB6: enabled As Boolean
    bool enabled
    {
      // IDL: HRESULT enabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enabled As Boolean
      [DispId(19)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enabled (VARIANT_BOOL value);
      // VB6: Sub enabled (ByVal value As Boolean)
      [DispId(19)]
      set;
    }

    /// <summary><para><c>Error</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the error object</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> property was the following:  <c>IWMPError* Error</c>;</para></remarks>
    // Returns the error object
    // IDL: IWMPError* Error;
    // VB6: Error As IWMPError
    IWMPError Error
    {
      // IDL: HRESULT Error ([out, retval] IWMPError** ReturnValue);
      // VB6: Function Error As IWMPError
      [DispId(17)]
      get;
    }

    /// <summary><para><c>fullScreen</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns a boolean value specifying whether or not the control is in full screen mode</para></summary>
    /// <remarks><para>An original IDL definition of <c>fullScreen</c> property was the following:  <c>VARIANT_BOOL fullScreen</c>;</para></remarks>
    // Returns a boolean value specifying whether or not the control is in full screen mode
    // IDL: VARIANT_BOOL fullScreen;
    // VB6: fullScreen As Boolean
    bool fullScreen
    {
      // IDL: HRESULT fullScreen ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function fullScreen As Boolean
      [DispId(21)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT fullScreen (VARIANT_BOOL value);
      // VB6: Sub fullScreen (ByVal value As Boolean)
      [DispId(21)]
      set;
    }

    /// <summary><para><c>isOnline</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns whether the machine is online.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isOnline</c> property was the following:  <c>VARIANT_BOOL isOnline</c>;</para></remarks>
    // Returns whether the machine is online.
    // IDL: VARIANT_BOOL isOnline;
    // VB6: isOnline As Boolean
    bool isOnline
    {
      // IDL: HRESULT isOnline ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isOnline As Boolean
      [DispId(16)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>isRemote</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Indicates whether the player is running remotely</para></summary>
    /// <remarks><para>An original IDL definition of <c>isRemote</c> property was the following:  <c>VARIANT_BOOL isRemote</c>;</para></remarks>
    // Indicates whether the player is running remotely
    // IDL: VARIANT_BOOL isRemote;
    // VB6: isRemote As Boolean
    bool isRemote
    {
      // IDL: HRESULT isRemote ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function isRemote As Boolean
      [DispId(26)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>mediaCollection</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the media collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>mediaCollection</c> property was the following:  <c>IWMPMediaCollection* mediaCollection</c>;</para></remarks>
    // Returns the media collection handler
    // IDL: IWMPMediaCollection* mediaCollection;
    // VB6: mediaCollection As IWMPMediaCollection
    IWMPMediaCollection mediaCollection
    {
      // IDL: HRESULT mediaCollection ([out, retval] IWMPMediaCollection** ReturnValue);
      // VB6: Function mediaCollection As IWMPMediaCollection
      [DispId(8)]
      get;
    }

    /// <summary><para><c>network</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the network information handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>network</c> property was the following:  <c>IWMPNetwork* network</c>;</para></remarks>
    // Returns the network information handler
    // IDL: IWMPNetwork* network;
    // VB6: network As IWMPNetwork
    IWMPNetwork network
    {
      // IDL: HRESULT network ([out, retval] IWMPNetwork** ReturnValue);
      // VB6: Function network As IWMPNetwork
      [DispId(7)]
      get;
    }

    /// <summary><para><c>openState</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the open state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>openState</c> property was the following:  <c>WMPOpenState openState</c>;</para></remarks>
    // Returns the open state of the player
    // IDL: WMPOpenState openState;
    // VB6: openState As WMPOpenState
    WMPOpenState openState
    {
      // IDL: HRESULT openState ([out, retval] WMPOpenState* ReturnValue);
      // VB6: Function openState As WMPOpenState
      [DispId(2)]
      get;
    }

    /// <summary><para><c>playerApplication</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the player application handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>playerApplication</c> property was the following:  <c>IWMPPlayerApplication* playerApplication</c>;</para></remarks>
    // Returns the player application handler
    // IDL: IWMPPlayerApplication* playerApplication;
    // VB6: playerApplication As IWMPPlayerApplication
    IWMPPlayerApplication playerApplication
    {
      // IDL: HRESULT playerApplication ([out, retval] IWMPPlayerApplication** ReturnValue);
      // VB6: Function playerApplication As IWMPPlayerApplication
      [DispId(27)]
      get;
    }

    /// <summary><para><c>playlistCollection</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the playlist collection handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>playlistCollection</c> property was the following:  <c>IWMPPlaylistCollection* playlistCollection</c>;</para></remarks>
    // Returns the playlist collection handler
    // IDL: IWMPPlaylistCollection* playlistCollection;
    // VB6: playlistCollection As IWMPPlaylistCollection
    IWMPPlaylistCollection playlistCollection
    {
      // IDL: HRESULT playlistCollection ([out, retval] IWMPPlaylistCollection** ReturnValue);
      // VB6: Function playlistCollection As IWMPPlaylistCollection
      [DispId(9)]
      get;
    }

    /// <summary><para><c>playState</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the play state of the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>playState</c> property was the following:  <c>WMPPlayState playState</c>;</para></remarks>
    // Returns the play state of the player
    // IDL: WMPPlayState playState;
    // VB6: playState As WMPPlayState
    WMPPlayState playState
    {
      // IDL: HRESULT playState ([out, retval] WMPPlayState* ReturnValue);
      // VB6: Function playState As WMPPlayState
      [DispId(10)]
      get;
    }

    /// <summary><para><c>settings</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the settings handler</para></summary>
    /// <remarks><para>An original IDL definition of <c>settings</c> property was the following:  <c>IWMPSettings* settings</c>;</para></remarks>
    // Returns the settings handler
    // IDL: IWMPSettings* settings;
    // VB6: settings As IWMPSettings
    IWMPSettings settings
    {
      // IDL: HRESULT settings ([out, retval] IWMPSettings** ReturnValue);
      // VB6: Function settings As IWMPSettings
      [DispId(5)]
      get;
    }

    /// <summary><para><c>status</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns status string</para></summary>
    /// <remarks><para>An original IDL definition of <c>status</c> property was the following:  <c>BSTR status</c>;</para></remarks>
    // Returns status string
    // IDL: BSTR status;
    // VB6: status As String
    string status
    {
      // IDL: HRESULT status ([out, retval] BSTR* ReturnValue);
      // VB6: Function status As String
      [DispId(18)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>stretchToFit</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns a boolean value specifying whether or not video is stretched</para></summary>
    /// <remarks><para>An original IDL definition of <c>stretchToFit</c> property was the following:  <c>VARIANT_BOOL stretchToFit</c>;</para></remarks>
    // Returns a boolean value specifying whether or not video is stretched
    // IDL: VARIANT_BOOL stretchToFit;
    // VB6: stretchToFit As Boolean
    bool stretchToFit
    {
      // IDL: HRESULT stretchToFit ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function stretchToFit As Boolean
      [DispId(24)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT stretchToFit (VARIANT_BOOL value);
      // VB6: Sub stretchToFit (ByVal value As Boolean)
      [DispId(24)]
      set;
    }

    /// <summary><para><c>uiMode</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Specifies the ui mode to select</para></summary>
    /// <remarks><para>An original IDL definition of <c>uiMode</c> property was the following:  <c>BSTR uiMode</c>;</para></remarks>
    // Specifies the ui mode to select
    // IDL: BSTR uiMode;
    // VB6: uiMode As String
    string uiMode
    {
      // IDL: HRESULT uiMode ([out, retval] BSTR* ReturnValue);
      // VB6: Function uiMode As String
      [DispId(23)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT uiMode (BSTR value);
      // VB6: Sub uiMode (ByVal value As String)
      [DispId(23)]
      set;
    }

    /// <summary><para><c>URL</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns or sets the URL</para></summary>
    /// <remarks><para>An original IDL definition of <c>URL</c> property was the following:  <c>BSTR URL</c>;</para></remarks>
    // Returns or sets the URL
    // IDL: BSTR URL;
    // VB6: URL As String
    string URL
    {
      // IDL: HRESULT URL ([out, retval] BSTR* ReturnValue);
      // VB6: Function URL As String
      [DispId(1)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT URL (BSTR value);
      // VB6: Sub URL (ByVal value As String)
      [DispId(1)]
      set;
    }

    /// <summary><para><c>versionInfo</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns the version information for the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>versionInfo</c> property was the following:  <c>BSTR versionInfo</c>;</para></remarks>
    // Returns the version information for the player
    // IDL: BSTR versionInfo;
    // VB6: versionInfo As String
    string versionInfo
    {
      // IDL: HRESULT versionInfo ([out, retval] BSTR* ReturnValue);
      // VB6: Function versionInfo As String
      [DispId(11)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>windowlessVideo</c> property of <c>IWMPPlayer4</c> interface.  </para><para>Returns a boolean value specifying whether or not video is windowless</para></summary>
    /// <remarks><para>An original IDL definition of <c>windowlessVideo</c> property was the following:  <c>VARIANT_BOOL windowlessVideo</c>;</para></remarks>
    // Returns a boolean value specifying whether or not video is windowless
    // IDL: VARIANT_BOOL windowlessVideo;
    // VB6: windowlessVideo As Boolean
    bool windowlessVideo
    {
      // IDL: HRESULT windowlessVideo ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function windowlessVideo As Boolean
      [DispId(25)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT windowlessVideo (VARIANT_BOOL value);
      // VB6: Sub windowlessVideo (ByVal value As Boolean)
      [DispId(25)]
      set;
    }
  }

  /// <summary><para><c>IWMPPlayerApplication</c> interface.  </para><para>IWMPPlayerApplication: Public interface.</para></summary>
  // IWMPPlayerApplication: Public interface.
  [Guid("40897764-CEAB-47BE-AD4A-8E28537F9BBF")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPPlayerApplication
  {
    /// <summary><para><c>switchToPlayerApplication</c> method of <c>IWMPPlayerApplication</c> interface.  </para><para>Switches the display to player application</para></summary>
    /// <remarks><para>An original IDL definition of <c>switchToPlayerApplication</c> method was the following:  <c>HRESULT switchToPlayerApplication (void)</c>;</para></remarks>
    // Switches the display to player application
    // IDL: HRESULT switchToPlayerApplication (void);
    // VB6: Sub switchToPlayerApplication
    [DispId(1101)]
    void switchToPlayerApplication ();

    /// <summary><para><c>switchToControl</c> method of <c>IWMPPlayerApplication</c> interface.  </para><para>Switches the display to control</para></summary>
    /// <remarks><para>An original IDL definition of <c>switchToControl</c> method was the following:  <c>HRESULT switchToControl (void)</c>;</para></remarks>
    // Switches the display to control
    // IDL: HRESULT switchToControl (void);
    // VB6: Sub switchToControl
    [DispId(1102)]
    void switchToControl ();

    /// <summary><para><c>hasDisplay</c> property of <c>IWMPPlayerApplication</c> interface.  </para><para>Returns a boolean value specifying whether or not the control has display</para></summary>
    /// <remarks><para>An original IDL definition of <c>hasDisplay</c> property was the following:  <c>VARIANT_BOOL hasDisplay</c>;</para></remarks>
    // Returns a boolean value specifying whether or not the control has display
    // IDL: VARIANT_BOOL hasDisplay;
    // VB6: hasDisplay As Boolean
    bool hasDisplay
    {
      // IDL: HRESULT hasDisplay ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function hasDisplay As Boolean
      [DispId(1104)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>playerDocked</c> property of <c>IWMPPlayerApplication</c> interface.  </para><para>Returns a boolean value specifying whether or not the player is docked</para></summary>
    /// <remarks><para>An original IDL definition of <c>playerDocked</c> property was the following:  <c>VARIANT_BOOL playerDocked</c>;</para></remarks>
    // Returns a boolean value specifying whether or not the player is docked
    // IDL: VARIANT_BOOL playerDocked;
    // VB6: playerDocked As Boolean
    bool playerDocked
    {
      // IDL: HRESULT playerDocked ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function playerDocked As Boolean
      [DispId(1103)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }
  }

  /// <summary><para><c>IWMPPlaylist</c> interface.  </para><para>IWMPPlaylist: Public interface.</para></summary>
  // IWMPPlaylist: Public interface.
  [Guid("D5F0F4F1-130C-11D3-B14E-00C04F79FAA6")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPPlaylist
  {
    /// <summary><para><c>attributeName</c> property get of <c>IWMPPlaylist</c> interface.  </para><para>Returns the name of an attribute specified by an index</para></summary>
    /// <remarks><para>An original IDL definition of <c>attributeName</c> property get was the following:  <c>HRESULT attributeName (long lIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the name of an attribute specified by an index
    // IDL: HRESULT attributeName (long lIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function attributeName (ByVal lIndex As Long) As String
    [DispId(211)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string attributeName (int lIndex) /* property get method */;

    /// <summary><para><c>Item</c> property get of <c>IWMPPlaylist</c> interface.  </para><para>Returns the item at the specified index</para></summary>
    /// <remarks><para>An original IDL definition of <c>Item</c> property get was the following:  <c>HRESULT Item (long lIndex, [out, retval] IWMPMedia** ReturnValue)</c>;</para></remarks>
    // Returns the item at the specified index
    // IDL: HRESULT Item (long lIndex, [out, retval] IWMPMedia** ReturnValue);
    // VB6: Function Item (ByVal lIndex As Long) As IWMPMedia
    IWMPMedia this[int lIndex]
    {
        [DispId(0xd4)]
        get;
    }/* property get method */

    /// <summary><para><c>getItemInfo</c> method of <c>IWMPPlaylist</c> interface.  </para><para>Returns the value of a playlist attribute</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfo</c> method was the following:  <c>HRESULT getItemInfo (BSTR bstrName, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the value of a playlist attribute
    // IDL: HRESULT getItemInfo (BSTR bstrName, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfo (ByVal bstrName As String) As String
    [DispId(203)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrName);

    /// <summary><para><c>setItemInfo</c> method of <c>IWMPPlaylist</c> interface.  </para><para>Sets the value of a playlist attribute</para></summary>
    /// <remarks><para>An original IDL definition of <c>setItemInfo</c> method was the following:  <c>HRESULT setItemInfo (BSTR bstrName, BSTR bstrValue)</c>;</para></remarks>
    // Sets the value of a playlist attribute
    // IDL: HRESULT setItemInfo (BSTR bstrName, BSTR bstrValue);
    // VB6: Sub setItemInfo (ByVal bstrName As String, ByVal bstrValue As String)
    [DispId(204)]
    void setItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrName, [MarshalAs(UnmanagedType.BStr)] string bstrValue);

    /// <summary><para><c>isIdentical</c> property get of <c>IWMPPlaylist</c> interface.  </para><para>Determines if the supplied object is the same as the this one</para></summary>
    /// <remarks><para>An original IDL definition of <c>isIdentical</c> property get was the following:  <c>HRESULT isIdentical (IWMPPlaylist* pIWMPPlaylist, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Determines if the supplied object is the same as the this one
    // IDL: HRESULT isIdentical (IWMPPlaylist* pIWMPPlaylist, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isIdentical (ByVal pIWMPPlaylist As IWMPPlaylist) As Boolean
    [DispId(213)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isIdentical (IWMPPlaylist pIWMPPlaylist) /* property get method */;

    /// <summary><para><c>clear</c> method of <c>IWMPPlaylist</c> interface.  </para><para>Removes all items from the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>clear</c> method was the following:  <c>HRESULT clear (void)</c>;</para></remarks>
    // Removes all items from the playlist
    // IDL: HRESULT clear (void);
    // VB6: Sub clear
    [DispId(205)]
    void clear ();

    /// <summary><para><c>insertItem</c> method of <c>IWMPPlaylist</c> interface.  </para><para>Inserts an item into the playlist at the specified location</para></summary>
    /// <remarks><para>An original IDL definition of <c>insertItem</c> method was the following:  <c>HRESULT insertItem (long lIndex, IWMPMedia* pIWMPMedia)</c>;</para></remarks>
    // Inserts an item into the playlist at the specified location
    // IDL: HRESULT insertItem (long lIndex, IWMPMedia* pIWMPMedia);
    // VB6: Sub insertItem (ByVal lIndex As Long, ByVal pIWMPMedia As IWMPMedia)
    [DispId(206)]
    void insertItem (int lIndex, IWMPMedia pIWMPMedia);

    /// <summary><para><c>appendItem</c> method of <c>IWMPPlaylist</c> interface.  </para><para>Adds an item to the end of the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>appendItem</c> method was the following:  <c>HRESULT appendItem (IWMPMedia* pIWMPMedia)</c>;</para></remarks>
    // Adds an item to the end of the playlist
    // IDL: HRESULT appendItem (IWMPMedia* pIWMPMedia);
    // VB6: Sub appendItem (ByVal pIWMPMedia As IWMPMedia)
    [DispId(207)]
    void appendItem (IWMPMedia pIWMPMedia);

    /// <summary><para><c>removeItem</c> method of <c>IWMPPlaylist</c> interface.  </para><para>Removes the specified item from the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>removeItem</c> method was the following:  <c>HRESULT removeItem (IWMPMedia* pIWMPMedia)</c>;</para></remarks>
    // Removes the specified item from the playlist
    // IDL: HRESULT removeItem (IWMPMedia* pIWMPMedia);
    // VB6: Sub removeItem (ByVal pIWMPMedia As IWMPMedia)
    [DispId(208)]
    void removeItem (IWMPMedia pIWMPMedia);

    /// <summary><para><c>moveItem</c> method of <c>IWMPPlaylist</c> interface.  </para><para>Changes the location of an item in the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>moveItem</c> method was the following:  <c>HRESULT moveItem (long lIndexOld, long lIndexNew)</c>;</para></remarks>
    // Changes the location of an item in the playlist
    // IDL: HRESULT moveItem (long lIndexOld, long lIndexNew);
    // VB6: Sub moveItem (ByVal lIndexOld As Long, ByVal lIndexNew As Long)
    [DispId(209)]
    void moveItem (int lIndexOld, int lIndexNew);

    /// <summary><para><c>attributeCount</c> property of <c>IWMPPlaylist</c> interface.  </para><para>Returns the number of attributes associated with the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>attributeCount</c> property was the following:  <c>long attributeCount</c>;</para></remarks>
    // Returns the number of attributes associated with the playlist
    // IDL: long attributeCount;
    // VB6: attributeCount As Long
    int attributeCount
    {
      // IDL: HRESULT attributeCount ([out, retval] long* ReturnValue);
      // VB6: Function attributeCount As Long
      [DispId(210)]
      get;
    }

    /// <summary><para><c>count</c> property of <c>IWMPPlaylist</c> interface.  </para><para>Returns the number of items in the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>count</c> property was the following:  <c>long count</c>;</para></remarks>
    // Returns the number of items in the playlist
    // IDL: long count;
    // VB6: count As Long
    int count
    {
      // IDL: HRESULT count ([out, retval] long* ReturnValue);
      // VB6: Function count As Long
      [DispId(201)]
      get;
    }

    /// <summary><para><c>name</c> property of <c>IWMPPlaylist</c> interface.  </para><para>Returns the name of the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>name</c> property was the following:  <c>BSTR name</c>;</para></remarks>
    // Returns the name of the playlist
    // IDL: BSTR name;
    // VB6: name As String
    string name
    {
      // IDL: HRESULT name ([out, retval] BSTR* ReturnValue);
      // VB6: Function name As String
      [DispId(202)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT name (BSTR value);
      // VB6: Sub name (ByVal value As String)
      [DispId(202)]
      set;
    }
  }

  /// <summary><para><c>IWMPPlaylistArray</c> interface.  </para><para>IWMPPlaylistArray: Public interface.</para></summary>
  // IWMPPlaylistArray: Public interface.
  [Guid("679409C0-99F7-11D3-9FB7-00105AA620BB")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPPlaylistArray
  {
    /// <summary><para><c>Item</c> method of <c>IWMPPlaylistArray</c> interface.  </para><para>Returns the playlist object at the given index</para></summary>
    /// <remarks><para>An original IDL definition of <c>Item</c> method was the following:  <c>HRESULT Item (long lIndex, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Returns the playlist object at the given index
    // IDL: HRESULT Item (long lIndex, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function Item (ByVal lIndex As Long) As IWMPPlaylist
    [DispId(502)]
    IWMPPlaylist Item (int lIndex);

    /// <summary><para><c>count</c> property of <c>IWMPPlaylistArray</c> interface.  </para><para>Returns the number of items in the playlist array</para></summary>
    /// <remarks><para>An original IDL definition of <c>count</c> property was the following:  <c>long count</c>;</para></remarks>
    // Returns the number of items in the playlist array
    // IDL: long count;
    // VB6: count As Long
    int count
    {
      // IDL: HRESULT count ([out, retval] long* ReturnValue);
      // VB6: Function count As Long
      [DispId(501)]
      get;
    }
  }

  /// <summary><para><c>IWMPPlaylistCollection</c> interface.  </para><para>IWMPPlaylistCollection: Public interface.</para></summary>
  // IWMPPlaylistCollection: Public interface.
  [Guid("10A13217-23A7-439B-B1C0-D847C79B7774")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPPlaylistCollection
  {
    /// <summary><para><c>newPlaylist</c> method of <c>IWMPPlaylistCollection</c> interface.  </para><para>Creates a new playlist object</para></summary>
    /// <remarks><para>An original IDL definition of <c>newPlaylist</c> method was the following:  <c>HRESULT newPlaylist (BSTR bstrName, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Creates a new playlist object
    // IDL: HRESULT newPlaylist (BSTR bstrName, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function newPlaylist (ByVal bstrName As String) As IWMPPlaylist
    [DispId(552)]
    IWMPPlaylist newPlaylist ([MarshalAs(UnmanagedType.BStr)] string bstrName);

    /// <summary><para><c>getAll</c> method of <c>IWMPPlaylistCollection</c> interface.  </para><para>Returns a playlist array with all the playlists</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAll</c> method was the following:  <c>HRESULT getAll ([out, retval] IWMPPlaylistArray** ReturnValue)</c>;</para></remarks>
    // Returns a playlist array with all the playlists
    // IDL: HRESULT getAll ([out, retval] IWMPPlaylistArray** ReturnValue);
    // VB6: Function getAll As IWMPPlaylistArray
    [DispId(553)]
    IWMPPlaylistArray getAll ();

    /// <summary><para><c>getByName</c> method of <c>IWMPPlaylistCollection</c> interface.  </para><para>Returns a playlist array with playlists matching the given name</para></summary>
    /// <remarks><para>An original IDL definition of <c>getByName</c> method was the following:  <c>HRESULT getByName (BSTR bstrName, [out, retval] IWMPPlaylistArray** ReturnValue)</c>;</para></remarks>
    // Returns a playlist array with playlists matching the given name
    // IDL: HRESULT getByName (BSTR bstrName, [out, retval] IWMPPlaylistArray** ReturnValue);
    // VB6: Function getByName (ByVal bstrName As String) As IWMPPlaylistArray
    [DispId(554)]
    IWMPPlaylistArray getByName ([MarshalAs(UnmanagedType.BStr)] string bstrName);

    /// <summary><para><c>remove</c> method of <c>IWMPPlaylistCollection</c> interface.  </para><para>Removes an item from the playlist collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>remove</c> method was the following:  <c>HRESULT remove (IWMPPlaylist* pItem)</c>;</para></remarks>
    // Removes an item from the playlist collection
    // IDL: HRESULT remove (IWMPPlaylist* pItem);
    // VB6: Sub remove (ByVal pItem As IWMPPlaylist)
    [DispId(556)]
    void remove (IWMPPlaylist pItem);

    /// <summary><para><c>setDeleted</c> method of <c>IWMPPlaylistCollection</c> interface.  </para><para>Sets the deleted flag on a playlist object</para></summary>
    /// <remarks><para>An original IDL definition of <c>setDeleted</c> method was the following:  <c>HRESULT setDeleted (IWMPPlaylist* pItem, VARIANT_BOOL varfIsDeleted)</c>;</para></remarks>
    // Sets the deleted flag on a playlist object
    // IDL: HRESULT setDeleted (IWMPPlaylist* pItem, VARIANT_BOOL varfIsDeleted);
    // VB6: Sub setDeleted (ByVal pItem As IWMPPlaylist, ByVal varfIsDeleted As Boolean)
    [DispId(560)]
    void setDeleted (IWMPPlaylist pItem, [MarshalAs(UnmanagedType.VariantBool)] bool varfIsDeleted);

    /// <summary><para><c>isDeleted</c> method of <c>IWMPPlaylistCollection</c> interface.  </para><para>Gets the deleted flag on a playlist object</para></summary>
    /// <remarks><para>An original IDL definition of <c>isDeleted</c> method was the following:  <c>HRESULT isDeleted (IWMPPlaylist* pItem, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Gets the deleted flag on a playlist object
    // IDL: HRESULT isDeleted (IWMPPlaylist* pItem, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isDeleted (ByVal pItem As IWMPPlaylist) As Boolean
    [DispId(561)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isDeleted (IWMPPlaylist pItem);

    /// <summary><para><c>importPlaylist</c> method of <c>IWMPPlaylistCollection</c> interface.  </para><para>Imports a playlist object into the library</para></summary>
    /// <remarks><para>An original IDL definition of <c>importPlaylist</c> method was the following:  <c>HRESULT importPlaylist (IWMPPlaylist* pItem, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // Imports a playlist object into the library
    // IDL: HRESULT importPlaylist (IWMPPlaylist* pItem, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function importPlaylist (ByVal pItem As IWMPPlaylist) As IWMPPlaylist
    [DispId(562)]
    IWMPPlaylist importPlaylist (IWMPPlaylist pItem);
  }

  /// <summary><para><c>IWMPPlaylistCtrl</c> interface.  </para><para>IWMPPlaylistCtrl: Public interface for skin object model.</para></summary>
  // IWMPPlaylistCtrl: Public interface for skin object model.
  [Guid("5F9CFD92-8CAD-11D3-9A7E-00C04F8EFB70")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPPlaylistCtrl
  {
    /// <summary><para><c>copy</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method copy</para></summary>
    /// <remarks><para>An original IDL definition of <c>copy</c> method was the following:  <c>HRESULT copy (void)</c>;</para></remarks>
    // method copy
    // IDL: HRESULT copy (void);
    // VB6: Sub copy
    [DispId(5623)]
    void copy ();

    /// <summary><para><c>abortCopy</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method abortCopy</para></summary>
    /// <remarks><para>An original IDL definition of <c>abortCopy</c> method was the following:  <c>HRESULT abortCopy (void)</c>;</para></remarks>
    // method abortCopy
    // IDL: HRESULT abortCopy (void);
    // VB6: Sub abortCopy
    [DispId(5624)]
    void abortCopy ();

    /// <summary><para><c>deleteSelected</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method deleteSelected</para></summary>
    /// <remarks><para>An original IDL definition of <c>deleteSelected</c> method was the following:  <c>HRESULT deleteSelected (void)</c>;</para></remarks>
    // method deleteSelected
    // IDL: HRESULT deleteSelected (void);
    // VB6: Sub deleteSelected
    [DispId(5625)]
    void deleteSelected ();

    /// <summary><para><c>deleteSelectedFromLibrary</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method deleteSelectedFromLibrary</para></summary>
    /// <remarks><para>An original IDL definition of <c>deleteSelectedFromLibrary</c> method was the following:  <c>HRESULT deleteSelectedFromLibrary (void)</c>;</para></remarks>
    // method deleteSelectedFromLibrary
    // IDL: HRESULT deleteSelectedFromLibrary (void);
    // VB6: Sub deleteSelectedFromLibrary
    [DispId(5626)]
    void deleteSelectedFromLibrary ();

    /// <summary><para><c>moveSelectedUp</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method moveSelectedUp</para></summary>
    /// <remarks><para>An original IDL definition of <c>moveSelectedUp</c> method was the following:  <c>HRESULT moveSelectedUp (void)</c>;</para></remarks>
    // method moveSelectedUp
    // IDL: HRESULT moveSelectedUp (void);
    // VB6: Sub moveSelectedUp
    [DispId(5628)]
    void moveSelectedUp ();

    /// <summary><para><c>moveSelectedDown</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method moveSelectedDown</para></summary>
    /// <remarks><para>An original IDL definition of <c>moveSelectedDown</c> method was the following:  <c>HRESULT moveSelectedDown (void)</c>;</para></remarks>
    // method moveSelectedDown
    // IDL: HRESULT moveSelectedDown (void);
    // VB6: Sub moveSelectedDown
    [DispId(5629)]
    void moveSelectedDown ();

    /// <summary><para><c>addSelectedToPlaylist</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method addSelectedToPlaylist</para></summary>
    /// <remarks><para>An original IDL definition of <c>addSelectedToPlaylist</c> method was the following:  <c>HRESULT addSelectedToPlaylist (IWMPPlaylist* pdispPlaylist)</c>;</para></remarks>
    // method addSelectedToPlaylist
    // IDL: HRESULT addSelectedToPlaylist (IWMPPlaylist* pdispPlaylist);
    // VB6: Sub addSelectedToPlaylist (ByVal pdispPlaylist As IWMPPlaylist)
    [DispId(5630)]
    void addSelectedToPlaylist (IWMPPlaylist pdispPlaylist);

    /// <summary><para><c>getNextSelectedItem</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method getNextSelectedItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>getNextSelectedItem</c> method was the following:  <c>HRESULT getNextSelectedItem (long nStartIndex, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getNextSelectedItem
    // IDL: HRESULT getNextSelectedItem (long nStartIndex, [out, retval] long* ReturnValue);
    // VB6: Function getNextSelectedItem (ByVal nStartIndex As Long) As Long
    [DispId(5631)]
    int getNextSelectedItem (int nStartIndex);

    /// <summary><para><c>getNextCheckedItem</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method getNextCheckedItem</para></summary>
    /// <remarks><para>An original IDL definition of <c>getNextCheckedItem</c> method was the following:  <c>HRESULT getNextCheckedItem (long nStartIndex, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getNextCheckedItem
    // IDL: HRESULT getNextCheckedItem (long nStartIndex, [out, retval] long* ReturnValue);
    // VB6: Function getNextCheckedItem (ByVal nStartIndex As Long) As Long
    [DispId(5632)]
    int getNextCheckedItem (int nStartIndex);

    /// <summary><para><c>setSelectedState</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method setSelectedState</para></summary>
    /// <remarks><para>An original IDL definition of <c>setSelectedState</c> method was the following:  <c>HRESULT setSelectedState (long nIndex, VARIANT_BOOL vbSelected)</c>;</para></remarks>
    // method setSelectedState
    // IDL: HRESULT setSelectedState (long nIndex, VARIANT_BOOL vbSelected);
    // VB6: Sub setSelectedState (ByVal nIndex As Long, ByVal vbSelected As Boolean)
    [DispId(5633)]
    void setSelectedState (int nIndex, [MarshalAs(UnmanagedType.VariantBool)] bool vbSelected);

    /// <summary><para><c>setCheckedState</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method setCheckedState</para></summary>
    /// <remarks><para>An original IDL definition of <c>setCheckedState</c> method was the following:  <c>HRESULT setCheckedState (long nIndex, VARIANT_BOOL vbChecked)</c>;</para></remarks>
    // method setCheckedState
    // IDL: HRESULT setCheckedState (long nIndex, VARIANT_BOOL vbChecked);
    // VB6: Sub setCheckedState (ByVal nIndex As Long, ByVal vbChecked As Boolean)
    [DispId(5634)]
    void setCheckedState (int nIndex, [MarshalAs(UnmanagedType.VariantBool)] bool vbChecked);

    /// <summary><para><c>sortColumn</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method sortColumn</para></summary>
    /// <remarks><para>An original IDL definition of <c>sortColumn</c> method was the following:  <c>HRESULT sortColumn (long nIndex)</c>;</para></remarks>
    // method sortColumn
    // IDL: HRESULT sortColumn (long nIndex);
    // VB6: Sub sortColumn (ByVal nIndex As Long)
    [DispId(5635)]
    void sortColumn (int nIndex);

    /// <summary><para><c>setColumnResizeMode</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method setColumnResizeMode</para></summary>
    /// <remarks><para>An original IDL definition of <c>setColumnResizeMode</c> method was the following:  <c>HRESULT setColumnResizeMode (long nIndex, BSTR newMode)</c>;</para></remarks>
    // method setColumnResizeMode
    // IDL: HRESULT setColumnResizeMode (long nIndex, BSTR newMode);
    // VB6: Sub setColumnResizeMode (ByVal nIndex As Long, ByVal newMode As String)
    [DispId(5636)]
    void setColumnResizeMode (int nIndex, [MarshalAs(UnmanagedType.BStr)] string newMode);

    /// <summary><para><c>setColumnWidth</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method setColumnWidth</para></summary>
    /// <remarks><para>An original IDL definition of <c>setColumnWidth</c> method was the following:  <c>HRESULT setColumnWidth (long nIndex, long nWidth)</c>;</para></remarks>
    // method setColumnWidth
    // IDL: HRESULT setColumnWidth (long nIndex, long nWidth);
    // VB6: Sub setColumnWidth (ByVal nIndex As Long, ByVal nWidth As Long)
    [DispId(5637)]
    void setColumnWidth (int nIndex, int nWidth);

    /// <summary><para><c>itemMedia</c> property get of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property itemMedia</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemMedia</c> property get was the following:  <c>HRESULT itemMedia (long nIndex, [out, retval] IWMPMedia** ReturnValue)</c>;</para></remarks>
    // property itemMedia
    // IDL: HRESULT itemMedia (long nIndex, [out, retval] IWMPMedia** ReturnValue);
    // VB6: Function itemMedia (ByVal nIndex As Long) As IWMPMedia
    [DispId(5644)]
    IWMPMedia itemMedia (int nIndex) /* property get method */;

    /// <summary><para><c>itemPlaylist</c> property get of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property itemPlaylist</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemPlaylist</c> property get was the following:  <c>HRESULT itemPlaylist (long nIndex, [out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // property itemPlaylist
    // IDL: HRESULT itemPlaylist (long nIndex, [out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function itemPlaylist (ByVal nIndex As Long) As IWMPPlaylist
    [DispId(5645)]
    IWMPPlaylist itemPlaylist (int nIndex) /* property get method */;

    /// <summary><para><c>getNextSelectedItem2</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method getNextSelectedItem2</para></summary>
    /// <remarks><para>An original IDL definition of <c>getNextSelectedItem2</c> method was the following:  <c>HRESULT getNextSelectedItem2 (long nStartIndex, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getNextSelectedItem2
    // IDL: HRESULT getNextSelectedItem2 (long nStartIndex, [out, retval] long* ReturnValue);
    // VB6: Function getNextSelectedItem2 (ByVal nStartIndex As Long) As Long
    [DispId(5646)]
    int getNextSelectedItem2 (int nStartIndex);

    /// <summary><para><c>getNextCheckedItem2</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method getNextCheckedItem2</para></summary>
    /// <remarks><para>An original IDL definition of <c>getNextCheckedItem2</c> method was the following:  <c>HRESULT getNextCheckedItem2 (long nStartIndex, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // method getNextCheckedItem2
    // IDL: HRESULT getNextCheckedItem2 (long nStartIndex, [out, retval] long* ReturnValue);
    // VB6: Function getNextCheckedItem2 (ByVal nStartIndex As Long) As Long
    [DispId(5647)]
    int getNextCheckedItem2 (int nStartIndex);

    /// <summary><para><c>setSelectedState2</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method setSelectedState2</para></summary>
    /// <remarks><para>An original IDL definition of <c>setSelectedState2</c> method was the following:  <c>HRESULT setSelectedState2 (long nIndex, VARIANT_BOOL vbSelected)</c>;</para></remarks>
    // method setSelectedState2
    // IDL: HRESULT setSelectedState2 (long nIndex, VARIANT_BOOL vbSelected);
    // VB6: Sub setSelectedState2 (ByVal nIndex As Long, ByVal vbSelected As Boolean)
    [DispId(5648)]
    void setSelectedState2 (int nIndex, [MarshalAs(UnmanagedType.VariantBool)] bool vbSelected);

    /// <summary><para><c>setCheckedState2</c> method of <c>IWMPPlaylistCtrl</c> interface.  </para><para>method setCheckedState2</para></summary>
    /// <remarks><para>An original IDL definition of <c>setCheckedState2</c> method was the following:  <c>HRESULT setCheckedState2 (long nIndex, VARIANT_BOOL vbChecked)</c>;</para></remarks>
    // method setCheckedState2
    // IDL: HRESULT setCheckedState2 (long nIndex, VARIANT_BOOL vbChecked);
    // VB6: Sub setCheckedState2 (ByVal nIndex As Long, ByVal vbChecked As Boolean)
    [DispId(5649)]
    void setCheckedState2 (int nIndex, [MarshalAs(UnmanagedType.VariantBool)] bool vbChecked);

    /// <summary><para><c>allowColumnSorting</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property allowColumnSorting</para></summary>
    /// <remarks><para>An original IDL definition of <c>allowColumnSorting</c> property was the following:  <c>VARIANT_BOOL allowColumnSorting</c>;</para></remarks>
    // property allowColumnSorting
    // IDL: VARIANT_BOOL allowColumnSorting;
    // VB6: allowColumnSorting As Boolean
    bool allowColumnSorting
    {
      // IDL: HRESULT allowColumnSorting ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function allowColumnSorting As Boolean
      [DispId(5619)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT allowColumnSorting (VARIANT_BOOL value);
      // VB6: Sub allowColumnSorting (ByVal value As Boolean)
      [DispId(5619)]
      set;
    }

    /// <summary><para><c>allowItemEditing</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property allowItemEditing</para></summary>
    /// <remarks><para>An original IDL definition of <c>allowItemEditing</c> property was the following:  <c>VARIANT_BOOL allowItemEditing</c>;</para></remarks>
    // property allowItemEditing
    // IDL: VARIANT_BOOL allowItemEditing;
    // VB6: allowItemEditing As Boolean
    bool allowItemEditing
    {
      // IDL: HRESULT allowItemEditing ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function allowItemEditing As Boolean
      [DispId(5618)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT allowItemEditing (VARIANT_BOOL value);
      // VB6: Sub allowItemEditing (ByVal value As Boolean)
      [DispId(5618)]
      set;
    }

    /// <summary><para><c>backgroundColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property backgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // property backgroundColor
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(5612)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundColor (BSTR value);
      // VB6: Sub backgroundColor (ByVal value As String)
      [DispId(5612)]
      set;
    }

    /// <summary><para><c>backgroundImage</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property backgroundImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundImage</c> property was the following:  <c>BSTR backgroundImage</c>;</para></remarks>
    // property backgroundImage
    // IDL: BSTR backgroundImage;
    // VB6: backgroundImage As String
    string backgroundImage
    {
      // IDL: HRESULT backgroundImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundImage As String
      [DispId(5617)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundImage (BSTR value);
      // VB6: Sub backgroundImage (ByVal value As String)
      [DispId(5617)]
      set;
    }

    /// <summary><para><c>backgroundSplitColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property backgroundSplitColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundSplitColor</c> property was the following:  <c>BSTR backgroundSplitColor</c>;</para></remarks>
    // property backgroundSplitColor
    // IDL: BSTR backgroundSplitColor;
    // VB6: backgroundSplitColor As String
    string backgroundSplitColor
    {
      // IDL: HRESULT backgroundSplitColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundSplitColor As String
      [DispId(5666)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundSplitColor (BSTR value);
      // VB6: Sub backgroundSplitColor (ByVal value As String)
      [DispId(5666)]
      set;
    }

    /// <summary><para><c>checkboxesVisible</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property checkboxesVisible</para></summary>
    /// <remarks><para>An original IDL definition of <c>checkboxesVisible</c> property was the following:  <c>VARIANT_BOOL checkboxesVisible</c>;</para></remarks>
    // property checkboxesVisible
    // IDL: VARIANT_BOOL checkboxesVisible;
    // VB6: checkboxesVisible As Boolean
    bool checkboxesVisible
    {
      // IDL: HRESULT checkboxesVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function checkboxesVisible As Boolean
      [DispId(5609)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT checkboxesVisible (VARIANT_BOOL value);
      // VB6: Sub checkboxesVisible (ByVal value As Boolean)
      [DispId(5609)]
      set;
    }

    /// <summary><para><c>columnCount</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property columnCount</para></summary>
    /// <remarks><para>An original IDL definition of <c>columnCount</c> property was the following:  <c>long columnCount</c>;</para></remarks>
    // property columnCount
    // IDL: long columnCount;
    // VB6: columnCount As Long
    int columnCount
    {
      // IDL: HRESULT columnCount ([out, retval] long* ReturnValue);
      // VB6: Function columnCount As Long
      [DispId(5603)]
      get;
    }

    /// <summary><para><c>columnOrder</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property columnOrder</para></summary>
    /// <remarks><para>An original IDL definition of <c>columnOrder</c> property was the following:  <c>BSTR columnOrder</c>;</para></remarks>
    // property columnOrder
    // IDL: BSTR columnOrder;
    // VB6: columnOrder As String
    string columnOrder
    {
      // IDL: HRESULT columnOrder ([out, retval] BSTR* ReturnValue);
      // VB6: Function columnOrder As String
      [DispId(5604)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT columnOrder (BSTR value);
      // VB6: Sub columnOrder (ByVal value As String)
      [DispId(5604)]
      set;
    }

    /// <summary><para><c>columns</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property columns</para></summary>
    /// <remarks><para>An original IDL definition of <c>columns</c> property was the following:  <c>BSTR columns</c>;</para></remarks>
    // property columns
    // IDL: BSTR columns;
    // VB6: columns As String
    string columns
    {
      // IDL: HRESULT columns ([out, retval] BSTR* ReturnValue);
      // VB6: Function columns As String
      [DispId(5602)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT columns (BSTR value);
      // VB6: Sub columns (ByVal value As String)
      [DispId(5602)]
      set;
    }

    /// <summary><para><c>columnsVisible</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property columnsVisible</para></summary>
    /// <remarks><para>An original IDL definition of <c>columnsVisible</c> property was the following:  <c>VARIANT_BOOL columnsVisible</c>;</para></remarks>
    // property columnsVisible
    // IDL: VARIANT_BOOL columnsVisible;
    // VB6: columnsVisible As Boolean
    bool columnsVisible
    {
      // IDL: HRESULT columnsVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function columnsVisible As Boolean
      [DispId(5605)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT columnsVisible (VARIANT_BOOL value);
      // VB6: Sub columnsVisible (ByVal value As Boolean)
      [DispId(5605)]
      set;
    }

    /// <summary><para><c>copying</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property copying</para></summary>
    /// <remarks><para>An original IDL definition of <c>copying</c> property was the following:  <c>VARIANT_BOOL copying</c>;</para></remarks>
    // property copying
    // IDL: VARIANT_BOOL copying;
    // VB6: copying As Boolean
    bool copying
    {
      // IDL: HRESULT copying ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function copying As Boolean
      [DispId(5622)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT copying (VARIANT_BOOL value);
      // VB6: Sub copying (ByVal value As Boolean)
      [DispId(5622)]
      set;
    }

    /// <summary><para><c>disabledItemColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property disabledItemColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>disabledItemColor</c> property was the following:  <c>BSTR disabledItemColor</c>;</para></remarks>
    // property disabledItemColor
    // IDL: BSTR disabledItemColor;
    // VB6: disabledItemColor As String
    string disabledItemColor
    {
      // IDL: HRESULT disabledItemColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function disabledItemColor As String
      [DispId(5614)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT disabledItemColor (BSTR value);
      // VB6: Sub disabledItemColor (ByVal value As String)
      [DispId(5614)]
      set;
    }

    /// <summary><para><c>dropDownBackgroundImage</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property dropDownBackgroundImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>dropDownBackgroundImage</c> property was the following:  <c>BSTR dropDownBackgroundImage</c>;</para></remarks>
    // property dropDownBackgroundImage
    // IDL: BSTR dropDownBackgroundImage;
    // VB6: dropDownBackgroundImage As String
    string dropDownBackgroundImage
    {
      // IDL: HRESULT dropDownBackgroundImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function dropDownBackgroundImage As String
      [DispId(5654)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT dropDownBackgroundImage (BSTR value);
      // VB6: Sub dropDownBackgroundImage (ByVal value As String)
      [DispId(5654)]
      set;
    }

    /// <summary><para><c>dropDownImage</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property dropDownImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>dropDownImage</c> property was the following:  <c>BSTR dropDownImage</c>;</para></remarks>
    // property dropDownImage
    // IDL: BSTR dropDownImage;
    // VB6: dropDownImage As String
    string dropDownImage
    {
      // IDL: HRESULT dropDownImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function dropDownImage As String
      [DispId(5653)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT dropDownImage (BSTR value);
      // VB6: Sub dropDownImage (ByVal value As String)
      [DispId(5653)]
      set;
    }

    /// <summary><para><c>dropDownList</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property dropDownList</para></summary>
    /// <remarks><para>An original IDL definition of <c>dropDownList</c> property was the following:  <c>BSTR dropDownList</c>;</para></remarks>
    // property dropDownList
    // IDL: BSTR dropDownList;
    // VB6: dropDownList As String
    string dropDownList
    {
      // IDL: HRESULT dropDownList ([out, retval] BSTR* ReturnValue);
      // VB6: Function dropDownList As String
      [DispId(5620)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT dropDownList (BSTR value);
      // VB6: Sub dropDownList (ByVal value As String)
      [DispId(5620)]
      set;
    }

    /// <summary><para><c>dropDownToolTip</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property dropDownToolTip</para></summary>
    /// <remarks><para>An original IDL definition of <c>dropDownToolTip</c> property was the following:  <c>BSTR dropDownToolTip</c>;</para></remarks>
    // property dropDownToolTip
    // IDL: BSTR dropDownToolTip;
    // VB6: dropDownToolTip As String
    string dropDownToolTip
    {
      // IDL: HRESULT dropDownToolTip ([out, retval] BSTR* ReturnValue);
      // VB6: Function dropDownToolTip As String
      [DispId(5621)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT dropDownToolTip (BSTR value);
      // VB6: Sub dropDownToolTip (ByVal value As String)
      [DispId(5621)]
      set;
    }

    /// <summary><para><c>dropDownVisible</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property dropDownVisible</para></summary>
    /// <remarks><para>An original IDL definition of <c>dropDownVisible</c> property was the following:  <c>VARIANT_BOOL dropDownVisible</c>;</para></remarks>
    // property dropDownVisible
    // IDL: VARIANT_BOOL dropDownVisible;
    // VB6: dropDownVisible As Boolean
    bool dropDownVisible
    {
      // IDL: HRESULT dropDownVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function dropDownVisible As Boolean
      [DispId(5607)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT dropDownVisible (VARIANT_BOOL value);
      // VB6: Sub dropDownVisible (ByVal value As Boolean)
      [DispId(5607)]
      set;
    }

    /// <summary><para><c>editButtonVisible</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property editButtonVisible</para></summary>
    /// <remarks><para>An original IDL definition of <c>editButtonVisible</c> property was the following:  <c>VARIANT_BOOL editButtonVisible</c>;</para></remarks>
    // property editButtonVisible
    // IDL: VARIANT_BOOL editButtonVisible;
    // VB6: editButtonVisible As Boolean
    bool editButtonVisible
    {
      // IDL: HRESULT editButtonVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function editButtonVisible As Boolean
      [DispId(5652)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT editButtonVisible (VARIANT_BOOL value);
      // VB6: Sub editButtonVisible (ByVal value As Boolean)
      [DispId(5652)]
      set;
    }

    /// <summary><para><c>foregroundColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property foregroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>foregroundColor</c> property was the following:  <c>BSTR foregroundColor</c>;</para></remarks>
    // property foregroundColor
    // IDL: BSTR foregroundColor;
    // VB6: foregroundColor As String
    string foregroundColor
    {
      // IDL: HRESULT foregroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function foregroundColor As String
      [DispId(5613)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT foregroundColor (BSTR value);
      // VB6: Sub foregroundColor (ByVal value As String)
      [DispId(5613)]
      set;
    }

    /// <summary><para><c>hueShift</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property hueShift</para></summary>
    /// <remarks><para>An original IDL definition of <c>hueShift</c> property was the following:  <c>float hueShift</c>;</para></remarks>
    // property hueShift
    // IDL: float hueShift;
    // VB6: hueShift As Single
    float hueShift
    {
      // IDL: HRESULT hueShift ([out, retval] float* ReturnValue);
      // VB6: Function hueShift As Single
      [DispId(5655)]
      get;
      // IDL: HRESULT hueShift (float value);
      // VB6: Sub hueShift (ByVal value As Single)
      [DispId(5655)]
      set;
    }

    /// <summary><para><c>itemCount</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property itemCount</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemCount</c> property was the following:  <c>long itemCount</c>;</para></remarks>
    // property itemCount
    // IDL: long itemCount;
    // VB6: itemCount As Long
    int itemCount
    {
      // IDL: HRESULT itemCount ([out, retval] long* ReturnValue);
      // VB6: Function itemCount As Long
      [DispId(5643)]
      get;
    }

    /// <summary><para><c>itemErrorColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property itemErrorColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemErrorColor</c> property was the following:  <c>BSTR itemErrorColor</c>;</para></remarks>
    // property itemErrorColor
    // IDL: BSTR itemErrorColor;
    // VB6: itemErrorColor As String
    string itemErrorColor
    {
      // IDL: HRESULT itemErrorColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function itemErrorColor As String
      [DispId(5642)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT itemErrorColor (BSTR value);
      // VB6: Sub itemErrorColor (ByVal value As String)
      [DispId(5642)]
      set;
    }

    /// <summary><para><c>itemPlayingBackgroundColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property itemPlayingBackgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemPlayingBackgroundColor</c> property was the following:  <c>BSTR itemPlayingBackgroundColor</c>;</para></remarks>
    // property itemPlayingBackgroundColor
    // IDL: BSTR itemPlayingBackgroundColor;
    // VB6: itemPlayingBackgroundColor As String
    string itemPlayingBackgroundColor
    {
      // IDL: HRESULT itemPlayingBackgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function itemPlayingBackgroundColor As String
      [DispId(5616)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT itemPlayingBackgroundColor (BSTR value);
      // VB6: Sub itemPlayingBackgroundColor (ByVal value As String)
      [DispId(5616)]
      set;
    }

    /// <summary><para><c>itemPlayingColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property itemPlayingColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemPlayingColor</c> property was the following:  <c>BSTR itemPlayingColor</c>;</para></remarks>
    // property itemPlayingColor
    // IDL: BSTR itemPlayingColor;
    // VB6: itemPlayingColor As String
    string itemPlayingColor
    {
      // IDL: HRESULT itemPlayingColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function itemPlayingColor As String
      [DispId(5615)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT itemPlayingColor (BSTR value);
      // VB6: Sub itemPlayingColor (ByVal value As String)
      [DispId(5615)]
      set;
    }

    /// <summary><para><c>itemSelectedBackgroundColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property itemSelectedBackgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemSelectedBackgroundColor</c> property was the following:  <c>BSTR itemSelectedBackgroundColor</c>;</para></remarks>
    // property itemSelectedBackgroundColor
    // IDL: BSTR itemSelectedBackgroundColor;
    // VB6: itemSelectedBackgroundColor As String
    string itemSelectedBackgroundColor
    {
      // IDL: HRESULT itemSelectedBackgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function itemSelectedBackgroundColor As String
      [DispId(5664)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT itemSelectedBackgroundColor (BSTR value);
      // VB6: Sub itemSelectedBackgroundColor (ByVal value As String)
      [DispId(5664)]
      set;
    }

    /// <summary><para><c>itemSelectedBackgroundFocusLostColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property itemSelectedBackgroundFocusLostColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemSelectedBackgroundFocusLostColor</c> property was the following:  <c>BSTR itemSelectedBackgroundFocusLostColor</c>;</para></remarks>
    // property itemSelectedBackgroundFocusLostColor
    // IDL: BSTR itemSelectedBackgroundFocusLostColor;
    // VB6: itemSelectedBackgroundFocusLostColor As String
    string itemSelectedBackgroundFocusLostColor
    {
      // IDL: HRESULT itemSelectedBackgroundFocusLostColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function itemSelectedBackgroundFocusLostColor As String
      [DispId(5665)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT itemSelectedBackgroundFocusLostColor (BSTR value);
      // VB6: Sub itemSelectedBackgroundFocusLostColor (ByVal value As String)
      [DispId(5665)]
      set;
    }

    /// <summary><para><c>itemSelectedColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property itemSelectedColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemSelectedColor</c> property was the following:  <c>BSTR itemSelectedColor</c>;</para></remarks>
    // property itemSelectedColor
    // IDL: BSTR itemSelectedColor;
    // VB6: itemSelectedColor As String
    string itemSelectedColor
    {
      // IDL: HRESULT itemSelectedColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function itemSelectedColor As String
      [DispId(5662)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT itemSelectedColor (BSTR value);
      // VB6: Sub itemSelectedColor (ByVal value As String)
      [DispId(5662)]
      set;
    }

    /// <summary><para><c>itemSelectedFocusLostColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property itemSelectedFocusLostColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>itemSelectedFocusLostColor</c> property was the following:  <c>BSTR itemSelectedFocusLostColor</c>;</para></remarks>
    // property itemSelectedFocusLostColor
    // IDL: BSTR itemSelectedFocusLostColor;
    // VB6: itemSelectedFocusLostColor As String
    string itemSelectedFocusLostColor
    {
      // IDL: HRESULT itemSelectedFocusLostColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function itemSelectedFocusLostColor As String
      [DispId(5663)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT itemSelectedFocusLostColor (BSTR value);
      // VB6: Sub itemSelectedFocusLostColor (ByVal value As String)
      [DispId(5663)]
      set;
    }

    /// <summary><para><c>leftStatus</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property leftStatus</para></summary>
    /// <remarks><para>An original IDL definition of <c>leftStatus</c> property was the following:  <c>BSTR leftStatus</c>;</para></remarks>
    // property leftStatus
    // IDL: BSTR leftStatus;
    // VB6: leftStatus As String
    string leftStatus
    {
      // IDL: HRESULT leftStatus ([out, retval] BSTR* ReturnValue);
      // VB6: Function leftStatus As String
      [DispId(5650)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT leftStatus (BSTR value);
      // VB6: Sub leftStatus (ByVal value As String)
      [DispId(5650)]
      set;
    }

    /// <summary><para><c>Playlist</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>Playlist</c> property was the following:  <c>IWMPPlaylist* Playlist</c>;</para></remarks>
    // property playlist
    // IDL: IWMPPlaylist* Playlist;
    // VB6: Playlist As IWMPPlaylist
    IWMPPlaylist Playlist
    {
      // IDL: HRESULT Playlist ([out, retval] IWMPPlaylist** ReturnValue);
      // VB6: Function Playlist As IWMPPlaylist
      [DispId(5601)]
      get;
      // IDL: HRESULT Playlist (IWMPPlaylist* value);
      // VB6: Sub Playlist (ByVal value As IWMPPlaylist)
      [DispId(5601)]
      set;
    }

    /// <summary><para><c>playlistItemsVisible</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property playlistItemsVisible</para></summary>
    /// <remarks><para>An original IDL definition of <c>playlistItemsVisible</c> property was the following:  <c>VARIANT_BOOL playlistItemsVisible</c>;</para></remarks>
    // property playlistItemsVisible
    // IDL: VARIANT_BOOL playlistItemsVisible;
    // VB6: playlistItemsVisible As Boolean
    bool playlistItemsVisible
    {
      // IDL: HRESULT playlistItemsVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function playlistItemsVisible As Boolean
      [DispId(5608)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT playlistItemsVisible (VARIANT_BOOL value);
      // VB6: Sub playlistItemsVisible (ByVal value As Boolean)
      [DispId(5608)]
      set;
    }

    /// <summary><para><c>rightStatus</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property rightStatus</para></summary>
    /// <remarks><para>An original IDL definition of <c>rightStatus</c> property was the following:  <c>BSTR rightStatus</c>;</para></remarks>
    // property rightStatus
    // IDL: BSTR rightStatus;
    // VB6: rightStatus As String
    string rightStatus
    {
      // IDL: HRESULT rightStatus ([out, retval] BSTR* ReturnValue);
      // VB6: Function rightStatus As String
      [DispId(5651)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT rightStatus (BSTR value);
      // VB6: Sub rightStatus (ByVal value As String)
      [DispId(5651)]
      set;
    }

    /// <summary><para><c>saturation</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property saturation</para></summary>
    /// <remarks><para>An original IDL definition of <c>saturation</c> property was the following:  <c>float saturation</c>;</para></remarks>
    // property saturation
    // IDL: float saturation;
    // VB6: saturation As Single
    float saturation
    {
      // IDL: HRESULT saturation ([out, retval] float* ReturnValue);
      // VB6: Function saturation As Single
      [DispId(5656)]
      get;
      // IDL: HRESULT saturation (float value);
      // VB6: Sub saturation (ByVal value As Single)
      [DispId(5656)]
      set;
    }

    /// <summary><para><c>statusColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property statusColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>statusColor</c> property was the following:  <c>BSTR statusColor</c>;</para></remarks>
    // property statusColor
    // IDL: BSTR statusColor;
    // VB6: statusColor As String
    string statusColor
    {
      // IDL: HRESULT statusColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function statusColor As String
      [DispId(5658)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT statusColor (BSTR value);
      // VB6: Sub statusColor (ByVal value As String)
      [DispId(5658)]
      set;
    }

    /// <summary><para><c>statusTextColor</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property statusTextColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>statusTextColor</c> property was the following:  <c>BSTR statusTextColor</c>;</para></remarks>
    // property statusTextColor
    // IDL: BSTR statusTextColor;
    // VB6: statusTextColor As String
    string statusTextColor
    {
      // IDL: HRESULT statusTextColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function statusTextColor As String
      [DispId(5667)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT statusTextColor (BSTR value);
      // VB6: Sub statusTextColor (ByVal value As String)
      [DispId(5667)]
      set;
    }

    /// <summary><para><c>toolbarVisible</c> property of <c>IWMPPlaylistCtrl</c> interface.  </para><para>property toolbarVisible</para></summary>
    /// <remarks><para>An original IDL definition of <c>toolbarVisible</c> property was the following:  <c>VARIANT_BOOL toolbarVisible</c>;</para></remarks>
    // property toolbarVisible
    // IDL: VARIANT_BOOL toolbarVisible;
    // VB6: toolbarVisible As Boolean
    bool toolbarVisible
    {
      // IDL: HRESULT toolbarVisible ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function toolbarVisible As Boolean
      [DispId(5660)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT toolbarVisible (VARIANT_BOOL value);
      // VB6: Sub toolbarVisible (ByVal value As Boolean)
      [DispId(5660)]
      set;
    }
  }

  /// <summary><para><c>IWMPPlaylistCtrlColumn</c> interface.  </para><para>IWMPPlaylistCtrlColumn: Public interface for skin object model.</para></summary>
  // IWMPPlaylistCtrlColumn: Public interface for skin object model.
  [Guid("63D9D30F-AE4C-4678-8CA8-5720F4FE4419")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPPlaylistCtrlColumn
  {
    /// <summary><para><c>columnID</c> property of <c>IWMPPlaylistCtrlColumn</c> interface.  </para><para>property columnID</para></summary>
    /// <remarks><para>An original IDL definition of <c>columnID</c> property was the following:  <c>BSTR columnID</c>;</para></remarks>
    // property columnID
    // IDL: BSTR columnID;
    // VB6: columnID As String
    string columnID
    {
      // IDL: HRESULT columnID ([out, retval] BSTR* ReturnValue);
      // VB6: Function columnID As String
      [DispId(5671)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT columnID (BSTR value);
      // VB6: Sub columnID (ByVal value As String)
      [DispId(5671)]
      set;
    }

    /// <summary><para><c>columnName</c> property of <c>IWMPPlaylistCtrlColumn</c> interface.  </para><para>property columnName</para></summary>
    /// <remarks><para>An original IDL definition of <c>columnName</c> property was the following:  <c>BSTR columnName</c>;</para></remarks>
    // property columnName
    // IDL: BSTR columnName;
    // VB6: columnName As String
    string columnName
    {
      // IDL: HRESULT columnName ([out, retval] BSTR* ReturnValue);
      // VB6: Function columnName As String
      [DispId(5670)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT columnName (BSTR value);
      // VB6: Sub columnName (ByVal value As String)
      [DispId(5670)]
      set;
    }

    /// <summary><para><c>columnResizeMode</c> property of <c>IWMPPlaylistCtrlColumn</c> interface.  </para><para>property columnResizeMode</para></summary>
    /// <remarks><para>An original IDL definition of <c>columnResizeMode</c> property was the following:  <c>BSTR columnResizeMode</c>;</para></remarks>
    // property columnResizeMode
    // IDL: BSTR columnResizeMode;
    // VB6: columnResizeMode As String
    string columnResizeMode
    {
      // IDL: HRESULT columnResizeMode ([out, retval] BSTR* ReturnValue);
      // VB6: Function columnResizeMode As String
      [DispId(5672)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT columnResizeMode (BSTR value);
      // VB6: Sub columnResizeMode (ByVal value As String)
      [DispId(5672)]
      set;
    }

    /// <summary><para><c>columnWidth</c> property of <c>IWMPPlaylistCtrlColumn</c> interface.  </para><para>property columnWidth</para></summary>
    /// <remarks><para>An original IDL definition of <c>columnWidth</c> property was the following:  <c>long columnWidth</c>;</para></remarks>
    // property columnWidth
    // IDL: long columnWidth;
    // VB6: columnWidth As Long
    int columnWidth
    {
      // IDL: HRESULT columnWidth ([out, retval] long* ReturnValue);
      // VB6: Function columnWidth As Long
      [DispId(5673)]
      get;
      // IDL: HRESULT columnWidth (long value);
      // VB6: Sub columnWidth (ByVal value As Long)
      [DispId(5673)]
      set;
    }
  }

  /// <summary><para><c>IWMPPluginUIHost</c> interface.  </para><para>IWMPPluginUIHost: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPPluginUIHost: Not Public.  Internal interface used by Windows Media Player.
  [Guid("5D0AD945-289E-45C5-A9C6-F301F0152108")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPPluginUIHost
  {
    /// <summary><para><c>getProperty</c> method of <c>IWMPPluginUIHost</c> interface.  </para><para>method getProperty</para></summary>
    /// <remarks><para>An original IDL definition of <c>getProperty</c> method was the following:  <c>HRESULT getProperty (BSTR bstrName, [out, retval] VARIANT* ReturnValue)</c>;</para></remarks>
    // method getProperty
    // IDL: HRESULT getProperty (BSTR bstrName, [out, retval] VARIANT* ReturnValue);
    // VB6: Function getProperty (ByVal bstrName As String) As Any
    [DispId(6203)]
    object getProperty ([MarshalAs(UnmanagedType.BStr)] string bstrName);

    /// <summary><para><c>setProperty</c> method of <c>IWMPPluginUIHost</c> interface.  </para><para>method setProperty</para></summary>
    /// <remarks><para>An original IDL definition of <c>setProperty</c> method was the following:  <c>HRESULT setProperty (BSTR bstrName, VARIANT newVal)</c>;</para></remarks>
    // method setProperty
    // IDL: HRESULT setProperty (BSTR bstrName, VARIANT newVal);
    // VB6: Sub setProperty (ByVal bstrName As String, ByVal newVal As Any)
    [DispId(6204)]
    void setProperty ([MarshalAs(UnmanagedType.BStr)] string bstrName, object newVal);

    /// <summary><para><c>backgroundColor</c> property of <c>IWMPPluginUIHost</c> interface.  </para><para>property backgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // property backgroundColor
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(6201)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundColor (BSTR value);
      // VB6: Sub backgroundColor (ByVal value As String)
      [DispId(6201)]
      set;
    }

    /// <summary><para><c>objectID</c> property of <c>IWMPPluginUIHost</c> interface.  </para><para>property objectID</para></summary>
    /// <remarks><para>An original IDL definition of <c>objectID</c> property was the following:  <c>BSTR objectID</c>;</para></remarks>
    // property objectID
    // IDL: BSTR objectID;
    // VB6: objectID As String
    string objectID
    {
      // IDL: HRESULT objectID ([out, retval] BSTR* ReturnValue);
      // VB6: Function objectID As String
      [DispId(6202)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT objectID (BSTR value);
      // VB6: Sub objectID (ByVal value As String)
      [DispId(6202)]
      set;
    }
  }

  /// <summary><para><c>IWMPQuery</c> interface.  </para><para>IWMPQuery: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPQuery: Public interface for Windows Media Player SDK.
  [Guid("A00918F3-A6B0-4BFB-9189-FD834C7BC5A5")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPQuery
  {
    /// <summary><para><c>addCondition</c> method of <c>IWMPQuery</c> interface.  </para><para>Adds a single AND query parameter to existing group</para></summary>
    /// <remarks><para>An original IDL definition of <c>addCondition</c> method was the following:  <c>HRESULT addCondition (BSTR bstrAttribute, BSTR bstrOperator, BSTR bstrValue)</c>;</para></remarks>
    // Adds a single AND query parameter to existing group
    // IDL: HRESULT addCondition (BSTR bstrAttribute, BSTR bstrOperator, BSTR bstrValue);
    // VB6: Sub addCondition (ByVal bstrAttribute As String, ByVal bstrOperator As String, ByVal bstrValue As String)
    [DispId(1351)]
    void addCondition ([MarshalAs(UnmanagedType.BStr)] string bstrAttribute, [MarshalAs(UnmanagedType.BStr)] string bstrOperator, [MarshalAs(UnmanagedType.BStr)] string bstrValue);

    /// <summary><para><c>beginNextGroup</c> method of <c>IWMPQuery</c> interface.  </para><para>Starts a new OR query group</para></summary>
    /// <remarks><para>An original IDL definition of <c>beginNextGroup</c> method was the following:  <c>HRESULT beginNextGroup (void)</c>;</para></remarks>
    // Starts a new OR query group
    // IDL: HRESULT beginNextGroup (void);
    // VB6: Sub beginNextGroup
    [DispId(1352)]
    void beginNextGroup ();
  }

  /// <summary><para><c>IWMPRegionalButton</c> interface.  </para><para>IWMPRegionalButton: Public interface for skin object model.</para></summary>
  // IWMPRegionalButton: Public interface for skin object model.
  [Guid("58D507B2-2354-11D3-BD41-00C04F6EA5AE")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPRegionalButton
  {
    /// <summary><para><c>Click</c> method of <c>IWMPRegionalButton</c> interface.  </para><para>method Click</para></summary>
    /// <remarks><para>An original IDL definition of <c>Click</c> method was the following:  <c>HRESULT Click (void)</c>;</para></remarks>
    // method Click
    // IDL: HRESULT Click (void);
    // VB6: Sub Click
    [DispId(5344)]
    void Click ();

    /// <summary><para><c>accDescription</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property AccDescription</para></summary>
    /// <remarks><para>An original IDL definition of <c>accDescription</c> property was the following:  <c>BSTR accDescription</c>;</para></remarks>
    // property AccDescription
    // IDL: BSTR accDescription;
    // VB6: accDescription As String
    string accDescription
    {
      // IDL: HRESULT accDescription ([out, retval] BSTR* ReturnValue);
      // VB6: Function accDescription As String
      [DispId(5346)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accDescription (BSTR value);
      // VB6: Sub accDescription (ByVal value As String)
      [DispId(5346)]
      set;
    }

    /// <summary><para><c>accKeyboardShortcut</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property accKeyboardShortcut</para></summary>
    /// <remarks><para>An original IDL definition of <c>accKeyboardShortcut</c> property was the following:  <c>BSTR accKeyboardShortcut</c>;</para></remarks>
    // property accKeyboardShortcut
    // IDL: BSTR accKeyboardShortcut;
    // VB6: accKeyboardShortcut As String
    string accKeyboardShortcut
    {
      // IDL: HRESULT accKeyboardShortcut ([out, retval] BSTR* ReturnValue);
      // VB6: Function accKeyboardShortcut As String
      [DispId(5347)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accKeyboardShortcut (BSTR value);
      // VB6: Sub accKeyboardShortcut (ByVal value As String)
      [DispId(5347)]
      set;
    }

    /// <summary><para><c>accName</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property AccName</para></summary>
    /// <remarks><para>An original IDL definition of <c>accName</c> property was the following:  <c>BSTR accName</c>;</para></remarks>
    // property AccName
    // IDL: BSTR accName;
    // VB6: accName As String
    string accName
    {
      // IDL: HRESULT accName ([out, retval] BSTR* ReturnValue);
      // VB6: Function accName As String
      [DispId(5345)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT accName (BSTR value);
      // VB6: Sub accName (ByVal value As String)
      [DispId(5345)]
      set;
    }

    /// <summary><para><c>cursor</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property Cursor</para></summary>
    /// <remarks><para>An original IDL definition of <c>cursor</c> property was the following:  <c>BSTR cursor</c>;</para></remarks>
    // property Cursor
    // IDL: BSTR cursor;
    // VB6: cursor As String
    string cursor
    {
      // IDL: HRESULT cursor ([out, retval] BSTR* ReturnValue);
      // VB6: Function cursor As String
      [DispId(5343)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT cursor (BSTR value);
      // VB6: Sub cursor (ByVal value As String)
      [DispId(5343)]
      set;
    }

    /// <summary><para><c>down</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property Down</para></summary>
    /// <remarks><para>An original IDL definition of <c>down</c> property was the following:  <c>VARIANT_BOOL down</c>;</para></remarks>
    // property Down
    // IDL: VARIANT_BOOL down;
    // VB6: down As Boolean
    bool down
    {
      // IDL: HRESULT down ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function down As Boolean
      [DispId(5340)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT down (VARIANT_BOOL value);
      // VB6: Sub down (ByVal value As Boolean)
      [DispId(5340)]
      set;
    }

    /// <summary><para><c>downToolTip</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property DownToolTip</para></summary>
    /// <remarks><para>An original IDL definition of <c>downToolTip</c> property was the following:  <c>BSTR downToolTip</c>;</para></remarks>
    // property DownToolTip
    // IDL: BSTR downToolTip;
    // VB6: downToolTip As String
    string downToolTip
    {
      // IDL: HRESULT downToolTip ([out, retval] BSTR* ReturnValue);
      // VB6: Function downToolTip As String
      [DispId(5331)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT downToolTip (BSTR value);
      // VB6: Sub downToolTip (ByVal value As String)
      [DispId(5331)]
      set;
    }

    /// <summary><para><c>enabled</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property Enabled</para></summary>
    /// <remarks><para>An original IDL definition of <c>enabled</c> property was the following:  <c>VARIANT_BOOL enabled</c>;</para></remarks>
    // property Enabled
    // IDL: VARIANT_BOOL enabled;
    // VB6: enabled As Boolean
    bool enabled
    {
      // IDL: HRESULT enabled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enabled As Boolean
      [DispId(5333)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enabled (VARIANT_BOOL value);
      // VB6: Sub enabled (ByVal value As Boolean)
      [DispId(5333)]
      set;
    }

    /// <summary><para><c>index</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property Index</para></summary>
    /// <remarks><para>An original IDL definition of <c>index</c> property was the following:  <c>long index</c>;</para></remarks>
    // property Index
    // IDL: long index;
    // VB6: index As Long
    int index
    {
      // IDL: HRESULT index ([out, retval] long* ReturnValue);
      // VB6: Function index As Long
      [DispId(5341)]
      get;
    }

    /// <summary><para><c>mappingColor</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property MappingColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>mappingColor</c> property was the following:  <c>BSTR mappingColor</c>;</para></remarks>
    // property MappingColor
    // IDL: BSTR mappingColor;
    // VB6: mappingColor As String
    string mappingColor
    {
      // IDL: HRESULT mappingColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function mappingColor As String
      [DispId(5332)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT mappingColor (BSTR value);
      // VB6: Sub mappingColor (ByVal value As String)
      [DispId(5332)]
      set;
    }

    /// <summary><para><c>sticky</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property Sticky</para></summary>
    /// <remarks><para>An original IDL definition of <c>sticky</c> property was the following:  <c>VARIANT_BOOL sticky</c>;</para></remarks>
    // property Sticky
    // IDL: VARIANT_BOOL sticky;
    // VB6: sticky As Boolean
    bool sticky
    {
      // IDL: HRESULT sticky ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function sticky As Boolean
      [DispId(5339)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT sticky (VARIANT_BOOL value);
      // VB6: Sub sticky (ByVal value As Boolean)
      [DispId(5339)]
      set;
    }

    /// <summary><para><c>tabStop</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property TabStop</para></summary>
    /// <remarks><para>An original IDL definition of <c>tabStop</c> property was the following:  <c>VARIANT_BOOL tabStop</c>;</para></remarks>
    // property TabStop
    // IDL: VARIANT_BOOL tabStop;
    // VB6: tabStop As Boolean
    bool tabStop
    {
      // IDL: HRESULT tabStop ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function tabStop As Boolean
      [DispId(5342)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT tabStop (VARIANT_BOOL value);
      // VB6: Sub tabStop (ByVal value As Boolean)
      [DispId(5342)]
      set;
    }

    /// <summary><para><c>upToolTip</c> property of <c>IWMPRegionalButton</c> interface.  </para><para>property UpToolTip</para></summary>
    /// <remarks><para>An original IDL definition of <c>upToolTip</c> property was the following:  <c>BSTR upToolTip</c>;</para></remarks>
    // property UpToolTip
    // IDL: BSTR upToolTip;
    // VB6: upToolTip As String
    string upToolTip
    {
      // IDL: HRESULT upToolTip ([out, retval] BSTR* ReturnValue);
      // VB6: Function upToolTip As String
      [DispId(5330)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT upToolTip (BSTR value);
      // VB6: Sub upToolTip (ByVal value As String)
      [DispId(5330)]
      set;
    }
  }

  /// <summary><para><c>IWMPRegionalButtonCtrl</c> interface.  </para><para>IWMPRegionalButtonCtrl: Public interface for skin object model.</para></summary>
  // IWMPRegionalButtonCtrl: Public interface for skin object model.
  [Guid("58D507B1-2354-11D3-BD41-00C04F6EA5AE")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPRegionalButtonCtrl
  {
    /// <summary><para><c>createButton</c> method of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>method CreateButton</para></summary>
    /// <remarks><para>An original IDL definition of <c>createButton</c> method was the following:  <c>HRESULT createButton ([out, retval] IDispatch** ReturnValue)</c>;</para></remarks>
    // method CreateButton
    // IDL: HRESULT createButton ([out, retval] IDispatch** ReturnValue);
    // VB6: Function createButton As IDispatch
    [DispId(5312)]
    [return: MarshalAs(UnmanagedType.IDispatch)]
    object createButton ();

    /// <summary><para><c>getButton</c> method of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>method GetButton</para></summary>
    /// <remarks><para>An original IDL definition of <c>getButton</c> method was the following:  <c>HRESULT getButton (long nButton, [out, retval] IDispatch** ReturnValue)</c>;</para></remarks>
    // method GetButton
    // IDL: HRESULT getButton (long nButton, [out, retval] IDispatch** ReturnValue);
    // VB6: Function getButton (ByVal nButton As Long) As IDispatch
    [DispId(5313)]
    [return: MarshalAs(UnmanagedType.IDispatch)]
    object getButton (int nButton);

    /// <summary><para><c>Click</c> method of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>method Click</para></summary>
    /// <remarks><para>An original IDL definition of <c>Click</c> method was the following:  <c>HRESULT Click (long nButton)</c>;</para></remarks>
    // method Click
    // IDL: HRESULT Click (long nButton);
    // VB6: Sub Click (ByVal nButton As Long)
    [DispId(5314)]
    void Click (int nButton);

    /// <summary><para><c>buttonCount</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property ButtonCount</para></summary>
    /// <remarks><para>An original IDL definition of <c>buttonCount</c> property was the following:  <c>long buttonCount</c>;</para></remarks>
    // property ButtonCount
    // IDL: long buttonCount;
    // VB6: buttonCount As Long
    int buttonCount
    {
      // IDL: HRESULT buttonCount ([out, retval] long* ReturnValue);
      // VB6: Function buttonCount As Long
      [DispId(5311)]
      get;
    }

    /// <summary><para><c>cursor</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property Cursor</para></summary>
    /// <remarks><para>An original IDL definition of <c>cursor</c> property was the following:  <c>BSTR cursor</c>;</para></remarks>
    // property Cursor
    // IDL: BSTR cursor;
    // VB6: cursor As String
    string cursor
    {
      // IDL: HRESULT cursor ([out, retval] BSTR* ReturnValue);
      // VB6: Function cursor As String
      [DispId(5308)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT cursor (BSTR value);
      // VB6: Sub cursor (ByVal value As String)
      [DispId(5308)]
      set;
    }

    /// <summary><para><c>disabledImage</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property DisabledImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>disabledImage</c> property was the following:  <c>BSTR disabledImage</c>;</para></remarks>
    // property DisabledImage
    // IDL: BSTR disabledImage;
    // VB6: disabledImage As String
    string disabledImage
    {
      // IDL: HRESULT disabledImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function disabledImage As String
      [DispId(5304)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT disabledImage (BSTR value);
      // VB6: Sub disabledImage (ByVal value As String)
      [DispId(5304)]
      set;
    }

    /// <summary><para><c>downImage</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property DownImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>downImage</c> property was the following:  <c>BSTR downImage</c>;</para></remarks>
    // property DownImage
    // IDL: BSTR downImage;
    // VB6: downImage As String
    string downImage
    {
      // IDL: HRESULT downImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function downImage As String
      [DispId(5302)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT downImage (BSTR value);
      // VB6: Sub downImage (ByVal value As String)
      [DispId(5302)]
      set;
    }

    /// <summary><para><c>hoverDownImage</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property HoverDownImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>hoverDownImage</c> property was the following:  <c>BSTR hoverDownImage</c>;</para></remarks>
    // property HoverDownImage
    // IDL: BSTR hoverDownImage;
    // VB6: hoverDownImage As String
    string hoverDownImage
    {
      // IDL: HRESULT hoverDownImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function hoverDownImage As String
      [DispId(5303)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT hoverDownImage (BSTR value);
      // VB6: Sub hoverDownImage (ByVal value As String)
      [DispId(5303)]
      set;
    }

    /// <summary><para><c>hoverHoverImage</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property hoverHoverImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>hoverHoverImage</c> property was the following:  <c>BSTR hoverHoverImage</c>;</para></remarks>
    // property hoverHoverImage
    // IDL: BSTR hoverHoverImage;
    // VB6: hoverHoverImage As String
    string hoverHoverImage
    {
      // IDL: HRESULT hoverHoverImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function hoverHoverImage As String
      [DispId(5317)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT hoverHoverImage (BSTR value);
      // VB6: Sub hoverHoverImage (ByVal value As String)
      [DispId(5317)]
      set;
    }

    /// <summary><para><c>hoverImage</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property HoverImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>hoverImage</c> property was the following:  <c>BSTR hoverImage</c>;</para></remarks>
    // property HoverImage
    // IDL: BSTR hoverImage;
    // VB6: hoverImage As String
    string hoverImage
    {
      // IDL: HRESULT hoverImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function hoverImage As String
      [DispId(5301)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT hoverImage (BSTR value);
      // VB6: Sub hoverImage (ByVal value As String)
      [DispId(5301)]
      set;
    }

    /// <summary><para><c>hueShift</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property hueShift</para></summary>
    /// <remarks><para>An original IDL definition of <c>hueShift</c> property was the following:  <c>float hueShift</c>;</para></remarks>
    // property hueShift
    // IDL: float hueShift;
    // VB6: hueShift As Single
    float hueShift
    {
      // IDL: HRESULT hueShift ([out, retval] float* ReturnValue);
      // VB6: Function hueShift As Single
      [DispId(5315)]
      get;
      // IDL: HRESULT hueShift (float value);
      // VB6: Sub hueShift (ByVal value As Single)
      [DispId(5315)]
      set;
    }

    /// <summary><para><c>image</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property Image</para></summary>
    /// <remarks><para>An original IDL definition of <c>image</c> property was the following:  <c>BSTR image</c>;</para></remarks>
    // property Image
    // IDL: BSTR image;
    // VB6: image As String
    string image
    {
      // IDL: HRESULT image ([out, retval] BSTR* ReturnValue);
      // VB6: Function image As String
      [DispId(5300)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT image (BSTR value);
      // VB6: Sub image (ByVal value As String)
      [DispId(5300)]
      set;
    }

    /// <summary><para><c>mappingImage</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property MappingImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>mappingImage</c> property was the following:  <c>BSTR mappingImage</c>;</para></remarks>
    // property MappingImage
    // IDL: BSTR mappingImage;
    // VB6: mappingImage As String
    string mappingImage
    {
      // IDL: HRESULT mappingImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function mappingImage As String
      [DispId(5305)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT mappingImage (BSTR value);
      // VB6: Sub mappingImage (ByVal value As String)
      [DispId(5305)]
      set;
    }

    /// <summary><para><c>radio</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property Radio</para></summary>
    /// <remarks><para>An original IDL definition of <c>radio</c> property was the following:  <c>VARIANT_BOOL radio</c>;</para></remarks>
    // property Radio
    // IDL: VARIANT_BOOL radio;
    // VB6: radio As Boolean
    bool radio
    {
      // IDL: HRESULT radio ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function radio As Boolean
      [DispId(5310)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT radio (VARIANT_BOOL value);
      // VB6: Sub radio (ByVal value As Boolean)
      [DispId(5310)]
      set;
    }

    /// <summary><para><c>saturation</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property saturation</para></summary>
    /// <remarks><para>An original IDL definition of <c>saturation</c> property was the following:  <c>float saturation</c>;</para></remarks>
    // property saturation
    // IDL: float saturation;
    // VB6: saturation As Single
    float saturation
    {
      // IDL: HRESULT saturation ([out, retval] float* ReturnValue);
      // VB6: Function saturation As Single
      [DispId(5316)]
      get;
      // IDL: HRESULT saturation (float value);
      // VB6: Sub saturation (ByVal value As Single)
      [DispId(5316)]
      set;
    }

    /// <summary><para><c>showBackground</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property ShowBackground</para></summary>
    /// <remarks><para>An original IDL definition of <c>showBackground</c> property was the following:  <c>VARIANT_BOOL showBackground</c>;</para></remarks>
    // property ShowBackground
    // IDL: VARIANT_BOOL showBackground;
    // VB6: showBackground As Boolean
    bool showBackground
    {
      // IDL: HRESULT showBackground ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function showBackground As Boolean
      [DispId(5309)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT showBackground (VARIANT_BOOL value);
      // VB6: Sub showBackground (ByVal value As Boolean)
      [DispId(5309)]
      set;
    }

    /// <summary><para><c>transparencyColor</c> property of <c>IWMPRegionalButtonCtrl</c> interface.  </para><para>property TransparencyColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>transparencyColor</c> property was the following:  <c>BSTR transparencyColor</c>;</para></remarks>
    // property TransparencyColor
    // IDL: BSTR transparencyColor;
    // VB6: transparencyColor As String
    string transparencyColor
    {
      // IDL: HRESULT transparencyColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function transparencyColor As String
      [DispId(5306)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT transparencyColor (BSTR value);
      // VB6: Sub transparencyColor (ByVal value As String)
      [DispId(5306)]
      set;
    }
  }

  /// <summary><para><c>IWMPRegionalButtonEvents</c> interface.  </para><para>IWMPRegionalButtonEvents: Public interface for skin object model.</para></summary>
  // IWMPRegionalButtonEvents: Public interface for skin object model.
  [Guid("50FC8D31-67AC-11D3-BD4C-00C04F6EA5AE")]
  [ComImport]
  [TypeLibType((short)4096)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPRegionalButtonEvents
  {
    /// <summary><para><c>onblur</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onblur</para></summary>
    /// <remarks><para>An original IDL definition of <c>onblur</c> method was the following:  <c>HRESULT onblur (void)</c>;</para></remarks>
    // event onblur
    // IDL: HRESULT onblur (void);
    // VB6: Sub onblur
    [DispId(5360)]
    void onblur ();

    /// <summary><para><c>onfocus</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onfocus</para></summary>
    /// <remarks><para>An original IDL definition of <c>onfocus</c> method was the following:  <c>HRESULT onfocus (void)</c>;</para></remarks>
    // event onfocus
    // IDL: HRESULT onfocus (void);
    // VB6: Sub onfocus
    [DispId(5361)]
    void onfocus ();

    /// <summary><para><c>onclick</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onclick</para></summary>
    /// <remarks><para>An original IDL definition of <c>onclick</c> method was the following:  <c>HRESULT onclick (void)</c>;</para></remarks>
    // event onclick
    // IDL: HRESULT onclick (void);
    // VB6: Sub onclick
    [DispId(5362)]
    void onclick ();

    /// <summary><para><c>ondblclick</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event ondblclick</para></summary>
    /// <remarks><para>An original IDL definition of <c>ondblclick</c> method was the following:  <c>HRESULT ondblclick (void)</c>;</para></remarks>
    // event ondblclick
    // IDL: HRESULT ondblclick (void);
    // VB6: Sub ondblclick
    [DispId(5363)]
    void ondblclick ();

    /// <summary><para><c>onmousedown</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmousedown</para></summary>
    /// <remarks><para>An original IDL definition of <c>onmousedown</c> method was the following:  <c>HRESULT onmousedown (void)</c>;</para></remarks>
    // event onmousedown
    // IDL: HRESULT onmousedown (void);
    // VB6: Sub onmousedown
    [DispId(5364)]
    void onmousedown ();

    /// <summary><para><c>onmouseup</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmouseup</para></summary>
    /// <remarks><para>An original IDL definition of <c>onmouseup</c> method was the following:  <c>HRESULT onmouseup (void)</c>;</para></remarks>
    // event onmouseup
    // IDL: HRESULT onmouseup (void);
    // VB6: Sub onmouseup
    [DispId(5365)]
    void onmouseup ();

    /// <summary><para><c>onmousemove</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmousemove</para></summary>
    /// <remarks><para>An original IDL definition of <c>onmousemove</c> method was the following:  <c>HRESULT onmousemove (void)</c>;</para></remarks>
    // event onmousemove
    // IDL: HRESULT onmousemove (void);
    // VB6: Sub onmousemove
    [DispId(5366)]
    void onmousemove ();

    /// <summary><para><c>onmouseover</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmouseover</para></summary>
    /// <remarks><para>An original IDL definition of <c>onmouseover</c> method was the following:  <c>HRESULT onmouseover (void)</c>;</para></remarks>
    // event onmouseover
    // IDL: HRESULT onmouseover (void);
    // VB6: Sub onmouseover
    [DispId(5367)]
    void onmouseover ();

    /// <summary><para><c>onmouseout</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmouseout</para></summary>
    /// <remarks><para>An original IDL definition of <c>onmouseout</c> method was the following:  <c>HRESULT onmouseout (void)</c>;</para></remarks>
    // event onmouseout
    // IDL: HRESULT onmouseout (void);
    // VB6: Sub onmouseout
    [DispId(5368)]
    void onmouseout ();

    /// <summary><para><c>onkeypress</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onkeypress</para></summary>
    /// <remarks><para>An original IDL definition of <c>onkeypress</c> method was the following:  <c>HRESULT onkeypress (void)</c>;</para></remarks>
    // event onkeypress
    // IDL: HRESULT onkeypress (void);
    // VB6: Sub onkeypress
    [DispId(5369)]
    void onkeypress ();

    /// <summary><para><c>onkeydown</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onkeydown</para></summary>
    /// <remarks><para>An original IDL definition of <c>onkeydown</c> method was the following:  <c>HRESULT onkeydown (void)</c>;</para></remarks>
    // event onkeydown
    // IDL: HRESULT onkeydown (void);
    // VB6: Sub onkeydown
    [DispId(5370)]
    void onkeydown ();

    /// <summary><para><c>onkeyup</c> method of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onkeyup</para></summary>
    /// <remarks><para>An original IDL definition of <c>onkeyup</c> method was the following:  <c>HRESULT onkeyup (void)</c>;</para></remarks>
    // event onkeyup
    // IDL: HRESULT onkeyup (void);
    // VB6: Sub onkeyup
    [DispId(5371)]
    void onkeyup ();
  }

  /// <summary><para>Delegate for handling <c>onblur</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onblur</para></summary>
  /// <remarks><para>An original IDL definition of <c>onblur</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_onblurEventHandler (void)</c>;</para></remarks>
  // event onblur
  // IDL: HRESULT IWMPRegionalButtonEvents_onblurEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_onblurEventHandler
  public delegate void IWMPRegionalButtonEvents_onblurEventHandler ();

  /// <summary><para>Delegate for handling <c>onfocus</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onfocus</para></summary>
  /// <remarks><para>An original IDL definition of <c>onfocus</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_onfocusEventHandler (void)</c>;</para></remarks>
  // event onfocus
  // IDL: HRESULT IWMPRegionalButtonEvents_onfocusEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_onfocusEventHandler
  public delegate void IWMPRegionalButtonEvents_onfocusEventHandler ();

  /// <summary><para>Delegate for handling <c>onclick</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onclick</para></summary>
  /// <remarks><para>An original IDL definition of <c>onclick</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_onclickEventHandler (void)</c>;</para></remarks>
  // event onclick
  // IDL: HRESULT IWMPRegionalButtonEvents_onclickEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_onclickEventHandler
  public delegate void IWMPRegionalButtonEvents_onclickEventHandler ();

  /// <summary><para>Delegate for handling <c>ondblclick</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event ondblclick</para></summary>
  /// <remarks><para>An original IDL definition of <c>ondblclick</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_ondblclickEventHandler (void)</c>;</para></remarks>
  // event ondblclick
  // IDL: HRESULT IWMPRegionalButtonEvents_ondblclickEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_ondblclickEventHandler
  public delegate void IWMPRegionalButtonEvents_ondblclickEventHandler ();

  /// <summary><para>Delegate for handling <c>onmousedown</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmousedown</para></summary>
  /// <remarks><para>An original IDL definition of <c>onmousedown</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_onmousedownEventHandler (void)</c>;</para></remarks>
  // event onmousedown
  // IDL: HRESULT IWMPRegionalButtonEvents_onmousedownEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_onmousedownEventHandler
  public delegate void IWMPRegionalButtonEvents_onmousedownEventHandler ();

  /// <summary><para>Delegate for handling <c>onmouseup</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmouseup</para></summary>
  /// <remarks><para>An original IDL definition of <c>onmouseup</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_onmouseupEventHandler (void)</c>;</para></remarks>
  // event onmouseup
  // IDL: HRESULT IWMPRegionalButtonEvents_onmouseupEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_onmouseupEventHandler
  public delegate void IWMPRegionalButtonEvents_onmouseupEventHandler ();

  /// <summary><para>Delegate for handling <c>onmousemove</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmousemove</para></summary>
  /// <remarks><para>An original IDL definition of <c>onmousemove</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_onmousemoveEventHandler (void)</c>;</para></remarks>
  // event onmousemove
  // IDL: HRESULT IWMPRegionalButtonEvents_onmousemoveEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_onmousemoveEventHandler
  public delegate void IWMPRegionalButtonEvents_onmousemoveEventHandler ();

  /// <summary><para>Delegate for handling <c>onmouseover</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmouseover</para></summary>
  /// <remarks><para>An original IDL definition of <c>onmouseover</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_onmouseoverEventHandler (void)</c>;</para></remarks>
  // event onmouseover
  // IDL: HRESULT IWMPRegionalButtonEvents_onmouseoverEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_onmouseoverEventHandler
  public delegate void IWMPRegionalButtonEvents_onmouseoverEventHandler ();

  /// <summary><para>Delegate for handling <c>onmouseout</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmouseout</para></summary>
  /// <remarks><para>An original IDL definition of <c>onmouseout</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_onmouseoutEventHandler (void)</c>;</para></remarks>
  // event onmouseout
  // IDL: HRESULT IWMPRegionalButtonEvents_onmouseoutEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_onmouseoutEventHandler
  public delegate void IWMPRegionalButtonEvents_onmouseoutEventHandler ();

  /// <summary><para>Delegate for handling <c>onkeypress</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onkeypress</para></summary>
  /// <remarks><para>An original IDL definition of <c>onkeypress</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_onkeypressEventHandler (void)</c>;</para></remarks>
  // event onkeypress
  // IDL: HRESULT IWMPRegionalButtonEvents_onkeypressEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_onkeypressEventHandler
  public delegate void IWMPRegionalButtonEvents_onkeypressEventHandler ();

  /// <summary><para>Delegate for handling <c>onkeydown</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onkeydown</para></summary>
  /// <remarks><para>An original IDL definition of <c>onkeydown</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_onkeydownEventHandler (void)</c>;</para></remarks>
  // event onkeydown
  // IDL: HRESULT IWMPRegionalButtonEvents_onkeydownEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_onkeydownEventHandler
  public delegate void IWMPRegionalButtonEvents_onkeydownEventHandler ();

  /// <summary><para>Delegate for handling <c>onkeyup</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onkeyup</para></summary>
  /// <remarks><para>An original IDL definition of <c>onkeyup</c> event was the following:  <c>HRESULT IWMPRegionalButtonEvents_onkeyupEventHandler (void)</c>;</para></remarks>
  // event onkeyup
  // IDL: HRESULT IWMPRegionalButtonEvents_onkeyupEventHandler (void);
  // VB6: Sub IWMPRegionalButtonEvents_onkeyupEventHandler
  public delegate void IWMPRegionalButtonEvents_onkeyupEventHandler ();

  /// <summary><para>Declaration of events of <c>IWMPRegionalButtonEvents</c> source interface.  </para><para>IWMPRegionalButtonEvents: Public interface for skin object model.</para></summary>
  // IWMPRegionalButtonEvents: Public interface for skin object model.
  [ComEventInterface(typeof(IWMPRegionalButtonEvents),typeof(IWMPRegionalButtonEvents_EventProvider))]
  [ComVisible(false)]
  public interface IWMPRegionalButtonEvents_Event
  {
    /// <summary><para><c>onblur</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onblur</para></summary>
    event IWMPRegionalButtonEvents_onblurEventHandler onblur;

    /// <summary><para><c>onfocus</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onfocus</para></summary>
    event IWMPRegionalButtonEvents_onfocusEventHandler onfocus;

    /// <summary><para><c>onclick</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onclick</para></summary>
    event IWMPRegionalButtonEvents_onclickEventHandler onclick;

    /// <summary><para><c>ondblclick</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event ondblclick</para></summary>
    event IWMPRegionalButtonEvents_ondblclickEventHandler ondblclick;

    /// <summary><para><c>onmousedown</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmousedown</para></summary>
    event IWMPRegionalButtonEvents_onmousedownEventHandler onmousedown;

    /// <summary><para><c>onmouseup</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmouseup</para></summary>
    event IWMPRegionalButtonEvents_onmouseupEventHandler onmouseup;

    /// <summary><para><c>onmousemove</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmousemove</para></summary>
    event IWMPRegionalButtonEvents_onmousemoveEventHandler onmousemove;

    /// <summary><para><c>onmouseover</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmouseover</para></summary>
    event IWMPRegionalButtonEvents_onmouseoverEventHandler onmouseover;

    /// <summary><para><c>onmouseout</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onmouseout</para></summary>
    event IWMPRegionalButtonEvents_onmouseoutEventHandler onmouseout;

    /// <summary><para><c>onkeypress</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onkeypress</para></summary>
    event IWMPRegionalButtonEvents_onkeypressEventHandler onkeypress;

    /// <summary><para><c>onkeydown</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onkeydown</para></summary>
    event IWMPRegionalButtonEvents_onkeydownEventHandler onkeydown;

    /// <summary><para><c>onkeyup</c> event of <c>IWMPRegionalButtonEvents</c> interface.  </para><para>event onkeyup</para></summary>
    event IWMPRegionalButtonEvents_onkeyupEventHandler onkeyup;
  }

  [ClassInterface(ClassInterfaceType.None)]
  internal class IWMPRegionalButtonEvents_SinkHelper: IWMPRegionalButtonEvents
  {
    public int Cookie = 0;

    public event IWMPRegionalButtonEvents_onblurEventHandler onblurDelegate = null;
    public void Set_onblurDelegate(IWMPRegionalButtonEvents_onblurEventHandler deleg)
    {
      onblurDelegate = deleg;
    }
    public bool Is_onblurDelegate(IWMPRegionalButtonEvents_onblurEventHandler deleg)
    {
      return (onblurDelegate == deleg);
    }
    public void Clear_onblurDelegate()
    {
      onblurDelegate = null;
    }
    void IWMPRegionalButtonEvents.onblur ()
    {
      if (onblurDelegate!=null)
        onblurDelegate();
    }

    public event IWMPRegionalButtonEvents_onfocusEventHandler onfocusDelegate = null;
    public void Set_onfocusDelegate(IWMPRegionalButtonEvents_onfocusEventHandler deleg)
    {
      onfocusDelegate = deleg;
    }
    public bool Is_onfocusDelegate(IWMPRegionalButtonEvents_onfocusEventHandler deleg)
    {
      return (onfocusDelegate == deleg);
    }
    public void Clear_onfocusDelegate()
    {
      onfocusDelegate = null;
    }
    void IWMPRegionalButtonEvents.onfocus ()
    {
      if (onfocusDelegate!=null)
        onfocusDelegate();
    }

    public event IWMPRegionalButtonEvents_onclickEventHandler onclickDelegate = null;
    public void Set_onclickDelegate(IWMPRegionalButtonEvents_onclickEventHandler deleg)
    {
      onclickDelegate = deleg;
    }
    public bool Is_onclickDelegate(IWMPRegionalButtonEvents_onclickEventHandler deleg)
    {
      return (onclickDelegate == deleg);
    }
    public void Clear_onclickDelegate()
    {
      onclickDelegate = null;
    }
    void IWMPRegionalButtonEvents.onclick ()
    {
      if (onclickDelegate!=null)
        onclickDelegate();
    }

    public event IWMPRegionalButtonEvents_ondblclickEventHandler ondblclickDelegate = null;
    public void Set_ondblclickDelegate(IWMPRegionalButtonEvents_ondblclickEventHandler deleg)
    {
      ondblclickDelegate = deleg;
    }
    public bool Is_ondblclickDelegate(IWMPRegionalButtonEvents_ondblclickEventHandler deleg)
    {
      return (ondblclickDelegate == deleg);
    }
    public void Clear_ondblclickDelegate()
    {
      ondblclickDelegate = null;
    }
    void IWMPRegionalButtonEvents.ondblclick ()
    {
      if (ondblclickDelegate!=null)
        ondblclickDelegate();
    }

    public event IWMPRegionalButtonEvents_onmousedownEventHandler onmousedownDelegate = null;
    public void Set_onmousedownDelegate(IWMPRegionalButtonEvents_onmousedownEventHandler deleg)
    {
      onmousedownDelegate = deleg;
    }
    public bool Is_onmousedownDelegate(IWMPRegionalButtonEvents_onmousedownEventHandler deleg)
    {
      return (onmousedownDelegate == deleg);
    }
    public void Clear_onmousedownDelegate()
    {
      onmousedownDelegate = null;
    }
    void IWMPRegionalButtonEvents.onmousedown ()
    {
      if (onmousedownDelegate!=null)
        onmousedownDelegate();
    }

    public event IWMPRegionalButtonEvents_onmouseupEventHandler onmouseupDelegate = null;
    public void Set_onmouseupDelegate(IWMPRegionalButtonEvents_onmouseupEventHandler deleg)
    {
      onmouseupDelegate = deleg;
    }
    public bool Is_onmouseupDelegate(IWMPRegionalButtonEvents_onmouseupEventHandler deleg)
    {
      return (onmouseupDelegate == deleg);
    }
    public void Clear_onmouseupDelegate()
    {
      onmouseupDelegate = null;
    }
    void IWMPRegionalButtonEvents.onmouseup ()
    {
      if (onmouseupDelegate!=null)
        onmouseupDelegate();
    }

    public event IWMPRegionalButtonEvents_onmousemoveEventHandler onmousemoveDelegate = null;
    public void Set_onmousemoveDelegate(IWMPRegionalButtonEvents_onmousemoveEventHandler deleg)
    {
      onmousemoveDelegate = deleg;
    }
    public bool Is_onmousemoveDelegate(IWMPRegionalButtonEvents_onmousemoveEventHandler deleg)
    {
      return (onmousemoveDelegate == deleg);
    }
    public void Clear_onmousemoveDelegate()
    {
      onmousemoveDelegate = null;
    }
    void IWMPRegionalButtonEvents.onmousemove ()
    {
      if (onmousemoveDelegate!=null)
        onmousemoveDelegate();
    }

    public event IWMPRegionalButtonEvents_onmouseoverEventHandler onmouseoverDelegate = null;
    public void Set_onmouseoverDelegate(IWMPRegionalButtonEvents_onmouseoverEventHandler deleg)
    {
      onmouseoverDelegate = deleg;
    }
    public bool Is_onmouseoverDelegate(IWMPRegionalButtonEvents_onmouseoverEventHandler deleg)
    {
      return (onmouseoverDelegate == deleg);
    }
    public void Clear_onmouseoverDelegate()
    {
      onmouseoverDelegate = null;
    }
    void IWMPRegionalButtonEvents.onmouseover ()
    {
      if (onmouseoverDelegate!=null)
        onmouseoverDelegate();
    }

    public event IWMPRegionalButtonEvents_onmouseoutEventHandler onmouseoutDelegate = null;
    public void Set_onmouseoutDelegate(IWMPRegionalButtonEvents_onmouseoutEventHandler deleg)
    {
      onmouseoutDelegate = deleg;
    }
    public bool Is_onmouseoutDelegate(IWMPRegionalButtonEvents_onmouseoutEventHandler deleg)
    {
      return (onmouseoutDelegate == deleg);
    }
    public void Clear_onmouseoutDelegate()
    {
      onmouseoutDelegate = null;
    }
    void IWMPRegionalButtonEvents.onmouseout ()
    {
      if (onmouseoutDelegate!=null)
        onmouseoutDelegate();
    }

    public event IWMPRegionalButtonEvents_onkeypressEventHandler onkeypressDelegate = null;
    public void Set_onkeypressDelegate(IWMPRegionalButtonEvents_onkeypressEventHandler deleg)
    {
      onkeypressDelegate = deleg;
    }
    public bool Is_onkeypressDelegate(IWMPRegionalButtonEvents_onkeypressEventHandler deleg)
    {
      return (onkeypressDelegate == deleg);
    }
    public void Clear_onkeypressDelegate()
    {
      onkeypressDelegate = null;
    }
    void IWMPRegionalButtonEvents.onkeypress ()
    {
      if (onkeypressDelegate!=null)
        onkeypressDelegate();
    }

    public event IWMPRegionalButtonEvents_onkeydownEventHandler onkeydownDelegate = null;
    public void Set_onkeydownDelegate(IWMPRegionalButtonEvents_onkeydownEventHandler deleg)
    {
      onkeydownDelegate = deleg;
    }
    public bool Is_onkeydownDelegate(IWMPRegionalButtonEvents_onkeydownEventHandler deleg)
    {
      return (onkeydownDelegate == deleg);
    }
    public void Clear_onkeydownDelegate()
    {
      onkeydownDelegate = null;
    }
    void IWMPRegionalButtonEvents.onkeydown ()
    {
      if (onkeydownDelegate!=null)
        onkeydownDelegate();
    }

    public event IWMPRegionalButtonEvents_onkeyupEventHandler onkeyupDelegate = null;
    public void Set_onkeyupDelegate(IWMPRegionalButtonEvents_onkeyupEventHandler deleg)
    {
      onkeyupDelegate = deleg;
    }
    public bool Is_onkeyupDelegate(IWMPRegionalButtonEvents_onkeyupEventHandler deleg)
    {
      return (onkeyupDelegate == deleg);
    }
    public void Clear_onkeyupDelegate()
    {
      onkeyupDelegate = null;
    }
    void IWMPRegionalButtonEvents.onkeyup ()
    {
      if (onkeyupDelegate!=null)
        onkeyupDelegate();
    }
  }

  internal class IWMPRegionalButtonEvents_EventProvider: IDisposable, IWMPRegionalButtonEvents_Event
  {
    UCOMIConnectionPointContainer ConnectionPointContainer;
    UCOMIConnectionPoint ConnectionPoint;
    IWMPRegionalButtonEvents_SinkHelper EventSinkHelper;
    int ConnectionCount;

    // Constructor: remember ConnectionPointContainer
    IWMPRegionalButtonEvents_EventProvider(object CPContainer) : base()
    {
      ConnectionPointContainer = (UCOMIConnectionPointContainer)CPContainer;
    }

    // Force disconnection from ActiveX event source
    ~IWMPRegionalButtonEvents_EventProvider()
    {
      Disconnect();
      ConnectionPointContainer = null;
    }

    // Aletnative to destructor
    void IDisposable.Dispose()
    {
      Disconnect();
      ConnectionPointContainer = null;
      System.GC.SuppressFinalize(this);
    }

    // Connect to ActiveX event source
    void Connect()
    {
      if (ConnectionPoint == null)
      {
        ConnectionCount = 0;
        Guid g = new Guid("50FC8D31-67AC-11D3-BD4C-00C04F6EA5AE");
        ConnectionPointContainer.FindConnectionPoint(ref g, out ConnectionPoint);
        EventSinkHelper = new IWMPRegionalButtonEvents_SinkHelper();
        ConnectionPoint.Advise(EventSinkHelper, out EventSinkHelper.Cookie);
      }
    }

    // Disconnect from ActiveX event source
    void Disconnect()
    {
      System.Threading.Monitor.Enter(this);
      try {
        if (EventSinkHelper != null)
          ConnectionPoint.Unadvise(EventSinkHelper.Cookie);
        ConnectionPoint = null;
        EventSinkHelper = null;
      } catch { }
      System.Threading.Monitor.Exit(this);
    }

    // If no event handler present then disconnect from ActiveX event source
    void CheckDisconnect()
    {
      ConnectionCount--;
      if (ConnectionCount <= 0)
        Disconnect();
    }

    event IWMPRegionalButtonEvents_onblurEventHandler IWMPRegionalButtonEvents_Event.onblur
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onblurDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onblurDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPRegionalButtonEvents_onfocusEventHandler IWMPRegionalButtonEvents_Event.onfocus
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onfocusDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onfocusDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPRegionalButtonEvents_onclickEventHandler IWMPRegionalButtonEvents_Event.onclick
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onclickDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onclickDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPRegionalButtonEvents_ondblclickEventHandler IWMPRegionalButtonEvents_Event.ondblclick
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ondblclickDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ondblclickDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPRegionalButtonEvents_onmousedownEventHandler IWMPRegionalButtonEvents_Event.onmousedown
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onmousedownDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onmousedownDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPRegionalButtonEvents_onmouseupEventHandler IWMPRegionalButtonEvents_Event.onmouseup
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onmouseupDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onmouseupDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPRegionalButtonEvents_onmousemoveEventHandler IWMPRegionalButtonEvents_Event.onmousemove
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onmousemoveDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onmousemoveDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPRegionalButtonEvents_onmouseoverEventHandler IWMPRegionalButtonEvents_Event.onmouseover
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onmouseoverDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onmouseoverDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPRegionalButtonEvents_onmouseoutEventHandler IWMPRegionalButtonEvents_Event.onmouseout
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onmouseoutDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onmouseoutDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPRegionalButtonEvents_onkeypressEventHandler IWMPRegionalButtonEvents_Event.onkeypress
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onkeypressDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onkeypressDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPRegionalButtonEvents_onkeydownEventHandler IWMPRegionalButtonEvents_Event.onkeydown
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onkeydownDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onkeydownDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPRegionalButtonEvents_onkeyupEventHandler IWMPRegionalButtonEvents_Event.onkeyup
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onkeyupDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onkeyupDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }
  }

  /// <summary><para><c>IWMPSafeBrowser</c> interface.  </para><para>IWMPSafeBrowser: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPSafeBrowser: Not Public.  Internal interface used by Windows Media Player.
  [Guid("EF870383-83AB-4EA9-BE48-56FA4251AF10")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPSafeBrowser
  {
    /// <summary><para><c>showSAMIText</c> method of <c>IWMPSafeBrowser</c> interface.  </para><para>method showSAMIText</para></summary>
    /// <remarks><para>An original IDL definition of <c>showSAMIText</c> method was the following:  <c>HRESULT showSAMIText (BSTR samiText)</c>;</para></remarks>
    // method showSAMIText
    // IDL: HRESULT showSAMIText (BSTR samiText);
    // VB6: Sub showSAMIText (ByVal samiText As String)
    [DispId(8403)]
    void showSAMIText ([MarshalAs(UnmanagedType.BStr)] string samiText);

    /// <summary><para><c>showLyrics</c> method of <c>IWMPSafeBrowser</c> interface.  </para><para>method showLyrics</para></summary>
    /// <remarks><para>An original IDL definition of <c>showLyrics</c> method was the following:  <c>HRESULT showLyrics (BSTR lyrics)</c>;</para></remarks>
    // method showLyrics
    // IDL: HRESULT showLyrics (BSTR lyrics);
    // VB6: Sub showLyrics (ByVal lyrics As String)
    [DispId(8404)]
    void showLyrics ([MarshalAs(UnmanagedType.BStr)] string lyrics);

    /// <summary><para><c>loadSpecialPage</c> method of <c>IWMPSafeBrowser</c> interface.  </para><para>loads one of our special pages by name</para></summary>
    /// <remarks><para>An original IDL definition of <c>loadSpecialPage</c> method was the following:  <c>HRESULT loadSpecialPage (BSTR pageName)</c>;</para></remarks>
    // loads one of our special pages by name
    // IDL: HRESULT loadSpecialPage (BSTR pageName);
    // VB6: Sub loadSpecialPage (ByVal pageName As String)
    [DispId(8405)]
    void loadSpecialPage ([MarshalAs(UnmanagedType.BStr)] string pageName);

    /// <summary><para><c>goBack</c> method of <c>IWMPSafeBrowser</c> interface.  </para><para>go back to the previous page</para></summary>
    /// <remarks><para>An original IDL definition of <c>goBack</c> method was the following:  <c>HRESULT goBack (void)</c>;</para></remarks>
    // go back to the previous page
    // IDL: HRESULT goBack (void);
    // VB6: Sub goBack
    [DispId(8406)]
    void goBack ();

    /// <summary><para><c>goForward</c> method of <c>IWMPSafeBrowser</c> interface.  </para><para>go forward through the current MRU</para></summary>
    /// <remarks><para>An original IDL definition of <c>goForward</c> method was the following:  <c>HRESULT goForward (void)</c>;</para></remarks>
    // go forward through the current MRU
    // IDL: HRESULT goForward (void);
    // VB6: Sub goForward
    [DispId(8407)]
    void goForward ();

    /// <summary><para><c>stop</c> method of <c>IWMPSafeBrowser</c> interface.  </para><para>stop loading page</para></summary>
    /// <remarks><para>An original IDL definition of <c>stop</c> method was the following:  <c>HRESULT stop (void)</c>;</para></remarks>
    // stop loading page
    // IDL: HRESULT stop (void);
    // VB6: Sub stop
    [DispId(8408)]
    void stop ();

    /// <summary><para><c>refresh</c> method of <c>IWMPSafeBrowser</c> interface.  </para><para>refresh the page</para></summary>
    /// <remarks><para>An original IDL definition of <c>refresh</c> method was the following:  <c>HRESULT refresh (void)</c>;</para></remarks>
    // refresh the page
    // IDL: HRESULT refresh (void);
    // VB6: Sub refresh
    [DispId(8409)]
    void refresh ();

    /// <summary><para><c>showCert</c> method of <c>IWMPSafeBrowser</c> interface.  </para><para>show security certificate dialog</para></summary>
    /// <remarks><para>An original IDL definition of <c>showCert</c> method was the following:  <c>HRESULT showCert (void)</c>;</para></remarks>
    // show security certificate dialog
    // IDL: HRESULT showCert (void);
    // VB6: Sub showCert
    [DispId(8413)]
    void showCert ();

    /// <summary><para><c>baseURL</c> property of <c>IWMPSafeBrowser</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>baseURL</c> property was the following:  <c>BSTR baseURL</c>;</para></remarks>
    // IDL: BSTR baseURL;
    // VB6: baseURL As String
    string baseURL
    {
      // IDL: HRESULT baseURL ([out, retval] BSTR* ReturnValue);
      // VB6: Function baseURL As String
      [DispId(8410)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>busy</c> property of <c>IWMPSafeBrowser</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>busy</c> property was the following:  <c>VARIANT_BOOL busy</c>;</para></remarks>
    // IDL: VARIANT_BOOL busy;
    // VB6: busy As Boolean
    bool busy
    {
      // IDL: HRESULT busy ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function busy As Boolean
      [DispId(8412)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
    }

    /// <summary><para><c>fullURL</c> property of <c>IWMPSafeBrowser</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>fullURL</c> property was the following:  <c>BSTR fullURL</c>;</para></remarks>
    // IDL: BSTR fullURL;
    // VB6: fullURL As String
    string fullURL
    {
      // IDL: HRESULT fullURL ([out, retval] BSTR* ReturnValue);
      // VB6: Function fullURL As String
      [DispId(8414)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>pendingDownloads</c> property of <c>IWMPSafeBrowser</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>pendingDownloads</c> property was the following:  <c>long pendingDownloads</c>;</para></remarks>
    // IDL: long pendingDownloads;
    // VB6: pendingDownloads As Long
    int pendingDownloads
    {
      // IDL: HRESULT pendingDownloads ([out, retval] long* ReturnValue);
      // VB6: Function pendingDownloads As Long
      [DispId(8402)]
      get;
    }

    /// <summary><para><c>secureLock</c> property of <c>IWMPSafeBrowser</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>secureLock</c> property was the following:  <c>long secureLock</c>;</para></remarks>
    // IDL: long secureLock;
    // VB6: secureLock As Long
    int secureLock
    {
      // IDL: HRESULT secureLock ([out, retval] long* ReturnValue);
      // VB6: Function secureLock As Long
      [DispId(8411)]
      get;
    }

    /// <summary><para><c>status</c> property of <c>IWMPSafeBrowser</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>status</c> property was the following:  <c>long status</c>;</para></remarks>
    // IDL: long status;
    // VB6: status As Long
    int status
    {
      // IDL: HRESULT status ([out, retval] long* ReturnValue);
      // VB6: Function status As Long
      [DispId(8401)]
      get;
    }

    /// <summary><para><c>URL</c> property of <c>IWMPSafeBrowser</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>URL</c> property was the following:  <c>BSTR URL</c>;</para></remarks>
    // IDL: BSTR URL;
    // VB6: URL As String
    string URL
    {
      // IDL: HRESULT URL ([out, retval] BSTR* ReturnValue);
      // VB6: Function URL As String
      [DispId(8400)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT URL (BSTR value);
      // VB6: Sub URL (ByVal value As String)
      [DispId(8400)]
      set;
    }
  }

  /// <summary><para><c>IWMPSettings</c> interface.  </para><para>IWMPSettings: Public interface.</para></summary>
  // IWMPSettings: Public interface.
  [Guid("9104D1AB-80C9-4FED-ABF0-2E6417A6DF14")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPSettings
  {
    /// <summary><para><c>isAvailable</c> property get of <c>IWMPSettings</c> interface.  </para><para>Returns whether or not the specified media functionality is available</para></summary>
    /// <remarks><para>An original IDL definition of <c>isAvailable</c> property get was the following:  <c>HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Returns whether or not the specified media functionality is available
    // IDL: HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isAvailable (ByVal bstrItem As String) As Boolean
    [DispId(113)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItem) /* property get method */;

    /// <summary><para><c>getMode</c> method of <c>IWMPSettings</c> interface.  </para><para>Returns the mode of the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>getMode</c> method was the following:  <c>HRESULT getMode (BSTR bstrMode, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Returns the mode of the playlist
    // IDL: HRESULT getMode (BSTR bstrMode, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function getMode (ByVal bstrMode As String) As Boolean
    [DispId(110)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool getMode ([MarshalAs(UnmanagedType.BStr)] string bstrMode);

    /// <summary><para><c>setMode</c> method of <c>IWMPSettings</c> interface.  </para><para>Sets the mode of the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>setMode</c> method was the following:  <c>HRESULT setMode (BSTR bstrMode, VARIANT_BOOL varfMode)</c>;</para></remarks>
    // Sets the mode of the playlist
    // IDL: HRESULT setMode (BSTR bstrMode, VARIANT_BOOL varfMode);
    // VB6: Sub setMode (ByVal bstrMode As String, ByVal varfMode As Boolean)
    [DispId(111)]
    void setMode ([MarshalAs(UnmanagedType.BStr)] string bstrMode, [MarshalAs(UnmanagedType.VariantBool)] bool varfMode);

    /// <summary><para><c>autoStart</c> property of <c>IWMPSettings</c> interface.  </para><para>Returns whether media should automatically begin playing</para></summary>
    /// <remarks><para>An original IDL definition of <c>autoStart</c> property was the following:  <c>VARIANT_BOOL autoStart</c>;</para></remarks>
    // Returns whether media should automatically begin playing
    // IDL: VARIANT_BOOL autoStart;
    // VB6: autoStart As Boolean
    bool autoStart
    {
      // IDL: HRESULT autoStart ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function autoStart As Boolean
      [DispId(101)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT autoStart (VARIANT_BOOL value);
      // VB6: Sub autoStart (ByVal value As Boolean)
      [DispId(101)]
      set;
    }

    /// <summary><para><c>balance</c> property of <c>IWMPSettings</c> interface.  </para><para>Returns current audio Balance</para></summary>
    /// <remarks><para>An original IDL definition of <c>balance</c> property was the following:  <c>long balance</c>;</para></remarks>
    // Returns current audio Balance
    // IDL: long balance;
    // VB6: balance As Long
    int balance
    {
      // IDL: HRESULT balance ([out, retval] long* ReturnValue);
      // VB6: Function balance As Long
      [DispId(102)]
      get;
      // IDL: HRESULT balance (long value);
      // VB6: Sub balance (ByVal value As Long)
      [DispId(102)]
      set;
    }

    /// <summary><para><c>baseURL</c> property of <c>IWMPSettings</c> interface.  </para><para>Returns the base URL used for relative path resolution</para></summary>
    /// <remarks><para>An original IDL definition of <c>baseURL</c> property was the following:  <c>BSTR baseURL</c>;</para></remarks>
    // Returns the base URL used for relative path resolution
    // IDL: BSTR baseURL;
    // VB6: baseURL As String
    string baseURL
    {
      // IDL: HRESULT baseURL ([out, retval] BSTR* ReturnValue);
      // VB6: Function baseURL As String
      [DispId(108)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT baseURL (BSTR value);
      // VB6: Sub baseURL (ByVal value As String)
      [DispId(108)]
      set;
    }

    /// <summary><para><c>defaultFrame</c> property of <c>IWMPSettings</c> interface.  </para><para>Returns the frame location that changes when a URL flip occurs</para></summary>
    /// <remarks><para>An original IDL definition of <c>defaultFrame</c> property was the following:  <c>BSTR defaultFrame</c>;</para></remarks>
    // Returns the frame location that changes when a URL flip occurs
    // IDL: BSTR defaultFrame;
    // VB6: defaultFrame As String
    string defaultFrame
    {
      // IDL: HRESULT defaultFrame ([out, retval] BSTR* ReturnValue);
      // VB6: Function defaultFrame As String
      [DispId(109)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT defaultFrame (BSTR value);
      // VB6: Sub defaultFrame (ByVal value As String)
      [DispId(109)]
      set;
    }

    /// <summary><para><c>enableErrorDialogs</c> property of <c>IWMPSettings</c> interface.  </para><para>Returns whether error dialogs are shown by default when embedded</para></summary>
    /// <remarks><para>An original IDL definition of <c>enableErrorDialogs</c> property was the following:  <c>VARIANT_BOOL enableErrorDialogs</c>;</para></remarks>
    // Returns whether error dialogs are shown by default when embedded
    // IDL: VARIANT_BOOL enableErrorDialogs;
    // VB6: enableErrorDialogs As Boolean
    bool enableErrorDialogs
    {
      // IDL: HRESULT enableErrorDialogs ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enableErrorDialogs As Boolean
      [DispId(112)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enableErrorDialogs (VARIANT_BOOL value);
      // VB6: Sub enableErrorDialogs (ByVal value As Boolean)
      [DispId(112)]
      set;
    }

    /// <summary><para><c>invokeURLs</c> property of <c>IWMPSettings</c> interface.  </para><para>Returns whether URL events should spawn a browser.</para></summary>
    /// <remarks><para>An original IDL definition of <c>invokeURLs</c> property was the following:  <c>VARIANT_BOOL invokeURLs</c>;</para></remarks>
    // Returns whether URL events should spawn a browser.
    // IDL: VARIANT_BOOL invokeURLs;
    // VB6: invokeURLs As Boolean
    bool invokeURLs
    {
      // IDL: HRESULT invokeURLs ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function invokeURLs As Boolean
      [DispId(103)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT invokeURLs (VARIANT_BOOL value);
      // VB6: Sub invokeURLs (ByVal value As Boolean)
      [DispId(103)]
      set;
    }

    /// <summary><para><c>mute</c> property of <c>IWMPSettings</c> interface.  </para><para>Returns whether audio should be muted.</para></summary>
    /// <remarks><para>An original IDL definition of <c>mute</c> property was the following:  <c>VARIANT_BOOL mute</c>;</para></remarks>
    // Returns whether audio should be muted.
    // IDL: VARIANT_BOOL mute;
    // VB6: mute As Boolean
    bool mute
    {
      // IDL: HRESULT mute ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function mute As Boolean
      [DispId(104)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT mute (VARIANT_BOOL value);
      // VB6: Sub mute (ByVal value As Boolean)
      [DispId(104)]
      set;
    }

    /// <summary><para><c>playCount</c> property of <c>IWMPSettings</c> interface.  </para><para>Returns how many times media should play</para></summary>
    /// <remarks><para>An original IDL definition of <c>playCount</c> property was the following:  <c>long playCount</c>;</para></remarks>
    // Returns how many times media should play
    // IDL: long playCount;
    // VB6: playCount As Long
    int playCount
    {
      // IDL: HRESULT playCount ([out, retval] long* ReturnValue);
      // VB6: Function playCount As Long
      [DispId(105)]
      get;
      // IDL: HRESULT playCount (long value);
      // VB6: Sub playCount (ByVal value As Long)
      [DispId(105)]
      set;
    }

    /// <summary><para><c>rate</c> property of <c>IWMPSettings</c> interface.  </para><para>Returns current playback rate</para></summary>
    /// <remarks><para>An original IDL definition of <c>rate</c> property was the following:  <c>double rate</c>;</para></remarks>
    // Returns current playback rate
    // IDL: double rate;
    // VB6: rate As Double
    double rate
    {
      // IDL: HRESULT rate ([out, retval] double* ReturnValue);
      // VB6: Function rate As Double
      [DispId(106)]
      get;
      // IDL: HRESULT rate (double value);
      // VB6: Sub rate (ByVal value As Double)
      [DispId(106)]
      set;
    }

    /// <summary><para><c>volume</c> property of <c>IWMPSettings</c> interface.  </para><para>Returns current audio volume</para></summary>
    /// <remarks><para>An original IDL definition of <c>volume</c> property was the following:  <c>long volume</c>;</para></remarks>
    // Returns current audio volume
    // IDL: long volume;
    // VB6: volume As Long
    int volume
    {
      // IDL: HRESULT volume ([out, retval] long* ReturnValue);
      // VB6: Function volume As Long
      [DispId(107)]
      get;
      // IDL: HRESULT volume (long value);
      // VB6: Sub volume (ByVal value As Long)
      [DispId(107)]
      set;
    }
  }

  /// <summary><para><c>IWMPSettings2</c> interface.  </para><para>IWMPSettings2: Public interface.</para></summary>
  // IWMPSettings2: Public interface.
  [Guid("FDA937A4-EECE-4DA5-A0B6-39BF89ADE2C2")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPSettings2
  {
    /// <summary><para><c>isAvailable</c> property get of <c>IWMPSettings2</c> interface.  </para><para>Returns whether or not the specified media functionality is available</para></summary>
    /// <remarks><para>An original IDL definition of <c>isAvailable</c> property get was the following:  <c>HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Returns whether or not the specified media functionality is available
    // IDL: HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isAvailable (ByVal bstrItem As String) As Boolean
    [DispId(113)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItem) /* property get method */;

    /// <summary><para><c>getMode</c> method of <c>IWMPSettings2</c> interface.  </para><para>Returns the mode of the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>getMode</c> method was the following:  <c>HRESULT getMode (BSTR bstrMode, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Returns the mode of the playlist
    // IDL: HRESULT getMode (BSTR bstrMode, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function getMode (ByVal bstrMode As String) As Boolean
    [DispId(110)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool getMode ([MarshalAs(UnmanagedType.BStr)] string bstrMode);

    /// <summary><para><c>setMode</c> method of <c>IWMPSettings2</c> interface.  </para><para>Sets the mode of the playlist</para></summary>
    /// <remarks><para>An original IDL definition of <c>setMode</c> method was the following:  <c>HRESULT setMode (BSTR bstrMode, VARIANT_BOOL varfMode)</c>;</para></remarks>
    // Sets the mode of the playlist
    // IDL: HRESULT setMode (BSTR bstrMode, VARIANT_BOOL varfMode);
    // VB6: Sub setMode (ByVal bstrMode As String, ByVal varfMode As Boolean)
    [DispId(111)]
    void setMode ([MarshalAs(UnmanagedType.BStr)] string bstrMode, [MarshalAs(UnmanagedType.VariantBool)] bool varfMode);

    /// <summary><para><c>requestMediaAccessRights</c> method of <c>IWMPSettings2</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>requestMediaAccessRights</c> method was the following:  <c>HRESULT requestMediaAccessRights (BSTR bstrDesiredAccess, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT requestMediaAccessRights (BSTR bstrDesiredAccess, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function requestMediaAccessRights (ByVal bstrDesiredAccess As String) As Boolean
    [DispId(116)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool requestMediaAccessRights ([MarshalAs(UnmanagedType.BStr)] string bstrDesiredAccess);

    /// <summary><para><c>autoStart</c> property of <c>IWMPSettings2</c> interface.  </para><para>Returns whether media should automatically begin playing</para></summary>
    /// <remarks><para>An original IDL definition of <c>autoStart</c> property was the following:  <c>VARIANT_BOOL autoStart</c>;</para></remarks>
    // Returns whether media should automatically begin playing
    // IDL: VARIANT_BOOL autoStart;
    // VB6: autoStart As Boolean
    bool autoStart
    {
      // IDL: HRESULT autoStart ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function autoStart As Boolean
      [DispId(101)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT autoStart (VARIANT_BOOL value);
      // VB6: Sub autoStart (ByVal value As Boolean)
      [DispId(101)]
      set;
    }

    /// <summary><para><c>balance</c> property of <c>IWMPSettings2</c> interface.  </para><para>Returns current audio Balance</para></summary>
    /// <remarks><para>An original IDL definition of <c>balance</c> property was the following:  <c>long balance</c>;</para></remarks>
    // Returns current audio Balance
    // IDL: long balance;
    // VB6: balance As Long
    int balance
    {
      // IDL: HRESULT balance ([out, retval] long* ReturnValue);
      // VB6: Function balance As Long
      [DispId(102)]
      get;
      // IDL: HRESULT balance (long value);
      // VB6: Sub balance (ByVal value As Long)
      [DispId(102)]
      set;
    }

    /// <summary><para><c>baseURL</c> property of <c>IWMPSettings2</c> interface.  </para><para>Returns the base URL used for relative path resolution</para></summary>
    /// <remarks><para>An original IDL definition of <c>baseURL</c> property was the following:  <c>BSTR baseURL</c>;</para></remarks>
    // Returns the base URL used for relative path resolution
    // IDL: BSTR baseURL;
    // VB6: baseURL As String
    string baseURL
    {
      // IDL: HRESULT baseURL ([out, retval] BSTR* ReturnValue);
      // VB6: Function baseURL As String
      [DispId(108)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT baseURL (BSTR value);
      // VB6: Sub baseURL (ByVal value As String)
      [DispId(108)]
      set;
    }

    /// <summary><para><c>defaultAudioLanguage</c> property of <c>IWMPSettings2</c> interface.  </para><para>Returns the LCID of default audio language</para></summary>
    /// <remarks><para>An original IDL definition of <c>defaultAudioLanguage</c> property was the following:  <c>long defaultAudioLanguage</c>;</para></remarks>
    // Returns the LCID of default audio language
    // IDL: long defaultAudioLanguage;
    // VB6: defaultAudioLanguage As Long
    int defaultAudioLanguage
    {
      // IDL: HRESULT defaultAudioLanguage ([out, retval] long* ReturnValue);
      // VB6: Function defaultAudioLanguage As Long
      [DispId(114)]
      get;
    }

    /// <summary><para><c>defaultFrame</c> property of <c>IWMPSettings2</c> interface.  </para><para>Returns the frame location that changes when a URL flip occurs</para></summary>
    /// <remarks><para>An original IDL definition of <c>defaultFrame</c> property was the following:  <c>BSTR defaultFrame</c>;</para></remarks>
    // Returns the frame location that changes when a URL flip occurs
    // IDL: BSTR defaultFrame;
    // VB6: defaultFrame As String
    string defaultFrame
    {
      // IDL: HRESULT defaultFrame ([out, retval] BSTR* ReturnValue);
      // VB6: Function defaultFrame As String
      [DispId(109)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT defaultFrame (BSTR value);
      // VB6: Sub defaultFrame (ByVal value As String)
      [DispId(109)]
      set;
    }

    /// <summary><para><c>enableErrorDialogs</c> property of <c>IWMPSettings2</c> interface.  </para><para>Returns whether error dialogs are shown by default when embedded</para></summary>
    /// <remarks><para>An original IDL definition of <c>enableErrorDialogs</c> property was the following:  <c>VARIANT_BOOL enableErrorDialogs</c>;</para></remarks>
    // Returns whether error dialogs are shown by default when embedded
    // IDL: VARIANT_BOOL enableErrorDialogs;
    // VB6: enableErrorDialogs As Boolean
    bool enableErrorDialogs
    {
      // IDL: HRESULT enableErrorDialogs ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function enableErrorDialogs As Boolean
      [DispId(112)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT enableErrorDialogs (VARIANT_BOOL value);
      // VB6: Sub enableErrorDialogs (ByVal value As Boolean)
      [DispId(112)]
      set;
    }

    /// <summary><para><c>invokeURLs</c> property of <c>IWMPSettings2</c> interface.  </para><para>Returns whether URL events should spawn a browser.</para></summary>
    /// <remarks><para>An original IDL definition of <c>invokeURLs</c> property was the following:  <c>VARIANT_BOOL invokeURLs</c>;</para></remarks>
    // Returns whether URL events should spawn a browser.
    // IDL: VARIANT_BOOL invokeURLs;
    // VB6: invokeURLs As Boolean
    bool invokeURLs
    {
      // IDL: HRESULT invokeURLs ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function invokeURLs As Boolean
      [DispId(103)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT invokeURLs (VARIANT_BOOL value);
      // VB6: Sub invokeURLs (ByVal value As Boolean)
      [DispId(103)]
      set;
    }

    /// <summary><para><c>mediaAccessRights</c> property of <c>IWMPSettings2</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>mediaAccessRights</c> property was the following:  <c>BSTR mediaAccessRights</c>;</para></remarks>
    // IDL: BSTR mediaAccessRights;
    // VB6: mediaAccessRights As String
    string mediaAccessRights
    {
      // IDL: HRESULT mediaAccessRights ([out, retval] BSTR* ReturnValue);
      // VB6: Function mediaAccessRights As String
      [DispId(115)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>mute</c> property of <c>IWMPSettings2</c> interface.  </para><para>Returns whether audio should be muted.</para></summary>
    /// <remarks><para>An original IDL definition of <c>mute</c> property was the following:  <c>VARIANT_BOOL mute</c>;</para></remarks>
    // Returns whether audio should be muted.
    // IDL: VARIANT_BOOL mute;
    // VB6: mute As Boolean
    bool mute
    {
      // IDL: HRESULT mute ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function mute As Boolean
      [DispId(104)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT mute (VARIANT_BOOL value);
      // VB6: Sub mute (ByVal value As Boolean)
      [DispId(104)]
      set;
    }

    /// <summary><para><c>playCount</c> property of <c>IWMPSettings2</c> interface.  </para><para>Returns how many times media should play</para></summary>
    /// <remarks><para>An original IDL definition of <c>playCount</c> property was the following:  <c>long playCount</c>;</para></remarks>
    // Returns how many times media should play
    // IDL: long playCount;
    // VB6: playCount As Long
    int playCount
    {
      // IDL: HRESULT playCount ([out, retval] long* ReturnValue);
      // VB6: Function playCount As Long
      [DispId(105)]
      get;
      // IDL: HRESULT playCount (long value);
      // VB6: Sub playCount (ByVal value As Long)
      [DispId(105)]
      set;
    }

    /// <summary><para><c>rate</c> property of <c>IWMPSettings2</c> interface.  </para><para>Returns current playback rate</para></summary>
    /// <remarks><para>An original IDL definition of <c>rate</c> property was the following:  <c>double rate</c>;</para></remarks>
    // Returns current playback rate
    // IDL: double rate;
    // VB6: rate As Double
    double rate
    {
      // IDL: HRESULT rate ([out, retval] double* ReturnValue);
      // VB6: Function rate As Double
      [DispId(106)]
      get;
      // IDL: HRESULT rate (double value);
      // VB6: Sub rate (ByVal value As Double)
      [DispId(106)]
      set;
    }

    /// <summary><para><c>volume</c> property of <c>IWMPSettings2</c> interface.  </para><para>Returns current audio volume</para></summary>
    /// <remarks><para>An original IDL definition of <c>volume</c> property was the following:  <c>long volume</c>;</para></remarks>
    // Returns current audio volume
    // IDL: long volume;
    // VB6: volume As Long
    int volume
    {
      // IDL: HRESULT volume ([out, retval] long* ReturnValue);
      // VB6: Function volume As Long
      [DispId(107)]
      get;
      // IDL: HRESULT volume (long value);
      // VB6: Sub volume (ByVal value As Long)
      [DispId(107)]
      set;
    }
  }

  /// <summary><para><c>IWMPSkinList</c> interface.  </para><para>IWMPSkinlist: interface for skin object model.</para></summary>
  // IWMPSkinlist: interface for skin object model.
  [Guid("8CEA03A2-D0C5-4E97-9C38-A676A639A51D")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPSkinList
  {
    /// <summary><para><c>updateBasketColumns</c> method of <c>IWMPSkinList</c> interface.  </para><para>property basketVisible</para></summary>
    /// <remarks><para>An original IDL definition of <c>updateBasketColumns</c> method was the following:  <c>HRESULT updateBasketColumns (void)</c>;</para></remarks>
    // property basketVisible
    // IDL: HRESULT updateBasketColumns (void);
    // VB6: Sub updateBasketColumns
    [DispId(6050)]
    void updateBasketColumns ();

    /// <summary><para><c>highContrastChange</c> method of <c>IWMPSkinList</c> interface.  </para><para>property highContrastChange</para></summary>
    /// <remarks><para>An original IDL definition of <c>highContrastChange</c> method was the following:  <c>HRESULT highContrastChange (void)</c>;</para></remarks>
    // property highContrastChange
    // IDL: HRESULT highContrastChange (void);
    // VB6: Sub highContrastChange
    [DispId(6051)]
    void highContrastChange ();
  }

  /// <summary><para><c>IWMPSliderCtrl</c> interface.  </para><para>IWMPSliderCtrl: Public interface for skin object model.</para></summary>
  // IWMPSliderCtrl: Public interface for skin object model.
  [Guid("F2BF2C8F-405F-11D3-BB39-00A0C93CA73A")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPSliderCtrl
  {
    /// <summary><para><c>backgroundColor</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property backgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // property backgroundColor
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(5406)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundColor (BSTR value);
      // VB6: Sub backgroundColor (ByVal value As String)
      [DispId(5406)]
      set;
    }

    /// <summary><para><c>backgroundEndColor</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property backgroundEndColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundEndColor</c> property was the following:  <c>BSTR backgroundEndColor</c>;</para></remarks>
    // property backgroundEndColor
    // IDL: BSTR backgroundEndColor;
    // VB6: backgroundEndColor As String
    string backgroundEndColor
    {
      // IDL: HRESULT backgroundEndColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundEndColor As String
      [DispId(5407)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundEndColor (BSTR value);
      // VB6: Sub backgroundEndColor (ByVal value As String)
      [DispId(5407)]
      set;
    }

    /// <summary><para><c>backgroundHoverImage</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property backgroundHoverImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundHoverImage</c> property was the following:  <c>BSTR backgroundHoverImage</c>;</para></remarks>
    // property backgroundHoverImage
    // IDL: BSTR backgroundHoverImage;
    // VB6: backgroundHoverImage As String
    string backgroundHoverImage
    {
      // IDL: HRESULT backgroundHoverImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundHoverImage As String
      [DispId(5412)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundHoverImage (BSTR value);
      // VB6: Sub backgroundHoverImage (ByVal value As String)
      [DispId(5412)]
      set;
    }

    /// <summary><para><c>backgroundImage</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property backgroundImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundImage</c> property was the following:  <c>BSTR backgroundImage</c>;</para></remarks>
    // property backgroundImage
    // IDL: BSTR backgroundImage;
    // VB6: backgroundImage As String
    string backgroundImage
    {
      // IDL: HRESULT backgroundImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundImage As String
      [DispId(5411)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundImage (BSTR value);
      // VB6: Sub backgroundImage (ByVal value As String)
      [DispId(5411)]
      set;
    }

    /// <summary><para><c>borderSize</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property borderSize</para></summary>
    /// <remarks><para>An original IDL definition of <c>borderSize</c> property was the following:  <c>int borderSize</c>;</para></remarks>
    // property borderSize
    // IDL: int borderSize;
    // VB6: borderSize As Long
    int borderSize
    {
      // IDL: HRESULT borderSize ([out, retval] int* ReturnValue);
      // VB6: Function borderSize As Long
      [DispId(5423)]
      get;
      // IDL: HRESULT borderSize (int value);
      // VB6: Sub borderSize (ByVal value As Long)
      [DispId(5423)]
      set;
    }

    /// <summary><para><c>cursor</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property cursor</para></summary>
    /// <remarks><para>An original IDL definition of <c>cursor</c> property was the following:  <c>BSTR cursor</c>;</para></remarks>
    // property cursor
    // IDL: BSTR cursor;
    // VB6: cursor As String
    string cursor
    {
      // IDL: HRESULT cursor ([out, retval] BSTR* ReturnValue);
      // VB6: Function cursor As String
      [DispId(5422)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT cursor (BSTR value);
      // VB6: Sub cursor (ByVal value As String)
      [DispId(5422)]
      set;
    }

    /// <summary><para><c>direction</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property direction</para></summary>
    /// <remarks><para>An original IDL definition of <c>direction</c> property was the following:  <c>BSTR direction</c>;</para></remarks>
    // property direction
    // IDL: BSTR direction;
    // VB6: direction As String
    string direction
    {
      // IDL: HRESULT direction ([out, retval] BSTR* ReturnValue);
      // VB6: Function direction As String
      [DispId(5400)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT direction (BSTR value);
      // VB6: Sub direction (ByVal value As String)
      [DispId(5400)]
      set;
    }

    /// <summary><para><c>disabledColor</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property disabledColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>disabledColor</c> property was the following:  <c>BSTR disabledColor</c>;</para></remarks>
    // property disabledColor
    // IDL: BSTR disabledColor;
    // VB6: disabledColor As String
    string disabledColor
    {
      // IDL: HRESULT disabledColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function disabledColor As String
      [DispId(5408)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT disabledColor (BSTR value);
      // VB6: Sub disabledColor (ByVal value As String)
      [DispId(5408)]
      set;
    }

    /// <summary><para><c>disabledImage</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property disabledImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>disabledImage</c> property was the following:  <c>BSTR disabledImage</c>;</para></remarks>
    // property disabledImage
    // IDL: BSTR disabledImage;
    // VB6: disabledImage As String
    string disabledImage
    {
      // IDL: HRESULT disabledImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function disabledImage As String
      [DispId(5413)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT disabledImage (BSTR value);
      // VB6: Sub disabledImage (ByVal value As String)
      [DispId(5413)]
      set;
    }

    /// <summary><para><c>foregroundColor</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property foregroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>foregroundColor</c> property was the following:  <c>BSTR foregroundColor</c>;</para></remarks>
    // property foregroundColor
    // IDL: BSTR foregroundColor;
    // VB6: foregroundColor As String
    string foregroundColor
    {
      // IDL: HRESULT foregroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function foregroundColor As String
      [DispId(5404)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT foregroundColor (BSTR value);
      // VB6: Sub foregroundColor (ByVal value As String)
      [DispId(5404)]
      set;
    }

    /// <summary><para><c>foregroundEndColor</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property foregroundEndColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>foregroundEndColor</c> property was the following:  <c>BSTR foregroundEndColor</c>;</para></remarks>
    // property foregroundEndColor
    // IDL: BSTR foregroundEndColor;
    // VB6: foregroundEndColor As String
    string foregroundEndColor
    {
      // IDL: HRESULT foregroundEndColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function foregroundEndColor As String
      [DispId(5405)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT foregroundEndColor (BSTR value);
      // VB6: Sub foregroundEndColor (ByVal value As String)
      [DispId(5405)]
      set;
    }

    /// <summary><para><c>foregroundHoverImage</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property foregroundHoverImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>foregroundHoverImage</c> property was the following:  <c>BSTR foregroundHoverImage</c>;</para></remarks>
    // property foregroundHoverImage
    // IDL: BSTR foregroundHoverImage;
    // VB6: foregroundHoverImage As String
    string foregroundHoverImage
    {
      // IDL: HRESULT foregroundHoverImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function foregroundHoverImage As String
      [DispId(5424)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT foregroundHoverImage (BSTR value);
      // VB6: Sub foregroundHoverImage (ByVal value As String)
      [DispId(5424)]
      set;
    }

    /// <summary><para><c>foregroundImage</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property foregroundImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>foregroundImage</c> property was the following:  <c>BSTR foregroundImage</c>;</para></remarks>
    // property foregroundImage
    // IDL: BSTR foregroundImage;
    // VB6: foregroundImage As String
    string foregroundImage
    {
      // IDL: HRESULT foregroundImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function foregroundImage As String
      [DispId(5410)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT foregroundImage (BSTR value);
      // VB6: Sub foregroundImage (ByVal value As String)
      [DispId(5410)]
      set;
    }

    /// <summary><para><c>foregroundProgress</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property foregroundValue</para></summary>
    /// <remarks><para>An original IDL definition of <c>foregroundProgress</c> property was the following:  <c>float foregroundProgress</c>;</para></remarks>
    // property foregroundValue
    // IDL: float foregroundProgress;
    // VB6: foregroundProgress As Single
    float foregroundProgress
    {
      // IDL: HRESULT foregroundProgress ([out, retval] float* ReturnValue);
      // VB6: Function foregroundProgress As Single
      [DispId(5425)]
      get;
      // IDL: HRESULT foregroundProgress (float value);
      // VB6: Sub foregroundProgress (ByVal value As Single)
      [DispId(5425)]
      set;
    }

    /// <summary><para><c>max</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property max</para></summary>
    /// <remarks><para>An original IDL definition of <c>max</c> property was the following:  <c>float max</c>;</para></remarks>
    // property max
    // IDL: float max;
    // VB6: max As Single
    float max
    {
      // IDL: HRESULT max ([out, retval] float* ReturnValue);
      // VB6: Function max As Single
      [DispId(5419)]
      get;
      // IDL: HRESULT max (float value);
      // VB6: Sub max (ByVal value As Single)
      [DispId(5419)]
      set;
    }

    /// <summary><para><c>min</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property min</para></summary>
    /// <remarks><para>An original IDL definition of <c>min</c> property was the following:  <c>float min</c>;</para></remarks>
    // property min
    // IDL: float min;
    // VB6: min As Single
    float min
    {
      // IDL: HRESULT min ([out, retval] float* ReturnValue);
      // VB6: Function min As Single
      [DispId(5418)]
      get;
      // IDL: HRESULT min (float value);
      // VB6: Sub min (ByVal value As Single)
      [DispId(5418)]
      set;
    }

    /// <summary><para><c>slide</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property slide</para></summary>
    /// <remarks><para>An original IDL definition of <c>slide</c> property was the following:  <c>VARIANT_BOOL slide</c>;</para></remarks>
    // property slide
    // IDL: VARIANT_BOOL slide;
    // VB6: slide As Boolean
    bool slide
    {
      // IDL: HRESULT slide ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function slide As Boolean
      [DispId(5402)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT slide (VARIANT_BOOL value);
      // VB6: Sub slide (ByVal value As Boolean)
      [DispId(5402)]
      set;
    }

    /// <summary><para><c>thumbDisabledImage</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property thumbDisabledImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>thumbDisabledImage</c> property was the following:  <c>BSTR thumbDisabledImage</c>;</para></remarks>
    // property thumbDisabledImage
    // IDL: BSTR thumbDisabledImage;
    // VB6: thumbDisabledImage As String
    string thumbDisabledImage
    {
      // IDL: HRESULT thumbDisabledImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function thumbDisabledImage As String
      [DispId(5417)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT thumbDisabledImage (BSTR value);
      // VB6: Sub thumbDisabledImage (ByVal value As String)
      [DispId(5417)]
      set;
    }

    /// <summary><para><c>thumbDownImage</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property thumbDownImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>thumbDownImage</c> property was the following:  <c>BSTR thumbDownImage</c>;</para></remarks>
    // property thumbDownImage
    // IDL: BSTR thumbDownImage;
    // VB6: thumbDownImage As String
    string thumbDownImage
    {
      // IDL: HRESULT thumbDownImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function thumbDownImage As String
      [DispId(5416)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT thumbDownImage (BSTR value);
      // VB6: Sub thumbDownImage (ByVal value As String)
      [DispId(5416)]
      set;
    }

    /// <summary><para><c>thumbHoverImage</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property thumbHoverImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>thumbHoverImage</c> property was the following:  <c>BSTR thumbHoverImage</c>;</para></remarks>
    // property thumbHoverImage
    // IDL: BSTR thumbHoverImage;
    // VB6: thumbHoverImage As String
    string thumbHoverImage
    {
      // IDL: HRESULT thumbHoverImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function thumbHoverImage As String
      [DispId(5415)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT thumbHoverImage (BSTR value);
      // VB6: Sub thumbHoverImage (ByVal value As String)
      [DispId(5415)]
      set;
    }

    /// <summary><para><c>thumbImage</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property thumbImage</para></summary>
    /// <remarks><para>An original IDL definition of <c>thumbImage</c> property was the following:  <c>BSTR thumbImage</c>;</para></remarks>
    // property thumbImage
    // IDL: BSTR thumbImage;
    // VB6: thumbImage As String
    string thumbImage
    {
      // IDL: HRESULT thumbImage ([out, retval] BSTR* ReturnValue);
      // VB6: Function thumbImage As String
      [DispId(5414)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT thumbImage (BSTR value);
      // VB6: Sub thumbImage (ByVal value As String)
      [DispId(5414)]
      set;
    }

    /// <summary><para><c>tiled</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property tiled</para></summary>
    /// <remarks><para>An original IDL definition of <c>tiled</c> property was the following:  <c>VARIANT_BOOL tiled</c>;</para></remarks>
    // property tiled
    // IDL: VARIANT_BOOL tiled;
    // VB6: tiled As Boolean
    bool tiled
    {
      // IDL: HRESULT tiled ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function tiled As Boolean
      [DispId(5403)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT tiled (VARIANT_BOOL value);
      // VB6: Sub tiled (ByVal value As Boolean)
      [DispId(5403)]
      set;
    }

    /// <summary><para><c>toolTip</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property toolTip</para></summary>
    /// <remarks><para>An original IDL definition of <c>toolTip</c> property was the following:  <c>BSTR toolTip</c>;</para></remarks>
    // property toolTip
    // IDL: BSTR toolTip;
    // VB6: toolTip As String
    string toolTip
    {
      // IDL: HRESULT toolTip ([out, retval] BSTR* ReturnValue);
      // VB6: Function toolTip As String
      [DispId(5421)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT toolTip (BSTR value);
      // VB6: Sub toolTip (ByVal value As String)
      [DispId(5421)]
      set;
    }

    /// <summary><para><c>transparencyColor</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property transparencyColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>transparencyColor</c> property was the following:  <c>BSTR transparencyColor</c>;</para></remarks>
    // property transparencyColor
    // IDL: BSTR transparencyColor;
    // VB6: transparencyColor As String
    string transparencyColor
    {
      // IDL: HRESULT transparencyColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function transparencyColor As String
      [DispId(5409)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT transparencyColor (BSTR value);
      // VB6: Sub transparencyColor (ByVal value As String)
      [DispId(5409)]
      set;
    }

    /// <summary><para><c>useForegroundProgress</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property useForegroundValue</para></summary>
    /// <remarks><para>An original IDL definition of <c>useForegroundProgress</c> property was the following:  <c>VARIANT_BOOL useForegroundProgress</c>;</para></remarks>
    // property useForegroundValue
    // IDL: VARIANT_BOOL useForegroundProgress;
    // VB6: useForegroundProgress As Boolean
    bool useForegroundProgress
    {
      // IDL: HRESULT useForegroundProgress ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function useForegroundProgress As Boolean
      [DispId(5426)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT useForegroundProgress (VARIANT_BOOL value);
      // VB6: Sub useForegroundProgress (ByVal value As Boolean)
      [DispId(5426)]
      set;
    }

    /// <summary><para><c>value</c> property of <c>IWMPSliderCtrl</c> interface.  </para><para>property value</para></summary>
    /// <remarks><para>An original IDL definition of <c>value</c> property was the following:  <c>float value</c>;</para></remarks>
    // property value
    // IDL: float value;
    // VB6: value As Single
    float value
    {
      // IDL: HRESULT value ([out, retval] float* ReturnValue);
      // VB6: Function value As Single
      [DispId(5420)]
      get;
      // IDL: HRESULT value (float value);
      // VB6: Sub value (ByVal value As Single)
      [DispId(5420)]
      set;
    }
  }

  /// <summary><para><c>IWMPSliderCtrlEvents</c> interface.  </para><para>IWMPSliderCtrlEvents: Public interface for skin object model.</para></summary>
  // IWMPSliderCtrlEvents: Public interface for skin object model.
  [Guid("CDAC14D2-8BE4-11D3-BB48-00A0C93CA73A")]
  [ComImport]
  [TypeLibType((short)4096)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPSliderCtrlEvents
  {
    /// <summary><para><c>ondragbegin</c> method of <c>IWMPSliderCtrlEvents</c> interface.  </para><para>event ondragbegin</para></summary>
    /// <remarks><para>An original IDL definition of <c>ondragbegin</c> method was the following:  <c>HRESULT ondragbegin (void)</c>;</para></remarks>
    // event ondragbegin
    // IDL: HRESULT ondragbegin (void);
    // VB6: Sub ondragbegin
    [DispId(5430)]
    void ondragbegin ();

    /// <summary><para><c>ondragend</c> method of <c>IWMPSliderCtrlEvents</c> interface.  </para><para>event ondragend</para></summary>
    /// <remarks><para>An original IDL definition of <c>ondragend</c> method was the following:  <c>HRESULT ondragend (void)</c>;</para></remarks>
    // event ondragend
    // IDL: HRESULT ondragend (void);
    // VB6: Sub ondragend
    [DispId(5431)]
    void ondragend ();

    /// <summary><para><c>onpositionchange</c> method of <c>IWMPSliderCtrlEvents</c> interface.  </para><para>event onpositionchange</para></summary>
    /// <remarks><para>An original IDL definition of <c>onpositionchange</c> method was the following:  <c>HRESULT onpositionchange (void)</c>;</para></remarks>
    // event onpositionchange
    // IDL: HRESULT onpositionchange (void);
    // VB6: Sub onpositionchange
    [DispId(5432)]
    void onpositionchange ();
  }

  /// <summary><para>Delegate for handling <c>ondragbegin</c> event of <c>IWMPSliderCtrlEvents</c> interface.  </para><para>event ondragbegin</para></summary>
  /// <remarks><para>An original IDL definition of <c>ondragbegin</c> event was the following:  <c>HRESULT IWMPSliderCtrlEvents_ondragbeginEventHandler (void)</c>;</para></remarks>
  // event ondragbegin
  // IDL: HRESULT IWMPSliderCtrlEvents_ondragbeginEventHandler (void);
  // VB6: Sub IWMPSliderCtrlEvents_ondragbeginEventHandler
  public delegate void IWMPSliderCtrlEvents_ondragbeginEventHandler ();

  /// <summary><para>Delegate for handling <c>ondragend</c> event of <c>IWMPSliderCtrlEvents</c> interface.  </para><para>event ondragend</para></summary>
  /// <remarks><para>An original IDL definition of <c>ondragend</c> event was the following:  <c>HRESULT IWMPSliderCtrlEvents_ondragendEventHandler (void)</c>;</para></remarks>
  // event ondragend
  // IDL: HRESULT IWMPSliderCtrlEvents_ondragendEventHandler (void);
  // VB6: Sub IWMPSliderCtrlEvents_ondragendEventHandler
  public delegate void IWMPSliderCtrlEvents_ondragendEventHandler ();

  /// <summary><para>Delegate for handling <c>onpositionchange</c> event of <c>IWMPSliderCtrlEvents</c> interface.  </para><para>event onpositionchange</para></summary>
  /// <remarks><para>An original IDL definition of <c>onpositionchange</c> event was the following:  <c>HRESULT IWMPSliderCtrlEvents_onpositionchangeEventHandler (void)</c>;</para></remarks>
  // event onpositionchange
  // IDL: HRESULT IWMPSliderCtrlEvents_onpositionchangeEventHandler (void);
  // VB6: Sub IWMPSliderCtrlEvents_onpositionchangeEventHandler
  public delegate void IWMPSliderCtrlEvents_onpositionchangeEventHandler ();

  /// <summary><para>Declaration of events of <c>IWMPSliderCtrlEvents</c> source interface.  </para><para>IWMPSliderCtrlEvents: Public interface for skin object model.</para></summary>
  // IWMPSliderCtrlEvents: Public interface for skin object model.
  [ComEventInterface(typeof(IWMPSliderCtrlEvents),typeof(IWMPSliderCtrlEvents_EventProvider))]
  [ComVisible(false)]
  public interface IWMPSliderCtrlEvents_Event
  {
    /// <summary><para><c>ondragbegin</c> event of <c>IWMPSliderCtrlEvents</c> interface.  </para><para>event ondragbegin</para></summary>
    event IWMPSliderCtrlEvents_ondragbeginEventHandler ondragbegin;

    /// <summary><para><c>ondragend</c> event of <c>IWMPSliderCtrlEvents</c> interface.  </para><para>event ondragend</para></summary>
    event IWMPSliderCtrlEvents_ondragendEventHandler ondragend;

    /// <summary><para><c>onpositionchange</c> event of <c>IWMPSliderCtrlEvents</c> interface.  </para><para>event onpositionchange</para></summary>
    event IWMPSliderCtrlEvents_onpositionchangeEventHandler onpositionchange;
  }

  [ClassInterface(ClassInterfaceType.None)]
  internal class IWMPSliderCtrlEvents_SinkHelper: IWMPSliderCtrlEvents
  {
    public int Cookie = 0;

    public event IWMPSliderCtrlEvents_ondragbeginEventHandler ondragbeginDelegate = null;
    public void Set_ondragbeginDelegate(IWMPSliderCtrlEvents_ondragbeginEventHandler deleg)
    {
      ondragbeginDelegate = deleg;
    }
    public bool Is_ondragbeginDelegate(IWMPSliderCtrlEvents_ondragbeginEventHandler deleg)
    {
      return (ondragbeginDelegate == deleg);
    }
    public void Clear_ondragbeginDelegate()
    {
      ondragbeginDelegate = null;
    }
    void IWMPSliderCtrlEvents.ondragbegin ()
    {
      if (ondragbeginDelegate!=null)
        ondragbeginDelegate();
    }

    public event IWMPSliderCtrlEvents_ondragendEventHandler ondragendDelegate = null;
    public void Set_ondragendDelegate(IWMPSliderCtrlEvents_ondragendEventHandler deleg)
    {
      ondragendDelegate = deleg;
    }
    public bool Is_ondragendDelegate(IWMPSliderCtrlEvents_ondragendEventHandler deleg)
    {
      return (ondragendDelegate == deleg);
    }
    public void Clear_ondragendDelegate()
    {
      ondragendDelegate = null;
    }
    void IWMPSliderCtrlEvents.ondragend ()
    {
      if (ondragendDelegate!=null)
        ondragendDelegate();
    }

    public event IWMPSliderCtrlEvents_onpositionchangeEventHandler onpositionchangeDelegate = null;
    public void Set_onpositionchangeDelegate(IWMPSliderCtrlEvents_onpositionchangeEventHandler deleg)
    {
      onpositionchangeDelegate = deleg;
    }
    public bool Is_onpositionchangeDelegate(IWMPSliderCtrlEvents_onpositionchangeEventHandler deleg)
    {
      return (onpositionchangeDelegate == deleg);
    }
    public void Clear_onpositionchangeDelegate()
    {
      onpositionchangeDelegate = null;
    }
    void IWMPSliderCtrlEvents.onpositionchange ()
    {
      if (onpositionchangeDelegate!=null)
        onpositionchangeDelegate();
    }
  }

  internal class IWMPSliderCtrlEvents_EventProvider: IDisposable, IWMPSliderCtrlEvents_Event
  {
    UCOMIConnectionPointContainer ConnectionPointContainer;
    UCOMIConnectionPoint ConnectionPoint;
    IWMPSliderCtrlEvents_SinkHelper EventSinkHelper;
    int ConnectionCount;

    // Constructor: remember ConnectionPointContainer
    IWMPSliderCtrlEvents_EventProvider(object CPContainer) : base()
    {
      ConnectionPointContainer = (UCOMIConnectionPointContainer)CPContainer;
    }

    // Force disconnection from ActiveX event source
    ~IWMPSliderCtrlEvents_EventProvider()
    {
      Disconnect();
      ConnectionPointContainer = null;
    }

    // Aletnative to destructor
    void IDisposable.Dispose()
    {
      Disconnect();
      ConnectionPointContainer = null;
      System.GC.SuppressFinalize(this);
    }

    // Connect to ActiveX event source
    void Connect()
    {
      if (ConnectionPoint == null)
      {
        ConnectionCount = 0;
        Guid g = new Guid("CDAC14D2-8BE4-11D3-BB48-00A0C93CA73A");
        ConnectionPointContainer.FindConnectionPoint(ref g, out ConnectionPoint);
        EventSinkHelper = new IWMPSliderCtrlEvents_SinkHelper();
        ConnectionPoint.Advise(EventSinkHelper, out EventSinkHelper.Cookie);
      }
    }

    // Disconnect from ActiveX event source
    void Disconnect()
    {
      System.Threading.Monitor.Enter(this);
      try {
        if (EventSinkHelper != null)
          ConnectionPoint.Unadvise(EventSinkHelper.Cookie);
        ConnectionPoint = null;
        EventSinkHelper = null;
      } catch { }
      System.Threading.Monitor.Exit(this);
    }

    // If no event handler present then disconnect from ActiveX event source
    void CheckDisconnect()
    {
      ConnectionCount--;
      if (ConnectionCount <= 0)
        Disconnect();
    }

    event IWMPSliderCtrlEvents_ondragbeginEventHandler IWMPSliderCtrlEvents_Event.ondragbegin
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ondragbeginDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ondragbeginDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPSliderCtrlEvents_ondragendEventHandler IWMPSliderCtrlEvents_Event.ondragend
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.ondragendDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.ondragendDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPSliderCtrlEvents_onpositionchangeEventHandler IWMPSliderCtrlEvents_Event.onpositionchange
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onpositionchangeDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onpositionchangeDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }
  }

  /// <summary><para><c>IWMPStringCollection</c> interface.  </para><para>IWMPStringCollection: Public interface.</para></summary>
  // IWMPStringCollection: Public interface.
  [Guid("4A976298-8C0D-11D3-B389-00C04F68574B")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPStringCollection
  {
    /// <summary><para><c>Item</c> method of <c>IWMPStringCollection</c> interface.  </para><para>Returns the string at the given index</para></summary>
    /// <remarks><para>An original IDL definition of <c>Item</c> method was the following:  <c>HRESULT Item (long lIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the string at the given index
    // IDL: HRESULT Item (long lIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function Item (ByVal lIndex As Long) As String
    [DispId(402)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string Item (int lIndex);

    /// <summary><para><c>count</c> property of <c>IWMPStringCollection</c> interface.  </para><para>Returns the number of items in the string collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>count</c> property was the following:  <c>long count</c>;</para></remarks>
    // Returns the number of items in the string collection
    // IDL: long count;
    // VB6: count As Long
    int count
    {
      // IDL: HRESULT count ([out, retval] long* ReturnValue);
      // VB6: Function count As Long
      [DispId(401)]
      get;
    }
  }

  /// <summary><para><c>IWMPStringCollection2</c> interface.  </para><para>IWMPStringCollection2: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPStringCollection2: Public interface for Windows Media Player SDK.
  [Guid("46AD648D-53F1-4A74-92E2-2A1B68D63FD4")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPStringCollection2
  {
    /// <summary><para><c>Item</c> method of <c>IWMPStringCollection2</c> interface.  </para><para>Returns the string at the given index</para></summary>
    /// <remarks><para>An original IDL definition of <c>Item</c> method was the following:  <c>HRESULT Item (long lIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Returns the string at the given index
    // IDL: HRESULT Item (long lIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function Item (ByVal lIndex As Long) As String
    [DispId(402)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string Item (int lIndex);

    /// <summary><para><c>isIdentical</c> method of <c>IWMPStringCollection2</c> interface.  </para><para>Determines if the supplied object is the same as this one</para></summary>
    /// <remarks><para>An original IDL definition of <c>isIdentical</c> method was the following:  <c>HRESULT isIdentical (IWMPStringCollection2* pIWMPStringCollection2, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // Determines if the supplied object is the same as this one
    // IDL: HRESULT isIdentical (IWMPStringCollection2* pIWMPStringCollection2, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isIdentical (ByVal pIWMPStringCollection2 As IWMPStringCollection2) As Boolean
    [DispId(1451)]
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isIdentical (IWMPStringCollection2 pIWMPStringCollection2);

    /// <summary><para><c>getItemInfo</c> method of <c>IWMPStringCollection2</c> interface.  </para><para>Gets an attribute from a string collection backing object</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfo</c> method was the following:  <c>HRESULT getItemInfo (long lCollectionIndex, BSTR bstrItemName, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // Gets an attribute from a string collection backing object
    // IDL: HRESULT getItemInfo (long lCollectionIndex, BSTR bstrItemName, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfo (ByVal lCollectionIndex As Long, ByVal bstrItemName As String) As String
    [DispId(1452)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfo (int lCollectionIndex, [MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>getAttributeCountByType</c> method of <c>IWMPStringCollection2</c> interface.  </para><para>Gets count of values for a particular attribute</para></summary>
    /// <remarks><para>An original IDL definition of <c>getAttributeCountByType</c> method was the following:  <c>HRESULT getAttributeCountByType (long lCollectionIndex, BSTR bstrType, BSTR bstrLanguage, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // Gets count of values for a particular attribute
    // IDL: HRESULT getAttributeCountByType (long lCollectionIndex, BSTR bstrType, BSTR bstrLanguage, [out, retval] long* ReturnValue);
    // VB6: Function getAttributeCountByType (ByVal lCollectionIndex As Long, ByVal bstrType As String, ByVal bstrLanguage As String) As Long
    [DispId(1453)]
    int getAttributeCountByType (int lCollectionIndex, [MarshalAs(UnmanagedType.BStr)] string bstrType, [MarshalAs(UnmanagedType.BStr)] string bstrLanguage);

    /// <summary><para><c>getItemInfoByType</c> method of <c>IWMPStringCollection2</c> interface.  </para><para>Gets one value of an attribute from a string collection backing object</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfoByType</c> method was the following:  <c>HRESULT getItemInfoByType (long lCollectionIndex, BSTR bstrType, BSTR bstrLanguage, long lAttributeIndex, [out, retval] VARIANT* ReturnValue)</c>;</para></remarks>
    // Gets one value of an attribute from a string collection backing object
    // IDL: HRESULT getItemInfoByType (long lCollectionIndex, BSTR bstrType, BSTR bstrLanguage, long lAttributeIndex, [out, retval] VARIANT* ReturnValue);
    // VB6: Function getItemInfoByType (ByVal lCollectionIndex As Long, ByVal bstrType As String, ByVal bstrLanguage As String, ByVal lAttributeIndex As Long) As Any
    [DispId(1454)]
    object getItemInfoByType (int lCollectionIndex, [MarshalAs(UnmanagedType.BStr)] string bstrType, [MarshalAs(UnmanagedType.BStr)] string bstrLanguage, int lAttributeIndex);

    /// <summary><para><c>count</c> property of <c>IWMPStringCollection2</c> interface.  </para><para>Returns the number of items in the string collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>count</c> property was the following:  <c>long count</c>;</para></remarks>
    // Returns the number of items in the string collection
    // IDL: long count;
    // VB6: count As Long
    int count
    {
      // IDL: HRESULT count ([out, retval] long* ReturnValue);
      // VB6: Function count As Long
      [DispId(401)]
      get;
    }
  }

  /// <summary><para><c>IWMPSubscriptionServiceExternal</c> interface.  </para><para>IWMPSubscriptionServiceExternal: Public interface for scripting object model.</para></summary>
  // IWMPSubscriptionServiceExternal: Public interface for scripting object model.
  [Guid("2E922378-EE70-4CEB-BBAB-CE7CE4A04816")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPSubscriptionServiceExternal
  {
    /// <summary><para><c>NavigateTaskPaneURL</c> method of <c>IWMPSubscriptionServiceExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>NavigateTaskPaneURL</c> method was the following:  <c>HRESULT NavigateTaskPaneURL (BSTR bstrKeyName, BSTR bstrTaskPane, BSTR bstrParams)</c>;</para></remarks>
    // IDL: HRESULT NavigateTaskPaneURL (BSTR bstrKeyName, BSTR bstrTaskPane, BSTR bstrParams);
    // VB6: Sub NavigateTaskPaneURL (ByVal bstrKeyName As String, ByVal bstrTaskPane As String, ByVal bstrParams As String)
    [DispId(10026)]
    void NavigateTaskPaneURL ([MarshalAs(UnmanagedType.BStr)] string bstrKeyName, [MarshalAs(UnmanagedType.BStr)] string bstrTaskPane, [MarshalAs(UnmanagedType.BStr)] string bstrParams);

    /// <summary><para><c>appColorButtonHighlight</c> property of <c>IWMPSubscriptionServiceExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHighlight</c> property was the following:  <c>BSTR appColorButtonHighlight</c>;</para></remarks>
    // IDL: BSTR appColorButtonHighlight;
    // VB6: appColorButtonHighlight As String
    string appColorButtonHighlight
    {
      // IDL: HRESULT appColorButtonHighlight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHighlight As String
      [DispId(10015)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonHoverFace</c> property of <c>IWMPSubscriptionServiceExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHoverFace</c> property was the following:  <c>BSTR appColorButtonHoverFace</c>;</para></remarks>
    // IDL: BSTR appColorButtonHoverFace;
    // VB6: appColorButtonHoverFace As String
    string appColorButtonHoverFace
    {
      // IDL: HRESULT appColorButtonHoverFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHoverFace As String
      [DispId(10017)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonShadow</c> property of <c>IWMPSubscriptionServiceExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonShadow</c> property was the following:  <c>BSTR appColorButtonShadow</c>;</para></remarks>
    // IDL: BSTR appColorButtonShadow;
    // VB6: appColorButtonShadow As String
    string appColorButtonShadow
    {
      // IDL: HRESULT appColorButtonShadow ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonShadow As String
      [DispId(10016)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorDark</c> property of <c>IWMPSubscriptionServiceExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorDark</c> property was the following:  <c>BSTR appColorDark</c>;</para></remarks>
    // IDL: BSTR appColorDark;
    // VB6: appColorDark As String
    string appColorDark
    {
      // IDL: HRESULT appColorDark ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorDark As String
      [DispId(10014)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorLight</c> property of <c>IWMPSubscriptionServiceExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorLight</c> property was the following:  <c>BSTR appColorLight</c>;</para></remarks>
    // IDL: BSTR appColorLight;
    // VB6: appColorLight As String
    string appColorLight
    {
      // IDL: HRESULT appColorLight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorLight As String
      [DispId(10012)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorMedium</c> property of <c>IWMPSubscriptionServiceExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorMedium</c> property was the following:  <c>BSTR appColorMedium</c>;</para></remarks>
    // IDL: BSTR appColorMedium;
    // VB6: appColorMedium As String
    string appColorMedium
    {
      // IDL: HRESULT appColorMedium ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorMedium As String
      [DispId(10013)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>DownloadManager</c> property of <c>IWMPSubscriptionServiceExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>DownloadManager</c> property was the following:  <c>IWMPDownloadManager* DownloadManager</c>;</para></remarks>
    // IDL: IWMPDownloadManager* DownloadManager;
    // VB6: DownloadManager As IWMPDownloadManager
    IWMPDownloadManager DownloadManager
    {
      // IDL: HRESULT DownloadManager ([out, retval] IWMPDownloadManager** ReturnValue);
      // VB6: Function DownloadManager As IWMPDownloadManager
      [DispId(10009)]
      get;
    }

    /// <summary><para><c>OnColorChange</c> property of <c>IWMPSubscriptionServiceExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnColorChange</c> property was the following:  <c>IDispatch OnColorChange</c>;</para></remarks>
    // IDL: IDispatch OnColorChange;
    // VB6: OnColorChange As IDispatch
    object OnColorChange
    {
      // IDL: HRESULT OnColorChange (IDispatch* value);
      // VB6: Sub OnColorChange (ByVal value As IDispatch)
      [DispId(10018)]
      set;
    }

    /// <summary><para><c>SelectedTaskPane</c> property of <c>IWMPSubscriptionServiceExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>SelectedTaskPane</c> property was the following:  <c>BSTR SelectedTaskPane</c>;</para></remarks>
    // IDL: BSTR SelectedTaskPane;
    // VB6: SelectedTaskPane As String
    string SelectedTaskPane
    {
      // IDL: HRESULT SelectedTaskPane ([out, retval] BSTR* ReturnValue);
      // VB6: Function SelectedTaskPane As String
      [DispId(10027)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT SelectedTaskPane (BSTR value);
      // VB6: Sub SelectedTaskPane (ByVal value As String)
      [DispId(10027)]
      set;
    }

    /// <summary><para><c>version</c> property of <c>IWMPSubscriptionServiceExternal</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>version</c> property was the following:  <c>BSTR version</c>;</para></remarks>
    // IDL: BSTR version;
    // VB6: version As String
    string version
    {
      // IDL: HRESULT version ([out, retval] BSTR* ReturnValue);
      // VB6: Function version As String
      [DispId(10005)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPSubscriptionServiceLimited</c> interface.  </para><para>IWMPSubscriptionServiceLimited: Public interface for scripting object model.</para></summary>
  // IWMPSubscriptionServiceLimited: Public interface for scripting object model.
  [Guid("54DF358E-CF38-4010-99F1-F44B0E9000E5")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPSubscriptionServiceLimited
  {
    /// <summary><para><c>NavigateTaskPaneURL</c> method of <c>IWMPSubscriptionServiceLimited</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>NavigateTaskPaneURL</c> method was the following:  <c>HRESULT NavigateTaskPaneURL (BSTR bstrKeyName, BSTR bstrTaskPane, BSTR bstrParams)</c>;</para></remarks>
    // IDL: HRESULT NavigateTaskPaneURL (BSTR bstrKeyName, BSTR bstrTaskPane, BSTR bstrParams);
    // VB6: Sub NavigateTaskPaneURL (ByVal bstrKeyName As String, ByVal bstrTaskPane As String, ByVal bstrParams As String)
    [DispId(10026)]
    void NavigateTaskPaneURL ([MarshalAs(UnmanagedType.BStr)] string bstrKeyName, [MarshalAs(UnmanagedType.BStr)] string bstrTaskPane, [MarshalAs(UnmanagedType.BStr)] string bstrParams);

    /// <summary><para><c>appColorButtonHighlight</c> property of <c>IWMPSubscriptionServiceLimited</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHighlight</c> property was the following:  <c>BSTR appColorButtonHighlight</c>;</para></remarks>
    // IDL: BSTR appColorButtonHighlight;
    // VB6: appColorButtonHighlight As String
    string appColorButtonHighlight
    {
      // IDL: HRESULT appColorButtonHighlight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHighlight As String
      [DispId(10015)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonHoverFace</c> property of <c>IWMPSubscriptionServiceLimited</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHoverFace</c> property was the following:  <c>BSTR appColorButtonHoverFace</c>;</para></remarks>
    // IDL: BSTR appColorButtonHoverFace;
    // VB6: appColorButtonHoverFace As String
    string appColorButtonHoverFace
    {
      // IDL: HRESULT appColorButtonHoverFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHoverFace As String
      [DispId(10017)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonShadow</c> property of <c>IWMPSubscriptionServiceLimited</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonShadow</c> property was the following:  <c>BSTR appColorButtonShadow</c>;</para></remarks>
    // IDL: BSTR appColorButtonShadow;
    // VB6: appColorButtonShadow As String
    string appColorButtonShadow
    {
      // IDL: HRESULT appColorButtonShadow ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonShadow As String
      [DispId(10016)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorDark</c> property of <c>IWMPSubscriptionServiceLimited</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorDark</c> property was the following:  <c>BSTR appColorDark</c>;</para></remarks>
    // IDL: BSTR appColorDark;
    // VB6: appColorDark As String
    string appColorDark
    {
      // IDL: HRESULT appColorDark ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorDark As String
      [DispId(10014)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorLight</c> property of <c>IWMPSubscriptionServiceLimited</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorLight</c> property was the following:  <c>BSTR appColorLight</c>;</para></remarks>
    // IDL: BSTR appColorLight;
    // VB6: appColorLight As String
    string appColorLight
    {
      // IDL: HRESULT appColorLight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorLight As String
      [DispId(10012)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorMedium</c> property of <c>IWMPSubscriptionServiceLimited</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorMedium</c> property was the following:  <c>BSTR appColorMedium</c>;</para></remarks>
    // IDL: BSTR appColorMedium;
    // VB6: appColorMedium As String
    string appColorMedium
    {
      // IDL: HRESULT appColorMedium ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorMedium As String
      [DispId(10013)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>OnColorChange</c> property of <c>IWMPSubscriptionServiceLimited</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnColorChange</c> property was the following:  <c>IDispatch OnColorChange</c>;</para></remarks>
    // IDL: IDispatch OnColorChange;
    // VB6: OnColorChange As IDispatch
    object OnColorChange
    {
      // IDL: HRESULT OnColorChange (IDispatch* value);
      // VB6: Sub OnColorChange (ByVal value As IDispatch)
      [DispId(10018)]
      set;
    }

    /// <summary><para><c>SelectedTaskPane</c> property of <c>IWMPSubscriptionServiceLimited</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>SelectedTaskPane</c> property was the following:  <c>BSTR SelectedTaskPane</c>;</para></remarks>
    // IDL: BSTR SelectedTaskPane;
    // VB6: SelectedTaskPane As String
    string SelectedTaskPane
    {
      // IDL: HRESULT SelectedTaskPane ([out, retval] BSTR* ReturnValue);
      // VB6: Function SelectedTaskPane As String
      [DispId(10027)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT SelectedTaskPane (BSTR value);
      // VB6: Sub SelectedTaskPane (ByVal value As String)
      [DispId(10027)]
      set;
    }

    /// <summary><para><c>version</c> property of <c>IWMPSubscriptionServiceLimited</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>version</c> property was the following:  <c>BSTR version</c>;</para></remarks>
    // IDL: BSTR version;
    // VB6: version As String
    string version
    {
      // IDL: HRESULT version ([out, retval] BSTR* ReturnValue);
      // VB6: Function version As String
      [DispId(10005)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPSubscriptionServicePlayMedia</c> interface.  </para><para>IWMPSubscriptionServicePlayMedia: Public interface for scripting object model.</para></summary>
  // IWMPSubscriptionServicePlayMedia: Public interface for scripting object model.
  [Guid("5F0248C1-62B3-42D7-B927-029119E6AD14")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPSubscriptionServicePlayMedia
  {
    /// <summary><para><c>NavigateTaskPaneURL</c> method of <c>IWMPSubscriptionServicePlayMedia</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>NavigateTaskPaneURL</c> method was the following:  <c>HRESULT NavigateTaskPaneURL (BSTR bstrKeyName, BSTR bstrTaskPane, BSTR bstrParams)</c>;</para></remarks>
    // IDL: HRESULT NavigateTaskPaneURL (BSTR bstrKeyName, BSTR bstrTaskPane, BSTR bstrParams);
    // VB6: Sub NavigateTaskPaneURL (ByVal bstrKeyName As String, ByVal bstrTaskPane As String, ByVal bstrParams As String)
    [DispId(10026)]
    void NavigateTaskPaneURL ([MarshalAs(UnmanagedType.BStr)] string bstrKeyName, [MarshalAs(UnmanagedType.BStr)] string bstrTaskPane, [MarshalAs(UnmanagedType.BStr)] string bstrParams);

    /// <summary><para><c>playMedia</c> method of <c>IWMPSubscriptionServicePlayMedia</c> interface.  </para><para>method playMedia</para></summary>
    /// <remarks><para>An original IDL definition of <c>playMedia</c> method was the following:  <c>HRESULT playMedia (BSTR bstrURL)</c>;</para></remarks>
    // method playMedia
    // IDL: HRESULT playMedia (BSTR bstrURL);
    // VB6: Sub playMedia (ByVal bstrURL As String)
    [DispId(10004)]
    void playMedia ([MarshalAs(UnmanagedType.BStr)] string bstrURL);

    /// <summary><para><c>appColorButtonHighlight</c> property of <c>IWMPSubscriptionServicePlayMedia</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHighlight</c> property was the following:  <c>BSTR appColorButtonHighlight</c>;</para></remarks>
    // IDL: BSTR appColorButtonHighlight;
    // VB6: appColorButtonHighlight As String
    string appColorButtonHighlight
    {
      // IDL: HRESULT appColorButtonHighlight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHighlight As String
      [DispId(10015)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonHoverFace</c> property of <c>IWMPSubscriptionServicePlayMedia</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonHoverFace</c> property was the following:  <c>BSTR appColorButtonHoverFace</c>;</para></remarks>
    // IDL: BSTR appColorButtonHoverFace;
    // VB6: appColorButtonHoverFace As String
    string appColorButtonHoverFace
    {
      // IDL: HRESULT appColorButtonHoverFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonHoverFace As String
      [DispId(10017)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorButtonShadow</c> property of <c>IWMPSubscriptionServicePlayMedia</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorButtonShadow</c> property was the following:  <c>BSTR appColorButtonShadow</c>;</para></remarks>
    // IDL: BSTR appColorButtonShadow;
    // VB6: appColorButtonShadow As String
    string appColorButtonShadow
    {
      // IDL: HRESULT appColorButtonShadow ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorButtonShadow As String
      [DispId(10016)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorDark</c> property of <c>IWMPSubscriptionServicePlayMedia</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorDark</c> property was the following:  <c>BSTR appColorDark</c>;</para></remarks>
    // IDL: BSTR appColorDark;
    // VB6: appColorDark As String
    string appColorDark
    {
      // IDL: HRESULT appColorDark ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorDark As String
      [DispId(10014)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorLight</c> property of <c>IWMPSubscriptionServicePlayMedia</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorLight</c> property was the following:  <c>BSTR appColorLight</c>;</para></remarks>
    // IDL: BSTR appColorLight;
    // VB6: appColorLight As String
    string appColorLight
    {
      // IDL: HRESULT appColorLight ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorLight As String
      [DispId(10012)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>appColorMedium</c> property of <c>IWMPSubscriptionServicePlayMedia</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>appColorMedium</c> property was the following:  <c>BSTR appColorMedium</c>;</para></remarks>
    // IDL: BSTR appColorMedium;
    // VB6: appColorMedium As String
    string appColorMedium
    {
      // IDL: HRESULT appColorMedium ([out, retval] BSTR* ReturnValue);
      // VB6: Function appColorMedium As String
      [DispId(10013)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>OnColorChange</c> property of <c>IWMPSubscriptionServicePlayMedia</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>OnColorChange</c> property was the following:  <c>IDispatch OnColorChange</c>;</para></remarks>
    // IDL: IDispatch OnColorChange;
    // VB6: OnColorChange As IDispatch
    object OnColorChange
    {
      // IDL: HRESULT OnColorChange (IDispatch* value);
      // VB6: Sub OnColorChange (ByVal value As IDispatch)
      [DispId(10018)]
      set;
    }

    /// <summary><para><c>SelectedTaskPane</c> property of <c>IWMPSubscriptionServicePlayMedia</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>SelectedTaskPane</c> property was the following:  <c>BSTR SelectedTaskPane</c>;</para></remarks>
    // IDL: BSTR SelectedTaskPane;
    // VB6: SelectedTaskPane As String
    string SelectedTaskPane
    {
      // IDL: HRESULT SelectedTaskPane ([out, retval] BSTR* ReturnValue);
      // VB6: Function SelectedTaskPane As String
      [DispId(10027)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT SelectedTaskPane (BSTR value);
      // VB6: Sub SelectedTaskPane (ByVal value As String)
      [DispId(10027)]
      set;
    }

    /// <summary><para><c>version</c> property of <c>IWMPSubscriptionServicePlayMedia</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>version</c> property was the following:  <c>BSTR version</c>;</para></remarks>
    // IDL: BSTR version;
    // VB6: version As String
    string version
    {
      // IDL: HRESULT version ([out, retval] BSTR* ReturnValue);
      // VB6: Function version As String
      [DispId(10005)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }
  }

  /// <summary><para><c>IWMPTextCtrl</c> interface.  </para><para>IWMPTextCtrl: Public interface for skin object model.</para></summary>
  // IWMPTextCtrl: Public interface for skin object model.
  [Guid("237DAC8E-0E32-11D3-A2E2-00C04F79F88E")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPTextCtrl
  {
    /// <summary><para><c>backgroundColor</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property backgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // property backgroundColor
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(5201)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundColor (BSTR value);
      // VB6: Sub backgroundColor (ByVal value As String)
      [DispId(5201)]
      set;
    }

    /// <summary><para><c>cursor</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property cursor</para></summary>
    /// <remarks><para>An original IDL definition of <c>cursor</c> property was the following:  <c>BSTR cursor</c>;</para></remarks>
    // property cursor
    // IDL: BSTR cursor;
    // VB6: cursor As String
    string cursor
    {
      // IDL: HRESULT cursor ([out, retval] BSTR* ReturnValue);
      // VB6: Function cursor As String
      [DispId(5224)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT cursor (BSTR value);
      // VB6: Sub cursor (ByVal value As String)
      [DispId(5224)]
      set;
    }

    /// <summary><para><c>disabledBackgroundColor</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property disabledBackgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>disabledBackgroundColor</c> property was the following:  <c>BSTR disabledBackgroundColor</c>;</para></remarks>
    // property disabledBackgroundColor
    // IDL: BSTR disabledBackgroundColor;
    // VB6: disabledBackgroundColor As String
    string disabledBackgroundColor
    {
      // IDL: HRESULT disabledBackgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function disabledBackgroundColor As String
      [DispId(5217)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT disabledBackgroundColor (BSTR value);
      // VB6: Sub disabledBackgroundColor (ByVal value As String)
      [DispId(5217)]
      set;
    }

    /// <summary><para><c>disabledFontStyle</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property disabledFontStyle</para></summary>
    /// <remarks><para>An original IDL definition of <c>disabledFontStyle</c> property was the following:  <c>BSTR disabledFontStyle</c>;</para></remarks>
    // property disabledFontStyle
    // IDL: BSTR disabledFontStyle;
    // VB6: disabledFontStyle As String
    string disabledFontStyle
    {
      // IDL: HRESULT disabledFontStyle ([out, retval] BSTR* ReturnValue);
      // VB6: Function disabledFontStyle As String
      [DispId(5215)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT disabledFontStyle (BSTR value);
      // VB6: Sub disabledFontStyle (ByVal value As String)
      [DispId(5215)]
      set;
    }

    /// <summary><para><c>disabledForegroundColor</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property disabledForegroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>disabledForegroundColor</c> property was the following:  <c>BSTR disabledForegroundColor</c>;</para></remarks>
    // property disabledForegroundColor
    // IDL: BSTR disabledForegroundColor;
    // VB6: disabledForegroundColor As String
    string disabledForegroundColor
    {
      // IDL: HRESULT disabledForegroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function disabledForegroundColor As String
      [DispId(5216)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT disabledForegroundColor (BSTR value);
      // VB6: Sub disabledForegroundColor (ByVal value As String)
      [DispId(5216)]
      set;
    }

    /// <summary><para><c>disableGlassBlurBackground</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property disableGlassBlurBackground</para></summary>
    /// <remarks><para>An original IDL definition of <c>disableGlassBlurBackground</c> property was the following:  <c>VARIANT_BOOL disableGlassBlurBackground</c>;</para></remarks>
    // property disableGlassBlurBackground
    // IDL: VARIANT_BOOL disableGlassBlurBackground;
    // VB6: disableGlassBlurBackground As Boolean
    bool disableGlassBlurBackground
    {
      // IDL: HRESULT disableGlassBlurBackground ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function disableGlassBlurBackground As Boolean
      [DispId(5231)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT disableGlassBlurBackground (VARIANT_BOOL value);
      // VB6: Sub disableGlassBlurBackground (ByVal value As Boolean)
      [DispId(5231)]
      set;
    }

    /// <summary><para><c>fontFace</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property fontFace</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontFace</c> property was the following:  <c>BSTR fontFace</c>;</para></remarks>
    // property fontFace
    // IDL: BSTR fontFace;
    // VB6: fontFace As String
    string fontFace
    {
      // IDL: HRESULT fontFace ([out, retval] BSTR* ReturnValue);
      // VB6: Function fontFace As String
      [DispId(5206)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT fontFace (BSTR value);
      // VB6: Sub fontFace (ByVal value As String)
      [DispId(5206)]
      set;
    }

    /// <summary><para><c>fontSize</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property fontSize</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontSize</c> property was the following:  <c>long fontSize</c>;</para></remarks>
    // property fontSize
    // IDL: long fontSize;
    // VB6: fontSize As Long
    int fontSize
    {
      // IDL: HRESULT fontSize ([out, retval] long* ReturnValue);
      // VB6: Function fontSize As Long
      [DispId(5208)]
      get;
      // IDL: HRESULT fontSize (long value);
      // VB6: Sub fontSize (ByVal value As Long)
      [DispId(5208)]
      set;
    }

    /// <summary><para><c>fontSmoothing</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property fontSmoothing</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontSmoothing</c> property was the following:  <c>VARIANT_BOOL fontSmoothing</c>;</para></remarks>
    // property fontSmoothing
    // IDL: VARIANT_BOOL fontSmoothing;
    // VB6: fontSmoothing As Boolean
    bool fontSmoothing
    {
      // IDL: HRESULT fontSmoothing ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function fontSmoothing As Boolean
      [DispId(5221)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT fontSmoothing (VARIANT_BOOL value);
      // VB6: Sub fontSmoothing (ByVal value As Boolean)
      [DispId(5221)]
      set;
    }

    /// <summary><para><c>fontStyle</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property fontStyle</para></summary>
    /// <remarks><para>An original IDL definition of <c>fontStyle</c> property was the following:  <c>BSTR fontStyle</c>;</para></remarks>
    // property fontStyle
    // IDL: BSTR fontStyle;
    // VB6: fontStyle As String
    string fontStyle
    {
      // IDL: HRESULT fontStyle ([out, retval] BSTR* ReturnValue);
      // VB6: Function fontStyle As String
      [DispId(5207)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT fontStyle (BSTR value);
      // VB6: Sub fontStyle (ByVal value As String)
      [DispId(5207)]
      set;
    }

    /// <summary><para><c>foregroundColor</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property foregroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>foregroundColor</c> property was the following:  <c>BSTR foregroundColor</c>;</para></remarks>
    // property foregroundColor
    // IDL: BSTR foregroundColor;
    // VB6: foregroundColor As String
    string foregroundColor
    {
      // IDL: HRESULT foregroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function foregroundColor As String
      [DispId(5209)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT foregroundColor (BSTR value);
      // VB6: Sub foregroundColor (ByVal value As String)
      [DispId(5209)]
      set;
    }

    /// <summary><para><c>hoverBackgroundColor</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property hoverBackgroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>hoverBackgroundColor</c> property was the following:  <c>BSTR hoverBackgroundColor</c>;</para></remarks>
    // property hoverBackgroundColor
    // IDL: BSTR hoverBackgroundColor;
    // VB6: hoverBackgroundColor As String
    string hoverBackgroundColor
    {
      // IDL: HRESULT hoverBackgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function hoverBackgroundColor As String
      [DispId(5210)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT hoverBackgroundColor (BSTR value);
      // VB6: Sub hoverBackgroundColor (ByVal value As String)
      [DispId(5210)]
      set;
    }

    /// <summary><para><c>hoverFontStyle</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property hoverFontStyle</para></summary>
    /// <remarks><para>An original IDL definition of <c>hoverFontStyle</c> property was the following:  <c>BSTR hoverFontStyle</c>;</para></remarks>
    // property hoverFontStyle
    // IDL: BSTR hoverFontStyle;
    // VB6: hoverFontStyle As String
    string hoverFontStyle
    {
      // IDL: HRESULT hoverFontStyle ([out, retval] BSTR* ReturnValue);
      // VB6: Function hoverFontStyle As String
      [DispId(5212)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT hoverFontStyle (BSTR value);
      // VB6: Sub hoverFontStyle (ByVal value As String)
      [DispId(5212)]
      set;
    }

    /// <summary><para><c>hoverForegroundColor</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property hoverForegroundColor</para></summary>
    /// <remarks><para>An original IDL definition of <c>hoverForegroundColor</c> property was the following:  <c>BSTR hoverForegroundColor</c>;</para></remarks>
    // property hoverForegroundColor
    // IDL: BSTR hoverForegroundColor;
    // VB6: hoverForegroundColor As String
    string hoverForegroundColor
    {
      // IDL: HRESULT hoverForegroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function hoverForegroundColor As String
      [DispId(5211)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT hoverForegroundColor (BSTR value);
      // VB6: Sub hoverForegroundColor (ByVal value As String)
      [DispId(5211)]
      set;
    }

    /// <summary><para><c>justification</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property justification</para></summary>
    /// <remarks><para>An original IDL definition of <c>justification</c> property was the following:  <c>BSTR justification</c>;</para></remarks>
    // property justification
    // IDL: BSTR justification;
    // VB6: justification As String
    string justification
    {
      // IDL: HRESULT justification ([out, retval] BSTR* ReturnValue);
      // VB6: Function justification As String
      [DispId(5222)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT justification (BSTR value);
      // VB6: Sub justification (ByVal value As String)
      [DispId(5222)]
      set;
    }

    /// <summary><para><c>onGlass</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property onGlass</para></summary>
    /// <remarks><para>An original IDL definition of <c>onGlass</c> property was the following:  <c>VARIANT_BOOL onGlass</c>;</para></remarks>
    // property onGlass
    // IDL: VARIANT_BOOL onGlass;
    // VB6: onGlass As Boolean
    bool onGlass
    {
      // IDL: HRESULT onGlass ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function onGlass As Boolean
      [DispId(5230)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT onGlass (VARIANT_BOOL value);
      // VB6: Sub onGlass (ByVal value As Boolean)
      [DispId(5230)]
      set;
    }

    /// <summary><para><c>scrolling</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property scrolling</para></summary>
    /// <remarks><para>An original IDL definition of <c>scrolling</c> property was the following:  <c>VARIANT_BOOL scrolling</c>;</para></remarks>
    // property scrolling
    // IDL: VARIANT_BOOL scrolling;
    // VB6: scrolling As Boolean
    bool scrolling
    {
      // IDL: HRESULT scrolling ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function scrolling As Boolean
      [DispId(5225)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT scrolling (VARIANT_BOOL value);
      // VB6: Sub scrolling (ByVal value As Boolean)
      [DispId(5225)]
      set;
    }

    /// <summary><para><c>scrollingAmount</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property scrollingAmount</para></summary>
    /// <remarks><para>An original IDL definition of <c>scrollingAmount</c> property was the following:  <c>int scrollingAmount</c>;</para></remarks>
    // property scrollingAmount
    // IDL: int scrollingAmount;
    // VB6: scrollingAmount As Long
    int scrollingAmount
    {
      // IDL: HRESULT scrollingAmount ([out, retval] int* ReturnValue);
      // VB6: Function scrollingAmount As Long
      [DispId(5228)]
      get;
      // IDL: HRESULT scrollingAmount (int value);
      // VB6: Sub scrollingAmount (ByVal value As Long)
      [DispId(5228)]
      set;
    }

    /// <summary><para><c>scrollingDelay</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property scrollingDelay</para></summary>
    /// <remarks><para>An original IDL definition of <c>scrollingDelay</c> property was the following:  <c>int scrollingDelay</c>;</para></remarks>
    // property scrollingDelay
    // IDL: int scrollingDelay;
    // VB6: scrollingDelay As Long
    int scrollingDelay
    {
      // IDL: HRESULT scrollingDelay ([out, retval] int* ReturnValue);
      // VB6: Function scrollingDelay As Long
      [DispId(5227)]
      get;
      // IDL: HRESULT scrollingDelay (int value);
      // VB6: Sub scrollingDelay (ByVal value As Long)
      [DispId(5227)]
      set;
    }

    /// <summary><para><c>scrollingDirection</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property scrollingDirection</para></summary>
    /// <remarks><para>An original IDL definition of <c>scrollingDirection</c> property was the following:  <c>BSTR scrollingDirection</c>;</para></remarks>
    // property scrollingDirection
    // IDL: BSTR scrollingDirection;
    // VB6: scrollingDirection As String
    string scrollingDirection
    {
      // IDL: HRESULT scrollingDirection ([out, retval] BSTR* ReturnValue);
      // VB6: Function scrollingDirection As String
      [DispId(5226)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT scrollingDirection (BSTR value);
      // VB6: Sub scrollingDirection (ByVal value As String)
      [DispId(5226)]
      set;
    }

    /// <summary><para><c>textWidth</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property textWidth</para></summary>
    /// <remarks><para>An original IDL definition of <c>textWidth</c> property was the following:  <c>int textWidth</c>;</para></remarks>
    // property textWidth
    // IDL: int textWidth;
    // VB6: textWidth As Long
    int textWidth
    {
      // IDL: HRESULT textWidth ([out, retval] int* ReturnValue);
      // VB6: Function textWidth As Long
      [DispId(5229)]
      get;
    }

    /// <summary><para><c>toolTip</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property toolTip</para></summary>
    /// <remarks><para>An original IDL definition of <c>toolTip</c> property was the following:  <c>BSTR toolTip</c>;</para></remarks>
    // property toolTip
    // IDL: BSTR toolTip;
    // VB6: toolTip As String
    string toolTip
    {
      // IDL: HRESULT toolTip ([out, retval] BSTR* ReturnValue);
      // VB6: Function toolTip As String
      [DispId(5214)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT toolTip (BSTR value);
      // VB6: Sub toolTip (ByVal value As String)
      [DispId(5214)]
      set;
    }

    /// <summary><para><c>value</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property value</para></summary>
    /// <remarks><para>An original IDL definition of <c>value</c> property was the following:  <c>BSTR value</c>;</para></remarks>
    // property value
    // IDL: BSTR value;
    // VB6: value As String
    string value
    {
      // IDL: HRESULT value ([out, retval] BSTR* ReturnValue);
      // VB6: Function value As String
      [DispId(5213)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT value (BSTR value);
      // VB6: Sub value (ByVal value As String)
      [DispId(5213)]
      set;
    }

    /// <summary><para><c>wordWrap</c> property of <c>IWMPTextCtrl</c> interface.  </para><para>property wordWrap</para></summary>
    /// <remarks><para>An original IDL definition of <c>wordWrap</c> property was the following:  <c>VARIANT_BOOL wordWrap</c>;</para></remarks>
    // property wordWrap
    // IDL: VARIANT_BOOL wordWrap;
    // VB6: wordWrap As Boolean
    bool wordWrap
    {
      // IDL: HRESULT wordWrap ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function wordWrap As Boolean
      [DispId(5223)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT wordWrap (VARIANT_BOOL value);
      // VB6: Sub wordWrap (ByVal value As Boolean)
      [DispId(5223)]
      set;
    }
  }

  /// <summary><para><c>IWMPTheme</c> interface.  </para><para>IWMPTheme: Public interface for skin object model.</para></summary>
  // IWMPTheme: Public interface for skin object model.
  [Guid("6FCAE13D-E492-4584-9C21-D2C052A2A33A")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPTheme
  {
    /// <summary><para><c>showErrorDialog</c> method of <c>IWMPTheme</c> interface.  </para><para>method showErrorDialog</para></summary>
    /// <remarks><para>An original IDL definition of <c>showErrorDialog</c> method was the following:  <c>HRESULT showErrorDialog (void)</c>;</para></remarks>
    // method showErrorDialog
    // IDL: HRESULT showErrorDialog (void);
    // VB6: Sub showErrorDialog
    [DispId(2506)]
    void showErrorDialog ();

    /// <summary><para><c>logString</c> method of <c>IWMPTheme</c> interface.  </para><para>method logString</para></summary>
    /// <remarks><para>An original IDL definition of <c>logString</c> method was the following:  <c>HRESULT logString (BSTR stringVal)</c>;</para></remarks>
    // method logString
    // IDL: HRESULT logString (BSTR stringVal);
    // VB6: Sub logString (ByVal stringVal As String)
    [DispId(2507)]
    void logString ([MarshalAs(UnmanagedType.BStr)] string stringVal);

    /// <summary><para><c>openView</c> method of <c>IWMPTheme</c> interface.  </para><para>method openView</para></summary>
    /// <remarks><para>An original IDL definition of <c>openView</c> method was the following:  <c>HRESULT openView (BSTR viewID)</c>;</para></remarks>
    // method openView
    // IDL: HRESULT openView (BSTR viewID);
    // VB6: Sub openView (ByVal viewID As String)
    [DispId(2508)]
    void openView ([MarshalAs(UnmanagedType.BStr)] string viewID);

    /// <summary><para><c>openViewRelative</c> method of <c>IWMPTheme</c> interface.  </para><para>method openView</para></summary>
    /// <remarks><para>An original IDL definition of <c>openViewRelative</c> method was the following:  <c>HRESULT openViewRelative (BSTR viewID, long x, long y, [out, retval] IDispatch** ReturnValue)</c>;</para></remarks>
    // method openView
    // IDL: HRESULT openViewRelative (BSTR viewID, long x, long y, [out, retval] IDispatch** ReturnValue);
    // VB6: Function openViewRelative (ByVal viewID As String, ByVal x As Long, ByVal y As Long) As IDispatch
    [DispId(2515)]
    [return: MarshalAs(UnmanagedType.IDispatch)]
    object openViewRelative ([MarshalAs(UnmanagedType.BStr)] string viewID, int x, int y);

    /// <summary><para><c>closeView</c> method of <c>IWMPTheme</c> interface.  </para><para>method closeView</para></summary>
    /// <remarks><para>An original IDL definition of <c>closeView</c> method was the following:  <c>HRESULT closeView (BSTR viewID)</c>;</para></remarks>
    // method closeView
    // IDL: HRESULT closeView (BSTR viewID);
    // VB6: Sub closeView (ByVal viewID As String)
    [DispId(2509)]
    void closeView ([MarshalAs(UnmanagedType.BStr)] string viewID);

    /// <summary><para><c>openDialog</c> method of <c>IWMPTheme</c> interface.  </para><para>method openDialog</para></summary>
    /// <remarks><para>An original IDL definition of <c>openDialog</c> method was the following:  <c>HRESULT openDialog (BSTR dialogType, BSTR parameters, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method openDialog
    // IDL: HRESULT openDialog (BSTR dialogType, BSTR parameters, [out, retval] BSTR* ReturnValue);
    // VB6: Function openDialog (ByVal dialogType As String, ByVal parameters As String) As String
    [DispId(2510)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string openDialog ([MarshalAs(UnmanagedType.BStr)] string dialogType, [MarshalAs(UnmanagedType.BStr)] string parameters);

    /// <summary><para><c>loadString</c> method of <c>IWMPTheme</c> interface.  </para><para>method loadString</para></summary>
    /// <remarks><para>An original IDL definition of <c>loadString</c> method was the following:  <c>HRESULT loadString (BSTR bstrString, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method loadString
    // IDL: HRESULT loadString (BSTR bstrString, [out, retval] BSTR* ReturnValue);
    // VB6: Function loadString (ByVal bstrString As String) As String
    [DispId(2511)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string loadString ([MarshalAs(UnmanagedType.BStr)] string bstrString);

    /// <summary><para><c>loadPreference</c> method of <c>IWMPTheme</c> interface.  </para><para>method loadPreference</para></summary>
    /// <remarks><para>An original IDL definition of <c>loadPreference</c> method was the following:  <c>HRESULT loadPreference (BSTR bstrName, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // method loadPreference
    // IDL: HRESULT loadPreference (BSTR bstrName, [out, retval] BSTR* ReturnValue);
    // VB6: Function loadPreference (ByVal bstrName As String) As String
    [DispId(2512)]
    [return: MarshalAs(UnmanagedType.BStr)]
    string loadPreference ([MarshalAs(UnmanagedType.BStr)] string bstrName);

    /// <summary><para><c>savePreference</c> method of <c>IWMPTheme</c> interface.  </para><para>method savePreference</para></summary>
    /// <remarks><para>An original IDL definition of <c>savePreference</c> method was the following:  <c>HRESULT savePreference (BSTR bstrName, BSTR bstrValue)</c>;</para></remarks>
    // method savePreference
    // IDL: HRESULT savePreference (BSTR bstrName, BSTR bstrValue);
    // VB6: Sub savePreference (ByVal bstrName As String, ByVal bstrValue As String)
    [DispId(2513)]
    void savePreference ([MarshalAs(UnmanagedType.BStr)] string bstrName, [MarshalAs(UnmanagedType.BStr)] string bstrValue);

    /// <summary><para><c>playSound</c> method of <c>IWMPTheme</c> interface.  </para><para>method playSound</para></summary>
    /// <remarks><para>An original IDL definition of <c>playSound</c> method was the following:  <c>HRESULT playSound (BSTR bstrFilename)</c>;</para></remarks>
    // method playSound
    // IDL: HRESULT playSound (BSTR bstrFilename);
    // VB6: Sub playSound (ByVal bstrFilename As String)
    [DispId(2514)]
    void playSound ([MarshalAs(UnmanagedType.BStr)] string bstrFilename);

    /// <summary><para><c>openViewRelativeInternal</c> method of <c>IWMPTheme</c> interface.  </para><para>Microsoft internal use only</para></summary>
    /// <remarks><para>An original IDL definition of <c>openViewRelativeInternal</c> method was the following:  <c>HRESULT openViewRelativeInternal (BSTR viewID, long nIndex, long x, long y, long nWidth, long nHeight, BSTR bstrHorizontalAlignment, BSTR bstrVerticalAlignment, [out, retval] IDispatch** ReturnValue)</c>;</para></remarks>
    // Microsoft internal use only
    // IDL: HRESULT openViewRelativeInternal (BSTR viewID, long nIndex, long x, long y, long nWidth, long nHeight, BSTR bstrHorizontalAlignment, BSTR bstrVerticalAlignment, [out, retval] IDispatch** ReturnValue);
    // VB6: Function openViewRelativeInternal (ByVal viewID As String, ByVal nIndex As Long, ByVal x As Long, ByVal y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal bstrHorizontalAlignment As String, ByVal bstrVerticalAlignment As String) As IDispatch
    [DispId(2516)]
    [return: MarshalAs(UnmanagedType.IDispatch)]
    object openViewRelativeInternal ([MarshalAs(UnmanagedType.BStr)] string viewID, int nIndex, int x, int y, int nWidth, int nHeight, [MarshalAs(UnmanagedType.BStr)] string bstrHorizontalAlignment, [MarshalAs(UnmanagedType.BStr)] string bstrVerticalAlignment);

    /// <summary><para><c>setViewPosition</c> method of <c>IWMPTheme</c> interface.  </para><para>Microsoft internal use only</para></summary>
    /// <remarks><para>An original IDL definition of <c>setViewPosition</c> method was the following:  <c>HRESULT setViewPosition (BSTR viewID, long nIndex, long x, long y, long nWidth, long nHeight, BSTR bstrHorizontalAlignment, BSTR bstrVerticalAlignment)</c>;</para></remarks>
    // Microsoft internal use only
    // IDL: HRESULT setViewPosition (BSTR viewID, long nIndex, long x, long y, long nWidth, long nHeight, BSTR bstrHorizontalAlignment, BSTR bstrVerticalAlignment);
    // VB6: Sub setViewPosition (ByVal viewID As String, ByVal nIndex As Long, ByVal x As Long, ByVal y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal bstrHorizontalAlignment As String, ByVal bstrVerticalAlignment As String)
    [DispId(2518)]
    void setViewPosition ([MarshalAs(UnmanagedType.BStr)] string viewID, int nIndex, int x, int y, int nWidth, int nHeight, [MarshalAs(UnmanagedType.BStr)] string bstrHorizontalAlignment, [MarshalAs(UnmanagedType.BStr)] string bstrVerticalAlignment);

    /// <summary><para><c>author</c> property of <c>IWMPTheme</c> interface.  </para><para>property author</para></summary>
    /// <remarks><para>An original IDL definition of <c>author</c> property was the following:  <c>BSTR author</c>;</para></remarks>
    // property author
    // IDL: BSTR author;
    // VB6: author As String
    string author
    {
      // IDL: HRESULT author ([out, retval] BSTR* ReturnValue);
      // VB6: Function author As String
      [DispId(2503)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>authorVersion</c> property of <c>IWMPTheme</c> interface.  </para><para>property authorVersion</para></summary>
    /// <remarks><para>An original IDL definition of <c>authorVersion</c> property was the following:  <c>BSTR authorVersion</c>;</para></remarks>
    // property authorVersion
    // IDL: BSTR authorVersion;
    // VB6: authorVersion As String
    string authorVersion
    {
      // IDL: HRESULT authorVersion ([out, retval] BSTR* ReturnValue);
      // VB6: Function authorVersion As String
      [DispId(2502)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>copyright</c> property of <c>IWMPTheme</c> interface.  </para><para>property copyright</para></summary>
    /// <remarks><para>An original IDL definition of <c>copyright</c> property was the following:  <c>BSTR copyright</c>;</para></remarks>
    // property copyright
    // IDL: BSTR copyright;
    // VB6: copyright As String
    string copyright
    {
      // IDL: HRESULT copyright ([out, retval] BSTR* ReturnValue);
      // VB6: Function copyright As String
      [DispId(2504)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>currentViewID</c> property of <c>IWMPTheme</c> interface.  </para><para>property title</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentViewID</c> property was the following:  <c>BSTR currentViewID</c>;</para></remarks>
    // property title
    // IDL: BSTR currentViewID;
    // VB6: currentViewID As String
    string currentViewID
    {
      // IDL: HRESULT currentViewID ([out, retval] BSTR* ReturnValue);
      // VB6: Function currentViewID As String
      [DispId(2505)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT currentViewID (BSTR value);
      // VB6: Sub currentViewID (ByVal value As String)
      [DispId(2505)]
      set;
    }

    /// <summary><para><c>title</c> property of <c>IWMPTheme</c> interface.  </para><para>property title</para></summary>
    /// <remarks><para>An original IDL definition of <c>title</c> property was the following:  <c>BSTR title</c>;</para></remarks>
    // property title
    // IDL: BSTR title;
    // VB6: title As String
    string title
    {
      // IDL: HRESULT title ([out, retval] BSTR* ReturnValue);
      // VB6: Function title As String
      [DispId(2500)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
    }

    /// <summary><para><c>version</c> property of <c>IWMPTheme</c> interface.  </para><para>property version</para></summary>
    /// <remarks><para>An original IDL definition of <c>version</c> property was the following:  <c>float version</c>;</para></remarks>
    // property version
    // IDL: float version;
    // VB6: version As Single
    float version
    {
      // IDL: HRESULT version ([out, retval] float* ReturnValue);
      // VB6: Function version As Single
      [DispId(2501)]
      get;
    }
  }

  /// <summary><para><c>IWMPVideoCtrl</c> interface.  </para><para>IWMPVideoCtrl: Public interface for skin object model.</para></summary>
  // IWMPVideoCtrl: Public interface for skin object model.
  [Guid("61CECF10-FC3A-11D2-A1CD-005004602752")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPVideoCtrl
  {
    /// <summary><para><c>backgroundColor</c> property of <c>IWMPVideoCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>backgroundColor</c> property was the following:  <c>BSTR backgroundColor</c>;</para></remarks>
    // IDL: BSTR backgroundColor;
    // VB6: backgroundColor As String
    string backgroundColor
    {
      // IDL: HRESULT backgroundColor ([out, retval] BSTR* ReturnValue);
      // VB6: Function backgroundColor As String
      [DispId(5702)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT backgroundColor (BSTR value);
      // VB6: Sub backgroundColor (ByVal value As String)
      [DispId(5702)]
      set;
    }

    /// <summary><para><c>cursor</c> property of <c>IWMPVideoCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>cursor</c> property was the following:  <c>BSTR cursor</c>;</para></remarks>
    // IDL: BSTR cursor;
    // VB6: cursor As String
    string cursor
    {
      // IDL: HRESULT cursor ([out, retval] BSTR* ReturnValue);
      // VB6: Function cursor As String
      [DispId(5701)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT cursor (BSTR value);
      // VB6: Sub cursor (ByVal value As String)
      [DispId(5701)]
      set;
    }

    /// <summary><para><c>fullScreen</c> property of <c>IWMPVideoCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>fullScreen</c> property was the following:  <c>VARIANT_BOOL fullScreen</c>;</para></remarks>
    // IDL: VARIANT_BOOL fullScreen;
    // VB6: fullScreen As Boolean
    bool fullScreen
    {
      // IDL: HRESULT fullScreen ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function fullScreen As Boolean
      [DispId(5707)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT fullScreen (VARIANT_BOOL value);
      // VB6: Sub fullScreen (ByVal value As Boolean)
      [DispId(5707)]
      set;
    }

    /// <summary><para><c>maintainAspectRatio</c> property of <c>IWMPVideoCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>maintainAspectRatio</c> property was the following:  <c>VARIANT_BOOL maintainAspectRatio</c>;</para></remarks>
    // IDL: VARIANT_BOOL maintainAspectRatio;
    // VB6: maintainAspectRatio As Boolean
    bool maintainAspectRatio
    {
      // IDL: HRESULT maintainAspectRatio ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function maintainAspectRatio As Boolean
      [DispId(5704)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT maintainAspectRatio (VARIANT_BOOL value);
      // VB6: Sub maintainAspectRatio (ByVal value As Boolean)
      [DispId(5704)]
      set;
    }

    /// <summary><para><c>shrinkToFit</c> property of <c>IWMPVideoCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>shrinkToFit</c> property was the following:  <c>VARIANT_BOOL shrinkToFit</c>;</para></remarks>
    // IDL: VARIANT_BOOL shrinkToFit;
    // VB6: shrinkToFit As Boolean
    bool shrinkToFit
    {
      // IDL: HRESULT shrinkToFit ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function shrinkToFit As Boolean
      [DispId(5703)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT shrinkToFit (VARIANT_BOOL value);
      // VB6: Sub shrinkToFit (ByVal value As Boolean)
      [DispId(5703)]
      set;
    }

    /// <summary><para><c>stretchToFit</c> property of <c>IWMPVideoCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>stretchToFit</c> property was the following:  <c>VARIANT_BOOL stretchToFit</c>;</para></remarks>
    // IDL: VARIANT_BOOL stretchToFit;
    // VB6: stretchToFit As Boolean
    bool stretchToFit
    {
      // IDL: HRESULT stretchToFit ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function stretchToFit As Boolean
      [DispId(5708)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT stretchToFit (VARIANT_BOOL value);
      // VB6: Sub stretchToFit (ByVal value As Boolean)
      [DispId(5708)]
      set;
    }

    /// <summary><para><c>toolTip</c> property of <c>IWMPVideoCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>toolTip</c> property was the following:  <c>BSTR toolTip</c>;</para></remarks>
    // IDL: BSTR toolTip;
    // VB6: toolTip As String
    string toolTip
    {
      // IDL: HRESULT toolTip ([out, retval] BSTR* ReturnValue);
      // VB6: Function toolTip As String
      [DispId(5706)]
      [return: MarshalAs(UnmanagedType.BStr)]
      get;
      // IDL: HRESULT toolTip (BSTR value);
      // VB6: Sub toolTip (ByVal value As String)
      [DispId(5706)]
      set;
    }

    /// <summary><para><c>windowless</c> property of <c>IWMPVideoCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>windowless</c> property was the following:  <c>VARIANT_BOOL windowless</c>;</para></remarks>
    // IDL: VARIANT_BOOL windowless;
    // VB6: windowless As Boolean
    bool windowless
    {
      // IDL: HRESULT windowless ([out, retval] VARIANT_BOOL* ReturnValue);
      // VB6: Function windowless As Boolean
      [DispId(5700)]
      [return: MarshalAs(UnmanagedType.VariantBool)]
      get;
      // IDL: HRESULT windowless (VARIANT_BOOL value);
      // VB6: Sub windowless (ByVal value As Boolean)
      [DispId(5700)]
      set;
    }

    /// <summary><para><c>zoom</c> property of <c>IWMPVideoCtrl</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>zoom</c> property was the following:  <c>long zoom</c>;</para></remarks>
    // IDL: long zoom;
    // VB6: zoom As Long
    int zoom
    {
      // IDL: HRESULT zoom ([out, retval] long* ReturnValue);
      // VB6: Function zoom As Long
      [DispId(5709)]
      get;
      // IDL: HRESULT zoom (long value);
      // VB6: Sub zoom (ByVal value As Long)
      [DispId(5709)]
      set;
    }
  }

  /// <summary><para><c>IWMPVideoCtrlEvents</c> interface.  </para><para>IWMPVideoCtrlEvents: Public interface for skin object model.</para></summary>
  // IWMPVideoCtrlEvents: Public interface for skin object model.
  [Guid("A85C0477-714C-4A06-B9F6-7C8CA38B45DC")]
  [ComImport]
  [TypeLibType((short)4096)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPVideoCtrlEvents
  {
    /// <summary><para><c>onvideostart</c> method of <c>IWMPVideoCtrlEvents</c> interface.  </para><para>event onvideostart</para></summary>
    /// <remarks><para>An original IDL definition of <c>onvideostart</c> method was the following:  <c>HRESULT onvideostart (void)</c>;</para></remarks>
    // event onvideostart
    // IDL: HRESULT onvideostart (void);
    // VB6: Sub onvideostart
    [DispId(5720)]
    void onvideostart ();

    /// <summary><para><c>onvideoend</c> method of <c>IWMPVideoCtrlEvents</c> interface.  </para><para>event onvideostart</para></summary>
    /// <remarks><para>An original IDL definition of <c>onvideoend</c> method was the following:  <c>HRESULT onvideoend (void)</c>;</para></remarks>
    // event onvideostart
    // IDL: HRESULT onvideoend (void);
    // VB6: Sub onvideoend
    [DispId(5721)]
    void onvideoend ();
  }

  /// <summary><para>Delegate for handling <c>onvideostart</c> event of <c>IWMPVideoCtrlEvents</c> interface.  </para><para>event onvideostart</para></summary>
  /// <remarks><para>An original IDL definition of <c>onvideostart</c> event was the following:  <c>HRESULT IWMPVideoCtrlEvents_onvideostartEventHandler (void)</c>;</para></remarks>
  // event onvideostart
  // IDL: HRESULT IWMPVideoCtrlEvents_onvideostartEventHandler (void);
  // VB6: Sub IWMPVideoCtrlEvents_onvideostartEventHandler
  public delegate void IWMPVideoCtrlEvents_onvideostartEventHandler ();

  /// <summary><para>Delegate for handling <c>onvideoend</c> event of <c>IWMPVideoCtrlEvents</c> interface.  </para><para>event onvideostart</para></summary>
  /// <remarks><para>An original IDL definition of <c>onvideoend</c> event was the following:  <c>HRESULT IWMPVideoCtrlEvents_onvideoendEventHandler (void)</c>;</para></remarks>
  // event onvideostart
  // IDL: HRESULT IWMPVideoCtrlEvents_onvideoendEventHandler (void);
  // VB6: Sub IWMPVideoCtrlEvents_onvideoendEventHandler
  public delegate void IWMPVideoCtrlEvents_onvideoendEventHandler ();

  /// <summary><para>Declaration of events of <c>IWMPVideoCtrlEvents</c> source interface.  </para><para>IWMPVideoCtrlEvents: Public interface for skin object model.</para></summary>
  // IWMPVideoCtrlEvents: Public interface for skin object model.
  [ComEventInterface(typeof(IWMPVideoCtrlEvents),typeof(IWMPVideoCtrlEvents_EventProvider))]
  [ComVisible(false)]
  public interface IWMPVideoCtrlEvents_Event
  {
    /// <summary><para><c>onvideostart</c> event of <c>IWMPVideoCtrlEvents</c> interface.  </para><para>event onvideostart</para></summary>
    event IWMPVideoCtrlEvents_onvideostartEventHandler onvideostart;

    /// <summary><para><c>onvideoend</c> event of <c>IWMPVideoCtrlEvents</c> interface.  </para><para>event onvideostart</para></summary>
    event IWMPVideoCtrlEvents_onvideoendEventHandler onvideoend;
  }

  [ClassInterface(ClassInterfaceType.None)]
  internal class IWMPVideoCtrlEvents_SinkHelper: IWMPVideoCtrlEvents
  {
    public int Cookie = 0;

    public event IWMPVideoCtrlEvents_onvideostartEventHandler onvideostartDelegate = null;
    public void Set_onvideostartDelegate(IWMPVideoCtrlEvents_onvideostartEventHandler deleg)
    {
      onvideostartDelegate = deleg;
    }
    public bool Is_onvideostartDelegate(IWMPVideoCtrlEvents_onvideostartEventHandler deleg)
    {
      return (onvideostartDelegate == deleg);
    }
    public void Clear_onvideostartDelegate()
    {
      onvideostartDelegate = null;
    }
    void IWMPVideoCtrlEvents.onvideostart ()
    {
      if (onvideostartDelegate!=null)
        onvideostartDelegate();
    }

    public event IWMPVideoCtrlEvents_onvideoendEventHandler onvideoendDelegate = null;
    public void Set_onvideoendDelegate(IWMPVideoCtrlEvents_onvideoendEventHandler deleg)
    {
      onvideoendDelegate = deleg;
    }
    public bool Is_onvideoendDelegate(IWMPVideoCtrlEvents_onvideoendEventHandler deleg)
    {
      return (onvideoendDelegate == deleg);
    }
    public void Clear_onvideoendDelegate()
    {
      onvideoendDelegate = null;
    }
    void IWMPVideoCtrlEvents.onvideoend ()
    {
      if (onvideoendDelegate!=null)
        onvideoendDelegate();
    }
  }

  internal class IWMPVideoCtrlEvents_EventProvider: IDisposable, IWMPVideoCtrlEvents_Event
  {
    UCOMIConnectionPointContainer ConnectionPointContainer;
    UCOMIConnectionPoint ConnectionPoint;
    IWMPVideoCtrlEvents_SinkHelper EventSinkHelper;
    int ConnectionCount;

    // Constructor: remember ConnectionPointContainer
    IWMPVideoCtrlEvents_EventProvider(object CPContainer) : base()
    {
      ConnectionPointContainer = (UCOMIConnectionPointContainer)CPContainer;
    }

    // Force disconnection from ActiveX event source
    ~IWMPVideoCtrlEvents_EventProvider()
    {
      Disconnect();
      ConnectionPointContainer = null;
    }

    // Aletnative to destructor
    void IDisposable.Dispose()
    {
      Disconnect();
      ConnectionPointContainer = null;
      System.GC.SuppressFinalize(this);
    }

    // Connect to ActiveX event source
    void Connect()
    {
      if (ConnectionPoint == null)
      {
        ConnectionCount = 0;
        Guid g = new Guid("A85C0477-714C-4A06-B9F6-7C8CA38B45DC");
        ConnectionPointContainer.FindConnectionPoint(ref g, out ConnectionPoint);
        EventSinkHelper = new IWMPVideoCtrlEvents_SinkHelper();
        ConnectionPoint.Advise(EventSinkHelper, out EventSinkHelper.Cookie);
      }
    }

    // Disconnect from ActiveX event source
    void Disconnect()
    {
      System.Threading.Monitor.Enter(this);
      try {
        if (EventSinkHelper != null)
          ConnectionPoint.Unadvise(EventSinkHelper.Cookie);
        ConnectionPoint = null;
        EventSinkHelper = null;
      } catch { }
      System.Threading.Monitor.Exit(this);
    }

    // If no event handler present then disconnect from ActiveX event source
    void CheckDisconnect()
    {
      ConnectionCount--;
      if (ConnectionCount <= 0)
        Disconnect();
    }

    event IWMPVideoCtrlEvents_onvideostartEventHandler IWMPVideoCtrlEvents_Event.onvideostart
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onvideostartDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onvideostartDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }

    event IWMPVideoCtrlEvents_onvideoendEventHandler IWMPVideoCtrlEvents_Event.onvideoend
    {
      add
      {
        System.Threading.Monitor.Enter(this);
        try {
          Connect();
          EventSinkHelper.onvideoendDelegate += value;
          ConnectionCount++;
        } catch { }
        System.Threading.Monitor.Exit(this);
      }
      remove
      {
        if (EventSinkHelper != null)
        {
          System.Threading.Monitor.Enter(this);
          try {
            EventSinkHelper.onvideoendDelegate -= value;
            CheckDisconnect();
          } catch { }
          System.Threading.Monitor.Exit(this);
        }
      }
    }
  }

  /// <summary><para><c>IWMPVideoSettingsCtrl</c> interface.  </para><para>IWMPVideoSettingsCtrl: Public interface for skin object model.</para></summary>
  // IWMPVideoSettingsCtrl: Public interface for skin object model.
  [Guid("07EC23DA-EF73-4BDE-A40F-F269E0B7AFD6")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPVideoSettingsCtrl
  {
    /// <summary><para><c>reset</c> method of <c>IWMPVideoSettingsCtrl</c> interface.  </para><para>method reset</para></summary>
    /// <remarks><para>An original IDL definition of <c>reset</c> method was the following:  <c>HRESULT reset (void)</c>;</para></remarks>
    // method reset
    // IDL: HRESULT reset (void);
    // VB6: Sub reset
    [DispId(5904)]
    void reset ();

    /// <summary><para><c>brightness</c> property of <c>IWMPVideoSettingsCtrl</c> interface.  </para><para>property brightness</para></summary>
    /// <remarks><para>An original IDL definition of <c>brightness</c> property was the following:  <c>long brightness</c>;</para></remarks>
    // property brightness
    // IDL: long brightness;
    // VB6: brightness As Long
    int brightness
    {
      // IDL: HRESULT brightness ([out, retval] long* ReturnValue);
      // VB6: Function brightness As Long
      [DispId(5900)]
      get;
      // IDL: HRESULT brightness (long value);
      // VB6: Sub brightness (ByVal value As Long)
      [DispId(5900)]
      set;
    }

    /// <summary><para><c>contrast</c> property of <c>IWMPVideoSettingsCtrl</c> interface.  </para><para>property contrast</para></summary>
    /// <remarks><para>An original IDL definition of <c>contrast</c> property was the following:  <c>long contrast</c>;</para></remarks>
    // property contrast
    // IDL: long contrast;
    // VB6: contrast As Long
    int contrast
    {
      // IDL: HRESULT contrast ([out, retval] long* ReturnValue);
      // VB6: Function contrast As Long
      [DispId(5901)]
      get;
      // IDL: HRESULT contrast (long value);
      // VB6: Sub contrast (ByVal value As Long)
      [DispId(5901)]
      set;
    }

    /// <summary><para><c>hue</c> property of <c>IWMPVideoSettingsCtrl</c> interface.  </para><para>property hue</para></summary>
    /// <remarks><para>An original IDL definition of <c>hue</c> property was the following:  <c>long hue</c>;</para></remarks>
    // property hue
    // IDL: long hue;
    // VB6: hue As Long
    int hue
    {
      // IDL: HRESULT hue ([out, retval] long* ReturnValue);
      // VB6: Function hue As Long
      [DispId(5902)]
      get;
      // IDL: HRESULT hue (long value);
      // VB6: Sub hue (ByVal value As Long)
      [DispId(5902)]
      set;
    }

    /// <summary><para><c>saturation</c> property of <c>IWMPVideoSettingsCtrl</c> interface.  </para><para>property saturation</para></summary>
    /// <remarks><para>An original IDL definition of <c>saturation</c> property was the following:  <c>long saturation</c>;</para></remarks>
    // property saturation
    // IDL: long saturation;
    // VB6: saturation As Long
    int saturation
    {
      // IDL: HRESULT saturation ([out, retval] long* ReturnValue);
      // VB6: Function saturation As Long
      [DispId(5903)]
      get;
      // IDL: HRESULT saturation (long value);
      // VB6: Sub saturation (ByVal value As Long)
      [DispId(5903)]
      set;
    }
  }

  /// <summary><para><c>IWMPWindow</c> interface.  </para><para>IWMPWindow: Not Public.  Internal interface used by Windows Media Player.</para></summary>
  // IWMPWindow: Not Public.  Internal interface used by Windows Media Player.
  [Guid("43D5AE92-4332-477C-8883-E0B3B063C5D2")]
  [ComImport]
  [TypeLibType((short)4160)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]
  public interface IWMPWindow
  {
    /// <summary><para><c>setWindowPos</c> method of <c>IWMPWindow</c> interface.  </para><para>method setWindowPos</para></summary>
    /// <remarks><para>An original IDL definition of <c>setWindowPos</c> method was the following:  <c>HRESULT setWindowPos (long x, long y, long height, long width)</c>;</para></remarks>
    // method setWindowPos
    // IDL: HRESULT setWindowPos (long x, long y, long height, long width);
    // VB6: Sub setWindowPos (ByVal x As Long, ByVal y As Long, ByVal height As Long, ByVal width As Long)
    [DispId(3300)]
    void setWindowPos (int x, int y, int height, int width);

    /// <summary><para><c>openViewAlwaysOnTop</c> method of <c>IWMPWindow</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>openViewAlwaysOnTop</c> method was the following:  <c>HRESULT openViewAlwaysOnTop (BSTR bstrViewID)</c>;</para></remarks>
    // IDL: HRESULT openViewAlwaysOnTop (BSTR bstrViewID);
    // VB6: Sub openViewAlwaysOnTop (ByVal bstrViewID As String)
    [DispId(3305)]
    void openViewAlwaysOnTop ([MarshalAs(UnmanagedType.BStr)] string bstrViewID);

    /// <summary><para><c>frameRate</c> property of <c>IWMPWindow</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>frameRate</c> property was the following:  <c>long frameRate</c>;</para></remarks>
    // IDL: long frameRate;
    // VB6: frameRate As Long
    int frameRate
    {
      // IDL: HRESULT frameRate ([out, retval] long* ReturnValue);
      // VB6: Function frameRate As Long
      [DispId(3301)]
      get;
      // IDL: HRESULT frameRate (long value);
      // VB6: Sub frameRate (ByVal value As Long)
      [DispId(3301)]
      set;
    }

    /// <summary><para><c>mouseX</c> property of <c>IWMPWindow</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>mouseX</c> property was the following:  <c>long mouseX</c>;</para></remarks>
    // IDL: long mouseX;
    // VB6: mouseX As Long
    int mouseX
    {
      // IDL: HRESULT mouseX ([out, retval] long* ReturnValue);
      // VB6: Function mouseX As Long
      [DispId(3302)]
      get;
    }

    /// <summary><para><c>mouseY</c> property of <c>IWMPWindow</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>mouseY</c> property was the following:  <c>long mouseY</c>;</para></remarks>
    // IDL: long mouseY;
    // VB6: mouseY As Long
    int mouseY
    {
      // IDL: HRESULT mouseY ([out, retval] long* ReturnValue);
      // VB6: Function mouseY As Long
      [DispId(3303)]
      get;
    }

    /// <summary><para><c>onsizing</c> property of <c>IWMPWindow</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>onsizing</c> property was the following:  <c>IDispatch onsizing</c>;</para></remarks>
    // IDL: IDispatch onsizing;
    // VB6: onsizing As IDispatch
    object onsizing
    {
      // IDL: HRESULT onsizing (IDispatch* value);
      // VB6: Sub onsizing (ByVal value As IDispatch)
      [DispId(3304)]
      set;
    }
  }

  /// <summary><para><c>IWMPCdromBurn</c> interface.  </para><para>IWMPCdromBurn: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPCdromBurn: Public interface for Windows Media Player SDK.
  [Guid("BD94DBEB-417F-4928-AA06-087D56ED9B59")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPCdromBurn
  {
    /// <summary><para><c>isAvailable</c> method of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isAvailable</c> method was the following:  <c>HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT isAvailable (BSTR bstrItem, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isAvailable (ByVal bstrItem As String) As Boolean
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItem);

    /// <summary><para><c>getItemInfo</c> method of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfo</c> method was the following:  <c>HRESULT getItemInfo (BSTR bstrItem, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT getItemInfo (BSTR bstrItem, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfo (ByVal bstrItem As String) As String
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItem);

    /// <summary><para><c>label</c> property get of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>label</c> property get was the following:  <c>HRESULT label ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT label ([out, retval] BSTR* ReturnValue);
    // VB6: Function label () As String
    [return: MarshalAs(UnmanagedType.BStr)]
    string label () /* property get method */;

    /// <summary><para><c>label</c> property put of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>label</c> property put was the following:  <c>HRESULT put_label (BSTR pbstrLabel)</c>;</para></remarks>
    // IDL: HRESULT put_label (BSTR pbstrLabel);
    // VB6: Sub put_label (ByVal pbstrLabel As String)
    void put_label ([MarshalAs(UnmanagedType.BStr)] string pbstrLabel) /* property put method */;

    /// <summary><para><c>burnFormat</c> property get of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>burnFormat</c> property get was the following:  <c>HRESULT burnFormat ([out, retval] WMPBurnFormat* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT burnFormat ([out, retval] WMPBurnFormat* ReturnValue);
    // VB6: Function burnFormat () As WMPBurnFormat
    WMPBurnFormat burnFormat () /* property get method */;

    /// <summary><para><c>burnFormat</c> property put of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>burnFormat</c> property put was the following:  <c>HRESULT put_burnFormat (WMPBurnFormat pwmpbf)</c>;</para></remarks>
    // IDL: HRESULT put_burnFormat (WMPBurnFormat pwmpbf);
    // VB6: Sub put_burnFormat (ByVal pwmpbf As WMPBurnFormat)
    void put_burnFormat (WMPBurnFormat pwmpbf) /* property put method */;

    /// <summary><para><c>burnPlaylist</c> property get of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>burnPlaylist</c> property get was the following:  <c>HRESULT burnPlaylist ([out, retval] IWMPPlaylist** ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT burnPlaylist ([out, retval] IWMPPlaylist** ReturnValue);
    // VB6: Function burnPlaylist () As IWMPPlaylist
    IWMPPlaylist burnPlaylist () /* property get method */;

    /// <summary><para><c>burnPlaylist</c> property put of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>burnPlaylist</c> property put was the following:  <c>HRESULT put_burnPlaylist (IWMPPlaylist* ppPlaylist)</c>;</para></remarks>
    // IDL: HRESULT put_burnPlaylist (IWMPPlaylist* ppPlaylist);
    // VB6: Sub put_burnPlaylist (ByVal ppPlaylist As IWMPPlaylist)
    void put_burnPlaylist (IWMPPlaylist ppPlaylist) /* property put method */;

    /// <summary><para><c>refreshStatus</c> method of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>refreshStatus</c> method was the following:  <c>HRESULT refreshStatus (void)</c>;</para></remarks>
    // IDL: HRESULT refreshStatus (void);
    // VB6: Sub refreshStatus
    void refreshStatus ();

    /// <summary><para><c>burnState</c> property get of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>burnState</c> property get was the following:  <c>HRESULT burnState ([out, retval] WMPBurnState* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT burnState ([out, retval] WMPBurnState* ReturnValue);
    // VB6: Function burnState () As WMPBurnState
    WMPBurnState burnState () /* property get method */;

    /// <summary><para><c>burnProgress</c> property get of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>burnProgress</c> property get was the following:  <c>HRESULT burnProgress ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT burnProgress ([out, retval] long* ReturnValue);
    // VB6: Function burnProgress () As Long
    int burnProgress () /* property get method */;

    /// <summary><para><c>startBurn</c> method of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>startBurn</c> method was the following:  <c>HRESULT startBurn (void)</c>;</para></remarks>
    // IDL: HRESULT startBurn (void);
    // VB6: Sub startBurn
    void startBurn ();

    /// <summary><para><c>stopBurn</c> method of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>stopBurn</c> method was the following:  <c>HRESULT stopBurn (void)</c>;</para></remarks>
    // IDL: HRESULT stopBurn (void);
    // VB6: Sub stopBurn
    void stopBurn ();

    /// <summary><para><c>erase</c> method of <c>IWMPCdromBurn</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>erase</c> method was the following:  <c>HRESULT erase (void)</c>;</para></remarks>
    // IDL: HRESULT erase (void);
    // VB6: Sub erase
    void erase ();
  }

  /// <summary><para><c>IWMPCdromRip</c> interface.  </para><para>IWMPCdromRip: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPCdromRip: Public interface for Windows Media Player SDK.
  [Guid("56E2294F-69ED-4629-A869-AEA72C0DCC2C")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPCdromRip
  {
    /// <summary><para><c>ripState</c> property get of <c>IWMPCdromRip</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>ripState</c> property get was the following:  <c>HRESULT ripState ([out, retval] WMPRipState* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT ripState ([out, retval] WMPRipState* ReturnValue);
    // VB6: Function ripState () As WMPRipState
    WMPRipState ripState () /* property get method */;

    /// <summary><para><c>ripProgress</c> property get of <c>IWMPCdromRip</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>ripProgress</c> property get was the following:  <c>HRESULT ripProgress ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT ripProgress ([out, retval] long* ReturnValue);
    // VB6: Function ripProgress () As Long
    int ripProgress () /* property get method */;

    /// <summary><para><c>startRip</c> method of <c>IWMPCdromRip</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>startRip</c> method was the following:  <c>HRESULT startRip (void)</c>;</para></remarks>
    // IDL: HRESULT startRip (void);
    // VB6: Sub startRip
    void startRip ();

    /// <summary><para><c>stopRip</c> method of <c>IWMPCdromRip</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>stopRip</c> method was the following:  <c>HRESULT stopRip (void)</c>;</para></remarks>
    // IDL: HRESULT stopRip (void);
    // VB6: Sub stopRip
    void stopRip ();
  }

  /// <summary><para><c>IWMPEvents</c> interface.  </para><para>IWMPEvents: Public interface.</para></summary>
  // IWMPEvents: Public interface.
  [Guid("19A6627B-DA9E-47C1-BB23-00B5E668236A")]
  [ComImport]
  [TypeLibType((short)0)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPEvents
  {
    /// <summary><para><c>OpenStateChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the control changes OpenState</para></summary>
    /// <remarks><para>An original IDL definition of <c>OpenStateChange</c> method was the following:  <c>void OpenStateChange (long NewState)</c>;</para></remarks>
    // Sent when the control changes OpenState
    // IDL: void OpenStateChange (long NewState);
    // VB6: Sub OpenStateChange (ByVal NewState As Long)
    [PreserveSig]
    void OpenStateChange (int NewState);

    /// <summary><para><c>PlayStateChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the control changes PlayState</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlayStateChange</c> method was the following:  <c>void PlayStateChange (long NewState)</c>;</para></remarks>
    // Sent when the control changes PlayState
    // IDL: void PlayStateChange (long NewState);
    // VB6: Sub PlayStateChange (ByVal NewState As Long)
    [PreserveSig]
    void PlayStateChange (int NewState);

    /// <summary><para><c>AudioLanguageChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the current audio language has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>AudioLanguageChange</c> method was the following:  <c>void AudioLanguageChange (long LangID)</c>;</para></remarks>
    // Sent when the current audio language has changed
    // IDL: void AudioLanguageChange (long LangID);
    // VB6: Sub AudioLanguageChange (ByVal LangID As Long)
    [PreserveSig]
    void AudioLanguageChange (int LangID);

    /// <summary><para><c>StatusChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the status string changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>StatusChange</c> method was the following:  <c>void StatusChange (void)</c>;</para></remarks>
    // Sent when the status string changes
    // IDL: void StatusChange (void);
    // VB6: Sub StatusChange
    [PreserveSig]
    void StatusChange ();

    /// <summary><para><c>ScriptCommand</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when a synchronized command or URL is received</para></summary>
    /// <remarks><para>An original IDL definition of <c>ScriptCommand</c> method was the following:  <c>void ScriptCommand (BSTR scType, BSTR Param)</c>;</para></remarks>
    // Sent when a synchronized command or URL is received
    // IDL: void ScriptCommand (BSTR scType, BSTR Param);
    // VB6: Sub ScriptCommand (ByVal scType As String, ByVal Param As String)
    [PreserveSig]
    void ScriptCommand ([MarshalAs(UnmanagedType.BStr)] string scType, [MarshalAs(UnmanagedType.BStr)] string Param);

    /// <summary><para><c>NewStream</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when a new stream is started in a channel</para></summary>
    /// <remarks><para>An original IDL definition of <c>NewStream</c> method was the following:  <c>void NewStream (void)</c>;</para></remarks>
    // Sent when a new stream is started in a channel
    // IDL: void NewStream (void);
    // VB6: Sub NewStream
    [PreserveSig]
    void NewStream ();

    /// <summary><para><c>Disconnect</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the control is disconnected from the server</para></summary>
    /// <remarks><para>An original IDL definition of <c>Disconnect</c> method was the following:  <c>void Disconnect (long Result)</c>;</para></remarks>
    // Sent when the control is disconnected from the server
    // IDL: void Disconnect (long Result);
    // VB6: Sub Disconnect (ByVal Result As Long)
    [PreserveSig]
    void Disconnect (int Result);

    /// <summary><para><c>Buffering</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the control begins or ends buffering</para></summary>
    /// <remarks><para>An original IDL definition of <c>Buffering</c> method was the following:  <c>void Buffering (VARIANT_BOOL Start)</c>;</para></remarks>
    // Sent when the control begins or ends buffering
    // IDL: void Buffering (VARIANT_BOOL Start);
    // VB6: Sub Buffering (ByVal Start As Boolean)
    [PreserveSig]
    void Buffering ([MarshalAs(UnmanagedType.VariantBool)] bool Start);

    /// <summary><para><c>Error</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the control has an error condition</para></summary>
    /// <remarks><para>An original IDL definition of <c>Error</c> method was the following:  <c>void Error (void)</c>;</para></remarks>
    // Sent when the control has an error condition
    // IDL: void Error (void);
    // VB6: Sub Error
    [PreserveSig]
    void Error ();

    /// <summary><para><c>Warning</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the control encounters a problem</para></summary>
    /// <remarks><para>An original IDL definition of <c>Warning</c> method was the following:  <c>void Warning (long WarningType, long Param, BSTR Description)</c>;</para></remarks>
    // Sent when the control encounters a problem
    // IDL: void Warning (long WarningType, long Param, BSTR Description);
    // VB6: Sub Warning (ByVal WarningType As Long, ByVal Param As Long, ByVal Description As String)
    [PreserveSig]
    void Warning (int WarningType, int Param, [MarshalAs(UnmanagedType.BStr)] string Description);

    /// <summary><para><c>EndOfStream</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the end of file is reached</para></summary>
    /// <remarks><para>An original IDL definition of <c>EndOfStream</c> method was the following:  <c>void EndOfStream (long Result)</c>;</para></remarks>
    // Sent when the end of file is reached
    // IDL: void EndOfStream (long Result);
    // VB6: Sub EndOfStream (ByVal Result As Long)
    [PreserveSig]
    void EndOfStream (int Result);

    /// <summary><para><c>PositionChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Indicates that the current position of the movie has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>PositionChange</c> method was the following:  <c>void PositionChange (double oldPosition, double newPosition)</c>;</para></remarks>
    // Indicates that the current position of the movie has changed
    // IDL: void PositionChange (double oldPosition, double newPosition);
    // VB6: Sub PositionChange (ByVal oldPosition As Double, ByVal newPosition As Double)
    [PreserveSig]
    void PositionChange (double oldPosition, double newPosition);

    /// <summary><para><c>MarkerHit</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when a marker is reached</para></summary>
    /// <remarks><para>An original IDL definition of <c>MarkerHit</c> method was the following:  <c>void MarkerHit (long MarkerNum)</c>;</para></remarks>
    // Sent when a marker is reached
    // IDL: void MarkerHit (long MarkerNum);
    // VB6: Sub MarkerHit (ByVal MarkerNum As Long)
    [PreserveSig]
    void MarkerHit (int MarkerNum);

    /// <summary><para><c>DurationUnitChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Indicates that the unit used to express duration and position has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>DurationUnitChange</c> method was the following:  <c>void DurationUnitChange (long NewDurationUnit)</c>;</para></remarks>
    // Indicates that the unit used to express duration and position has changed
    // IDL: void DurationUnitChange (long NewDurationUnit);
    // VB6: Sub DurationUnitChange (ByVal NewDurationUnit As Long)
    [PreserveSig]
    void DurationUnitChange (int NewDurationUnit);

    /// <summary><para><c>CdromMediaChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Indicates that the CD ROM media has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromMediaChange</c> method was the following:  <c>void CdromMediaChange (long CdromNum)</c>;</para></remarks>
    // Indicates that the CD ROM media has changed
    // IDL: void CdromMediaChange (long CdromNum);
    // VB6: Sub CdromMediaChange (ByVal CdromNum As Long)
    [PreserveSig]
    void CdromMediaChange (int CdromNum);

    /// <summary><para><c>PlaylistChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when a playlist changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistChange</c> method was the following:  <c>void PlaylistChange (IDispatch* Playlist, WMPPlaylistChangeEventType change)</c>;</para></remarks>
    // Sent when a playlist changes
    // IDL: void PlaylistChange (IDispatch* Playlist, WMPPlaylistChangeEventType change);
    // VB6: Sub PlaylistChange (ByVal Playlist As IDispatch, ByVal change As WMPPlaylistChangeEventType)
    [PreserveSig]
    void PlaylistChange ([MarshalAs(UnmanagedType.IDispatch)] object Playlist, WMPPlaylistChangeEventType change);

    /// <summary><para><c>CurrentPlaylistChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the current playlist changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentPlaylistChange</c> method was the following:  <c>void CurrentPlaylistChange (WMPPlaylistChangeEventType change)</c>;</para></remarks>
    // Sent when the current playlist changes
    // IDL: void CurrentPlaylistChange (WMPPlaylistChangeEventType change);
    // VB6: Sub CurrentPlaylistChange (ByVal change As WMPPlaylistChangeEventType)
    [PreserveSig]
    void CurrentPlaylistChange (WMPPlaylistChangeEventType change);

    /// <summary><para><c>CurrentPlaylistItemAvailable</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when a current playlist item becomes available</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentPlaylistItemAvailable</c> method was the following:  <c>void CurrentPlaylistItemAvailable (BSTR bstrItemName)</c>;</para></remarks>
    // Sent when a current playlist item becomes available
    // IDL: void CurrentPlaylistItemAvailable (BSTR bstrItemName);
    // VB6: Sub CurrentPlaylistItemAvailable (ByVal bstrItemName As String)
    [PreserveSig]
    void CurrentPlaylistItemAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>MediaChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when a media object changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaChange</c> method was the following:  <c>void MediaChange (IDispatch* Item)</c>;</para></remarks>
    // Sent when a media object changes
    // IDL: void MediaChange (IDispatch* Item);
    // VB6: Sub MediaChange (ByVal Item As IDispatch)
    [PreserveSig]
    void MediaChange ([MarshalAs(UnmanagedType.IDispatch)] object Item);

    /// <summary><para><c>CurrentMediaItemAvailable</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when a current media item becomes available</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentMediaItemAvailable</c> method was the following:  <c>void CurrentMediaItemAvailable (BSTR bstrItemName)</c>;</para></remarks>
    // Sent when a current media item becomes available
    // IDL: void CurrentMediaItemAvailable (BSTR bstrItemName);
    // VB6: Sub CurrentMediaItemAvailable (ByVal bstrItemName As String)
    [PreserveSig]
    void CurrentMediaItemAvailable ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>CurrentItemChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the item selection on the current playlist changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CurrentItemChange</c> method was the following:  <c>void CurrentItemChange (IDispatch* pdispMedia)</c>;</para></remarks>
    // Sent when the item selection on the current playlist changes
    // IDL: void CurrentItemChange (IDispatch* pdispMedia);
    // VB6: Sub CurrentItemChange (ByVal pdispMedia As IDispatch)
    [PreserveSig]
    void CurrentItemChange ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

    /// <summary><para><c>MediaCollectionChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the media collection needs to be requeried</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionChange</c> method was the following:  <c>void MediaCollectionChange (void)</c>;</para></remarks>
    // Sent when the media collection needs to be requeried
    // IDL: void MediaCollectionChange (void);
    // VB6: Sub MediaCollectionChange
    [PreserveSig]
    void MediaCollectionChange ();

    /// <summary><para><c>MediaCollectionAttributeStringAdded</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when an attribute string is added in the media collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringAdded</c> method was the following:  <c>void MediaCollectionAttributeStringAdded (BSTR bstrAttribName, BSTR bstrAttribVal)</c>;</para></remarks>
    // Sent when an attribute string is added in the media collection
    // IDL: void MediaCollectionAttributeStringAdded (BSTR bstrAttribName, BSTR bstrAttribVal);
    // VB6: Sub MediaCollectionAttributeStringAdded (ByVal bstrAttribName As String, ByVal bstrAttribVal As String)
    [PreserveSig]
    void MediaCollectionAttributeStringAdded ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrAttribVal);

    /// <summary><para><c>MediaCollectionAttributeStringRemoved</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when an attribute string is removed from the media collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringRemoved</c> method was the following:  <c>void MediaCollectionAttributeStringRemoved (BSTR bstrAttribName, BSTR bstrAttribVal)</c>;</para></remarks>
    // Sent when an attribute string is removed from the media collection
    // IDL: void MediaCollectionAttributeStringRemoved (BSTR bstrAttribName, BSTR bstrAttribVal);
    // VB6: Sub MediaCollectionAttributeStringRemoved (ByVal bstrAttribName As String, ByVal bstrAttribVal As String)
    [PreserveSig]
    void MediaCollectionAttributeStringRemoved ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrAttribVal);

    /// <summary><para><c>MediaCollectionAttributeStringChanged</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when an attribute string is changed in the media collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionAttributeStringChanged</c> method was the following:  <c>void MediaCollectionAttributeStringChanged (BSTR bstrAttribName, BSTR bstrOldAttribVal, BSTR bstrNewAttribVal)</c>;</para></remarks>
    // Sent when an attribute string is changed in the media collection
    // IDL: void MediaCollectionAttributeStringChanged (BSTR bstrAttribName, BSTR bstrOldAttribVal, BSTR bstrNewAttribVal);
    // VB6: Sub MediaCollectionAttributeStringChanged (ByVal bstrAttribName As String, ByVal bstrOldAttribVal As String, ByVal bstrNewAttribVal As String)
    [PreserveSig]
    void MediaCollectionAttributeStringChanged ([MarshalAs(UnmanagedType.BStr)] string bstrAttribName, [MarshalAs(UnmanagedType.BStr)] string bstrOldAttribVal, [MarshalAs(UnmanagedType.BStr)] string bstrNewAttribVal);

    /// <summary><para><c>PlaylistCollectionChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when playlist collection needs to be requeried</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionChange</c> method was the following:  <c>void PlaylistCollectionChange (void)</c>;</para></remarks>
    // Sent when playlist collection needs to be requeried
    // IDL: void PlaylistCollectionChange (void);
    // VB6: Sub PlaylistCollectionChange
    [PreserveSig]
    void PlaylistCollectionChange ();

    /// <summary><para><c>PlaylistCollectionPlaylistAdded</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when a playlist is added to the playlist collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistAdded</c> method was the following:  <c>void PlaylistCollectionPlaylistAdded (BSTR bstrPlaylistName)</c>;</para></remarks>
    // Sent when a playlist is added to the playlist collection
    // IDL: void PlaylistCollectionPlaylistAdded (BSTR bstrPlaylistName);
    // VB6: Sub PlaylistCollectionPlaylistAdded (ByVal bstrPlaylistName As String)
    [PreserveSig]
    void PlaylistCollectionPlaylistAdded ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName);

    /// <summary><para><c>PlaylistCollectionPlaylistRemoved</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when a playlist is removed from the playlist collection</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistRemoved</c> method was the following:  <c>void PlaylistCollectionPlaylistRemoved (BSTR bstrPlaylistName)</c>;</para></remarks>
    // Sent when a playlist is removed from the playlist collection
    // IDL: void PlaylistCollectionPlaylistRemoved (BSTR bstrPlaylistName);
    // VB6: Sub PlaylistCollectionPlaylistRemoved (ByVal bstrPlaylistName As String)
    [PreserveSig]
    void PlaylistCollectionPlaylistRemoved ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName);

    /// <summary><para><c>PlaylistCollectionPlaylistSetAsDeleted</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when a playlist has been set or reset as deleted</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlaylistCollectionPlaylistSetAsDeleted</c> method was the following:  <c>void PlaylistCollectionPlaylistSetAsDeleted (BSTR bstrPlaylistName, VARIANT_BOOL varfIsDeleted)</c>;</para></remarks>
    // Sent when a playlist has been set or reset as deleted
    // IDL: void PlaylistCollectionPlaylistSetAsDeleted (BSTR bstrPlaylistName, VARIANT_BOOL varfIsDeleted);
    // VB6: Sub PlaylistCollectionPlaylistSetAsDeleted (ByVal bstrPlaylistName As String, ByVal varfIsDeleted As Boolean)
    [PreserveSig]
    void PlaylistCollectionPlaylistSetAsDeleted ([MarshalAs(UnmanagedType.BStr)] string bstrPlaylistName, [MarshalAs(UnmanagedType.VariantBool)] bool varfIsDeleted);

    /// <summary><para><c>ModeChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Playlist playback mode has changed</para></summary>
    /// <remarks><para>An original IDL definition of <c>ModeChange</c> method was the following:  <c>void ModeChange (BSTR ModeName, VARIANT_BOOL NewValue)</c>;</para></remarks>
    // Playlist playback mode has changed
    // IDL: void ModeChange (BSTR ModeName, VARIANT_BOOL NewValue);
    // VB6: Sub ModeChange (ByVal ModeName As String, ByVal NewValue As Boolean)
    [PreserveSig]
    void ModeChange ([MarshalAs(UnmanagedType.BStr)] string ModeName, [MarshalAs(UnmanagedType.VariantBool)] bool NewValue);

    /// <summary><para><c>MediaError</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the media object has an error condition</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaError</c> method was the following:  <c>void MediaError (IDispatch* pMediaObject)</c>;</para></remarks>
    // Sent when the media object has an error condition
    // IDL: void MediaError (IDispatch* pMediaObject);
    // VB6: Sub MediaError (ByVal pMediaObject As IDispatch)
    [PreserveSig]
    void MediaError ([MarshalAs(UnmanagedType.IDispatch)] object pMediaObject);

    /// <summary><para><c>OpenPlaylistSwitch</c> method of <c>IWMPEvents</c> interface.  </para><para>Current playlist switch with no open state change</para></summary>
    /// <remarks><para>An original IDL definition of <c>OpenPlaylistSwitch</c> method was the following:  <c>void OpenPlaylistSwitch (IDispatch* pItem)</c>;</para></remarks>
    // Current playlist switch with no open state change
    // IDL: void OpenPlaylistSwitch (IDispatch* pItem);
    // VB6: Sub OpenPlaylistSwitch (ByVal pItem As IDispatch)
    [PreserveSig]
    void OpenPlaylistSwitch ([MarshalAs(UnmanagedType.IDispatch)] object pItem);

    /// <summary><para><c>DomainChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Send a current domain</para></summary>
    /// <remarks><para>An original IDL definition of <c>DomainChange</c> method was the following:  <c>void DomainChange (BSTR strDomain)</c>;</para></remarks>
    // Send a current domain
    // IDL: void DomainChange (BSTR strDomain);
    // VB6: Sub DomainChange (ByVal strDomain As String)
    [PreserveSig]
    void DomainChange ([MarshalAs(UnmanagedType.BStr)] string strDomain);

    /// <summary><para><c>SwitchedToPlayerApplication</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when display switches to player application</para></summary>
    /// <remarks><para>An original IDL definition of <c>SwitchedToPlayerApplication</c> method was the following:  <c>void SwitchedToPlayerApplication (void)</c>;</para></remarks>
    // Sent when display switches to player application
    // IDL: void SwitchedToPlayerApplication (void);
    // VB6: Sub SwitchedToPlayerApplication
    [PreserveSig]
    void SwitchedToPlayerApplication ();

    /// <summary><para><c>SwitchedToControl</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when display switches to control</para></summary>
    /// <remarks><para>An original IDL definition of <c>SwitchedToControl</c> method was the following:  <c>void SwitchedToControl (void)</c>;</para></remarks>
    // Sent when display switches to control
    // IDL: void SwitchedToControl (void);
    // VB6: Sub SwitchedToControl
    [PreserveSig]
    void SwitchedToControl ();

    /// <summary><para><c>PlayerDockedStateChange</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the player docks or undocks</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlayerDockedStateChange</c> method was the following:  <c>void PlayerDockedStateChange (void)</c>;</para></remarks>
    // Sent when the player docks or undocks
    // IDL: void PlayerDockedStateChange (void);
    // VB6: Sub PlayerDockedStateChange
    [PreserveSig]
    void PlayerDockedStateChange ();

    /// <summary><para><c>PlayerReconnect</c> method of <c>IWMPEvents</c> interface.  </para><para>Sent when the OCX reconnects to the player</para></summary>
    /// <remarks><para>An original IDL definition of <c>PlayerReconnect</c> method was the following:  <c>void PlayerReconnect (void)</c>;</para></remarks>
    // Sent when the OCX reconnects to the player
    // IDL: void PlayerReconnect (void);
    // VB6: Sub PlayerReconnect
    [PreserveSig]
    void PlayerReconnect ();

    /// <summary><para><c>Click</c> method of <c>IWMPEvents</c> interface.  </para><para>Occurs when a user clicks the mouse</para></summary>
    /// <remarks><para>An original IDL definition of <c>Click</c> method was the following:  <c>void Click (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
    // Occurs when a user clicks the mouse
    // IDL: void Click (short nButton, short nShiftState, long fX, long fY);
    // VB6: Sub Click (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
    [PreserveSig]
    void Click (short nButton, short nShiftState, int fX, int fY);

    /// <summary><para><c>DoubleClick</c> method of <c>IWMPEvents</c> interface.  </para><para>Occurs when a user double-clicks the mouse</para></summary>
    /// <remarks><para>An original IDL definition of <c>DoubleClick</c> method was the following:  <c>void DoubleClick (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
    // Occurs when a user double-clicks the mouse
    // IDL: void DoubleClick (short nButton, short nShiftState, long fX, long fY);
    // VB6: Sub DoubleClick (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
    [PreserveSig]
    void DoubleClick (short nButton, short nShiftState, int fX, int fY);

    /// <summary><para><c>KeyDown</c> method of <c>IWMPEvents</c> interface.  </para><para>Occurs when a key is pressed</para></summary>
    /// <remarks><para>An original IDL definition of <c>KeyDown</c> method was the following:  <c>void KeyDown (short nKeyCode, short nShiftState)</c>;</para></remarks>
    // Occurs when a key is pressed
    // IDL: void KeyDown (short nKeyCode, short nShiftState);
    // VB6: Sub KeyDown (ByVal nKeyCode As Integer, ByVal nShiftState As Integer)
    [PreserveSig]
    void KeyDown (short nKeyCode, short nShiftState);

    /// <summary><para><c>KeyPress</c> method of <c>IWMPEvents</c> interface.  </para><para>Occurs when a key is pressed and released</para></summary>
    /// <remarks><para>An original IDL definition of <c>KeyPress</c> method was the following:  <c>void KeyPress (short nKeyAscii)</c>;</para></remarks>
    // Occurs when a key is pressed and released
    // IDL: void KeyPress (short nKeyAscii);
    // VB6: Sub KeyPress (ByVal nKeyAscii As Integer)
    [PreserveSig]
    void KeyPress (short nKeyAscii);

    /// <summary><para><c>KeyUp</c> method of <c>IWMPEvents</c> interface.  </para><para>Occurs when a key is released</para></summary>
    /// <remarks><para>An original IDL definition of <c>KeyUp</c> method was the following:  <c>void KeyUp (short nKeyCode, short nShiftState)</c>;</para></remarks>
    // Occurs when a key is released
    // IDL: void KeyUp (short nKeyCode, short nShiftState);
    // VB6: Sub KeyUp (ByVal nKeyCode As Integer, ByVal nShiftState As Integer)
    [PreserveSig]
    void KeyUp (short nKeyCode, short nShiftState);

    /// <summary><para><c>MouseDown</c> method of <c>IWMPEvents</c> interface.  </para><para>Occurs when a mouse button is pressed</para></summary>
    /// <remarks><para>An original IDL definition of <c>MouseDown</c> method was the following:  <c>void MouseDown (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
    // Occurs when a mouse button is pressed
    // IDL: void MouseDown (short nButton, short nShiftState, long fX, long fY);
    // VB6: Sub MouseDown (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
    [PreserveSig]
    void MouseDown (short nButton, short nShiftState, int fX, int fY);

    /// <summary><para><c>MouseMove</c> method of <c>IWMPEvents</c> interface.  </para><para>Occurs when a mouse pointer is moved</para></summary>
    /// <remarks><para>An original IDL definition of <c>MouseMove</c> method was the following:  <c>void MouseMove (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
    // Occurs when a mouse pointer is moved
    // IDL: void MouseMove (short nButton, short nShiftState, long fX, long fY);
    // VB6: Sub MouseMove (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
    [PreserveSig]
    void MouseMove (short nButton, short nShiftState, int fX, int fY);

    /// <summary><para><c>MouseUp</c> method of <c>IWMPEvents</c> interface.  </para><para>Occurs when a mouse button is released</para></summary>
    /// <remarks><para>An original IDL definition of <c>MouseUp</c> method was the following:  <c>void MouseUp (short nButton, short nShiftState, long fX, long fY)</c>;</para></remarks>
    // Occurs when a mouse button is released
    // IDL: void MouseUp (short nButton, short nShiftState, long fX, long fY);
    // VB6: Sub MouseUp (ByVal nButton As Integer, ByVal nShiftState As Integer, ByVal fX As Long, ByVal fY As Long)
    [PreserveSig]
    void MouseUp (short nButton, short nShiftState, int fX, int fY);
  }

  /// <summary><para><c>IWMPEvents2</c> interface.  </para><para>IWMPEvents2: Public interface.</para></summary>
  // IWMPEvents2: Public interface.
  [Guid("1E7601FA-47EA-4107-9EA9-9004ED9684FF")]
  [ComImport]
  [TypeLibType((short)0)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPEvents2
  {
    /// <summary><para><c>DeviceConnect</c> method of <c>IWMPEvents2</c> interface.  </para><para>Occurs when a device is connected</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceConnect</c> method was the following:  <c>void DeviceConnect (IWMPSyncDevice* pDevice)</c>;</para></remarks>
    // Occurs when a device is connected
    // IDL: void DeviceConnect (IWMPSyncDevice* pDevice);
    // VB6: Sub DeviceConnect (ByVal pDevice As IWMPSyncDevice)
    [PreserveSig]
    void DeviceConnect (IWMPSyncDevice pDevice);

    /// <summary><para><c>DeviceDisconnect</c> method of <c>IWMPEvents2</c> interface.  </para><para>Occurs when a device is disconnected</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceDisconnect</c> method was the following:  <c>void DeviceDisconnect (IWMPSyncDevice* pDevice)</c>;</para></remarks>
    // Occurs when a device is disconnected
    // IDL: void DeviceDisconnect (IWMPSyncDevice* pDevice);
    // VB6: Sub DeviceDisconnect (ByVal pDevice As IWMPSyncDevice)
    [PreserveSig]
    void DeviceDisconnect (IWMPSyncDevice pDevice);

    /// <summary><para><c>DeviceStatusChange</c> method of <c>IWMPEvents2</c> interface.  </para><para>Occurs when a device status changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceStatusChange</c> method was the following:  <c>void DeviceStatusChange (IWMPSyncDevice* pDevice, WMPDeviceStatus NewStatus)</c>;</para></remarks>
    // Occurs when a device status changes
    // IDL: void DeviceStatusChange (IWMPSyncDevice* pDevice, WMPDeviceStatus NewStatus);
    // VB6: Sub DeviceStatusChange (ByVal pDevice As IWMPSyncDevice, ByVal NewStatus As WMPDeviceStatus)
    [PreserveSig]
    void DeviceStatusChange (IWMPSyncDevice pDevice, WMPDeviceStatus NewStatus);

    /// <summary><para><c>DeviceSyncStateChange</c> method of <c>IWMPEvents2</c> interface.  </para><para>Occurs when a device sync state changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceSyncStateChange</c> method was the following:  <c>void DeviceSyncStateChange (IWMPSyncDevice* pDevice, WMPSyncState NewState)</c>;</para></remarks>
    // Occurs when a device sync state changes
    // IDL: void DeviceSyncStateChange (IWMPSyncDevice* pDevice, WMPSyncState NewState);
    // VB6: Sub DeviceSyncStateChange (ByVal pDevice As IWMPSyncDevice, ByVal NewState As WMPSyncState)
    [PreserveSig]
    void DeviceSyncStateChange (IWMPSyncDevice pDevice, WMPSyncState NewState);

    /// <summary><para><c>DeviceSyncError</c> method of <c>IWMPEvents2</c> interface.  </para><para>Occurs when a device's media has an error</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceSyncError</c> method was the following:  <c>void DeviceSyncError (IWMPSyncDevice* pDevice, IDispatch* pMedia)</c>;</para></remarks>
    // Occurs when a device's media has an error
    // IDL: void DeviceSyncError (IWMPSyncDevice* pDevice, IDispatch* pMedia);
    // VB6: Sub DeviceSyncError (ByVal pDevice As IWMPSyncDevice, ByVal pMedia As IDispatch)
    [PreserveSig]
    void DeviceSyncError (IWMPSyncDevice pDevice, [MarshalAs(UnmanagedType.IDispatch)] object pMedia);

    /// <summary><para><c>CreatePartnershipComplete</c> method of <c>IWMPEvents2</c> interface.  </para><para>Occurs when createPartnership call completes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CreatePartnershipComplete</c> method was the following:  <c>void CreatePartnershipComplete (IWMPSyncDevice* pDevice, HRESULT hrResult)</c>;</para></remarks>
    // Occurs when createPartnership call completes
    // IDL: void CreatePartnershipComplete (IWMPSyncDevice* pDevice, HRESULT hrResult);
    // VB6: Sub CreatePartnershipComplete (ByVal pDevice As IWMPSyncDevice, ByVal hrResult As Long)
    [PreserveSig]
    void CreatePartnershipComplete (IWMPSyncDevice pDevice, uint hrResult);
  }

  /// <summary><para><c>IWMPEvents3</c> interface.  </para><para>IWMPEvents3: Public interface.</para></summary>
  // IWMPEvents3: Public interface.
  [Guid("1F504270-A66B-4223-8E96-26A06C63D69F")]
  [ComImport]
  [TypeLibType((short)0)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPEvents3
  {
    /// <summary><para><c>CdromRipStateChange</c> method of <c>IWMPEvents3</c> interface.  </para><para>Occurs when ripping state changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromRipStateChange</c> method was the following:  <c>void CdromRipStateChange (IWMPCdromRip* pCdromRip, WMPRipState wmprs)</c>;</para></remarks>
    // Occurs when ripping state changes
    // IDL: void CdromRipStateChange (IWMPCdromRip* pCdromRip, WMPRipState wmprs);
    // VB6: Sub CdromRipStateChange (ByVal pCdromRip As IWMPCdromRip, ByVal wmprs As WMPRipState)
    [PreserveSig]
    void CdromRipStateChange (IWMPCdromRip pCdromRip, WMPRipState wmprs);

    /// <summary><para><c>CdromRipMediaError</c> method of <c>IWMPEvents3</c> interface.  </para><para>Occurs when an error happens while ripping a media</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromRipMediaError</c> method was the following:  <c>void CdromRipMediaError (IWMPCdromRip* pCdromRip, IDispatch* pMedia)</c>;</para></remarks>
    // Occurs when an error happens while ripping a media
    // IDL: void CdromRipMediaError (IWMPCdromRip* pCdromRip, IDispatch* pMedia);
    // VB6: Sub CdromRipMediaError (ByVal pCdromRip As IWMPCdromRip, ByVal pMedia As IDispatch)
    [PreserveSig]
    void CdromRipMediaError (IWMPCdromRip pCdromRip, [MarshalAs(UnmanagedType.IDispatch)] object pMedia);

    /// <summary><para><c>CdromBurnStateChange</c> method of <c>IWMPEvents3</c> interface.  </para><para>Occurs when burning state changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromBurnStateChange</c> method was the following:  <c>void CdromBurnStateChange (IWMPCdromBurn* pCdromBurn, WMPBurnState wmpbs)</c>;</para></remarks>
    // Occurs when burning state changes
    // IDL: void CdromBurnStateChange (IWMPCdromBurn* pCdromBurn, WMPBurnState wmpbs);
    // VB6: Sub CdromBurnStateChange (ByVal pCdromBurn As IWMPCdromBurn, ByVal wmpbs As WMPBurnState)
    [PreserveSig]
    void CdromBurnStateChange (IWMPCdromBurn pCdromBurn, WMPBurnState wmpbs);

    /// <summary><para><c>CdromBurnMediaError</c> method of <c>IWMPEvents3</c> interface.  </para><para>Occurs when an error happens while burning a media</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromBurnMediaError</c> method was the following:  <c>void CdromBurnMediaError (IWMPCdromBurn* pCdromBurn, IDispatch* pMedia)</c>;</para></remarks>
    // Occurs when an error happens while burning a media
    // IDL: void CdromBurnMediaError (IWMPCdromBurn* pCdromBurn, IDispatch* pMedia);
    // VB6: Sub CdromBurnMediaError (ByVal pCdromBurn As IWMPCdromBurn, ByVal pMedia As IDispatch)
    [PreserveSig]
    void CdromBurnMediaError (IWMPCdromBurn pCdromBurn, [MarshalAs(UnmanagedType.IDispatch)] object pMedia);

    /// <summary><para><c>CdromBurnError</c> method of <c>IWMPEvents3</c> interface.  </para><para>Occurs when a generic error happens while burning</para></summary>
    /// <remarks><para>An original IDL definition of <c>CdromBurnError</c> method was the following:  <c>void CdromBurnError (IWMPCdromBurn* pCdromBurn, HRESULT hrError)</c>;</para></remarks>
    // Occurs when a generic error happens while burning
    // IDL: void CdromBurnError (IWMPCdromBurn* pCdromBurn, HRESULT hrError);
    // VB6: Sub CdromBurnError (ByVal pCdromBurn As IWMPCdromBurn, ByVal hrError As Long)
    [PreserveSig]
    void CdromBurnError (IWMPCdromBurn pCdromBurn, uint hrError);

    /// <summary><para><c>LibraryConnect</c> method of <c>IWMPEvents3</c> interface.  </para><para>Occurs when a library is connected</para></summary>
    /// <remarks><para>An original IDL definition of <c>LibraryConnect</c> method was the following:  <c>void LibraryConnect (IWMPLibrary* pLibrary)</c>;</para></remarks>
    // Occurs when a library is connected
    // IDL: void LibraryConnect (IWMPLibrary* pLibrary);
    // VB6: Sub LibraryConnect (ByVal pLibrary As IWMPLibrary)
    [PreserveSig]
    void LibraryConnect (IWMPLibrary pLibrary);

    /// <summary><para><c>LibraryDisconnect</c> method of <c>IWMPEvents3</c> interface.  </para><para>Occurs when a library is disconnected</para></summary>
    /// <remarks><para>An original IDL definition of <c>LibraryDisconnect</c> method was the following:  <c>void LibraryDisconnect (IWMPLibrary* pLibrary)</c>;</para></remarks>
    // Occurs when a library is disconnected
    // IDL: void LibraryDisconnect (IWMPLibrary* pLibrary);
    // VB6: Sub LibraryDisconnect (ByVal pLibrary As IWMPLibrary)
    [PreserveSig]
    void LibraryDisconnect (IWMPLibrary pLibrary);

    /// <summary><para><c>FolderScanStateChange</c> method of <c>IWMPEvents3</c> interface.  </para><para>Occurs when a folder scan state changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>FolderScanStateChange</c> method was the following:  <c>void FolderScanStateChange (WMPFolderScanState wmpfss)</c>;</para></remarks>
    // Occurs when a folder scan state changes
    // IDL: void FolderScanStateChange (WMPFolderScanState wmpfss);
    // VB6: Sub FolderScanStateChange (ByVal wmpfss As WMPFolderScanState)
    [PreserveSig]
    void FolderScanStateChange (WMPFolderScanState wmpfss);

    /// <summary><para><c>StringCollectionChange</c> method of <c>IWMPEvents3</c> interface.  </para><para>Sent when a string collection changes</para></summary>
    /// <remarks><para>An original IDL definition of <c>StringCollectionChange</c> method was the following:  <c>void StringCollectionChange (IDispatch* pdispStringCollection, WMPStringCollectionChangeEventType change, long lCollectionIndex)</c>;</para></remarks>
    // Sent when a string collection changes
    // IDL: void StringCollectionChange (IDispatch* pdispStringCollection, WMPStringCollectionChangeEventType change, long lCollectionIndex);
    // VB6: Sub StringCollectionChange (ByVal pdispStringCollection As IDispatch, ByVal change As WMPStringCollectionChangeEventType, ByVal lCollectionIndex As Long)
    [PreserveSig]
    void StringCollectionChange ([MarshalAs(UnmanagedType.IDispatch)] object pdispStringCollection, WMPStringCollectionChangeEventType change, int lCollectionIndex);

    /// <summary><para><c>MediaCollectionMediaAdded</c> method of <c>IWMPEvents3</c> interface.  </para><para>Sent when a media is added to the local library</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionMediaAdded</c> method was the following:  <c>void MediaCollectionMediaAdded (IDispatch* pdispMedia)</c>;</para></remarks>
    // Sent when a media is added to the local library
    // IDL: void MediaCollectionMediaAdded (IDispatch* pdispMedia);
    // VB6: Sub MediaCollectionMediaAdded (ByVal pdispMedia As IDispatch)
    [PreserveSig]
    void MediaCollectionMediaAdded ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);

    /// <summary><para><c>MediaCollectionMediaRemoved</c> method of <c>IWMPEvents3</c> interface.  </para><para>Sent when a media is removed from the local library</para></summary>
    /// <remarks><para>An original IDL definition of <c>MediaCollectionMediaRemoved</c> method was the following:  <c>void MediaCollectionMediaRemoved (IDispatch* pdispMedia)</c>;</para></remarks>
    // Sent when a media is removed from the local library
    // IDL: void MediaCollectionMediaRemoved (IDispatch* pdispMedia);
    // VB6: Sub MediaCollectionMediaRemoved (ByVal pdispMedia As IDispatch)
    [PreserveSig]
    void MediaCollectionMediaRemoved ([MarshalAs(UnmanagedType.IDispatch)] object pdispMedia);
  }

  /// <summary><para><c>IWMPEvents4</c> interface.  </para><para>IWMPEvents4: Public interface.</para></summary>
  // IWMPEvents4: Public interface.
  [Guid("26DABCFA-306B-404D-9A6F-630A8405048D")]
  [ComImport]
  [TypeLibType((short)0)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPEvents4
  {
    /// <summary><para><c>DeviceEstimation</c> method of <c>IWMPEvents4</c> interface.  </para><para>Occurs when the sync estimation completed</para></summary>
    /// <remarks><para>An original IDL definition of <c>DeviceEstimation</c> method was the following:  <c>void DeviceEstimation (IWMPSyncDevice* pDevice, HRESULT hrResult, __int64 qwEstimatedUsedSpace, __int64 qwEstimatedSpace)</c>;</para></remarks>
    // Occurs when the sync estimation completed
    // IDL: void DeviceEstimation (IWMPSyncDevice* pDevice, HRESULT hrResult, __int64 qwEstimatedUsedSpace, __int64 qwEstimatedSpace);
    // VB6: Sub DeviceEstimation (ByVal pDevice As IWMPSyncDevice, ByVal hrResult As Long, ByVal qwEstimatedUsedSpace As Int64, ByVal qwEstimatedSpace As Int64)
    [PreserveSig]
    void DeviceEstimation (IWMPSyncDevice pDevice, uint hrResult, long qwEstimatedUsedSpace, long qwEstimatedSpace);
  }

  /// <summary><para><c>IWMPFolderMonitorServices</c> interface.  </para><para>IWMPFolderMonitorServices: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPFolderMonitorServices: Public interface for Windows Media Player SDK.
  [Guid("788C8743-E57F-439D-A468-5BC77F2E59C6")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPFolderMonitorServices
  {
    /// <summary><para><c>count</c> property get of <c>IWMPFolderMonitorServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>count</c> property get was the following:  <c>HRESULT count ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT count ([out, retval] long* ReturnValue);
    // VB6: Function count () As Long
    int count () /* property get method */;

    /// <summary><para><c>Item</c> method of <c>IWMPFolderMonitorServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>Item</c> method was the following:  <c>HRESULT Item (long lIndex, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT Item (long lIndex, [out, retval] BSTR* ReturnValue);
    // VB6: Function Item (ByVal lIndex As Long) As String
    [return: MarshalAs(UnmanagedType.BStr)]
    string Item (int lIndex);

    /// <summary><para><c>add</c> method of <c>IWMPFolderMonitorServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>add</c> method was the following:  <c>HRESULT add (BSTR bstrFolder)</c>;</para></remarks>
    // IDL: HRESULT add (BSTR bstrFolder);
    // VB6: Sub add (ByVal bstrFolder As String)
    void add ([MarshalAs(UnmanagedType.BStr)] string bstrFolder);

    /// <summary><para><c>remove</c> method of <c>IWMPFolderMonitorServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>remove</c> method was the following:  <c>HRESULT remove (long lIndex)</c>;</para></remarks>
    // IDL: HRESULT remove (long lIndex);
    // VB6: Sub remove (ByVal lIndex As Long)
    void remove (int lIndex);

    /// <summary><para><c>scanState</c> property get of <c>IWMPFolderMonitorServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>scanState</c> property get was the following:  <c>HRESULT scanState ([out, retval] WMPFolderScanState* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT scanState ([out, retval] WMPFolderScanState* ReturnValue);
    // VB6: Function scanState () As WMPFolderScanState
    WMPFolderScanState scanState () /* property get method */;

    /// <summary><para><c>currentFolder</c> property get of <c>IWMPFolderMonitorServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>currentFolder</c> property get was the following:  <c>HRESULT currentFolder ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT currentFolder ([out, retval] BSTR* ReturnValue);
    // VB6: Function currentFolder () As String
    [return: MarshalAs(UnmanagedType.BStr)]
    string currentFolder () /* property get method */;

    /// <summary><para><c>scannedFilesCount</c> property get of <c>IWMPFolderMonitorServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>scannedFilesCount</c> property get was the following:  <c>HRESULT scannedFilesCount ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT scannedFilesCount ([out, retval] long* ReturnValue);
    // VB6: Function scannedFilesCount () As Long
    int scannedFilesCount () /* property get method */;

    /// <summary><para><c>addedFilesCount</c> property get of <c>IWMPFolderMonitorServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>addedFilesCount</c> property get was the following:  <c>HRESULT addedFilesCount ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT addedFilesCount ([out, retval] long* ReturnValue);
    // VB6: Function addedFilesCount () As Long
    int addedFilesCount () /* property get method */;

    /// <summary><para><c>updateProgress</c> property get of <c>IWMPFolderMonitorServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>updateProgress</c> property get was the following:  <c>HRESULT updateProgress ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT updateProgress ([out, retval] long* ReturnValue);
    // VB6: Function updateProgress () As Long
    int updateProgress () /* property get method */;

    /// <summary><para><c>startScan</c> method of <c>IWMPFolderMonitorServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>startScan</c> method was the following:  <c>HRESULT startScan (void)</c>;</para></remarks>
    // IDL: HRESULT startScan (void);
    // VB6: Sub startScan
    void startScan ();

    /// <summary><para><c>stopScan</c> method of <c>IWMPFolderMonitorServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>stopScan</c> method was the following:  <c>HRESULT stopScan (void)</c>;</para></remarks>
    // IDL: HRESULT stopScan (void);
    // VB6: Sub stopScan
    void stopScan ();
  }

  /// <summary><para><c>IWMPLibrary</c> interface.  </para><para>IWMPLibrary: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPLibrary: Public interface for Windows Media Player SDK.
  [Guid("3DF47861-7DF1-4C1F-A81B-4C26F0F7A7C6")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPLibrary
  {
    /// <summary><para><c>name</c> property get of <c>IWMPLibrary</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>name</c> property get was the following:  <c>HRESULT name ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT name ([out, retval] BSTR* ReturnValue);
    // VB6: Function name () As String
    [return: MarshalAs(UnmanagedType.BStr)]
    string name () /* property get method */;

    /// <summary><para><c>type</c> property get of <c>IWMPLibrary</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>type</c> property get was the following:  <c>HRESULT type ([out, retval] WMPLibraryType* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT type ([out, retval] WMPLibraryType* ReturnValue);
    // VB6: Function type () As WMPLibraryType
    WMPLibraryType type () /* property get method */;

    /// <summary><para><c>mediaCollection</c> property get of <c>IWMPLibrary</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>mediaCollection</c> property get was the following:  <c>HRESULT mediaCollection ([out, retval] IWMPMediaCollection** ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT mediaCollection ([out, retval] IWMPMediaCollection** ReturnValue);
    // VB6: Function mediaCollection () As IWMPMediaCollection
    IWMPMediaCollection mediaCollection () /* property get method */;

    /// <summary><para><c>isIdentical</c> method of <c>IWMPLibrary</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isIdentical</c> method was the following:  <c>HRESULT isIdentical (IWMPLibrary* pIWMPLibrary, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT isIdentical (IWMPLibrary* pIWMPLibrary, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isIdentical (ByVal pIWMPLibrary As IWMPLibrary) As Boolean
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isIdentical (IWMPLibrary pIWMPLibrary);
  }

  /// <summary><para><c>IWMPLibrary2</c> interface.  </para><para>IWMPLibrary2: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPLibrary2: Public interface for Windows Media Player SDK.
  [Guid("DD578A4E-79B1-426C-BF8F-3ADD9072500B")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPLibrary2
  {
    /// <summary><para><c>getItemInfo</c> method of <c>IWMPLibrary2</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfo</c> method was the following:  <c>HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfo (ByVal bstrItemName As String) As String
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);
  }

  /// <summary><para><c>IWMPLibraryServices</c> interface.  </para><para>IWMPLibraryServices: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPLibraryServices: Public interface for Windows Media Player SDK.
  [Guid("39C2F8D5-1CF2-4D5E-AE09-D73492CF9EAA")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPLibraryServices
  {
    /// <summary><para><c>getCountByType</c> method of <c>IWMPLibraryServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>getCountByType</c> method was the following:  <c>HRESULT getCountByType (WMPLibraryType wmplt, [out, retval] long* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT getCountByType (WMPLibraryType wmplt, [out, retval] long* ReturnValue);
    // VB6: Function getCountByType (ByVal wmplt As WMPLibraryType) As Long
    int getCountByType (WMPLibraryType wmplt);

    /// <summary><para><c>getLibraryByType</c> method of <c>IWMPLibraryServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>getLibraryByType</c> method was the following:  <c>HRESULT getLibraryByType (WMPLibraryType wmplt, long lIndex, [out, retval] IWMPLibrary** ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT getLibraryByType (WMPLibraryType wmplt, long lIndex, [out, retval] IWMPLibrary** ReturnValue);
    // VB6: Function getLibraryByType (ByVal wmplt As WMPLibraryType, ByVal lIndex As Long) As IWMPLibrary
    IWMPLibrary getLibraryByType (WMPLibraryType wmplt, int lIndex);
  }

  /// <summary><para><c>IWMPLibrarySharingServices</c> interface.  </para><para>IWMPLibrarySharingServices: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPLibrarySharingServices: Public interface for Windows Media Player SDK.
  [Guid("82CBA86B-9F04-474B-A365-D6DD1466E541")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPLibrarySharingServices
  {
    /// <summary><para><c>isLibraryShared</c> method of <c>IWMPLibrarySharingServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isLibraryShared</c> method was the following:  <c>HRESULT isLibraryShared ([out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT isLibraryShared ([out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isLibraryShared () As Boolean
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isLibraryShared ();

    /// <summary><para><c>isLibrarySharingEnabled</c> method of <c>IWMPLibrarySharingServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isLibrarySharingEnabled</c> method was the following:  <c>HRESULT isLibrarySharingEnabled ([out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT isLibrarySharingEnabled ([out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isLibrarySharingEnabled () As Boolean
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isLibrarySharingEnabled ();

    /// <summary><para><c>showLibrarySharing</c> method of <c>IWMPLibrarySharingServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>showLibrarySharing</c> method was the following:  <c>HRESULT showLibrarySharing (void)</c>;</para></remarks>
    // IDL: HRESULT showLibrarySharing (void);
    // VB6: Sub showLibrarySharing
    void showLibrarySharing ();
  }

  /// <summary><para><c>IWMPPlayerServices</c> interface.  </para><para>IWMPPlayerServices: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPPlayerServices: Public interface for Windows Media Player SDK.
  [Guid("1D01FBDB-ADE2-4C8D-9842-C190B95C3306")]
  [ComImport]
  [TypeLibType((short)0)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPPlayerServices
  {
    /// <summary><para><c>activateUIPlugin</c> method of <c>IWMPPlayerServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>activateUIPlugin</c> method was the following:  <c>HRESULT activateUIPlugin (BSTR bstrPlugin)</c>;</para></remarks>
    // IDL: HRESULT activateUIPlugin (BSTR bstrPlugin);
    // VB6: Sub activateUIPlugin (ByVal bstrPlugin As String)
    void activateUIPlugin ([MarshalAs(UnmanagedType.BStr)] string bstrPlugin);

    /// <summary><para><c>setTaskPane</c> method of <c>IWMPPlayerServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>setTaskPane</c> method was the following:  <c>HRESULT setTaskPane (BSTR bstrTaskPane)</c>;</para></remarks>
    // IDL: HRESULT setTaskPane (BSTR bstrTaskPane);
    // VB6: Sub setTaskPane (ByVal bstrTaskPane As String)
    void setTaskPane ([MarshalAs(UnmanagedType.BStr)] string bstrTaskPane);

    /// <summary><para><c>setTaskPaneURL</c> method of <c>IWMPPlayerServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>setTaskPaneURL</c> method was the following:  <c>HRESULT setTaskPaneURL (BSTR bstrTaskPane, BSTR bstrURL, BSTR bstrFriendlyName)</c>;</para></remarks>
    // IDL: HRESULT setTaskPaneURL (BSTR bstrTaskPane, BSTR bstrURL, BSTR bstrFriendlyName);
    // VB6: Sub setTaskPaneURL (ByVal bstrTaskPane As String, ByVal bstrURL As String, ByVal bstrFriendlyName As String)
    void setTaskPaneURL ([MarshalAs(UnmanagedType.BStr)] string bstrTaskPane, [MarshalAs(UnmanagedType.BStr)] string bstrURL, [MarshalAs(UnmanagedType.BStr)] string bstrFriendlyName);
  }

  /// <summary><para><c>IWMPPlayerServices2</c> interface.  </para><para>IWMPPlayerServices2: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPPlayerServices2: Public interface for Windows Media Player SDK.
  [Guid("1BB1592F-F040-418A-9F71-17C7512B4D70")]
  [ComImport]
  [TypeLibType((short)0)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPPlayerServices2
  {
    /// <summary><para><c>setBackgroundProcessingPriority</c> method of <c>IWMPPlayerServices2</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>setBackgroundProcessingPriority</c> method was the following:  <c>HRESULT setBackgroundProcessingPriority (BSTR bstrPriority)</c>;</para></remarks>
    // IDL: HRESULT setBackgroundProcessingPriority (BSTR bstrPriority);
    // VB6: Sub setBackgroundProcessingPriority (ByVal bstrPriority As String)
    void setBackgroundProcessingPriority ([MarshalAs(UnmanagedType.BStr)] string bstrPriority);
  }

  /// <summary><para><c>IWMPRemoteMediaServices</c> interface.  </para><para>IWMPRemoteMediaServices: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPRemoteMediaServices: Public interface for Windows Media Player SDK.
  [Guid("CBB92747-741F-44FE-AB5B-F1A48F3B2A59")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPRemoteMediaServices
  {
    /// <summary><para><c>GetServiceType</c> method of <c>IWMPRemoteMediaServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetServiceType</c> method was the following:  <c>HRESULT GetServiceType ([out] BSTR* pbstrType)</c>;</para></remarks>
    // IDL: HRESULT GetServiceType ([out] BSTR* pbstrType);
    // VB6: Sub GetServiceType (pbstrType As String)
    void GetServiceType ([Out, MarshalAs(UnmanagedType.BStr)] out string pbstrType);

    /// <summary><para><c>GetApplicationName</c> method of <c>IWMPRemoteMediaServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetApplicationName</c> method was the following:  <c>HRESULT GetApplicationName ([out] BSTR* pbstrName)</c>;</para></remarks>
    // IDL: HRESULT GetApplicationName ([out] BSTR* pbstrName);
    // VB6: Sub GetApplicationName (pbstrName As String)
    void GetApplicationName ([Out, MarshalAs(UnmanagedType.BStr)] out string pbstrName);

    /// <summary><para><c>GetScriptableObject</c> method of <c>IWMPRemoteMediaServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetScriptableObject</c> method was the following:  <c>HRESULT GetScriptableObject ([out] BSTR* pbstrName, [out] IDispatch** ppDispatch)</c>;</para></remarks>
    // IDL: HRESULT GetScriptableObject ([out] BSTR* pbstrName, [out] IDispatch** ppDispatch);
    // VB6: Sub GetScriptableObject (pbstrName As String, ppDispatch As IDispatch)
    void GetScriptableObject ([Out, MarshalAs(UnmanagedType.BStr)] out string pbstrName, [Out, MarshalAs(UnmanagedType.IDispatch)] out object ppDispatch);

    /// <summary><para><c>GetCustomUIMode</c> method of <c>IWMPRemoteMediaServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>GetCustomUIMode</c> method was the following:  <c>HRESULT GetCustomUIMode ([out] BSTR* pbstrFile)</c>;</para></remarks>
    // IDL: HRESULT GetCustomUIMode ([out] BSTR* pbstrFile);
    // VB6: Sub GetCustomUIMode (pbstrFile As String)
    void GetCustomUIMode ([Out, MarshalAs(UnmanagedType.BStr)] out string pbstrFile);
  }

  /// <summary><para><c>IWMPSyncDevice</c> interface.  </para><para>IWMPSyncDevice: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPSyncDevice: Public interface for Windows Media Player SDK.
  [Guid("82A2986C-0293-4FD0-B279-B21B86C058BE")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPSyncDevice
  {
    /// <summary><para><c>friendlyName</c> property get of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>friendlyName</c> property get was the following:  <c>HRESULT friendlyName ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT friendlyName ([out, retval] BSTR* ReturnValue);
    // VB6: Function friendlyName () As String
    [return: MarshalAs(UnmanagedType.BStr)]
    string friendlyName () /* property get method */;

    /// <summary><para><c>friendlyName</c> property put of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>friendlyName</c> property put was the following:  <c>HRESULT put_friendlyName (BSTR pbstrName)</c>;</para></remarks>
    // IDL: HRESULT put_friendlyName (BSTR pbstrName);
    // VB6: Sub put_friendlyName (ByVal pbstrName As String)
    void put_friendlyName ([MarshalAs(UnmanagedType.BStr)] string pbstrName) /* property put method */;

    /// <summary><para><c>deviceName</c> property get of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>deviceName</c> property get was the following:  <c>HRESULT deviceName ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT deviceName ([out, retval] BSTR* ReturnValue);
    // VB6: Function deviceName () As String
    [return: MarshalAs(UnmanagedType.BStr)]
    string deviceName () /* property get method */;

    /// <summary><para><c>deviceId</c> property get of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>deviceId</c> property get was the following:  <c>HRESULT deviceId ([out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT deviceId ([out, retval] BSTR* ReturnValue);
    // VB6: Function deviceId () As String
    [return: MarshalAs(UnmanagedType.BStr)]
    string deviceId () /* property get method */;

    /// <summary><para><c>partnershipIndex</c> property get of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>partnershipIndex</c> property get was the following:  <c>HRESULT partnershipIndex ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT partnershipIndex ([out, retval] long* ReturnValue);
    // VB6: Function partnershipIndex () As Long
    int partnershipIndex () /* property get method */;

    /// <summary><para><c>connected</c> property get of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>connected</c> property get was the following:  <c>HRESULT connected ([out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT connected ([out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function connected () As Boolean
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool connected () /* property get method */;

    /// <summary><para><c>status</c> property get of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>status</c> property get was the following:  <c>HRESULT status ([out, retval] WMPDeviceStatus* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT status ([out, retval] WMPDeviceStatus* ReturnValue);
    // VB6: Function status () As WMPDeviceStatus
    WMPDeviceStatus status () /* property get method */;

    /// <summary><para><c>syncState</c> property get of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>syncState</c> property get was the following:  <c>HRESULT syncState ([out, retval] WMPSyncState* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT syncState ([out, retval] WMPSyncState* ReturnValue);
    // VB6: Function syncState () As WMPSyncState
    WMPSyncState syncState () /* property get method */;

    /// <summary><para><c>progress</c> property get of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>progress</c> property get was the following:  <c>HRESULT progress ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT progress ([out, retval] long* ReturnValue);
    // VB6: Function progress () As Long
    int progress () /* property get method */;

    /// <summary><para><c>getItemInfo</c> method of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>getItemInfo</c> method was the following:  <c>HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT getItemInfo (BSTR bstrItemName, [out, retval] BSTR* ReturnValue);
    // VB6: Function getItemInfo (ByVal bstrItemName As String) As String
    [return: MarshalAs(UnmanagedType.BStr)]
    string getItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItemName);

    /// <summary><para><c>createPartnership</c> method of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>createPartnership</c> method was the following:  <c>HRESULT createPartnership (VARIANT_BOOL vbShowUI)</c>;</para></remarks>
    // IDL: HRESULT createPartnership (VARIANT_BOOL vbShowUI);
    // VB6: Sub createPartnership (ByVal vbShowUI As Boolean)
    void createPartnership ([MarshalAs(UnmanagedType.VariantBool)] bool vbShowUI);

    /// <summary><para><c>deletePartnership</c> method of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>deletePartnership</c> method was the following:  <c>HRESULT deletePartnership (void)</c>;</para></remarks>
    // IDL: HRESULT deletePartnership (void);
    // VB6: Sub deletePartnership
    void deletePartnership ();

    /// <summary><para><c>Start</c> method of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>Start</c> method was the following:  <c>HRESULT Start (void)</c>;</para></remarks>
    // IDL: HRESULT Start (void);
    // VB6: Sub Start
    void Start ();

    /// <summary><para><c>stop</c> method of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>stop</c> method was the following:  <c>HRESULT stop (void)</c>;</para></remarks>
    // IDL: HRESULT stop (void);
    // VB6: Sub stop
    void stop ();

    /// <summary><para><c>showSettings</c> method of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>showSettings</c> method was the following:  <c>HRESULT showSettings (void)</c>;</para></remarks>
    // IDL: HRESULT showSettings (void);
    // VB6: Sub showSettings
    void showSettings ();

    /// <summary><para><c>isIdentical</c> method of <c>IWMPSyncDevice</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>isIdentical</c> method was the following:  <c>HRESULT isIdentical (IWMPSyncDevice* pDevice, [out, retval] VARIANT_BOOL* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT isIdentical (IWMPSyncDevice* pDevice, [out, retval] VARIANT_BOOL* ReturnValue);
    // VB6: Function isIdentical (ByVal pDevice As IWMPSyncDevice) As Boolean
    [return: MarshalAs(UnmanagedType.VariantBool)]
    bool isIdentical (IWMPSyncDevice pDevice);
  }

  /// <summary><para><c>IWMPSyncDevice2</c> interface.  </para><para>IWMPSyncDevice2: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPSyncDevice2: Public interface for Windows Media Player SDK.
  [Guid("88AFB4B2-140A-44D2-91E6-4543DA467CD1")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPSyncDevice2
  {
    /// <summary><para><c>setItemInfo</c> method of <c>IWMPSyncDevice2</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>setItemInfo</c> method was the following:  <c>HRESULT setItemInfo (BSTR bstrItemName, BSTR bstrVal)</c>;</para></remarks>
    // IDL: HRESULT setItemInfo (BSTR bstrItemName, BSTR bstrVal);
    // VB6: Sub setItemInfo (ByVal bstrItemName As String, ByVal bstrVal As String)
    void setItemInfo ([MarshalAs(UnmanagedType.BStr)] string bstrItemName, [MarshalAs(UnmanagedType.BStr)] string bstrVal);
  }

  /// <summary><para><c>IWMPSyncDevice3</c> interface.  </para><para>IWMPSyncDevice3: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPSyncDevice3: Public interface for Windows Media Player SDK.
  [Guid("B22C85F9-263C-4372-A0DA-B518DB9B4098")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPSyncDevice3
  {
    /// <summary><para><c>estimateSyncSize</c> method of <c>IWMPSyncDevice3</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>estimateSyncSize</c> method was the following:  <c>HRESULT estimateSyncSize (IWMPPlaylist* pNonRulePlaylist, IWMPPlaylist* pRulesPlaylist)</c>;</para></remarks>
    // IDL: HRESULT estimateSyncSize (IWMPPlaylist* pNonRulePlaylist, IWMPPlaylist* pRulesPlaylist);
    // VB6: Sub estimateSyncSize (ByVal pNonRulePlaylist As IWMPPlaylist, ByVal pRulesPlaylist As IWMPPlaylist)
    void estimateSyncSize (IWMPPlaylist pNonRulePlaylist, IWMPPlaylist pRulesPlaylist);

    /// <summary><para><c>cancelEstimation</c> method of <c>IWMPSyncDevice3</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>cancelEstimation</c> method was the following:  <c>HRESULT cancelEstimation (void)</c>;</para></remarks>
    // IDL: HRESULT cancelEstimation (void);
    // VB6: Sub cancelEstimation
    void cancelEstimation ();
  }

  /// <summary><para><c>IWMPSyncServices</c> interface.  </para><para>IWMPSyncServices: Public interface for Windows Media Player SDK.</para></summary>
  // IWMPSyncServices: Public interface for Windows Media Player SDK.
  [Guid("8B5050FF-E0A4-4808-B3A8-893A9E1ED894")]
  [ComImport]
  [TypeLibType((short)256)]
  [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
  public interface IWMPSyncServices
  {
    /// <summary><para><c>deviceCount</c> property get of <c>IWMPSyncServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>deviceCount</c> property get was the following:  <c>HRESULT deviceCount ([out, retval] long* ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT deviceCount ([out, retval] long* ReturnValue);
    // VB6: Function deviceCount () As Long
    int deviceCount () /* property get method */;

    /// <summary><para><c>getDevice</c> method of <c>IWMPSyncServices</c> interface.</para></summary>
    /// <remarks><para>An original IDL definition of <c>getDevice</c> method was the following:  <c>HRESULT getDevice (long lIndex, [out, retval] IWMPSyncDevice** ReturnValue)</c>;</para></remarks>
    // IDL: HRESULT getDevice (long lIndex, [out, retval] IWMPSyncDevice** ReturnValue);
    // VB6: Function getDevice (ByVal lIndex As Long) As IWMPSyncDevice
    IWMPSyncDevice getDevice (int lIndex);
  }

  /// <summary><para><c>WindowsMediaPlayer</c> interface.Windows Media Player ActiveX Control</para></summary>
  // Windows Media Player ActiveX Control
  [Guid("6C497D62-8919-413C-82DB-E935FB3EC584")]
  [ComImport]
  [CoClass(typeof(WindowsMediaPlayerClass))]
  public interface WindowsMediaPlayer: IWMPPlayer4
  {
  }

  /// <summary><para><c>WindowsMediaPlayerClass</c> class.  </para><para>Windows Media Player ActiveX Control</para></summary>
  /// <remarks>The following sample shows how to use WindowsMediaPlayerClass class.  You should simply create new class instance and cast it to WindowsMediaPlayer interface.  After this you can call interface methods and access its properties: <code>
  /// WindowsMediaPlayer A = (WindowsMediaPlayer) new WindowsMediaPlayerClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // Windows Media Player ActiveX Control
  [Guid("6BF52A52-394A-11D3-B153-00C04F79FAA6")]
  [ComImport]
  [TypeLibType((short)2)]
  [ClassInterface(ClassInterfaceType.None)]
  [ComSourceInterfaces("_WMPOCXEvents")]
  public class WindowsMediaPlayerClass //: IWMPPlayer3, IWMPPlayer2, IWMPPlayer, IWMPControls, IWMPSettings, IWMPPlaylist, IWMPMedia, IWMPMediaCollection, IWMPPlaylistCollection, IWMPCdromCollection, IWMPError, IWMPErrorItem, IWMPErrorItem2, IWMPClosedCaption, IWMPDVD, IWMPControls2, IWMPMedia2, IWMPMedia3, IWMPMetadataPicture, IWMPMetadataText, IWMPSettings2, IWMPControls3, IWMPClosedCaption2, IWMPMediaCollection2, IWMPStringCollection2, IWMPPlayer4, WindowsMediaPlayer, _WMPOCXEvents_Event
  {
  }

  /// <summary><para><c>WMPAutoMenuCtrl</c> interface.WMPAutoMenuCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPAutoMenuCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("1AD13E0B-4F3A-41DF-9BE2-F9E6FE0A7875")]
  [ComImport]
  [CoClass(typeof(WMPAutoMenuCtrlClass))]
  public interface WMPAutoMenuCtrl: IWMPAutoMenuCtrl
  {
  }

  /// <summary><para><c>WMPAutoMenuCtrlClass</c> class.  </para><para>WMPAutoMenuCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPAutoMenuCtrlClass class.  You should simply create new class instance and cast it to WMPAutoMenuCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPAutoMenuCtrl A = (WMPAutoMenuCtrl) new WMPAutoMenuCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPAutoMenuCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("6B28F900-8D64-4B80-9963-CC52DDD1FBB4")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPAutoMenuCtrlClass // : IWMPAutoMenuCtrl, WMPAutoMenuCtrl
  {
  }

  /// <summary><para><c>WMPButtonCtrl</c> interface.WMPButtonCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPButtonCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("87291B50-0C8E-11D3-BB2A-00A0C93CA73A")]
  [ComImport]
  [CoClass(typeof(WMPButtonCtrlClass))]
  public interface WMPButtonCtrl: IWMPButtonCtrl
  {
  }

  /// <summary><para><c>WMPButtonCtrlClass</c> class.  </para><para>WMPButtonCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPButtonCtrlClass class.  You should simply create new class instance and cast it to WMPButtonCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPButtonCtrl A = (WMPButtonCtrl) new WMPButtonCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPButtonCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("87291B51-0C8E-11D3-BB2A-00A0C93CA73A")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  [ComSourceInterfaces("IWMPButtonCtrlEvents")]
  public class WMPButtonCtrlClass // : IWMPButtonCtrl, WMPButtonCtrl, IWMPButtonCtrlEvents_Event
  {
  }

  /// <summary><para><c>WMPCore</c> interface.WMPCore: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPCore: Not Public.  Internal object used by Windows Media Player.
  [Guid("7587C667-628F-499F-88E7-6A6F4E888464")]
  [ComImport]
  [CoClass(typeof(WMPCoreClass))]
  public interface WMPCore: IWMPCore3
  {
  }

  /// <summary><para><c>WMPCoreClass</c> class.  </para><para>WMPCore: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPCoreClass class.  You should simply create new class instance and cast it to WMPCore interface.  After this you can call interface methods and access its properties: <code>
  /// WMPCore A = (WMPCore) new WMPCoreClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPCore: Not Public.  Internal object used by Windows Media Player.
  [Guid("09428D37-E0B9-11D2-B147-00C04F79FAA6")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  [ComSourceInterfaces("_WMPCoreEvents")]
  public class WMPCoreClass // : IWMPCore2, IWMPCore, IWMPControls, IWMPPlaylist, IWMPSettings, IWMPMedia, IWMPStringCollection, IWMPMediaCollection, IWMPPlaylistCollection, IWMPCdromCollection, IWMPCdrom, IWMPErrorItem, IWMPClosedCaption, IWMPError, IWMPDVD, IWMPControls2, IWMPMedia2, IWMPMedia3, IWMPMetadataPicture, IWMPMetadataText, IWMPSettings2, IWMPControls3, IWMPClosedCaption2, IWMPCore3, WMPCore, _WMPCoreEvents_Event
  {
  }

  /// <summary><para><c>WMPCustomSliderCtrl</c> interface.WMPCustomSliderCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPCustomSliderCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("95F45AA2-ED0A-11D2-BA67-0000F80855E6")]
  [ComImport]
  [CoClass(typeof(WMPCustomSliderCtrlClass))]
  public interface WMPCustomSliderCtrl: IWMPCustomSlider
  {
  }

  /// <summary><para><c>WMPCustomSliderCtrlClass</c> class.  </para><para>WMPCustomSliderCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPCustomSliderCtrlClass class.  You should simply create new class instance and cast it to WMPCustomSliderCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPCustomSliderCtrl A = (WMPCustomSliderCtrl) new WMPCustomSliderCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPCustomSliderCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("95F45AA3-ED0A-11D2-BA67-0000F80855E6")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  [ComSourceInterfaces("IWMPCustomSliderCtrlEvents")]
  public class WMPCustomSliderCtrlClass // : IWMPCustomSlider, WMPCustomSliderCtrl, IWMPCustomSliderCtrlEvents_Event
  {
  }

  /// <summary><para><c>WMPDolbyDigitalSettingsCtrl</c> interface.WMPDolbyDigitalSettingsCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPDolbyDigitalSettingsCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("BBD6801A-A1D4-4D05-9F2D-29E0024C3FD9")]
  [ComImport]
  [CoClass(typeof(WMPDolbyDigitalSettingsCtrlClass))]
  public interface WMPDolbyDigitalSettingsCtrl: IWMPDolbyDigitalSettingsCtrl
  {
  }

  /// <summary><para><c>WMPDolbyDigitalSettingsCtrlClass</c> class.  </para><para>WMPDolbyDigitalSettingsCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPDolbyDigitalSettingsCtrlClass class.  You should simply create new class instance and cast it to WMPDolbyDigitalSettingsCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPDolbyDigitalSettingsCtrl A = (WMPDolbyDigitalSettingsCtrl) new WMPDolbyDigitalSettingsCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPDolbyDigitalSettingsCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("1EA16D11-DCB1-41FE-BC17-42CDFBEF8F53")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPDolbyDigitalSettingsCtrlClass // : IWMPDolbyDigitalSettingsCtrl, WMPDolbyDigitalSettingsCtrl
  {
  }

  /// <summary><para><c>WMPEditCtrl</c> interface.WMPEditCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPEditCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("70E1217C-C617-4CFD-BD8A-69CA2043E70B")]
  [ComImport]
  [CoClass(typeof(WMPEditCtrlClass))]
  public interface WMPEditCtrl: IWMPEditCtrl
  {
  }

  /// <summary><para><c>WMPEditCtrlClass</c> class.  </para><para>WMPEditCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPEditCtrlClass class.  You should simply create new class instance and cast it to WMPEditCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPEditCtrl A = (WMPEditCtrl) new WMPEditCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPEditCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("6342FCED-25EA-4033-BDDB-D049A14382D3")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPEditCtrlClass // : IWMPEditCtrl, WMPEditCtrl
  {
  }

  /// <summary><para><c>WMPEffects</c> interface.WMPEffects: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPEffects: Not Public.  Internal object used by Windows Media Player.
  [Guid("A9EFAB80-0A60-4C3F-BBD1-4558DD2A9769")]
  [ComImport]
  [CoClass(typeof(WMPEffectsClass))]
  public interface WMPEffects: IWMPEffectsCtrl
  {
  }

  /// <summary><para><c>WMPEffectsClass</c> class.  </para><para>WMPEffects: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPEffectsClass class.  You should simply create new class instance and cast it to WMPEffects interface.  After this you can call interface methods and access its properties: <code>
  /// WMPEffects A = (WMPEffects) new WMPEffectsClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPEffects: Not Public.  Internal object used by Windows Media Player.
  [Guid("47DEA830-D619-4154-B8D8-6B74845D6A2D")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPEffectsClass // : IWMPEffectsCtrl, WMPEffects
  {
  }

  /// <summary><para><c>WMPEqualizerSettingsCtrl</c> interface.WMPEqualizerSettingsCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPEqualizerSettingsCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("2BD3716F-A914-49FB-8655-996D5F495498")]
  [ComImport]
  [CoClass(typeof(WMPEqualizerSettingsCtrlClass))]
  public interface WMPEqualizerSettingsCtrl: IWMPEqualizerSettingsCtrl
  {
  }

  /// <summary><para><c>WMPEqualizerSettingsCtrlClass</c> class.  </para><para>WMPEqualizerSettingsCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPEqualizerSettingsCtrlClass class.  You should simply create new class instance and cast it to WMPEqualizerSettingsCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPEqualizerSettingsCtrl A = (WMPEqualizerSettingsCtrl) new WMPEqualizerSettingsCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPEqualizerSettingsCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("93EB32F5-87B1-45AD-ACC6-0F2483DB83BB")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPEqualizerSettingsCtrlClass // : IWMPEqualizerSettingsCtrl, WMPEqualizerSettingsCtrl
  {
  }

  /// <summary><para><c>WMPLibraryTreeCtrl</c> interface.WMPLibraryTreeCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPLibraryTreeCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("B738FCAE-F089-45DF-AED6-034B9E7DB632")]
  [ComImport]
  [CoClass(typeof(WMPLibraryTreeCtrlClass))]
  public interface WMPLibraryTreeCtrl: IWMPLibraryTreeCtrl
  {
  }

  /// <summary><para><c>WMPLibraryTreeCtrlClass</c> class.  </para><para>WMPLibraryTreeCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPLibraryTreeCtrlClass class.  You should simply create new class instance and cast it to WMPLibraryTreeCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPLibraryTreeCtrl A = (WMPLibraryTreeCtrl) new WMPLibraryTreeCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPLibraryTreeCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("D9DE732A-AEE9-4503-9D11-5605589977A8")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPLibraryTreeCtrlClass // : IWMPLibraryTreeCtrl, WMPLibraryTreeCtrl
  {
  }

  /// <summary><para><c>WMPListBoxCtrl</c> interface.WMPListBoxCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPListBoxCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("FC1880CE-83B9-43A7-A066-C44CE8C82583")]
  [ComImport]
  [CoClass(typeof(WMPListBoxCtrlClass))]
  public interface WMPListBoxCtrl: IWMPListBoxCtrl
  {
  }

  /// <summary><para><c>WMPListBoxCtrlClass</c> class.  </para><para>WMPListBoxCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPListBoxCtrlClass class.  You should simply create new class instance and cast it to WMPListBoxCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPListBoxCtrl A = (WMPListBoxCtrl) new WMPListBoxCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPListBoxCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("FC1880CF-83B9-43A7-A066-C44CE8C82583")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPListBoxCtrlClass // : IWMPListBoxCtrl, WMPListBoxCtrl
  {
  }

  /// <summary><para><c>WMPMenuCtrl</c> interface.WMPMenuCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPMenuCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("158A7ADC-33DA-4039-A553-BDDBBE389F5C")]
  [ComImport]
  [CoClass(typeof(WMPMenuCtrlClass))]
  public interface WMPMenuCtrl: IWMPMenuCtrl
  {
  }

  /// <summary><para><c>WMPMenuCtrlClass</c> class.  </para><para>WMPMenuCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPMenuCtrlClass class.  You should simply create new class instance and cast it to WMPMenuCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPMenuCtrl A = (WMPMenuCtrl) new WMPMenuCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPMenuCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("BAB3768B-8883-4AEC-9F9B-E14C947913EF")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPMenuCtrlClass // : IWMPMenuCtrl, WMPMenuCtrl
  {
  }

  /// <summary><para><c>WMPPlaylistCtrl</c> interface.WMPPlaylistCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPPlaylistCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("5F9CFD92-8CAD-11D3-9A7E-00C04F8EFB70")]
  [ComImport]
  [CoClass(typeof(WMPPlaylistCtrlClass))]
  public interface WMPPlaylistCtrl: IWMPPlaylistCtrl
  {
  }

  /// <summary><para><c>WMPPlaylistCtrlClass</c> class.  </para><para>WMPPlaylistCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPPlaylistCtrlClass class.  You should simply create new class instance and cast it to WMPPlaylistCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPPlaylistCtrl A = (WMPPlaylistCtrl) new WMPPlaylistCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPPlaylistCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("5F9CFD93-8CAD-11D3-9A7E-00C04F8EFB70")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPPlaylistCtrlClass // : IWMPPlaylistCtrl, WMPPlaylistCtrl
  {
  }

  /// <summary><para><c>WMPRegionalButton</c> interface.WMPRegionalButton: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPRegionalButton: Not Public.  Internal object used by Windows Media Player.
  [Guid("58D507B2-2354-11D3-BD41-00C04F6EA5AE")]
  [ComImport]
  [CoClass(typeof(WMPRegionalButtonClass))]
  public interface WMPRegionalButton: IWMPRegionalButton
  {
  }

  /// <summary><para><c>WMPRegionalButtonClass</c> class.  </para><para>WMPRegionalButton: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPRegionalButtonClass class.  You should simply create new class instance and cast it to WMPRegionalButton interface.  After this you can call interface methods and access its properties: <code>
  /// WMPRegionalButton A = (WMPRegionalButton) new WMPRegionalButtonClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPRegionalButton: Not Public.  Internal object used by Windows Media Player.
  [Guid("09AEFF11-69EF-11D3-BD4D-00C04F6EA5AE")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  [ComSourceInterfaces("IWMPRegionalButtonEvents")]
  public class WMPRegionalButtonClass // : IWMPRegionalButton, WMPRegionalButton, IWMPRegionalButtonEvents_Event
  {
  }

  /// <summary><para><c>WMPRegionalButtonCtrl</c> interface.WMPRegionalButtonCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPRegionalButtonCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("58D507B1-2354-11D3-BD41-00C04F6EA5AE")]
  [ComImport]
  [CoClass(typeof(WMPRegionalButtonCtrlClass))]
  public interface WMPRegionalButtonCtrl: IWMPRegionalButtonCtrl
  {
  }

  /// <summary><para><c>WMPRegionalButtonCtrlClass</c> class.  </para><para>WMPRegionalButtonCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPRegionalButtonCtrlClass class.  You should simply create new class instance and cast it to WMPRegionalButtonCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPRegionalButtonCtrl A = (WMPRegionalButtonCtrl) new WMPRegionalButtonCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPRegionalButtonCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("AE3B6831-25A9-11D3-BD41-00C04F6EA5AE")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPRegionalButtonCtrlClass // : IWMPRegionalButtonCtrl, WMPRegionalButtonCtrl
  {
  }

  /// <summary><para><c>WMPSkinList</c> interface.WMPSkinList: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPSkinList: Not Public.  Internal object used by Windows Media Player.
  [Guid("8CEA03A2-D0C5-4E97-9C38-A676A639A51D")]
  [ComImport]
  [CoClass(typeof(WMPSkinListClass))]
  public interface WMPSkinList: IWMPSkinList
  {
  }

  /// <summary><para><c>WMPSkinListClass</c> class.  </para><para>WMPSkinList: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPSkinListClass class.  You should simply create new class instance and cast it to WMPSkinList interface.  After this you can call interface methods and access its properties: <code>
  /// WMPSkinList A = (WMPSkinList) new WMPSkinListClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPSkinList: Not Public.  Internal object used by Windows Media Player.
  [Guid("A8A55FAC-82EA-4BD7-BD7B-11586A4D99E4")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPSkinListClass // : IWMPSkinList, WMPSkinList
  {
  }

  /// <summary><para><c>WMPSliderCtrl</c> interface.WMPSliderCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPSliderCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("F2BF2C8F-405F-11D3-BB39-00A0C93CA73A")]
  [ComImport]
  [CoClass(typeof(WMPSliderCtrlClass))]
  public interface WMPSliderCtrl: IWMPSliderCtrl
  {
  }

  /// <summary><para><c>WMPSliderCtrlClass</c> class.  </para><para>WMPSliderCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPSliderCtrlClass class.  You should simply create new class instance and cast it to WMPSliderCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPSliderCtrl A = (WMPSliderCtrl) new WMPSliderCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPSliderCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("F2BF2C90-405F-11D3-BB39-00A0C93CA73A")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  [ComSourceInterfaces("IWMPSliderCtrlEvents")]
  public class WMPSliderCtrlClass // : IWMPSliderCtrl, WMPSliderCtrl, IWMPSliderCtrlEvents_Event
  {
  }

  /// <summary><para><c>WMPTextCtrl</c> interface.WMPTextCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPTextCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("237DAC8E-0E32-11D3-A2E2-00C04F79F88E")]
  [ComImport]
  [CoClass(typeof(WMPTextCtrlClass))]
  public interface WMPTextCtrl: IWMPTextCtrl
  {
  }

  /// <summary><para><c>WMPTextCtrlClass</c> class.  </para><para>WMPTextCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPTextCtrlClass class.  You should simply create new class instance and cast it to WMPTextCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPTextCtrl A = (WMPTextCtrl) new WMPTextCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPTextCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("DDDA102E-0E17-11D3-A2E2-00C04F79F88E")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPTextCtrlClass // : IWMPTextCtrl, WMPTextCtrl
  {
  }

  /// <summary><para><c>WMPVideoCtrl</c> interface.WMPVideoCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPVideoCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("61CECF10-FC3A-11D2-A1CD-005004602752")]
  [ComImport]
  [CoClass(typeof(WMPVideoCtrlClass))]
  public interface WMPVideoCtrl: IWMPVideoCtrl
  {
  }

  /// <summary><para><c>WMPVideoCtrlClass</c> class.  </para><para>WMPVideoCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPVideoCtrlClass class.  You should simply create new class instance and cast it to WMPVideoCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPVideoCtrl A = (WMPVideoCtrl) new WMPVideoCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPVideoCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("61CECF11-FC3A-11D2-A1CD-005004602752")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  [ComSourceInterfaces("IWMPVideoCtrlEvents")]
  public class WMPVideoCtrlClass // : IWMPVideoCtrl, WMPVideoCtrl, IWMPVideoCtrlEvents_Event
  {
  }

  /// <summary><para><c>WMPVideoSettingsCtrl</c> interface.WMPVideoSettingsCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  // WMPVideoSettingsCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("07EC23DA-EF73-4BDE-A40F-F269E0B7AFD6")]
  [ComImport]
  [CoClass(typeof(WMPVideoSettingsCtrlClass))]
  public interface WMPVideoSettingsCtrl: IWMPVideoSettingsCtrl
  {
  }

  /// <summary><para><c>WMPVideoSettingsCtrlClass</c> class.  </para><para>WMPVideoSettingsCtrl: Not Public.  Internal object used by Windows Media Player.</para></summary>
  /// <remarks>The following sample shows how to use WMPVideoSettingsCtrlClass class.  You should simply create new class instance and cast it to WMPVideoSettingsCtrl interface.  After this you can call interface methods and access its properties: <code>
  /// WMPVideoSettingsCtrl A = (WMPVideoSettingsCtrl) new WMPVideoSettingsCtrlClass();
  /// A.[method name]();  A.[property name] = [value]; [variable] = A.[property name];
  /// </code></remarks>
  // WMPVideoSettingsCtrl: Not Public.  Internal object used by Windows Media Player.
  [Guid("AE7BFAFE-DCC8-4A73-92C8-CC300CA88859")]
  [ComImport]
  [TypeLibType((short)0)]
  [ClassInterface(ClassInterfaceType.None)]
  public class WMPVideoSettingsCtrlClass // : IWMPVideoSettingsCtrl, WMPVideoSettingsCtrl
  {
  }
}
