<refentry id="GtkDialog">
<refmeta>
<refentrytitle>GtkDialog</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GTK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GtkDialog</refname><refpurpose>
create popup windows.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;gtk/gtk.h&gt;


struct      <link linkend="GtkDialog-struct">GtkDialog</link>;
enum        <link linkend="GtkDialogFlags">GtkDialogFlags</link>;
enum        <link linkend="GtkResponseType">GtkResponseType</link>;
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="gtk-dialog-new">gtk_dialog_new</link>                  (void);
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="gtk-dialog-new-with-buttons">gtk_dialog_new_with_buttons</link>     (const <link linkend="gchar">gchar</link> *title,
                                             <link linkend="GtkWindow">GtkWindow</link> *parent,
                                             <link linkend="GtkDialogFlags">GtkDialogFlags</link> flags,
                                             const <link linkend="gchar">gchar</link> *first_button_text,
                                             ...);
<link linkend="gint">gint</link>        <link linkend="gtk-dialog-run">gtk_dialog_run</link>                  (<link linkend="GtkDialog">GtkDialog</link> *dialog);
<link linkend="void">void</link>        <link linkend="gtk-dialog-response">gtk_dialog_response</link>             (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             <link linkend="gint">gint</link> response_id);
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="gtk-dialog-add-button">gtk_dialog_add_button</link>           (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             const <link linkend="gchar">gchar</link> *button_text,
                                             <link linkend="gint">gint</link> response_id);
<link linkend="void">void</link>        <link linkend="gtk-dialog-add-buttons">gtk_dialog_add_buttons</link>          (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             const <link linkend="gchar">gchar</link> *first_button_text,
                                             ...);
<link linkend="void">void</link>        <link linkend="gtk-dialog-add-action-widget">gtk_dialog_add_action_widget</link>    (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             <link linkend="gint">gint</link> response_id);
<link linkend="gboolean">gboolean</link>    <link linkend="gtk-dialog-get-has-separator">gtk_dialog_get_has_separator</link>    (<link linkend="GtkDialog">GtkDialog</link> *dialog);
<link linkend="void">void</link>        <link linkend="gtk-dialog-set-default-response">gtk_dialog_set_default_response</link> (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             <link linkend="gint">gint</link> response_id);
<link linkend="void">void</link>        <link linkend="gtk-dialog-set-has-separator">gtk_dialog_set_has_separator</link>    (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             <link linkend="gboolean">gboolean</link> setting);
<link linkend="void">void</link>        <link linkend="gtk-dialog-set-response-sensitive">gtk_dialog_set_response_sensitive</link>
                                            (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             <link linkend="gint">gint</link> response_id,
                                             <link linkend="gboolean">gboolean</link> setting);


</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----<link linkend="GtkObject">GtkObject</link>
         +----<link linkend="GtkWidget">GtkWidget</link>
               +----<link linkend="GtkContainer">GtkContainer</link>
                     +----<link linkend="GtkBin">GtkBin</link>
                           +----<link linkend="GtkWindow">GtkWindow</link>
                                 +----GtkDialog
                                       +----<link linkend="GtkColorSelectionDialog">GtkColorSelectionDialog</link>
                                       +----<link linkend="GtkFileChooserDialog">GtkFileChooserDialog</link>
                                       +----<link linkend="GtkFileSelection">GtkFileSelection</link>
                                       +----<link linkend="GtkFontSelectionDialog">GtkFontSelectionDialog</link>
                                       +----<link linkend="GtkInputDialog">GtkInputDialog</link>
                                       +----<link linkend="GtkMessageDialog">GtkMessageDialog</link>
</synopsis>

</refsect1>



<refsect1>
<title>Implemented Interfaces</title>
<para>
GtkDialog implements
 <link linkend="AtkImplementorIface">AtkImplementorIface</link>.</para>

</refsect1>


<refsect1>
<title>Properties</title>
<synopsis>

  &quot;<link linkend="GtkDialog--has-separator">has-separator</link>&quot;        <link linkend="gboolean">gboolean</link>             : Read / Write
</synopsis>
</refsect1>
<refsect1>
<title>Style Properties</title>
<synopsis>

  &quot;<link linkend="GtkDialog--action-area-border">action-area-border</link>&quot;   <link linkend="gint">gint</link>                 : Read
  &quot;<link linkend="GtkDialog--button-spacing">button-spacing</link>&quot;       <link linkend="gint">gint</link>                 : Read
  &quot;<link linkend="GtkDialog--content-area-border">content-area-border</link>&quot;  <link linkend="gint">gint</link>                 : Read
</synopsis>
</refsect1>

<refsect1>
<title>Signal Prototypes</title>
<synopsis>

&quot;<link linkend="GtkDialog-close">close</link>&quot;     <link linkend="void">void</link>        user_function      (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GtkDialog-response">response</link>&quot;  <link linkend="void">void</link>        user_function      (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsect1>


<refsect1>
<title>Description</title>

<para>
Dialog boxes are a convenient way to prompt the user for a small amount of
input, eg. to display a message, ask a question, or anything else that does not
require extensive effort on the user's part.
</para>

<para>
GTK+ treats a dialog as a window split vertically. The top section is a
<link linkend="GtkVBox"><type>GtkVBox</type></link>, and is where widgets such as a <link linkend="GtkLabel"><type>GtkLabel</type></link> or a <link linkend="GtkEntry"><type>GtkEntry</type></link> should
be packed. The bottom area is known as the
<structfield>action_area</structfield>. This is generally used for
packing buttons into the dialog which may perform functions such as
cancel, ok, or apply. The two areas are separated by a <link linkend="GtkHSeparator"><type>GtkHSeparator</type></link>.
</para>

<para>
<link linkend="GtkDialog"><type>GtkDialog</type></link> boxes are created with a call to <link linkend="gtk-dialog-new"><function>gtk_dialog_new()</function></link> or
<link linkend="gtk-dialog-new-with-buttons"><function>gtk_dialog_new_with_buttons()</function></link>. <link linkend="gtk-dialog-new-with-buttons"><function>gtk_dialog_new_with_buttons()</function></link> is recommended; it
allows you to set the dialog title, some convenient flags, and add simple
buttons.
</para>

<para>
If 'dialog' is a newly created dialog, the two primary areas of the window 
can be accessed as <literal>GTK_DIALOG(dialog)->vbox</literal> and 
<literal>GTK_DIALOG(dialog)->action_area</literal>,
as can be seen from the example, below.
</para>

<para>
A 'modal' dialog (that is, one which freezes the rest of the application from
user input), can be created by calling <link linkend="gtk-window-set-modal"><function>gtk_window_set_modal()</function></link> on the dialog. Use
the <link linkend="GTK-WINDOW-CAPS"><function>GTK_WINDOW()</function></link> macro to cast the widget returned from <link linkend="gtk-dialog-new"><function>gtk_dialog_new()</function></link> into a
<link linkend="GtkWindow"><type>GtkWindow</type></link>. When using <link linkend="gtk-dialog-new-with-buttons"><function>gtk_dialog_new_with_buttons()</function></link> you can also pass the
<link linkend="GTK-DIALOG-MODAL-CAPS"><type>GTK_DIALOG_MODAL</type></link> flag to make a dialog modal.
</para>

<para>
If you add buttons to <link linkend="GtkDialog"><type>GtkDialog</type></link> using <link linkend="gtk-dialog-new-with-buttons"><function>gtk_dialog_new_with_buttons()</function></link>,
<link linkend="gtk-dialog-add-button"><function>gtk_dialog_add_button()</function></link>, <link linkend="gtk-dialog-add-buttons"><function>gtk_dialog_add_buttons()</function></link>, or
<link linkend="gtk-dialog-add-action-widget"><function>gtk_dialog_add_action_widget()</function></link>, clicking the button will emit a signal called
"response" with a response ID that you specified. GTK+ will never assign a
meaning to positive response IDs; these are entirely user-defined. But for
convenience, you can use the response IDs in the <link linkend="GtkResponseType"><type>GtkResponseType</type></link> enumeration
(these all have values less than zero). If a dialog receives a delete event, the
"response" signal will be emitted with a response ID of <link linkend="GTK-RESPONSE-NONE-CAPS"><type>GTK_RESPONSE_NONE</type></link>.
</para>


<para>
If you want to block waiting for a dialog to return before returning control
flow to your code, you can call <link linkend="gtk-dialog-run"><function>gtk_dialog_run()</function></link>. This function enters a
recursive main loop and waits for the user to respond to the dialog, returning the 
response ID corresponding to the button the user clicked.
</para>

<para>
For the simple dialog in the following example, in reality you'd probably use
<link linkend="GtkMessageDialog"><type>GtkMessageDialog</type></link> to save yourself some effort.  But you'd need to create the
dialog contents manually if you had more than a simple message in the dialog.
<example>
<title>Simple <structname>GtkDialog</structname> usage.</title>
<programlisting>

/* Function to open a dialog box displaying the message provided. */

void quick_message (gchar *message) {

   GtkWidget *dialog, *label;
   
   /* Create the widgets */
   
   dialog = gtk_dialog_new_with_buttons ("Message",
                                         main_application_window,
                                         GTK_DIALOG_DESTROY_WITH_PARENT,
                                         GTK_STOCK_OK,
                                         GTK_RESPONSE_NONE,
                                         NULL);
   label = gtk_label_new (message);
   
   /* Ensure that the dialog box is destroyed when the user responds. */
   
   g_signal_connect_swapped (GTK_OBJECT (dialog), 
                             "response", 
                             G_CALLBACK (gtk_widget_destroy),
                             GTK_OBJECT (dialog));

   /* Add the label, and show everything we've added to the dialog. */

   gtk_container_add (GTK_CONTAINER (GTK_DIALOG(dialog)->vbox),
                      label);
   gtk_widget_show_all (dialog);
}

</programlisting>
</example>
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GtkDialog-struct"/>struct GtkDialog</title>
<indexterm><primary>GtkDialog</primary></indexterm><programlisting>struct GtkDialog {
  GtkWidget *vbox;
  GtkWidget *action_area;

};
</programlisting>
<para>
<structfield>vbox</structfield> is a <link linkend="GtkVBox"><type>GtkVBox</type></link> - the main part of the
dialog box.
</para>

<para>
<structfield>action_area</structfield> is a <link linkend="GtkHButtonBox"><type>GtkHButtonBox</type></link> packed below the
dividing <link linkend="GtkHSeparator"><type>GtkHSeparator</type></link> in the dialog. It is treated exactly the same
as any other <link linkend="GtkHButtonBox"><type>GtkHButtonBox</type></link>.
</para></refsect2>
<refsect2>
<title><anchor id="GtkDialogFlags"/>enum GtkDialogFlags</title>
<indexterm><primary>GtkDialogFlags</primary></indexterm><programlisting>typedef enum
{
  GTK_DIALOG_MODAL               = 1 &lt;&lt; 0, /* call gtk_window_set_modal (win, TRUE) */
  GTK_DIALOG_DESTROY_WITH_PARENT = 1 &lt;&lt; 1, /* call gtk_window_set_destroy_with_parent () */
  GTK_DIALOG_NO_SEPARATOR        = 1 &lt;&lt; 2  /* no separator bar above buttons */
} GtkDialogFlags;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GtkResponseType"/>enum GtkResponseType</title>
<indexterm><primary>GtkResponseType</primary></indexterm><programlisting>typedef enum
{
  /* GTK returns this if a response widget has no response_id,
   * or if the dialog gets programmatically hidden or destroyed.
   */
  GTK_RESPONSE_NONE = -1,

  /* GTK won't return these unless you pass them in
   * as the response for an action widget. They are
   * for your convenience.
   */
  GTK_RESPONSE_REJECT = -2,
  GTK_RESPONSE_ACCEPT = -3,

  /* If the dialog is deleted. */
  GTK_RESPONSE_DELETE_EVENT = -4,

  /* These are returned from GTK dialogs, and you can also use them
   * yourself if you like.
   */
  GTK_RESPONSE_OK     = -5,
  GTK_RESPONSE_CANCEL = -6,
  GTK_RESPONSE_CLOSE  = -7,
  GTK_RESPONSE_YES    = -8,
  GTK_RESPONSE_NO     = -9,
  GTK_RESPONSE_APPLY  = -10,
  GTK_RESPONSE_HELP   = -11
} GtkResponseType;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gtk-dialog-new"/>gtk_dialog_new ()</title>
<indexterm><primary>gtk_dialog_new</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*  gtk_dialog_new                  (void);</programlisting>
<para>
Creates a new dialog box. Widgets should not be packed into this <link linkend="GtkWindow"><type>GtkWindow</type></link>
directly, but into the <parameter>vbox</parameter> and <parameter>action_area</parameter>, as described above. 
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a new <link linkend="GtkDialog"><type>GtkDialog</type></link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-dialog-new-with-buttons"/>gtk_dialog_new_with_buttons ()</title>
<indexterm><primary>gtk_dialog_new_with_buttons</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*  gtk_dialog_new_with_buttons     (const <link linkend="gchar">gchar</link> *title,
                                             <link linkend="GtkWindow">GtkWindow</link> *parent,
                                             <link linkend="GtkDialogFlags">GtkDialogFlags</link> flags,
                                             const <link linkend="gchar">gchar</link> *first_button_text,
                                             ...);</programlisting>
<para>
Creates a new <link linkend="GtkDialog"><type>GtkDialog</type></link> with title <parameter>title</parameter> (or <literal>NULL</literal> for the default
title; see <link linkend="gtk-window-set-title"><function>gtk_window_set_title()</function></link>) and transient parent <parameter>parent</parameter> (or
<literal>NULL</literal> for none; see <link linkend="gtk-window-set-transient-for"><function>gtk_window_set_transient_for()</function></link>). The <parameter>flags</parameter>
argument can be used to make the dialog modal (<link linkend="GTK-DIALOG-MODAL-CAPS"><type>GTK_DIALOG_MODAL</type></link>)
and/or to have it destroyed along with its transient parent
(<link linkend="GTK-DIALOG-DESTROY-WITH-PARENT-CAPS"><type>GTK_DIALOG_DESTROY_WITH_PARENT</type></link>). After <parameter>flags</parameter>, button
text/response ID pairs should be listed, with a <literal>NULL</literal> pointer ending
the list. Button text can be either a stock ID such as
<link linkend="GTK-STOCK-OK-CAPS"><type>GTK_STOCK_OK</type></link>, or some arbitrary text.  A response ID can be
any positive number, or one of the values in the <link linkend="GtkResponseType"><type>GtkResponseType</type></link>
enumeration. If the user clicks one of these dialog buttons,
<link linkend="GtkDialog"><type>GtkDialog</type></link> will emit the "response" signal with the corresponding
response ID. If a <link linkend="GtkDialog"><type>GtkDialog</type></link> receives the "delete_event" signal, it
will emit "response" with a response ID of <link linkend="GTK-RESPONSE-DELETE-EVENT-CAPS"><type>GTK_RESPONSE_DELETE_EVENT</type></link>.
However, destroying a dialog does not emit the "response" signal;
so be careful relying on "response" when using
the <link linkend="GTK-DIALOG-DESTROY-WITH-PARENT-CAPS"><type>GTK_DIALOG_DESTROY_WITH_PARENT</type></link> flag. Buttons are from left to right,
so the first button in the list will be the leftmost button in the dialog.
</para>
<para>
Here's a simple example:
<informalexample><programlisting>
 GtkWidget *dialog = gtk_dialog_new_with_buttons ("My dialog",
                                                  main_app_window,
                                                  GTK_DIALOG_MODAL | GTK_DIALOG_DESTROY_WITH_PARENT,
                                                  GTK_STOCK_OK,
                                                  GTK_RESPONSE_ACCEPT,
                                                  GTK_STOCK_CANCEL,
                                                  GTK_RESPONSE_REJECT,
                                                  NULL);
</programlisting></informalexample></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>title</parameter>&nbsp;:</term>
<listitem><simpara> Title of the dialog, or <literal>NULL</literal>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>parent</parameter>&nbsp;:</term>
<listitem><simpara> Transient parent of the dialog, or <literal>NULL</literal>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&nbsp;:</term>
<listitem><simpara> from <link linkend="GtkDialogFlags"><type>GtkDialogFlags</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_button_text</parameter>&nbsp;:</term>
<listitem><simpara> stock ID or text to go in first button, or <literal>NULL</literal>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> response ID for first button, then additional buttons, ending with <literal>NULL</literal>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new <link linkend="GtkDialog"><type>GtkDialog</type></link>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-dialog-run"/>gtk_dialog_run ()</title>
<indexterm><primary>gtk_dialog_run</primary></indexterm><programlisting><link linkend="gint">gint</link>        gtk_dialog_run                  (<link linkend="GtkDialog">GtkDialog</link> *dialog);</programlisting>
<para>
Blocks in a recursive main loop until the <parameter>dialog</parameter> either emits the
response signal, or is destroyed. If the dialog is destroyed during the call
to <link linkend="gtk-dialog-run"><function>gtk_dialog_run()</function></link>, gtk_dialog_returns <link linkend="GTK-RESPONSE-NONE-CAPS"><type>GTK_RESPONSE_NONE</type></link>.
Otherwise, it returns the response ID from the "response" signal emission.
Before entering the recursive main loop, <link linkend="gtk-dialog-run"><function>gtk_dialog_run()</function></link> calls
<link linkend="gtk-widget-show"><function>gtk_widget_show()</function></link> on the dialog for you. Note that you still
need to show any children of the dialog yourself.
</para>
<para>
During <link linkend="gtk-dialog-run"><function>gtk_dialog_run()</function></link>, the default behavior of "delete_event" is
disabled; if the dialog receives "delete_event", it will not be
destroyed as windows usually are, and <link linkend="gtk-dialog-run"><function>gtk_dialog_run()</function></link> will return
<link linkend="GTK-RESPONSE-DELETE-EVENT-CAPS"><type>GTK_RESPONSE_DELETE_EVENT</type></link>. Also, during <link linkend="gtk-dialog-run"><function>gtk_dialog_run()</function></link> the dialog will be
modal. You can force <link linkend="gtk-dialog-run"><function>gtk_dialog_run()</function></link> to return at any time by
calling <link linkend="gtk-dialog-response"><function>gtk_dialog_response()</function></link> to emit the "response"
signal. Destroying the dialog during <link linkend="gtk-dialog-run"><function>gtk_dialog_run()</function></link> is a very bad
idea, because your post-run code won't know whether the dialog was
destroyed or not.
</para>
<para>
After <link linkend="gtk-dialog-run"><function>gtk_dialog_run()</function></link> returns, you are responsible for hiding or
destroying the dialog if you wish to do so.
</para>
<para>
Typical usage of this function might be:
<informalexample><programlisting>
  gint result = gtk_dialog_run (GTK_DIALOG (dialog));
  switch (result)
    {
      case GTK_RESPONSE_ACCEPT:
         do_application_specific_something (<!-- -->);
         break;
      default:
         do_nothing_since_dialog_was_cancelled (<!-- -->);
         break;
    }
  gtk_widget_destroy (dialog);
</programlisting></informalexample></para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dialog</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkDialog"><type>GtkDialog</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> response ID
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-dialog-response"/>gtk_dialog_response ()</title>
<indexterm><primary>gtk_dialog_response</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_dialog_response             (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             <link linkend="gint">gint</link> response_id);</programlisting>
<para>
Emits the "response" signal with the given response ID. Used to
indicate that the user has responded to the dialog in some way;
typically either you or <link linkend="gtk-dialog-run"><function>gtk_dialog_run()</function></link> will be monitoring the
"response" signal and take appropriate action.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dialog</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkDialog"><type>GtkDialog</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>response_id</parameter>&nbsp;:</term>
<listitem><simpara> response ID 
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-dialog-add-button"/>gtk_dialog_add_button ()</title>
<indexterm><primary>gtk_dialog_add_button</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*  gtk_dialog_add_button           (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             const <link linkend="gchar">gchar</link> *button_text,
                                             <link linkend="gint">gint</link> response_id);</programlisting>
<para>
Adds a button with the given text (or a stock button, if <parameter>button_text</parameter> is a
stock ID) and sets things up so that clicking the button will emit the
"response" signal with the given <parameter>response_id</parameter>. The button is appended to the
end of the dialog's action area. The button widget is returned, but usually
you don't need it.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dialog</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkDialog"><type>GtkDialog</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>button_text</parameter>&nbsp;:</term>
<listitem><simpara> text of button, or stock ID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>response_id</parameter>&nbsp;:</term>
<listitem><simpara> response ID for the button
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the button widget that was added
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-dialog-add-buttons"/>gtk_dialog_add_buttons ()</title>
<indexterm><primary>gtk_dialog_add_buttons</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_dialog_add_buttons          (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             const <link linkend="gchar">gchar</link> *first_button_text,
                                             ...);</programlisting>
<para>
Adds more buttons, same as calling <link linkend="gtk-dialog-add-button"><function>gtk_dialog_add_button()</function></link>
repeatedly.  The variable argument list should be <literal>NULL</literal>-terminated
as with <link linkend="gtk-dialog-new-with-buttons"><function>gtk_dialog_new_with_buttons()</function></link>. Each button must have both
text and response ID.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dialog</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkDialog"><type>GtkDialog</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>first_button_text</parameter>&nbsp;:</term>
<listitem><simpara> button text or stock ID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>...</parameter>&nbsp;:</term>
<listitem><simpara> response ID for first button, then more text-response_id pairs
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-dialog-add-action-widget"/>gtk_dialog_add_action_widget ()</title>
<indexterm><primary>gtk_dialog_add_action_widget</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_dialog_add_action_widget    (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             <link linkend="GtkWidget">GtkWidget</link> *child,
                                             <link linkend="gint">gint</link> response_id);</programlisting>
<para>
Adds an activatable widget to the action area of a <link linkend="GtkDialog"><type>GtkDialog</type></link>,
connecting a signal handler that will emit the "response" signal on
the dialog when the widget is activated.  The widget is appended to
the end of the dialog's action area.  If you want to add a
non-activatable widget, simply pack it into the
<literal>action_area</literal> field of the <link linkend="GtkDialog"><type>GtkDialog</type></link> struct.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dialog</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkDialog"><type>GtkDialog</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara> an activatable widget
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>response_id</parameter>&nbsp;:</term>
<listitem><simpara> response ID for <parameter>child</parameter>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-dialog-get-has-separator"/>gtk_dialog_get_has_separator ()</title>
<indexterm><primary>gtk_dialog_get_has_separator</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>    gtk_dialog_get_has_separator    (<link linkend="GtkDialog">GtkDialog</link> *dialog);</programlisting>
<para>
Accessor for whether the dialog has a separator.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dialog</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkDialog"><type>GtkDialog</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if the dialog has a separator
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-dialog-set-default-response"/>gtk_dialog_set_default_response ()</title>
<indexterm><primary>gtk_dialog_set_default_response</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_dialog_set_default_response (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             <link linkend="gint">gint</link> response_id);</programlisting>
<para>
Sets the last widget in the dialog's action area with the given <parameter>response_id</parameter>
as the default widget for the dialog. Pressing "Enter" normally activates
the default widget.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dialog</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkDialog"><type>GtkDialog</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>response_id</parameter>&nbsp;:</term>
<listitem><simpara> a response ID
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-dialog-set-has-separator"/>gtk_dialog_set_has_separator ()</title>
<indexterm><primary>gtk_dialog_set_has_separator</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_dialog_set_has_separator    (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             <link linkend="gboolean">gboolean</link> setting);</programlisting>
<para>
Sets whether the dialog has a separator above the buttons.
<literal>TRUE</literal> by default.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dialog</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkDialog"><type>GtkDialog</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>setting</parameter>&nbsp;:</term>
<listitem><simpara> <literal>TRUE</literal> to have a separator
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-dialog-set-response-sensitive"/>gtk_dialog_set_response_sensitive ()</title>
<indexterm><primary>gtk_dialog_set_response_sensitive</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_dialog_set_response_sensitive
                                            (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                             <link linkend="gint">gint</link> response_id,
                                             <link linkend="gboolean">gboolean</link> setting);</programlisting>
<para>
Calls <literal>gtk_widget_set_sensitive (widget, <parameter>setting</parameter>)</literal> 
for each widget in the dialog's action area with the given <parameter>response_id</parameter>.
A convenient way to sensitize/desensitize dialog buttons.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dialog</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkDialog"><type>GtkDialog</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>response_id</parameter>&nbsp;:</term>
<listitem><simpara> a response ID
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>setting</parameter>&nbsp;:</term>
<listitem><simpara> <literal>TRUE</literal> for sensitive
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1>
<title>Properties</title>
<variablelist>
<varlistentry><term><anchor id="GtkDialog--has-separator"/>&quot;<literal>has-separator</literal>&quot; (<link linkend="gboolean">gboolean</link> : Read / Write)</term>
<listitem>
<para>The dialog has a separator bar above its buttons.</para>
</listitem></varlistentry>

</variablelist>
</refsect1>
<refsect1>
<title>Style Properties</title>
<variablelist>
<varlistentry><term><anchor id="GtkDialog--action-area-border"/>&quot;<literal>action-area-border</literal>&quot; (<link linkend="gint">gint</link> : Read)</term>
<listitem>
<para>Width of border around the button area at the bottom of the dialog.</para>
</listitem></varlistentry>
<varlistentry><term><anchor id="GtkDialog--button-spacing"/>&quot;<literal>button-spacing</literal>&quot; (<link linkend="gint">gint</link> : Read)</term>
<listitem>
<para>Spacing between buttons.</para>
</listitem></varlistentry>
<varlistentry><term><anchor id="GtkDialog--content-area-border"/>&quot;<literal>content-area-border</literal>&quot; (<link linkend="gint">gint</link> : Read)</term>
<listitem>
<para>Width of border around the main dialog area.</para>
</listitem></varlistentry>

</variablelist>
</refsect1>

<refsect1>
<title>Signals</title>
<refsect2><title><anchor id="GtkDialog-close"/>The &quot;close&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>dialog</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="GtkDialog-response"/>The &quot;response&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="GtkDialog">GtkDialog</link> *dialog,
                                            <link linkend="gint">gint</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Emitted when an action widget is clicked, the dialog receives a delete event, or
the application programmer calls <link linkend="gtk-dialog-response"><function>gtk_dialog_response()</function></link>. On a delete event, the
response ID is <link linkend="GTK-RESPONSE-NONE-CAPS"><type>GTK_RESPONSE_NONE</type></link>. Otherwise, it depends on which action widget
was clicked.
</para><variablelist role="params">
<varlistentry><term><parameter>dialog</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>the response ID

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1>
<title>See Also</title>

<para>
<variablelist>
<varlistentry>
<term><link linkend="GtkVBox"><type>GtkVBox</type></link></term>
<listitem><para>Pack widgets vertically.</para></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GtkWindow"><type>GtkWindow</type></link></term>
<listitem><para>Alter the properties of your dialog box.</para></listitem>
</varlistentry>
<varlistentry>
<term><link linkend="GtkButton"><type>GtkButton</type></link></term>
<listitem><para>Add them to the <structfield>action_area</structfield> to get a
response from the user.</para></listitem>
</varlistentry>
</variablelist>
</para>
</refsect1>

</refentry>
