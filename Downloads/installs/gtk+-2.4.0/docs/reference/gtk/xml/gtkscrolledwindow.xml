<refentry id="GtkScrolledWindow">
<refmeta>
<refentrytitle>GtkScrolledWindow</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GTK Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GtkScrolledWindow</refname><refpurpose>
Adds scrollbars to its child widget.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;gtk/gtk.h&gt;


struct      <link linkend="GtkScrolledWindow-struct">GtkScrolledWindow</link>;
<link linkend="GtkWidget">GtkWidget</link>*  <link linkend="gtk-scrolled-window-new">gtk_scrolled_window_new</link>         (<link linkend="GtkAdjustment">GtkAdjustment</link> *hadjustment,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *vadjustment);
<link linkend="GtkAdjustment">GtkAdjustment</link>* <link linkend="gtk-scrolled-window-get-hadjustment">gtk_scrolled_window_get_hadjustment</link>
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window);
<link linkend="GtkAdjustment">GtkAdjustment</link>* <link linkend="gtk-scrolled-window-get-vadjustment">gtk_scrolled_window_get_vadjustment</link>
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window);
<link linkend="void">void</link>        <link linkend="gtk-scrolled-window-set-policy">gtk_scrolled_window_set_policy</link>  (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkPolicyType">GtkPolicyType</link> hscrollbar_policy,
                                             <link linkend="GtkPolicyType">GtkPolicyType</link> vscrollbar_policy);
<link linkend="void">void</link>        <link linkend="gtk-scrolled-window-add-with-viewport">gtk_scrolled_window_add_with_viewport</link>
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkWidget">GtkWidget</link> *child);
<link linkend="void">void</link>        <link linkend="gtk-scrolled-window-set-placement">gtk_scrolled_window_set_placement</link>
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkCornerType">GtkCornerType</link> window_placement);
<link linkend="void">void</link>        <link linkend="gtk-scrolled-window-set-shadow-type">gtk_scrolled_window_set_shadow_type</link>
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkShadowType">GtkShadowType</link> type);
<link linkend="void">void</link>        <link linkend="gtk-scrolled-window-set-hadjustment">gtk_scrolled_window_set_hadjustment</link>
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *hadjustment);
<link linkend="void">void</link>        <link linkend="gtk-scrolled-window-set-vadjustment">gtk_scrolled_window_set_vadjustment</link>
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *hadjustment);
<link linkend="GtkCornerType">GtkCornerType</link> <link linkend="gtk-scrolled-window-get-placement">gtk_scrolled_window_get_placement</link>
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window);
<link linkend="void">void</link>        <link linkend="gtk-scrolled-window-get-policy">gtk_scrolled_window_get_policy</link>  (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkPolicyType">GtkPolicyType</link> *hscrollbar_policy,
                                             <link linkend="GtkPolicyType">GtkPolicyType</link> *vscrollbar_policy);
<link linkend="GtkShadowType">GtkShadowType</link> <link linkend="gtk-scrolled-window-get-shadow-type">gtk_scrolled_window_get_shadow_type</link>
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window);


</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----<link linkend="GtkObject">GtkObject</link>
         +----<link linkend="GtkWidget">GtkWidget</link>
               +----<link linkend="GtkContainer">GtkContainer</link>
                     +----<link linkend="GtkBin">GtkBin</link>
                           +----GtkScrolledWindow
</synopsis>

</refsect1>



<refsect1>
<title>Implemented Interfaces</title>
<para>
GtkScrolledWindow implements
 <link linkend="AtkImplementorIface">AtkImplementorIface</link>.</para>

</refsect1>


<refsect1>
<title>Properties</title>
<synopsis>

  &quot;<link linkend="GtkScrolledWindow--hadjustment">hadjustment</link>&quot;          <link linkend="GtkAdjustment">GtkAdjustment</link>        : Read / Write / Construct
  &quot;<link linkend="GtkScrolledWindow--hscrollbar-policy">hscrollbar-policy</link>&quot;    <link linkend="GtkPolicyType">GtkPolicyType</link>        : Read / Write
  &quot;<link linkend="GtkScrolledWindow--shadow-type">shadow-type</link>&quot;          <link linkend="GtkShadowType">GtkShadowType</link>        : Read / Write
  &quot;<link linkend="GtkScrolledWindow--vadjustment">vadjustment</link>&quot;          <link linkend="GtkAdjustment">GtkAdjustment</link>        : Read / Write / Construct
  &quot;<link linkend="GtkScrolledWindow--vscrollbar-policy">vscrollbar-policy</link>&quot;    <link linkend="GtkPolicyType">GtkPolicyType</link>        : Read / Write
  &quot;<link linkend="GtkScrolledWindow--window-placement">window-placement</link>&quot;     <link linkend="GtkCornerType">GtkCornerType</link>        : Read / Write
</synopsis>
</refsect1>
<refsect1>
<title>Style Properties</title>
<synopsis>

  &quot;<link linkend="GtkScrolledWindow--scrollbar-spacing">scrollbar-spacing</link>&quot;    <link linkend="gint">gint</link>                 : Read
</synopsis>
</refsect1>

<refsect1>
<title>Signal Prototypes</title>
<synopsis>

&quot;<link linkend="GtkScrolledWindow-move-focus-out">move-focus-out</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolledwindow,
                                            <link linkend="GtkDirectionType">GtkDirectionType</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);
&quot;<link linkend="GtkScrolledWindow-scroll-child">scroll-child</link>&quot;
            <link linkend="void">void</link>        user_function      (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolledwindow,
                                            <link linkend="GtkScrollType">GtkScrollType</link> arg1,
                                            <link linkend="gboolean">gboolean</link> arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsect1>


<refsect1>
<title>Description</title>
<para>
<link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link> is a <link linkend="GtkBin"><type>GtkBin</type></link> subclass: it's a container 
the accepts a single child widget. <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link> adds scrollbars
to the child widget and optionally draws a beveled frame around the 
child widget.
</para>

<para>
The scrolled window can work in two ways. Some widgets have native
scrolling support; these widgets have "slots" for <link linkend="GtkAdjustment"><type>GtkAdjustment</type></link>
objects. 
<footnote><para>The scrolled window installs <link linkend="GtkAdjustment"><type>GtkAdjustment</type></link> objects in
the child window's slots using the set_scroll_adjustments_signal,
found in <link linkend="GtkWidgetClass"><type>GtkWidgetClass</type></link>. (Conceptually, these widgets implement a
"Scrollable" interface; because GTK+ 1.2 lacked interface support in
the object system, this interface is hackily implemented as a signal
in <link linkend="GtkWidgetClass"><type>GtkWidgetClass</type></link>. The GTK+ 2.0 object system would allow a clean
implementation, but it wasn't worth breaking the
API.)</para></footnote>
Widgets with native scroll support include <link linkend="GtkTreeView"><type>GtkTreeView</type></link>, <link linkend="GtkTextView"><type>GtkTextView</type></link>, 
and <link linkend="GtkLayout"><type>GtkLayout</type></link>.
</para>

<para>
For widgets that lack native scrolling support, the <link linkend="GtkViewport"><type>GtkViewport</type></link>
widget acts as an adaptor class, implementing scrollability for child
widgets that lack their own scrolling capabilities. Use <link linkend="GtkViewport"><type>GtkViewport</type></link>
to scroll child widgets such as <link linkend="GtkTable"><type>GtkTable</type></link>, <link linkend="GtkBox"><type>GtkBox</type></link>, and so on.
</para>

<para>
If a widget has native scrolling abilities, it can be added to the
<link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link> with <link linkend="gtk-container-add"><function>gtk_container_add()</function></link>. If a widget does not, you
must first add the widget to a <link linkend="GtkViewport"><type>GtkViewport</type></link>, then add the <link linkend="GtkViewport"><type>GtkViewport</type></link>
to the scrolled window. The convenience function
<link linkend="gtk-scrolled-window-add-with-viewport"><function>gtk_scrolled_window_add_with_viewport()</function></link> does exactly this, so you can
ignore the presence of the viewport.
</para>

<para>
The position of the scrollbars is controlled by the scroll
adjustments. See <link linkend="GtkAdjustment"><type>GtkAdjustment</type></link> for the fields in an adjustment - for
<link linkend="GtkScrollbar"><type>GtkScrollbar</type></link>, used by <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>, the "value" field
represents the position of the scrollbar, which must be between the
"lower" field and "upper - page_size." The "page_size" field
represents the size of the visible scrollable area. The
"step_increment" and "page_increment" fields are used when the user
asks to step down (using the small stepper arrows) or page down (using
for example the PageDown key).
</para>

<para>
If a <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link> doesn't behave quite as you would like, or
doesn't have exactly the right layout, it's very possible to set up
your own scrolling with <link linkend="GtkScrollbar"><type>GtkScrollbar</type></link> and for example a <link linkend="GtkTable"><type>GtkTable</type></link>.
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GtkScrolledWindow-struct"/>struct GtkScrolledWindow</title>
<indexterm><primary>GtkScrolledWindow</primary></indexterm><programlisting>struct GtkScrolledWindow;</programlisting>
<para>
There are no public fields in the <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link> struct; it should 
only be accessed using the functions below.
</para></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-new"/>gtk_scrolled_window_new ()</title>
<indexterm><primary>gtk_scrolled_window_new</primary></indexterm><programlisting><link linkend="GtkWidget">GtkWidget</link>*  gtk_scrolled_window_new         (<link linkend="GtkAdjustment">GtkAdjustment</link> *hadjustment,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *vadjustment);</programlisting>
<para>
Creates a new scrolled window. The two arguments are the scrolled
window's adjustments; these will be shared with the scrollbars and the
child widget to keep the bars in sync with the child. Usually you want
to pass <literal>NULL</literal> for the adjustments, which will cause the scrolled window
to create them for you.
</para><variablelist role="params">
<varlistentry><term><parameter>hadjustment</parameter>&nbsp;:</term>
<listitem><simpara>Horizontal adjustment.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vadjustment</parameter>&nbsp;:</term>
<listitem><simpara>Vertical adjustment.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>New scrolled window.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-get-hadjustment"/>gtk_scrolled_window_get_hadjustment ()</title>
<indexterm><primary>gtk_scrolled_window_get_hadjustment</primary></indexterm><programlisting><link linkend="GtkAdjustment">GtkAdjustment</link>* gtk_scrolled_window_get_hadjustment
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window);</programlisting>
<para>
Returns the horizontal scrollbar's adjustment, used to connect the
horizontal scrollbar to the child widget's horizontal scroll
functionality.
</para><variablelist role="params">
<varlistentry><term><parameter>scrolled_window</parameter>&nbsp;:</term>
<listitem><simpara>A <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>The horizontal <link linkend="GtkAdjustment"><type>GtkAdjustment</type></link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-get-vadjustment"/>gtk_scrolled_window_get_vadjustment ()</title>
<indexterm><primary>gtk_scrolled_window_get_vadjustment</primary></indexterm><programlisting><link linkend="GtkAdjustment">GtkAdjustment</link>* gtk_scrolled_window_get_vadjustment
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window);</programlisting>
<para>
Returns the vertical scrollbar's adjustment, used to connect the
vertical scrollbar to the child widget's vertical scroll
functionality.
</para><variablelist role="params">
<varlistentry><term><parameter>scrolled_window</parameter>&nbsp;:</term>
<listitem><simpara>A <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>The vertical <link linkend="GtkAdjustment"><type>GtkAdjustment</type></link>.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-set-policy"/>gtk_scrolled_window_set_policy ()</title>
<indexterm><primary>gtk_scrolled_window_set_policy</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_scrolled_window_set_policy  (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkPolicyType">GtkPolicyType</link> hscrollbar_policy,
                                             <link linkend="GtkPolicyType">GtkPolicyType</link> vscrollbar_policy);</programlisting>
<para>
Sets the scrollbar policy for the horizontal and vertical scrollbars. 
The policy determines when the scrollbar should appear; it is a value
from the <link linkend="GtkPolicyType"><type>GtkPolicyType</type></link> enumeration. If <literal>GTK_POLICY_ALWAYS</literal>, the
scrollbar is always present; if <literal>GTK_POLICY_NEVER</literal>, the scrollbar is
never present; if <literal>GTK_POLICY_AUTOMATIC</literal>, the scrollbar is present only
if needed (that is, if the slider part of the bar would be smaller
than the trough - the display is larger than the page size).
</para><variablelist role="params">
<varlistentry><term><parameter>scrolled_window</parameter>&nbsp;:</term>
<listitem><simpara>A <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hscrollbar_policy</parameter>&nbsp;:</term>
<listitem><simpara>Policy for horizontal bar.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vscrollbar_policy</parameter>&nbsp;:</term>
<listitem><simpara>Policy for vertical bar.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-add-with-viewport"/>gtk_scrolled_window_add_with_viewport ()</title>
<indexterm><primary>gtk_scrolled_window_add_with_viewport</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_scrolled_window_add_with_viewport
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkWidget">GtkWidget</link> *child);</programlisting>
<para>
Used to add children without native scrolling capabilities. This is
simply a convenience function; it is equivalent to adding the
unscrollable child to a viewport, then adding the viewport to the
scrolled window. If a child has native scrolling, use
<link linkend="gtk-container-add"><function>gtk_container_add()</function></link> instead of this function.
</para>

<para>
The viewport scrolls the child by moving its <link linkend="GdkWindow"><type>GdkWindow</type></link>, and takes the
size of the child to be the size of its toplevel <link linkend="GdkWindow"><type>GdkWindow</type></link>. This will
be very wrong for most widgets that support native scrolling; for
example, if you add a widget such as <link linkend="GtkTreeView"><type>GtkTreeView</type></link> with a viewport, the 
whole widget will scroll, including the column headings. Thus, widgets
with native scrolling support should not be used with the <link linkend="GtkViewport"><type>GtkViewport</type></link> proxy.
</para>

<para>
A widget supports scrolling natively if the
set_scroll_adjustments_signal field in <link linkend="GtkWidgetClass"><type>GtkWidgetClass</type></link> is non-zero,
i.e. has been filled in with a valid signal identifier.
</para><variablelist role="params">
<varlistentry><term><parameter>scrolled_window</parameter>&nbsp;:</term>
<listitem><simpara>A <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>child</parameter>&nbsp;:</term>
<listitem><simpara>Widget you want to scroll.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-set-placement"/>gtk_scrolled_window_set_placement ()</title>
<indexterm><primary>gtk_scrolled_window_set_placement</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_scrolled_window_set_placement
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkCornerType">GtkCornerType</link> window_placement);</programlisting>
<para>
Determines the location of the child widget with respect to the
scrollbars. The default is <literal>GTK_CORNER_TOP_LEFT</literal>, meaning the child is
in the top left, with the scrollbars underneath and to the right.
Other values in <link linkend="GtkCornerType"><type>GtkCornerType</type></link> are <literal>GTK_CORNER_TOP_RIGHT</literal>,
<literal>GTK_CORNER_BOTTOM_LEFT</literal>, and <literal>GTK_CORNER_BOTTOM_RIGHT</literal>.
</para><variablelist role="params">
<varlistentry><term><parameter>scrolled_window</parameter>&nbsp;:</term>
<listitem><simpara>A <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>window_placement</parameter>&nbsp;:</term>
<listitem><simpara>Position of the child window.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-set-shadow-type"/>gtk_scrolled_window_set_shadow_type ()</title>
<indexterm><primary>gtk_scrolled_window_set_shadow_type</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_scrolled_window_set_shadow_type
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkShadowType">GtkShadowType</link> type);</programlisting>
<para>
Changes the type of shadow drawn around the contents of
<parameter>scrolled_window</parameter>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>scrolled_window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>type</parameter>&nbsp;:</term>
<listitem><simpara> kind of shadow to draw around scrolled window contents
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-set-hadjustment"/>gtk_scrolled_window_set_hadjustment ()</title>
<indexterm><primary>gtk_scrolled_window_set_hadjustment</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_scrolled_window_set_hadjustment
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *hadjustment);</programlisting>
<para>
Sets the <link linkend="GtkAdjustment"><type>GtkAdjustment</type></link> for the horizontal scrollbar.
</para><variablelist role="params">
<varlistentry><term><parameter>scrolled_window</parameter>&nbsp;:</term>
<listitem><simpara>A <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hadjustment</parameter>&nbsp;:</term>
<listitem><simpara>Horizontal scroll adjustment.


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-set-vadjustment"/>gtk_scrolled_window_set_vadjustment ()</title>
<indexterm><primary>gtk_scrolled_window_set_vadjustment</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_scrolled_window_set_vadjustment
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkAdjustment">GtkAdjustment</link> *hadjustment);</programlisting>
<para>
Sets the <link linkend="GtkAdjustment"><type>GtkAdjustment</type></link> for the vertical scrollbar.
</para><variablelist role="params">
<varlistentry><term><parameter>scrolled_window</parameter>&nbsp;:</term>
<listitem><simpara>A <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hadjustment</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-get-placement"/>gtk_scrolled_window_get_placement ()</title>
<indexterm><primary>gtk_scrolled_window_get_placement</primary></indexterm><programlisting><link linkend="GtkCornerType">GtkCornerType</link> gtk_scrolled_window_get_placement
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window);</programlisting>
<para>
Gets the placement of the scrollbars for the scrolled window. See 
<link linkend="gtk-scrolled-window-set-placement"><function>gtk_scrolled_window_set_placement()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>scrolled_window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the current placement value.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-get-policy"/>gtk_scrolled_window_get_policy ()</title>
<indexterm><primary>gtk_scrolled_window_get_policy</primary></indexterm><programlisting><link linkend="void">void</link>        gtk_scrolled_window_get_policy  (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window,
                                             <link linkend="GtkPolicyType">GtkPolicyType</link> *hscrollbar_policy,
                                             <link linkend="GtkPolicyType">GtkPolicyType</link> *vscrollbar_policy);</programlisting>
<para>
Retrieves the current policy values for the horizontal and vertical
scrollbars. See <link linkend="gtk-scrolled-window-set-policy"><function>gtk_scrolled_window_set_policy()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>scrolled_window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>hscrollbar_policy</parameter>&nbsp;:</term>
<listitem><simpara> location to store the policy for the horizontal scrollbar, or <literal>NULL</literal>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>vscrollbar_policy</parameter>&nbsp;:</term>
<listitem><simpara> location to store the policy for the horizontal scrollbar, or <literal>NULL</literal>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gtk-scrolled-window-get-shadow-type"/>gtk_scrolled_window_get_shadow_type ()</title>
<indexterm><primary>gtk_scrolled_window_get_shadow_type</primary></indexterm><programlisting><link linkend="GtkShadowType">GtkShadowType</link> gtk_scrolled_window_get_shadow_type
                                            (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolled_window);</programlisting>
<para>
Gets the shadow type of the scrolled window. See 
<link linkend="gtk-scrolled-window-set-shadow-type"><function>gtk_scrolled_window_set_shadow_type()</function></link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>scrolled_window</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GtkScrolledWindow"><type>GtkScrolledWindow</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the current shadow type
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1>
<title>Properties</title>
<variablelist>
<varlistentry><term><anchor id="GtkScrolledWindow--hadjustment"/>&quot;<literal>hadjustment</literal>&quot; (<link linkend="GtkAdjustment">GtkAdjustment</link> : Read / Write / Construct)</term>
<listitem>
<para>The GtkAdjustment for the horizontal position.</para>
</listitem></varlistentry>
<varlistentry><term><anchor id="GtkScrolledWindow--hscrollbar-policy"/>&quot;<literal>hscrollbar-policy</literal>&quot; (<link linkend="GtkPolicyType">GtkPolicyType</link> : Read / Write)</term>
<listitem>
<para>When the horizontal scrollbar is displayed.</para>
</listitem></varlistentry>
<varlistentry><term><anchor id="GtkScrolledWindow--shadow-type"/>&quot;<literal>shadow-type</literal>&quot; (<link linkend="GtkShadowType">GtkShadowType</link> : Read / Write)</term>
<listitem>
<para>Style of bevel around the contents.</para>
</listitem></varlistentry>
<varlistentry><term><anchor id="GtkScrolledWindow--vadjustment"/>&quot;<literal>vadjustment</literal>&quot; (<link linkend="GtkAdjustment">GtkAdjustment</link> : Read / Write / Construct)</term>
<listitem>
<para>The GtkAdjustment for the vertical position.</para>
</listitem></varlistentry>
<varlistentry><term><anchor id="GtkScrolledWindow--vscrollbar-policy"/>&quot;<literal>vscrollbar-policy</literal>&quot; (<link linkend="GtkPolicyType">GtkPolicyType</link> : Read / Write)</term>
<listitem>
<para>When the vertical scrollbar is displayed.</para>
</listitem></varlistentry>
<varlistentry><term><anchor id="GtkScrolledWindow--window-placement"/>&quot;<literal>window-placement</literal>&quot; (<link linkend="GtkCornerType">GtkCornerType</link> : Read / Write)</term>
<listitem>
<para>Where the contents are located with respect to the scrollbars.</para>
</listitem></varlistentry>

</variablelist>
</refsect1>
<refsect1>
<title>Style Properties</title>
<variablelist>
<varlistentry><term><anchor id="GtkScrolledWindow--scrollbar-spacing"/>&quot;<literal>scrollbar-spacing</literal>&quot; (<link linkend="gint">gint</link> : Read)</term>
<listitem>
<para>Number of pixels between the scrollbars and the scrolled window.</para>
</listitem></varlistentry>

</variablelist>
</refsect1>

<refsect1>
<title>Signals</title>
<refsect2><title><anchor id="GtkScrolledWindow-move-focus-out"/>The &quot;move-focus-out&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolledwindow,
                                            <link linkend="GtkDirectionType">GtkDirectionType</link> arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>scrolledwindow</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2><title><anchor id="GtkScrolledWindow-scroll-child"/>The &quot;scroll-child&quot; signal</title>
<programlisting><link linkend="void">void</link>        user_function                  (<link linkend="GtkScrolledWindow">GtkScrolledWindow</link> *scrolledwindow,
                                            <link linkend="GtkScrollType">GtkScrollType</link> arg1,
                                            <link linkend="gboolean">gboolean</link> arg2,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>scrolledwindow</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg2</parameter>&nbsp;:</term>
<listitem><simpara>

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1>
<title>See Also</title>
<para>
<link linkend="GtkViewport"><type>GtkViewport</type></link>, <link linkend="GtkAdjustment"><type>GtkAdjustment</type></link>, <link linkend="GtkWidgetClass"><type>GtkWidgetClass</type></link>
</para>
</refsect1>

</refentry>
