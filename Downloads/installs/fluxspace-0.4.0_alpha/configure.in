dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/fluxspacecore.cc)

AM_INIT_AUTOMAKE(fluxspace, 0.4.0_alpha)

AC_PREFIX_DEFAULT(/usr/local)

AC_CHECK_PROGS(regex_cmd, sed)
if test x$regex_cmd = "x"; then
 AC_MSG_ERROR([error. sed is required to build the default bbtoolsrc file.])
fi

dnl get the debug values right
AC_DEFUN([AC_SET_DEBUG],
[
 test "$CFLAGS" = "" && CFLAGS="-g -Wall -DDEBUG"
 test "$CXXFLAGS" = "" && CXXFLAGS="-g -Wall -DDEBUG"
 test "$LDFLAGS" = "" && LDFLAGS=""
])

AC_DEFUN([AC_SET_NODEBUG],
[
 test "$CFLAGS" = "" && CFLAGS="-O2 -Wall"
 test "$CXXFLAGS" = "" && CXXFLAGS="-O2 -Wall"
 test "$LDFLAGS" = "" && LDFLAGS="-s"
])
      

dnl Checks for programs.
dnl needed by configure itself
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_SWIG
AM_PROG_LIBTOOL

AC_ARG_ENABLE(debug,[  --enable-debug          create debugging code [default=no]],
[
if test $enableval = "no";
 then AC_SET_NODEBUG
 else AC_SET_DEBUG
fi
],
AC_SET_NODEBUG)

AC_HEADER_STDC
AC_CHECK_HEADERS(ctype.h fcntl.h libgen.h locale.h process.h signal.h stdio.h time.h unistd.h sys/param.h sys/select.h sys/stat.h sys/time.h sys/types.h sys/wait.h)
AC_HEADER_TIME

AC_CHECK_FUNCS(setlocale sigaction strftime)

AC_PATH_X
AC_PATH_XTRA

dnl Check for X libraries.
CFLAGS="$CFLAGS $X_CFLAGS"
CXXFLAGS="$CXXFLAGS $X_CFLAGS"
LDFLAGS="$LDFLAGS $X_LIBS $X_PRE_LIBS"
AC_CHECK_LIB(X11, XOpenDisplay, LDFLAGS="$LDFLAGS -lX11",
             AC_MSG_ERROR(*** XOpenDisplay not found in -lX11 - make sure the X11 development package is installed. ***))
LDFLAGS="$LDFLAGS $X_EXTRA_LIBS"

dnl Check for Python
AM_PATH_PYTHON
AC_MSG_CHECKING(for python >= 2.2)

prog="
import sys, string
minver = (2,2,0,'final',0)
if sys.version_info < minver:
  sys.exit(1)
sys.exit(0)"
if $PYTHON -c "$prog" 1>&AC_FD_CC 2>&AC_FD_CC
then
  AC_MSG_RESULT(okay)
else
  AC_MSG_ERROR(too old)
fi
AM_CHECK_PYTHON_HEADERS(,[AC_MSG_ERROR(*** Could not find Python headers - make sure the Python development package is properly installed. ***)])
AM_CHECK_PYTHON_LIBS(,[AC_MSG_ERROR(*** Could not find Python libraries - make sure the Python development package is properly installed. ***)])

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(malloc.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_CHECK_FUNCS(select strstr)

AC_MSG_CHECKING([whether to have Xft support])
AM_PATH_XFT(yes,
	XFT=true,
	XFT=false
)

if test "x$XFT" = "xtrue" ; then
	AC_TRY_LINK([
			#include <X11/Xft/Xft.h>
		], [ XftFontClose(0, 0); return 1; ], 
	[
		
		AC_DEFINE(USE_XFT, 1, "antialias support")
	    AC_MSG_CHECKING([Xft UTF-8 support])
   	     AC_TRY_LINK([
			#include <X11/Xft/Xft.h>
		], [ XftDrawStringUtf8(0, 0, 0, 0, 0, 0, 0); return 0; ],
		AC_DEFINE(HAVE_XFT_UTF8_STRING, 1, "Xft UTF8 support")
		AC_MSG_RESULT(yes),
		AC_MSG_RESULT(no)
		)
	],
	[	AC_MSG_RESULT([Could not link with Xft. Install Xft if you want support for it.])
		XFT=false
	])
fi

AM_CONDITIONAL(XFT, test x$XFT = xtrue)

AC_MSG_CHECKING([whether to have Xrender (transparent) support])
AC_ARG_ENABLE(
  xrender,
[  --enable-xrender        Xrender (transparent) support [default=yes]],
  if test x$enableval = "xyes"; then
	AC_MSG_RESULT([yes])
	AC_CHECK_LIB(Xrender, XRenderCreatePicture, 
		AC_DEFINE(HAVE_XRENDER, 1, "Xrender support")
		LIBS="$LIBS -lXrender")
  else
    AC_MSG_RESULT([no])	
  fi,  
  AC_MSG_RESULT([yes])
  AC_CHECK_LIB(Xrender, XRenderCreatePicture, 
	AC_DEFINE(HAVE_XRENDER, 1, "Xrender support")
	LIBS="$LIBS -lXrender")
)

XPM=false
AC_MSG_CHECKING([whether to have Xpm (pixmap themes) support])
AC_ARG_ENABLE(
  xpm,
[  --enable-xpm            Xpm (pixmap themes) support [default=yes]],
  if test x$enableval = "xyes"; then
	AC_MSG_RESULT([yes])
	AC_CHECK_LIB(Xpm, XpmReadFileToPixmap,
		AC_DEFINE(HAVE_XPM, 1, "Xpm support")
		XPM=true
		LIBS="$LIBS -lXpm")
  else
    AC_MSG_RESULT([no])	
  fi,  
  AC_MSG_RESULT([yes])
  AC_CHECK_LIB(Xpm, XpmReadFileToPixmap,
	AC_DEFINE(HAVE_XPM, 1, "Xpm support")
	XPM=true
	LIBS="$LIBS -lXpm")
)

AM_CONDITIONAL(XPM, test x$XPM = xtrue)

AC_MSG_CHECKING([whether to have Xmb (multibyte font, utf-8) support])
AC_ARG_ENABLE(
  xmb,
[  --enable-xmb            Xmb (multibyte font, utf-8) support [default=yes]],
  if test x$enableval = "xyes"; then
	AC_MSG_RESULT([yes])
	AC_DEFINE(USE_XMB, 1, "multibyte support")
	MULTIBYTE=true
  else
    AC_MSG_RESULT([no])
	MULTIBYTE=false
  fi,  
  AC_MSG_RESULT([yes])
  AC_DEFINE(USE_XMB, 1, "multibyte support")
  MULTIBYTE=true
)
AM_CONDITIONAL(MULTIBYTE, test x$MULTIBYTE = xtrue)

AC_MSG_CHECKING([whether to have RANDR (The X Resize and Rotate Extension) support])
AC_ARG_ENABLE(
  randr,
[  --enable-randr          RANDR (The X Resize and Rotate Extension) support [default=yes]],
  if test x$enableval = "xyes"; then
	AC_MSG_RESULT([yes])
	AC_CHECK_LIB(Xrandr, XRRQueryExtension,
		AC_DEFINE(HAVE_RANDR, 1, "randr support")		
		LIBS="$LIBS -lXrandr")
  else
    AC_MSG_RESULT([no])
  fi,  
  AC_MSG_RESULT([yes])
  AC_CHECK_LIB(Xrandr, XRRQueryExtension,
		AC_DEFINE(HAVE_RANDR, 1, "randr support")		
		LIBS="$LIBS -lXrandr")
)

dnl Check for Xinerama support

AC_MSG_CHECKING([whether to build support for the Xinerama extension])
AC_ARG_ENABLE(xinerama,
[  --enable-xinerama       enable xinerama extension [default=no]], , [enable_xinerama=no])

if test "x$enable_xinerama" = "xyes"; then
	AC_MSG_RESULT([yes])
	AC_CHECK_LIB(Xinerama, XineramaQueryScreens,
			XINERAMA="-DXINERAMA"; Xinerama_libs="-lXinerama", )
else
	AC_MSG_RESULT([no])
fi
AC_SUBST(XINERAMA)
CXXFLAGS="$CXXFLAGS $XINERAMA"

LIBS="$LIBS $Xinerama_libs"

dnl Check for Imlib2
AC_MSG_CHECKING(for imlib2 pixmap support)
AC_CHECK_LIB(dl, dlopen, GRLIBS="-ldl", , $GRLIBS)
AC_CHECK_LIB(ttf, TT_Init_FreeType, GRLIBS="-lttf $GRLIBS", , $GRLIBS)
AC_CHECK_LIB(Imlib2, imlib_create_image, GRLIBS="-lImlib2 $GRLIBS",
            AC_MSG_ERROR(*** Imlib2 was not found - make sure the imlib2 development package is installed. ***))
LDFLAGS="$LDFLAGS $GRLIBS"

dnl Determine the return type of signal handlers
AC_TYPE_SIGNAL

dnl Determine if maintainer portions of the Makefiles should be included.
dnl AM_MAINTAINER_MODE

dnl Print results
AC_MSG_RESULT([])
AC_MSG_RESULT([	$PACKAGE version $VERSION configured successfully.])
AC_MSG_RESULT([])
AC_MSG_RESULT([Using '$prefix' for installation.])
AC_MSG_RESULT([Using '$CXX' for C++ compiler.])
AC_MSG_RESULT([Building with '$CXXFLAGS' for C++ compiler flags.])
AC_MSG_RESULT([Building with '$LIBS' for linker flags.])
AC_MSG_RESULT([])

dnl Output files
AM_CONFIG_HEADER(config.h)

AC_OUTPUT(Makefile
version.h
src/Makefile
src/FbTk/Makefile
lib/Makefile
lib/SOAPpy/Makefile
lib/SOAPpy/wstools/Makefile
lib/fluxlet/Makefile
lib/fluxspace/Makefile
fluxfeed/Makefile
doc/Makefile
tools/Makefile
examples/Makefile
contrib/Makefile
test/Makefile
)
