/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.19
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    inline SwigValueWrapper() : tt(0) { }
    inline ~SwigValueWrapper() { if (tt) delete tt; } 
    inline SwigValueWrapper& operator=(const T& t) { tt = new T(t); return *this; }
    inline operator T&() const { return *tt; }
    inline T *operator&() { return tt; }
};                                                    
#endif


#include "Python.h"

/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) extern a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#                       define SWIGIMPORT(a) extern a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#                       define SWIGIMPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#                       define SWIGIMPORT(a) a
#               endif
#       endif
#else
#       define SWIGEXPORT(a) a
#       define SWIGIMPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

typedef struct swig_type_info {
  const char             *name;                 
  swig_converter_func     converter;
  const char             *str;
  void                   *clientdata;	
  swig_dycast_func        dcast;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE

SWIGIMPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGIMPORT(void *)           SWIG_TypeCast(swig_type_info *, void *);
SWIGIMPORT(swig_type_info *) SWIG_TypeDynamicCast(swig_type_info *, void **);
SWIGIMPORT(const char *)     SWIG_TypeName(const swig_type_info *);
SWIGIMPORT(swig_type_info *) SWIG_TypeQuery(const char *);
SWIGIMPORT(void)             SWIG_TypeClientData(swig_type_info *, void *);

#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      if (tc->clientdata) ti->clientdata = tc->clientdata;	
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  if (next) next->prev = head;  /**/
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  do {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      s->prev = ty;  /**/
      return s;
    }
    s = s->next;
  } while (s && (s != ty->next));
  return 0;
}

/* Cast a pointer up an inheritance hierarchy */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Dynamic pointer casting. Down an inheritance hierarchy */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) 
{
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
     ty = (*ty->dcast)(ptr);
     if (ty) lastty = ty;
  }
  return lastty;
}

/* Return the name associated with this type */
SWIGRUNTIME(const char *)
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

/* Set the clientdata field for a type */
SWIGRUNTIME(void)
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_type_info *tc, *equiv;
  if (ti->clientdata == clientdata) return;
  ti->clientdata = clientdata;
  equiv = ti->next;
  while (equiv) {
    if (!equiv->converter) {
      tc = swig_type_list;
      while (tc) {
	if ((strcmp(tc->name, equiv->name) == 0))
	  SWIG_TypeClientData(tc,clientdata);
	tc = tc->prev;
      }
    }
    equiv = equiv->next;
  }
}
#endif

#ifdef __cplusplus
}

#endif

/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Flags for pointer conversion */

#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2

/* Exception handling in wrappers */
#define SWIG_fail   goto fail

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink(void);
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(int)               SWIG_ConvertPacked(PyObject *, void *, int sz, swig_type_info *, int);
SWIGEXPORT(char *)            SWIG_PackData(char *c, void *, int);
SWIGEXPORT(char *)            SWIG_UnpackData(char *c, void *, int);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *,int own);
SWIGEXPORT(PyObject *)        SWIG_NewPackedObj(void *, int sz, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);
#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  (char *)"swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}

/* Pack binary data into a string */
SWIGRUNTIME(char *)
SWIG_PackData(char *c, void *ptr, int sz) {
  static char hex[17] = "0123456789abcdef";
  int i;
  unsigned char *u = (unsigned char *) ptr;
  register unsigned char uu;
  for (i = 0; i < sz; i++,u++) {
    uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* Unpack binary data from a string */
SWIGRUNTIME(char *)
SWIG_UnpackData(char *c, void *ptr, int sz) {
  register unsigned char uu = 0;
  register int d;
  unsigned char *u = (unsigned char *) ptr;
  int i;
  for (i = 0; i < sz; i++, u++) {
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    *u = uu;
  }
  return c;
}

/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;

  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) { Py_DECREF(obj); }
      return 0;
    } else {
      if (newref) { Py_DECREF(obj); }
      goto type_error;
    }
  }
  c++;
  c = SWIG_UnpackData(c,ptr,sizeof(void *));
  if (newref) { Py_DECREF(obj); }
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*) *ptr);
  }

  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
      PyObject *zero = PyInt_FromLong(0);
      PyObject_SetAttrString(pyobj,(char*)"thisown",zero);
      Py_DECREF(zero);
  }
  return 0;

type_error:
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Convert a packed value value */
SWIGRUNTIME(int)
SWIG_ConvertPacked(PyObject *obj, void *ptr, int sz, swig_type_info *ty, int flags) {
  swig_type_info *tc;
  char  *c;

  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AsString(obj);
  /* Pointer values must start with leading underscore */
  if (*c != '_') goto type_error;
  c++;
  c = SWIG_UnpackData(c,ptr,sz);
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, (char *) type->name, NULL);
#else
  {
    char result[1024];
    char *r = result;
    *(r++) = '_';
    r = SWIG_PackData(r,&ptr,sizeof(void *));
    strcpy(r,type->name);
    robj = PyString_FromString(result);
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
	PyObject *n = PyInt_FromLong(1);
	PyObject_SetAttrString(inst,(char*)"thisown",n);
	Py_DECREF(n);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME(PyObject *)
SWIG_NewPackedObj(void *ptr, int sz, swig_type_info *type) {
  char result[1024];
  char *r = result;
  if ((2*sz + 1 + strlen(type->name)) > 1000) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  strcpy(r,type->name);
  return PyString_FromString(result);
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
      break;
    case SWIG_PY_BINARY:
      obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif








/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_ErrorNoWindow swig_types[0] 
#define  SWIGTYPE_p_InternalError swig_types[1] 
#define  SWIGTYPE_p_ErrorControllerExists swig_types[2] 
#define  SWIGTYPE_p_ErrorAppExists swig_types[3] 
#define  SWIGTYPE_p_FluxletHelper swig_types[4] 
#define  SWIGTYPE_p_Error swig_types[5] 
#define  SWIGTYPE_p_ErrorNoDisplay swig_types[6] 
#define  SWIGTYPE_p_std__string swig_types[7] 
#define  SWIGTYPE_p_ErrorWindowProperty swig_types[8] 
#define  SWIGTYPE_p_ErrorImportModule swig_types[9] 
#define  SWIGTYPE_p_Controller swig_types[10] 
#define  SWIGTYPE_p_ErrorBadController swig_types[11] 
#define  SWIGTYPE_p_ErrorNoController swig_types[12] 
#define  SWIGTYPE_p_ErrorEventLoopRunning swig_types[13] 
#define  SWIGTYPE_p_ErrorAccessFluxbox swig_types[14] 
static swig_type_info *swig_types[16];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _fluxspacecore.so
  ------------------------------------------------*/
#define SWIG_init    init_fluxspacecore

#define SWIG_name    "_fluxspacecore"

#include "fluxspacecore.hh"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_Error(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *arg1 ;
    Error *result;
    char *kwnames[] = {
        "msg_", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"s:new_Error",kwnames,&arg1)) goto fail;
    result = (Error *)new Error((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Error, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Error(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Error *arg1 = (Error *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Error",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Error,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Error_msg_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Error *arg1 = (Error *) 0 ;
    std::string arg2 ;
    std::string *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        "self","msg", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Error_msg_set",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Error,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->msg = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Error_msg_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Error *arg1 = (Error *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Error_msg_get",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Error,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->msg);
    
    {
        std::string * resultptr;
        resultptr = new std::string((std::string &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__string, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Error_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Error, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_InternalError(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *arg1 ;
    InternalError *result;
    char *kwnames[] = {
        "msg_", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"s:new_InternalError",kwnames,&arg1)) goto fail;
    result = (InternalError *)new InternalError((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_InternalError, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_InternalError(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    InternalError *arg1 = (InternalError *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_InternalError",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_InternalError,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * InternalError_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_InternalError, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ErrorImportModule(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *arg1 ;
    ErrorImportModule *result;
    char *kwnames[] = {
        "module", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"s:new_ErrorImportModule",kwnames,&arg1)) goto fail;
    result = (ErrorImportModule *)new ErrorImportModule((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ErrorImportModule, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ErrorImportModule(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorImportModule *arg1 = (ErrorImportModule *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ErrorImportModule",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ErrorImportModule,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ErrorImportModule_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ErrorImportModule, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ErrorNoDisplay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorNoDisplay *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ErrorNoDisplay",kwnames)) goto fail;
    result = (ErrorNoDisplay *)new ErrorNoDisplay();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ErrorNoDisplay, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ErrorNoDisplay(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorNoDisplay *arg1 = (ErrorNoDisplay *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ErrorNoDisplay",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ErrorNoDisplay,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ErrorNoDisplay_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ErrorNoDisplay, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ErrorAccessFluxbox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorAccessFluxbox *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ErrorAccessFluxbox",kwnames)) goto fail;
    result = (ErrorAccessFluxbox *)new ErrorAccessFluxbox();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ErrorAccessFluxbox, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ErrorAccessFluxbox(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorAccessFluxbox *arg1 = (ErrorAccessFluxbox *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ErrorAccessFluxbox",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ErrorAccessFluxbox,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ErrorAccessFluxbox_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ErrorAccessFluxbox, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ErrorAppExists(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorAppExists *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ErrorAppExists",kwnames)) goto fail;
    result = (ErrorAppExists *)new ErrorAppExists();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ErrorAppExists, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ErrorAppExists(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorAppExists *arg1 = (ErrorAppExists *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ErrorAppExists",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ErrorAppExists,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ErrorAppExists_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ErrorAppExists, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ErrorControllerExists(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorControllerExists *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ErrorControllerExists",kwnames)) goto fail;
    result = (ErrorControllerExists *)new ErrorControllerExists();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ErrorControllerExists, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ErrorControllerExists(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorControllerExists *arg1 = (ErrorControllerExists *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ErrorControllerExists",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ErrorControllerExists,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ErrorControllerExists_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ErrorControllerExists, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ErrorNoController(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorNoController *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ErrorNoController",kwnames)) goto fail;
    result = (ErrorNoController *)new ErrorNoController();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ErrorNoController, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ErrorNoController(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorNoController *arg1 = (ErrorNoController *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ErrorNoController",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ErrorNoController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ErrorNoController_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ErrorNoController, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ErrorEventLoopRunning(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorEventLoopRunning *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ErrorEventLoopRunning",kwnames)) goto fail;
    result = (ErrorEventLoopRunning *)new ErrorEventLoopRunning();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ErrorEventLoopRunning, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ErrorEventLoopRunning(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorEventLoopRunning *arg1 = (ErrorEventLoopRunning *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ErrorEventLoopRunning",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ErrorEventLoopRunning,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ErrorEventLoopRunning_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ErrorEventLoopRunning, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ErrorBadController(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorBadController *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ErrorBadController",kwnames)) goto fail;
    result = (ErrorBadController *)new ErrorBadController();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ErrorBadController, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ErrorBadController(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorBadController *arg1 = (ErrorBadController *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ErrorBadController",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ErrorBadController,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ErrorBadController_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ErrorBadController, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ErrorNoWindow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorNoWindow *result;
    char *kwnames[] = {
        NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)":new_ErrorNoWindow",kwnames)) goto fail;
    result = (ErrorNoWindow *)new ErrorNoWindow();
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ErrorNoWindow, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ErrorNoWindow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorNoWindow *arg1 = (ErrorNoWindow *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ErrorNoWindow",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ErrorNoWindow,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ErrorNoWindow_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ErrorNoWindow, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ErrorWindowProperty(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *arg1 ;
    char *arg2 ;
    ErrorWindowProperty *result;
    char *kwnames[] = {
        "propName","op", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"ss:new_ErrorWindowProperty",kwnames,&arg1,&arg2)) goto fail;
    result = (ErrorWindowProperty *)new ErrorWindowProperty((char const *)arg1,(char const *)arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ErrorWindowProperty, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_ErrorWindowProperty(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    ErrorWindowProperty *arg1 = (ErrorWindowProperty *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_ErrorWindowProperty",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_ErrorWindowProperty,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ErrorWindowProperty_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_ErrorWindowProperty, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_Controller(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *arg1 ;
    bool arg2 = (bool) false ;
    Controller *result;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        "displayName_","verbose_", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"s|O:new_Controller",kwnames,&arg1,&obj1)) goto fail;
    if (obj1) {
        arg2 = PyInt_AsLong(obj1) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    result = (Controller *)new Controller((char const *)arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_Controller, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Controller(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_Controller",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_SetSOAPHandler(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        "self","object", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Controller_SetSOAPHandler",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = obj1;
    (arg1)->SetSOAPHandler(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_RegisterFluxlet(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    char *arg2 ;
    PyObject *arg3 = (PyObject *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj2 = 0 ;
    char *kwnames[] = {
        "self","moduleName","config", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OsO:Controller_RegisterFluxlet",kwnames,&obj0,&arg2,&obj2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg3 = obj2;
    result = (bool)(arg1)->RegisterFluxlet((char const *)arg2,arg3);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_StartEvents(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Controller_StartEvents",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->StartEvents();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_SetWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","width", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Oi:Controller_SetWidth",kwnames,&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->SetWidth(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_SetFrameWidth(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","frameWidth", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Oi:Controller_SetFrameWidth",kwnames,&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->SetFrameWidth(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_SetRowGap(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","rowGap", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Oi:Controller_SetRowGap",kwnames,&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->SetRowGap(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_SetAntialias(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        "self","antialias", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Controller_SetAntialias",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    (arg1)->SetAntialias(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_SetNormalFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Os:Controller_SetNormalFont",kwnames,&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->SetNormalFont((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_SetSmallFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Os:Controller_SetSmallFont",kwnames,&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->SetSmallFont((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_SetLargeFont(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Os:Controller_SetLargeFont",kwnames,&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->SetLargeFont((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_Trace(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","message", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Os:Controller_Trace",kwnames,&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->Trace((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_Message(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    int arg2 ;
    char *arg3 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","severity","message", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Ois:Controller_Message",kwnames,&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->Message(arg2,(char const *)arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_displayName_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    std::string arg2 ;
    std::string *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        "self","displayName", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Controller_displayName_set",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->displayName = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_displayName_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Controller_displayName_get",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->displayName);
    
    {
        std::string * resultptr;
        resultptr = new std::string((std::string &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__string, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_verbose_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        "self","verbose", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:Controller_verbose_set",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->verbose = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Controller_verbose_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    Controller *arg1 = (Controller *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:Controller_verbose_get",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_Controller,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool) ((arg1)->verbose);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Controller_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_Controller, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_NOFONT_set(PyObject *_val) {
    PyErr_SetString(PyExc_TypeError,"Variable NOFONT is read-only.");
    return 1;
}


static PyObject *_wrap_NOFONT_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long)NOFONT);
    return pyobj;
}


static PyObject *_wrap_new_FluxletHelper(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    char *arg1 ;
    FluxletHelper *result;
    char *kwnames[] = {
        "name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"s:new_FluxletHelper",kwnames,&arg1)) goto fail;
    result = (FluxletHelper *)new FluxletHelper((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_FluxletHelper, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_FluxletHelper(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:delete_FluxletHelper",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_AddHandler(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    int arg3 = (int) 1 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        "self","handler","tickSeconds", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|i:FluxletHelper_AddHandler",kwnames,&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = obj1;
    (arg1)->AddHandler(arg2,arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_RegisterSOAPObject(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    PyObject *arg2 = (PyObject *) 0 ;
    char *arg3 = (char *) NULL ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        "self","object","subNameSpace", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|s:FluxletHelper_RegisterSOAPObject",kwnames,&obj0,&obj1,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = obj1;
    (arg1)->RegisterSOAPObject(arg2,(char const *)arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_SetRoot(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    char *arg2 ;
    char *arg3 = (char *) NULL ;
    bool arg4 = (bool) false ;
    bool arg5 = (bool) false ;
    bool arg6 = (bool) false ;
    bool arg7 = (bool) false ;
    PyObject * obj0 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    char *kwnames[] = {
        "self","fname","bgcolor","scale","center","fit","mirror", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Os|sOOOO:FluxletHelper_SetRoot",kwnames,&obj0,&arg2,&arg3,&obj3,&obj4,&obj5,&obj6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if (obj3) {
        arg4 = PyInt_AsLong(obj3) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj4) {
        arg5 = PyInt_AsLong(obj4) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj5) {
        arg6 = PyInt_AsLong(obj5) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    if (obj6) {
        arg7 = PyInt_AsLong(obj6) ? true : false;
        if (PyErr_Occurred()) SWIG_fail;
    }
    (arg1)->SetRoot((char const *)arg2,(char const *)arg3,arg4,arg5,arg6,arg7);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_AddRow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    unsigned int arg2 ;
    char *arg3 = (char *) "normal" ;
    char *arg4 = (char *) NULL ;
    char *arg5 = (char *) NULL ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        "self","height","unit","color","button", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO|sss:FluxletHelper_AddRow",kwnames,&obj0,&obj1,&arg3,&arg4,&arg5)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = (unsigned int) PyInt_AsLong(obj1);
    if (PyErr_Occurred()) SWIG_fail;
    result = (int)(arg1)->AddRow(arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_AddCommand(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    int arg2 ;
    int arg3 ;
    char *arg4 ;
    PyObject *arg5 = (PyObject *) 0 ;
    char *arg6 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj4 = 0 ;
    char *kwnames[] = {
        "self","rowfrom","rowto","label","handler","data", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OiisOs:FluxletHelper_AddCommand",kwnames,&obj0,&arg2,&arg3,&arg4,&obj4,&arg6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg5 = obj4;
    result = (int)(arg1)->AddCommand(arg2,arg3,(char const *)arg4,arg5,(char const *)arg6);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_RemoveCommand(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","commandid", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Oi:FluxletHelper_RemoveCommand",kwnames,&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->RemoveCommand(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_DrawTextLeft(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    int arg2 ;
    char *arg3 ;
    int arg4 = (int) 0 ;
    char *arg5 = (char *) NULL ;
    int arg6 = (int) NOFONT ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","row","text","offset","color","font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Ois|isi:FluxletHelper_DrawTextLeft",kwnames,&obj0,&arg2,&arg3,&arg4,&arg5,&arg6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->DrawTextLeft(arg2,(char const *)arg3,arg4,(char const *)arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_DrawTextRight(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    int arg2 ;
    char *arg3 ;
    int arg4 = (int) 0 ;
    char *arg5 = (char *) NULL ;
    int arg6 = (int) NOFONT ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","row","text","offset","color","font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Ois|isi:FluxletHelper_DrawTextRight",kwnames,&obj0,&arg2,&arg3,&arg4,&arg5,&arg6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->DrawTextRight(arg2,(char const *)arg3,arg4,(char const *)arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_DrawTextCenter(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    int arg2 ;
    char *arg3 ;
    int arg4 = (int) 0 ;
    char *arg5 = (char *) NULL ;
    int arg6 = (int) NOFONT ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","row","text","offset","color","font", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Ois|isi:FluxletHelper_DrawTextCenter",kwnames,&obj0,&arg2,&arg3,&arg4,&arg5,&arg6)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->DrawTextCenter(arg2,(char const *)arg3,arg4,(char const *)arg5,arg6);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_ClearRow(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    int arg2 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","row", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Oi:FluxletHelper_ClearRow",kwnames,&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->ClearRow(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_Trace(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    char *arg2 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","message", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Os:FluxletHelper_Trace",kwnames,&obj0,&arg2)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->Trace((char const *)arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_Message(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    int arg2 ;
    char *arg3 ;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self","severity","message", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"Ois:FluxletHelper_Message",kwnames,&obj0,&arg2,&arg3)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    (arg1)->Message(arg2,(char const *)arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_verbose_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    bool arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        "self","verbose", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FluxletHelper_verbose_set",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    arg2 = PyInt_AsLong(obj1) ? true : false;
    if (PyErr_Occurred()) SWIG_fail;
    if (arg1) (arg1)->verbose = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_verbose_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FluxletHelper_verbose_get",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result = (bool) ((arg1)->verbose);
    
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_name_set(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    std::string arg2 ;
    std::string *argp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    char *kwnames[] = {
        "self","name", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"OO:FluxletHelper_name_set",kwnames,&obj0,&obj1)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    if ((SWIG_ConvertPtr(obj1,(void **) &argp2, SWIGTYPE_p_std__string,SWIG_POINTER_EXCEPTION) == -1)) SWIG_fail;
    arg2 = *argp2; 
    if (arg1) (arg1)->name = arg2;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_FluxletHelper_name_get(PyObject *self, PyObject *args, PyObject *kwargs) {
    PyObject *resultobj;
    FluxletHelper *arg1 = (FluxletHelper *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    char *kwnames[] = {
        "self", NULL 
    };
    
    if(!PyArg_ParseTupleAndKeywords(args,kwargs,(char *)"O:FluxletHelper_name_get",kwnames,&obj0)) goto fail;
    if ((SWIG_ConvertPtr(obj0,(void **) &arg1, SWIGTYPE_p_FluxletHelper,SWIG_POINTER_EXCEPTION | 0 )) == -1) SWIG_fail;
    result =  ((arg1)->name);
    
    {
        std::string * resultptr;
        resultptr = new std::string((std::string &) result);
        resultobj = SWIG_NewPointerObj((void *) resultptr, SWIGTYPE_p_std__string, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * FluxletHelper_swigregister(PyObject *self, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_FluxletHelper, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyMethodDef SwigMethods[] = {
	 { (char *)"new_Error", (PyCFunction) _wrap_new_Error, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Error", (PyCFunction) _wrap_delete_Error, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Error_msg_set", (PyCFunction) _wrap_Error_msg_set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Error_msg_get", (PyCFunction) _wrap_Error_msg_get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Error_swigregister", Error_swigregister, METH_VARARGS },
	 { (char *)"new_InternalError", (PyCFunction) _wrap_new_InternalError, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_InternalError", (PyCFunction) _wrap_delete_InternalError, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"InternalError_swigregister", InternalError_swigregister, METH_VARARGS },
	 { (char *)"new_ErrorImportModule", (PyCFunction) _wrap_new_ErrorImportModule, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ErrorImportModule", (PyCFunction) _wrap_delete_ErrorImportModule, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ErrorImportModule_swigregister", ErrorImportModule_swigregister, METH_VARARGS },
	 { (char *)"new_ErrorNoDisplay", (PyCFunction) _wrap_new_ErrorNoDisplay, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ErrorNoDisplay", (PyCFunction) _wrap_delete_ErrorNoDisplay, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ErrorNoDisplay_swigregister", ErrorNoDisplay_swigregister, METH_VARARGS },
	 { (char *)"new_ErrorAccessFluxbox", (PyCFunction) _wrap_new_ErrorAccessFluxbox, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ErrorAccessFluxbox", (PyCFunction) _wrap_delete_ErrorAccessFluxbox, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ErrorAccessFluxbox_swigregister", ErrorAccessFluxbox_swigregister, METH_VARARGS },
	 { (char *)"new_ErrorAppExists", (PyCFunction) _wrap_new_ErrorAppExists, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ErrorAppExists", (PyCFunction) _wrap_delete_ErrorAppExists, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ErrorAppExists_swigregister", ErrorAppExists_swigregister, METH_VARARGS },
	 { (char *)"new_ErrorControllerExists", (PyCFunction) _wrap_new_ErrorControllerExists, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ErrorControllerExists", (PyCFunction) _wrap_delete_ErrorControllerExists, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ErrorControllerExists_swigregister", ErrorControllerExists_swigregister, METH_VARARGS },
	 { (char *)"new_ErrorNoController", (PyCFunction) _wrap_new_ErrorNoController, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ErrorNoController", (PyCFunction) _wrap_delete_ErrorNoController, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ErrorNoController_swigregister", ErrorNoController_swigregister, METH_VARARGS },
	 { (char *)"new_ErrorEventLoopRunning", (PyCFunction) _wrap_new_ErrorEventLoopRunning, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ErrorEventLoopRunning", (PyCFunction) _wrap_delete_ErrorEventLoopRunning, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ErrorEventLoopRunning_swigregister", ErrorEventLoopRunning_swigregister, METH_VARARGS },
	 { (char *)"new_ErrorBadController", (PyCFunction) _wrap_new_ErrorBadController, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ErrorBadController", (PyCFunction) _wrap_delete_ErrorBadController, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ErrorBadController_swigregister", ErrorBadController_swigregister, METH_VARARGS },
	 { (char *)"new_ErrorNoWindow", (PyCFunction) _wrap_new_ErrorNoWindow, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ErrorNoWindow", (PyCFunction) _wrap_delete_ErrorNoWindow, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ErrorNoWindow_swigregister", ErrorNoWindow_swigregister, METH_VARARGS },
	 { (char *)"new_ErrorWindowProperty", (PyCFunction) _wrap_new_ErrorWindowProperty, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_ErrorWindowProperty", (PyCFunction) _wrap_delete_ErrorWindowProperty, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"ErrorWindowProperty_swigregister", ErrorWindowProperty_swigregister, METH_VARARGS },
	 { (char *)"new_Controller", (PyCFunction) _wrap_new_Controller, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_Controller", (PyCFunction) _wrap_delete_Controller, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_SetSOAPHandler", (PyCFunction) _wrap_Controller_SetSOAPHandler, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_RegisterFluxlet", (PyCFunction) _wrap_Controller_RegisterFluxlet, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_StartEvents", (PyCFunction) _wrap_Controller_StartEvents, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_SetWidth", (PyCFunction) _wrap_Controller_SetWidth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_SetFrameWidth", (PyCFunction) _wrap_Controller_SetFrameWidth, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_SetRowGap", (PyCFunction) _wrap_Controller_SetRowGap, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_SetAntialias", (PyCFunction) _wrap_Controller_SetAntialias, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_SetNormalFont", (PyCFunction) _wrap_Controller_SetNormalFont, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_SetSmallFont", (PyCFunction) _wrap_Controller_SetSmallFont, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_SetLargeFont", (PyCFunction) _wrap_Controller_SetLargeFont, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_Trace", (PyCFunction) _wrap_Controller_Trace, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_Message", (PyCFunction) _wrap_Controller_Message, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_displayName_set", (PyCFunction) _wrap_Controller_displayName_set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_displayName_get", (PyCFunction) _wrap_Controller_displayName_get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_verbose_set", (PyCFunction) _wrap_Controller_verbose_set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_verbose_get", (PyCFunction) _wrap_Controller_verbose_get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"Controller_swigregister", Controller_swigregister, METH_VARARGS },
	 { (char *)"new_FluxletHelper", (PyCFunction) _wrap_new_FluxletHelper, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"delete_FluxletHelper", (PyCFunction) _wrap_delete_FluxletHelper, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_AddHandler", (PyCFunction) _wrap_FluxletHelper_AddHandler, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_RegisterSOAPObject", (PyCFunction) _wrap_FluxletHelper_RegisterSOAPObject, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_SetRoot", (PyCFunction) _wrap_FluxletHelper_SetRoot, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_AddRow", (PyCFunction) _wrap_FluxletHelper_AddRow, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_AddCommand", (PyCFunction) _wrap_FluxletHelper_AddCommand, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_RemoveCommand", (PyCFunction) _wrap_FluxletHelper_RemoveCommand, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_DrawTextLeft", (PyCFunction) _wrap_FluxletHelper_DrawTextLeft, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_DrawTextRight", (PyCFunction) _wrap_FluxletHelper_DrawTextRight, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_DrawTextCenter", (PyCFunction) _wrap_FluxletHelper_DrawTextCenter, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_ClearRow", (PyCFunction) _wrap_FluxletHelper_ClearRow, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_Trace", (PyCFunction) _wrap_FluxletHelper_Trace, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_Message", (PyCFunction) _wrap_FluxletHelper_Message, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_verbose_set", (PyCFunction) _wrap_FluxletHelper_verbose_set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_verbose_get", (PyCFunction) _wrap_FluxletHelper_verbose_get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_name_set", (PyCFunction) _wrap_FluxletHelper_name_set, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_name_get", (PyCFunction) _wrap_FluxletHelper_name_get, METH_VARARGS | METH_KEYWORDS },
	 { (char *)"FluxletHelper_swigregister", FluxletHelper_swigregister, METH_VARARGS },
	 { NULL, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_ErrorImportModuleTo_p_Error(void *x) {
    return (void *)((Error *)  ((ErrorImportModule *) x));
}
static void *_p_ErrorNoDisplayTo_p_Error(void *x) {
    return (void *)((Error *)  ((ErrorNoDisplay *) x));
}
static void *_p_ErrorNoControllerTo_p_Error(void *x) {
    return (void *)((Error *)  ((ErrorNoController *) x));
}
static void *_p_ErrorBadControllerTo_p_Error(void *x) {
    return (void *)((Error *)  ((ErrorBadController *) x));
}
static void *_p_ErrorWindowPropertyTo_p_Error(void *x) {
    return (void *)((Error *)  ((ErrorWindowProperty *) x));
}
static void *_p_ErrorAccessFluxboxTo_p_Error(void *x) {
    return (void *)((Error *)  ((ErrorAccessFluxbox *) x));
}
static void *_p_ErrorEventLoopRunningTo_p_Error(void *x) {
    return (void *)((Error *)  ((ErrorEventLoopRunning *) x));
}
static void *_p_InternalErrorTo_p_Error(void *x) {
    return (void *)((Error *)  ((InternalError *) x));
}
static void *_p_ErrorNoWindowTo_p_Error(void *x) {
    return (void *)((Error *)  ((ErrorNoWindow *) x));
}
static void *_p_ErrorAppExistsTo_p_Error(void *x) {
    return (void *)((Error *)  ((ErrorAppExists *) x));
}
static void *_p_ErrorControllerExistsTo_p_Error(void *x) {
    return (void *)((Error *)  ((ErrorControllerExists *) x));
}
static swig_type_info _swigt__p_ErrorNoWindow[] = {{"_p_ErrorNoWindow", 0, "ErrorNoWindow *", 0},{"_p_ErrorNoWindow"},{0}};
static swig_type_info _swigt__p_InternalError[] = {{"_p_InternalError", 0, "InternalError *", 0},{"_p_InternalError"},{0}};
static swig_type_info _swigt__p_ErrorControllerExists[] = {{"_p_ErrorControllerExists", 0, "ErrorControllerExists *", 0},{"_p_ErrorControllerExists"},{0}};
static swig_type_info _swigt__p_ErrorAppExists[] = {{"_p_ErrorAppExists", 0, "ErrorAppExists *", 0},{"_p_ErrorAppExists"},{0}};
static swig_type_info _swigt__p_FluxletHelper[] = {{"_p_FluxletHelper", 0, "FluxletHelper *", 0},{"_p_FluxletHelper"},{0}};
static swig_type_info _swigt__p_Error[] = {{"_p_Error", 0, "Error *", 0},{"_p_ErrorImportModule", _p_ErrorImportModuleTo_p_Error},{"_p_ErrorNoDisplay", _p_ErrorNoDisplayTo_p_Error},{"_p_ErrorNoController", _p_ErrorNoControllerTo_p_Error},{"_p_ErrorBadController", _p_ErrorBadControllerTo_p_Error},{"_p_ErrorWindowProperty", _p_ErrorWindowPropertyTo_p_Error},{"_p_ErrorAccessFluxbox", _p_ErrorAccessFluxboxTo_p_Error},{"_p_ErrorEventLoopRunning", _p_ErrorEventLoopRunningTo_p_Error},{"_p_InternalError", _p_InternalErrorTo_p_Error},{"_p_ErrorNoWindow", _p_ErrorNoWindowTo_p_Error},{"_p_ErrorAppExists", _p_ErrorAppExistsTo_p_Error},{"_p_ErrorControllerExists", _p_ErrorControllerExistsTo_p_Error},{"_p_Error"},{0}};
static swig_type_info _swigt__p_ErrorNoDisplay[] = {{"_p_ErrorNoDisplay", 0, "ErrorNoDisplay *", 0},{"_p_ErrorNoDisplay"},{0}};
static swig_type_info _swigt__p_std__string[] = {{"_p_std__string", 0, "std::string *", 0},{"_p_std__string"},{0}};
static swig_type_info _swigt__p_ErrorWindowProperty[] = {{"_p_ErrorWindowProperty", 0, "ErrorWindowProperty *", 0},{"_p_ErrorWindowProperty"},{0}};
static swig_type_info _swigt__p_ErrorImportModule[] = {{"_p_ErrorImportModule", 0, "ErrorImportModule *", 0},{"_p_ErrorImportModule"},{0}};
static swig_type_info _swigt__p_Controller[] = {{"_p_Controller", 0, "Controller *", 0},{"_p_Controller"},{0}};
static swig_type_info _swigt__p_ErrorBadController[] = {{"_p_ErrorBadController", 0, "ErrorBadController *", 0},{"_p_ErrorBadController"},{0}};
static swig_type_info _swigt__p_ErrorNoController[] = {{"_p_ErrorNoController", 0, "ErrorNoController *", 0},{"_p_ErrorNoController"},{0}};
static swig_type_info _swigt__p_ErrorEventLoopRunning[] = {{"_p_ErrorEventLoopRunning", 0, "ErrorEventLoopRunning *", 0},{"_p_ErrorEventLoopRunning"},{0}};
static swig_type_info _swigt__p_ErrorAccessFluxbox[] = {{"_p_ErrorAccessFluxbox", 0, "ErrorAccessFluxbox *", 0},{"_p_ErrorAccessFluxbox"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_ErrorNoWindow, 
_swigt__p_InternalError, 
_swigt__p_ErrorControllerExists, 
_swigt__p_ErrorAppExists, 
_swigt__p_FluxletHelper, 
_swigt__p_Error, 
_swigt__p_ErrorNoDisplay, 
_swigt__p_std__string, 
_swigt__p_ErrorWindowProperty, 
_swigt__p_ErrorImportModule, 
_swigt__p_Controller, 
_swigt__p_ErrorBadController, 
_swigt__p_ErrorNoController, 
_swigt__p_ErrorEventLoopRunning, 
_swigt__p_ErrorAccessFluxbox, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0}};

#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT(void) SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    static int       typeinit = 0;
    PyObject *m, *d;
    int       i;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    if (!typeinit) {
        for (i = 0; swig_types_initial[i]; i++) {
            swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
        }
        typeinit = 1;
    }
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"NOFONT",_wrap_NOFONT_get, _wrap_NOFONT_set);
}

