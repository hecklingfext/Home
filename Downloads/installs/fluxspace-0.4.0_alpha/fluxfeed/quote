#!/usr/bin/env python
######################################################################
######################################################################
# Fluxspace quote feeder
######################################################################
######################################################################

import fluxfeed
from soapdispenser import Dispenser

######################################################################
class Symbol:
######################################################################
    def __init__(self, name, alias, size, color):
        self.name    = name
        self.alias   = alias
        self.size    = size
        self.color   = color
        # Default to normal font
        if not self.size:
            self.size = 'normal'
    def DisplayName(self):
        if self.alias:
            return self.alias
        return self.name

######################################################################
class Updater(fluxfeed.Updater):
######################################################################

    def __init__(self, display, config, dispenser):
        self.dispenser = dispenser
        
        # Get the configuration
        self.upcolor   = config.getAttribute('upcolor')
        self.downcolor = config.getAttribute('downcolor')

        # Get the per-quote configuration
        # Build the row list
        rows = []
        self.symbols = []
        for symbolNode in config.getElementsByTagName('symbol'):
            name   = symbolNode.getAttribute('name')
            alias  = symbolNode.getAttribute('alias')
            size   = symbolNode.getAttribute('size')
            color  = symbolNode.getAttribute('color')
            symcmd = symbolNode.getAttribute('command')
            symbol = Symbol(name, alias, size, color)
            self.symbols.append(symbol)
            rowdef = (1, size, color, symbol.DisplayName(), symcmd)
            rows.append(rowdef)

        # The base class sets up the command button(s) and the sleep interval
        fluxfeed.Updater.__init__(self, config, display, rows, 'Quote')

    def Update(self, display):
        # Get the quotes
        quotes = []
        for symbol in self.symbols:
            quotes.append(self.dispenser.getQuote(symbol = symbol.name))
        # Render them
        for nQuote in range(len(quotes)):
            display.ClearRow(self.firstRow + nQuote)
            if quotes[nQuote]:
                display.DrawTextLeft(self.firstRow + nQuote, self.symbols[nQuote].DisplayName())
                if self.upcolor:
                    display.DrawTextRight(self.firstRow + nQuote, '%.2f' % quotes[nQuote], 0, self.upcolor)
                else:
                    display.DrawTextRight(self.firstRow + nQuote, '%.2f' % quotes[nQuote], 0)

######################################################################
if __name__ == '__main__':
######################################################################

    # Set up the feed object
    feed = fluxfeed.Feed('quote')

    # Create a soap "dispenser" to access quotes from web service
    dispenser = Dispenser('http://services.xmethods.com:9090/soap', 'urn:xmethods-delayed-quotes')

    # Set up one updater per distinct configuration
    updates = []
    for config in feed.moduleConfigs:
        updates.append(Updater(feed.display, config, dispenser))

    # Start the engine
    feed.UpdateForever(updates)
